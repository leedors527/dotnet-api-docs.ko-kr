<Type Name="XmlReaderSettings" FullName="System.Xml.XmlReaderSettings">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ae931c958dae3132cfa810019a63792586fde5dd" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58696532" /></Metadata><TypeSignature Language="C#" Value="public sealed class XmlReaderSettings" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit XmlReaderSettings extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.XmlReaderSettings" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class XmlReaderSettings" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlReaderSettings sealed" />
  <TypeSignature Language="F#" Value="type XmlReaderSettings = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><see cref="T:System.Xml.XmlReader" /> 메서드를 사용하여 만든 <see cref="Overload:System.Xml.XmlReader.Create" /> 개체에서 지원할 기능 집합을 지정합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 된 <xref:System.Xml.XmlReader.Create%2A> 얻는 메서드를 <xref:System.Xml.XmlReader> 인스턴스. 이 메서드를 사용 합니다 <xref:System.Xml.XmlReaderSettings> 클래스에서 구현 하는 기능을 지정 하려면를 <xref:System.Xml.XmlReader> 개체를 만듭니다.  
  
 설명 섹션을 참조 합니다 <xref:System.Xml.XmlReader> 고 <xref:System.Xml.XmlReader.Create%2A> 규칙 검사, 유효성 검사 및 기타 일반적인 시나리오에 사용 하는 설정에 대 한 정보에 대 한 페이지를 참조 합니다. 참조 된 <xref:System.Xml.XmlReaderSettings.%23ctor> 기본 설정 목록에 대 한 생성자입니다.  
  
## <a name="security-considerations"></a>보안 고려 사항  
 사용 하는 경우 다음 사항을 고려 합니다 <xref:System.Xml.XmlReaderSettings> 클래스입니다.  
  
-   <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> 개체의 <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> 및 <xref:System.Xml.XmlReaderSettings> 유효성 검사 플래그는 기본적으로 설정되지 않습니다. 이 플래그를 설정하면 <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> 개체의 <xref:System.Xml.XmlReaderSettings>를 사용하여 <xref:System.Xml.XmlReader>에서 인스턴스 문서에 나타난 스키마 위치를 확인할 수 있습니다. 경우는 <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> 개체가 `null`, 스키마 위치는 확인 되지 않습니다 경우에 합니다 <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> 및 <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> 유효성 검사 플래그를 설정 합니다.  
  
-   문서의 유효성을 검사하는 동안 스키마를 추가하면 새 형식이 추가되고 해당 문서에 대한 유효성 검사 결과가 달라질 수 있습니다. 결과적으로 외부 스키마는 신뢰할 수 있는 소스에서만 확인해야 합니다.  
  
-   유효성 검사 오류 메시지는 중요 한 콘텐츠 모델 정보를 노출할 수 있습니다. 유효성 검사 오류 및 경고 메시지를 사용 하 여 처리 됩니다는 <xref:System.Xml.Schema.ValidationEventHandler> 대리자 또는으로 노출 됩니다는 <xref:System.Xml.Schema.XmlSchemaValidationException> 이벤트 처리기가 제공 되는 경우를 <xref:System.Xml.XmlReaderSettings> 개체 (유효성 검사 경고 발생 하지 않습니다는 <xref:System.Xml.Schema.XmlSchemaValidationException> 를 throw). 신뢰할 수 없는 시나리오에서이 콘텐츠 모델 정보를 노출 되어야 합니다. 유효성 검사 경고 메시지는 기본적으로 표시 되지 않습니다 하 고 설정 하 여 보고 될 수는 <xref:System.Xml.Schema.XmlSchemaValidationFlags.ReportValidationWarnings> 플래그입니다.  
  
-   합니다 <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A> 의 속성을 <xref:System.Xml.Schema.XmlSchemaValidationException> 예외를 발생 시킨 스키마 파일의 URI 경로 반환 합니다. <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A> 속성 신뢰할 수 없는 시나리오에서 노출 되지 않아야 합니다.  
  
-   사용 하지 않도록 설정 된 <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints> 유효성 검사, 신뢰할 수 없는 큰 XML 문서의 많은 부분을 통해 id 제약 조건이 있는 스키마에 대해 가용성 우선 시나리오에서 설명 하는 경우 (기본적으로 사용) 플래그는 것이 좋습니다.  
  
-   <xref:System.Xml.XmlReaderSettings> 개체에는 사용자 자격 증명과 같은 중요한 정보가 포함될 수 있습니다. <xref:System.Xml.XmlReaderSettings> 개체를 캐시하거나 한 구성 요소에서 다른 구성 요소로 <xref:System.Xml.XmlReaderSettings> 개체를 전송할 때는 주의해야 합니다.  
  
-   DTD 처리는 기본적으로 비활성화되어 있습니다. DTD 처리를 사용 하는 경우 가능한 서비스 거부 공격 및 신뢰할 수 없는 소스에서 Dtd를 포함 하 여 주의 해야 합니다. 사용 하 여는 <xref:System.Xml.XmlSecureResolver> 리소스를 제한 하는 <xref:System.Xml.XmlReader> 액세스할 수 있습니다.  
  
-   신뢰할 수 없는 소스로부터 <xref:System.Xml.NameTable>, <xref:System.Xml.XmlNamespaceManager> 및 <xref:System.Xml.XmlResolver> 개체 등의 지원 구성 요소를 받지 마십시오.  
  
-   <xref:System.Xml.XmlReader>를 사용하는 응용 프로그램의 메모리 사용은 구문 분석된 XML 문서 크기와 상관 관계가 있습니다. 서비스 거부 공격의 한 예는 구문 분석하기에는 너무 큰 XML 문서를 제출하는 경우입니다. 설정 하 여 구문 분석할 수 있는 문서의 크기를 제한할 수는 <xref:System.Xml.XmlReaderSettings.MaxCharactersInDocument%2A> 속성을 설정 하 여 확장명 엔터티의 결과인 문자 수를 제한 한 다음는 <xref:System.Xml.XmlReaderSettings.MaxCharactersFromEntities%2A> 속성입니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Xml.XmlReader> 를 사용 하는 <xref:System.Xml.XmlUrlResolver> 에 필요한 자격 증명입니다.  
  
 [!code-csharp[XmlReader.Create#2](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader.Create/CS/XmlReader_Create.cs#2)]
 [!code-vb[XmlReader.Create#2](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader.Create/VB/XmlReader_Create.vb#2)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/standard/data/xml/index.md">XML 문서 및 데이터</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Xml.XmlReaderSettings" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlReaderSettings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReaderSettings.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlReaderSettings();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Xml.XmlReaderSettings" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 인스턴스에 대 한 초기 속성 값을 보여 줍니다. <xref:System.Xml.XmlReaderSettings>합니다.  
  
|속성|초기 값|  
|--------------|-------------------|  
|<xref:System.Xml.XmlReaderSettings.Async%2A>|`false`.|  
|<xref:System.Xml.XmlReaderSettings.CheckCharacters%2A>|`true`.|  
|<xref:System.Xml.XmlReaderSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document>.|  
|<xref:System.Xml.XmlReaderSettings.IgnoreComments%2A>|`false`.|  
|<xref:System.Xml.XmlReaderSettings.IgnoreProcessingInstructions%2A>|`false`.|  
|<xref:System.Xml.XmlReaderSettings.IgnoreWhitespace%2A>|`false`.|  
|<xref:System.Xml.XmlReaderSettings.LineNumberOffset%2A>|0.|  
|<xref:System.Xml.XmlReaderSettings.LinePositionOffset%2A>|0.|  
|<xref:System.Xml.XmlReaderSettings.MaxCharactersFromEntities%2A>|0 (확장명 엔터티의 결과인 문자 수를 제한 하지 않습니다).|  
|<xref:System.Xml.XmlReaderSettings.MaxCharactersInDocument%2A>|0 (무제한 XML 문서의 크기에).|  
|<xref:System.Xml.XmlReaderSettings.NameTable%2A>|`null`.|  
|<xref:System.Xml.XmlTextReader.DtdProcessing%2A>|<xref:System.Xml.DtdProcessing.Prohibit>|  
|<xref:System.Xml.XmlReaderSettings.ProhibitDtd%2A>|`true`. 이 속성은 사용되지 않습니다. 대신 <xref:System.Xml.XmlTextReader.DtdProcessing%2A>를 사용하세요. 사용자가 설정한 경우 <xref:System.Xml.XmlReaderSettings.ProhibitDtd%2A> 기본값으로 `true` 설정 <xref:System.Xml.XmlTextReader.DtdProcessing%2A> 하려면 `Prohibit`합니다. 사용자가 설정한 경우 <xref:System.Xml.XmlReaderSettings.ProhibitDtd%2A> 하 `false` 설정 <xref:System.Xml.XmlTextReader.DtdProcessing%2A> 에 `Parse`입니다.|  
|<xref:System.Xml.XmlReaderSettings.Schemas%2A>|빈 <xref:System.Xml.Schema.XmlSchemaSet> 개체입니다.|  
|<xref:System.Xml.XmlReaderSettings.ValidationFlags%2A>|<xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints>.|  
|<xref:System.Xml.XmlReaderSettings.ValidationType%2A>|<xref:System.Xml.ValidationType.None>.|  
|<xref:System.Xml.XmlReaderSettings.XmlResolver%2A>|새 <xref:System.Xml.XmlUrlResolver> 개체입니다.|  
  
   
  
## Examples  
 다음 처리 지침, 주석 및 불필요 한 공백을 제거 하는 판독기를 만드는 데 사용할 수 있는 설정 개체를 만듭니다.  
  
 [!code-cpp[XmlReaderSettings.cctor#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReaderSettings.cctor/CPP/XmlReaderSettings.cctor.cpp#1)]
 [!code-csharp[XmlReaderSettings.cctor#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.cctor/CS/factory_rdr_cctor2.cs#1)]
 [!code-vb[XmlReaderSettings.cctor#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.cctor/VB/factory_rdr_cctor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlReaderSettings (System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReaderSettings.#ctor(System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlReaderSettings(System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlReaderSettings : System.Xml.XmlResolver -&gt; System.Xml.XmlReaderSettings" Usage="new System.Xml.XmlReaderSettings resolver" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="resolver">XML 확인자입니다.</param>
        <summary><see cref="T:System.Xml.XmlReaderSettings" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Async">
      <MemberSignature Language="C#" Value="public bool Async { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Async" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.Async" />
      <MemberSignature Language="VB.NET" Value="Public Property Async As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Async { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Async : bool with get, set" Usage="System.Xml.XmlReaderSettings.Async" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>비동기 <see cref="T:System.Xml.XmlReader" /> 메서드를 특정 <see cref="T:System.Xml.XmlReader" /> 인스턴스에서 사용할 수 있는지 여부를 가져오거나 설정합니다.</summary>
        <value>비동기 메서드를 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 값을 설정 해야 합니다 `true` 만들면 새 <xref:System.Xml.XmlReader> 하려는 경우 사용 하 여 비동기 인스턴스 <xref:System.Xml.XmlReader> 해당 인스턴스에 대 한 메서드. 후 합니다 <xref:System.Xml.XmlReader> 만들어지면이 인스턴스는 <xref:System.Xml.XmlReaderSettings.Async%2A> 속성은 읽기 전용입니다. 이 속성의 기본값은 `false`입니다.  
  
 이 플래그는 무시 합니다 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 오버 로드 합니다. 즉, 새로 만든 경우 <xref:System.Xml.XmlReader> 기존 기반으로 <xref:System.Xml.XmlReader>, 비동기 동작 입력에 따라 달라 집니다 <xref:System.Xml.XmlReader>를 사용할 수 없습니다는 <xref:System.Xml.XmlReaderSettings.Async%2A> 비동기 동작을 변경 하는 플래그입니다.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Async 및 Await를 사용한 비동기 프로그래밍(C# 및 Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="CheckCharacters">
      <MemberSignature Language="C#" Value="public bool CheckCharacters { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CheckCharacters" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.CheckCharacters" />
      <MemberSignature Language="VB.NET" Value="Public Property CheckCharacters As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CheckCharacters { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CheckCharacters : bool with get, set" Usage="System.Xml.XmlReaderSettings.CheckCharacters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>문자 검사를 수행할지를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>문자 검사를 하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.  
  
 <block subset="none" type="note"><para>  
 텍스트 데이터를 처리할 경우 <see cref="T:System.Xml.XmlReader" />는 이 속성의 설정에 상관없이 XML 이름 및 텍스트 콘텐츠의 유효성을 항상 검사합니다. <see cref="P:System.Xml.XmlReaderSettings.CheckCharacters" />를 <see langword="false" />로 설정하면 문자 엔터티 참조에 대해 문자 검사가 수행되지 않습니다.  
  
</para></block></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성은 읽고 고 throw 된 XML 데이터에는 문자를 확인 하는 데 사용할 XML 판독기를 지시는 <xref:System.Xml.XmlException> 문자가 유효한 XML 문자 범위를 벗어난 경우. 문자 검사 기능을 사용하면 다음 사항을 확인할 수 있습니다.  
  
-   정의 된 대로 유효한 XML 문자 범위 내에 문자를 [2.2 문자](https://www.w3.org/TR/2006/REC-xml-20060816/#charsets) W3C XML 1.0 Recommendation의 섹션입니다.  
  
-   모든 XML 이름이 유효 하 여 정의 된 대로 합니다 [2.3 Common Syntactic Constructs](https://www.w3.org/TR/2006/REC-xml-20060816/#NT-Name) W3C XML 1.0 Recommendation의 섹션입니다.  
  
 이 속성 설정 된 경우 `true`, 기본 설정 되는 <xref:System.Xml.XmlException> XML 파일에 잘못 된 문자 또는 잘못 된 XML 이름을 포함 하는 경우 예외가 throw 됩니다 (예를 들어 요소 이름이 숫자로 시작할).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Xml.XmlReaderSettings Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlReaderSettings Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReaderSettings.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As XmlReaderSettings" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlReaderSettings ^ Clone();" />
      <MemberSignature Language="F#" Value="member this.Clone : unit -&gt; System.Xml.XmlReaderSettings" Usage="xmlReaderSettings.Clone " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReaderSettings</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Xml.XmlReaderSettings" /> 인스턴스의 복사본을 만듭니다.</summary>
        <returns>복제된 <see cref="T:System.Xml.XmlReaderSettings" /> 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 복제 된 <xref:System.Xml.XmlReaderSettings> 설정을 원래 개체에 영향을 주지 않고 개체를 수정할 수 있습니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CloseInput">
      <MemberSignature Language="C#" Value="public bool CloseInput { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CloseInput" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.CloseInput" />
      <MemberSignature Language="VB.NET" Value="Public Property CloseInput As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CloseInput { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CloseInput : bool with get, set" Usage="System.Xml.XmlReaderSettings.CloseInput" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>판독기를 닫을 때 내부 스트림 또는 <see cref="T:System.IO.TextReader" />를 함께 닫을지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>판독기를 닫을 때 내부 스트림 또는 <see cref="T:System.IO.TextReader" />를 함께 닫으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 설정은 때 스트림을 사용 됩니다 또는 <xref:System.IO.TextReader> 에 전달 되는 <xref:System.Xml.XmlReader.Create%2A> 메서드. 경우 스트림 판독기가 만들어지면 URI 또는 외부 문서 유형 정의 열 때 항상 닫혀 판독기가 닫힐 때와 같은 자체 처리에 대 한 판독기에서 생성 됩니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConformanceLevel">
      <MemberSignature Language="C#" Value="public System.Xml.ConformanceLevel ConformanceLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.ConformanceLevel ConformanceLevel" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.ConformanceLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property ConformanceLevel As ConformanceLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::ConformanceLevel ConformanceLevel { System::Xml::ConformanceLevel get(); void set(System::Xml::ConformanceLevel value); };" />
      <MemberSignature Language="F#" Value="member this.ConformanceLevel : System.Xml.ConformanceLevel with get, set" Usage="System.Xml.XmlReaderSettings.ConformanceLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.ConformanceLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Xml.XmlReader" />에 적용할 규칙 수준을 가져오거나 설정합니다.</summary>
        <value>XML 판독기를 적용할 규칙 수준을 지정하는 열거형 값 중 하나입니다. 기본값은 <see cref="F:System.Xml.ConformanceLevel.Document" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 만든 XML 판독기를 <xref:System.Xml.XmlReader.Create%2A> 메서드는 기본적으로 다음 규정 준수 요구 사항을 충족 합니다.  
  
-   새 줄 및 특성 값은 W3C에 따라 정규화 됩니다 [XML 1.0 권장 사항](https://www.w3.org/TR/2006/REC-xml-20060816/)합니다.  
  
-   모든 엔터티가 자동으로 확장 됩니다.  
  
-   문서 종류 정의에서 선언 된 기본 특성 판독기 유효성을 검사 하지 않는 경우에 항상 추가 됩니다.  
  
-   올바른 XML 네임 스페이스 URI에 매핑되는 XML 접두사는 선언 허용 됩니다.  
  
-   표기법 이름을 단일에서 `NotationType` 특성 선언 하 고 `NmTokens` 단일에서 `Enumeration` 특성 선언에는 서로 다릅니다.  
  
 사용할 수는 <xref:System.Xml.XmlReaderSettings.ConformanceLevel%2A> 속성을 확인 하 고 읽는 중인 스트림이 올바른 형식의 XML 1.0 문서 또는 문서 조각에 대 한 규칙을 준수를 보장 합니다. 데이터를 준수 하지 않는 경우는 <xref:System.Xml.XmlException> 예외가 throw 됩니다. 기본값은 <xref:System.Xml.ConformanceLevel.Document?displayProperty=nameWithType> (문서 수준 규칙).  
  
 세 가지 규칙 수준은 다음과 같습니다.  
  
|설정|설명|  
|-------------|-----------------|  
|<xref:System.Xml.ConformanceLevel.Document>|XML 데이터를 올바른 형식의 XML 1.0 문서에 대 한 규칙을 준수 하는지 확인 합니다. 이 검사 수준은 프로세서로 읽히는 스트림을 사용할 수는 보장을 [올바른 형식의 XML 1.0 문서](https://www.w3.org/TR/2006/REC-xml-20060816/#sec-well-formed)합니다.<br /><br /> 판독기는 다음을 검사합니다.<br /><br /> -최상위 항목에는 XML 선언, 문서 형식 정의 (DTD), 요소, 주석, 공백 또는 처리 명령 이외의 다른 노드가 아니어야 합니다.<br />-XML 데이터에는 정확히 하나의 최상위 요소 노드가 있어야 합니다.|  
|<xref:System.Xml.ConformanceLevel.Fragment>|XML 데이터는 올바른 형식의 XML 1.0 문서 조각에 대 한 규칙을 준수 하는지 확인 합니다.<br /><br /> 이 설정은 여러 개의 루트 요소가 있는 XML 데이터나 최상위의 텍스트 노드를 허용합니다. 이 검사 수준은 프로세서로 읽히는 스트림을 사용할 수는 보장을 [외부 엔터티를 구문 분석](https://www.w3.org/TR/2006/REC-xml-20060816/#wf-entities)합니다.|  
|<xref:System.Xml.ConformanceLevel.Auto>|판독기는 수준의 규칙 검사 들어오는 데이터를 기반으로 하는지 확인 하도록 지정 합니다.<br /><br /> XML 데이터가 DTD 정보를 포함하는 경우 문서 규칙 검사가 적용됩니다.<br /><br /> XML 데이터가 다음 중 하나를 포함하는 경우 조각 규칙 검사가 적용됩니다.<br /><br /> 루트 수준에서 텍스트, CDATA 또는 엔터티 참조 노드.<br />-루트 수준에서 둘 이상의 요소입니다.<br />-루트 수준 요소입니다.<br /><br /> 루트 수준에 텍스트 노드 및 DTD가 있는 경우와 같이 충돌이 있을 경우 <xref:System.Xml.XmlException>이 throw됩니다.<br /><br /> <xref:System.Xml.XmlReader.Create%2A> 메서드를 사용하여 기존 <xref:System.Xml.XmlReader>에 기능을 추가할 때 래핑 시나리오에서 이 설정을 사용할 수 있습니다. 이 경우 <xref:System.Xml.ConformanceLevel.Document?displayProperty=nameWithType> 새 규칙 검사를 추가 하지 않습니다. 규칙 검사는 래핑 중인 <xref:System.Xml.XmlReader>에 남아 있습니다.|  
  
> [!NOTE]
>  DTD가 있을 경우 XML 1.0 권장 사항에서는 문서 수준 규칙을 요구합니다. 따라서 판독기 지원 하도록 구성 된 경우 <xref:System.Xml.ConformanceLevel.Fragment?displayProperty=nameWithType>, 문서 형식 정의 (DTD)를 포함 하는 XML 데이터는 <xref:System.Xml.XmlException> throw 됩니다.  
  
 판독기 설정에 따라 특정 규칙 위반을 처리 하는 방법을 다음과 같습니다는 <xref:System.Xml.XmlReaderSettings.ConformanceLevel%2A> 속성:  
  
|조건|<xref:System.Xml.ConformanceLevel.Document>|<xref:System.Xml.ConformanceLevel.Fragment>|<xref:System.Xml.ConformanceLevel.Auto>|  
|---------------|---------------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------|  
|텍스트 또는 형식화 된 값에는 최상위 수준에 나타납니다.|<xref:System.Xml.XmlException> 이 throw 됩니다.|이 설정에 대 한 위반으로 간주 되지 않습니다.|이 설정에 대 한 위반으로 간주 되지 않습니다.|  
|요소가 여러 개이거나 없는 최상위 수준에 나타납니다.|<xref:System.Xml.XmlException> 이 throw 됩니다.|이 설정에 대 한 위반으로 간주 되지 않습니다.|이 설정에 대 한 위반으로 간주 되지 않습니다.|  
|최상위 항목은 공백입니다.|이 설정에 대 한 위반으로 간주 되지 않습니다.|이 설정에 대 한 위반으로 간주 되지 않습니다.|이 설정에 대 한 위반으로 간주 되지 않습니다.|  
|최상위 항목에는 특성 (텍스트 노드로 인식)입니다.|<xref:System.Xml.XmlException> 이 throw 됩니다.|이 설정에 대 한 위반으로 간주 되지 않습니다.|이 설정에 대 한 위반으로 간주 되지 않습니다.|  
|인접한 텍스트 노드가 여러 개 있을 경우|이 설정에 대 한 위반으로 간주 되지 않습니다.|이 설정에 대 한 위반으로 간주 되지 않습니다.|이 설정에 대 한 위반으로 간주 되지 않습니다.|  
|동일한 네임 스페이스 접두사는 동일한 로컬 범위에서 두 번 선언 됩니다.|<xref:System.Xml.XmlException> 이 throw 됩니다.|<xref:System.Xml.XmlException> 이 throw 됩니다.|<xref:System.Xml.XmlException> 이 throw 됩니다.|  
|요소나 특성의 네임 스페이스는 로컬 범위에 존재 하지 않습니다.|<xref:System.Xml.XmlException> 이 throw 됩니다.|<xref:System.Xml.XmlException> 이 throw 됩니다.|<xref:System.Xml.XmlException> 이 throw 됩니다.|  
|데이터는 네임 스페이스 접두사 일치를 포함합니다.|<xref:System.Xml.XmlException> 이 throw 됩니다.|<xref:System.Xml.XmlException> 이 throw 됩니다.|<xref:System.Xml.XmlException> 이 throw 됩니다.|  
|`xml:space` 특성에 잘못 된 값을 포함합니다.|<xref:System.Xml.XmlException> 이 throw 됩니다.|<xref:System.Xml.XmlException> 이 throw 됩니다.|<xref:System.Xml.XmlException> 이 throw 됩니다.|  
|잘못된 이름이 발견된 경우|<xref:System.Xml.XmlException> 이 throw 됩니다.|<xref:System.Xml.XmlException> 이 throw 됩니다.|<xref:System.Xml.XmlException> 이 throw 됩니다.|  
|합니다 `xml` 접두사를 일치 하지 않습니다는 http://www.w3.org/XML/1998/namespace URI입니다.|<xref:System.Xml.XmlException> 이 throw 됩니다.|<xref:System.Xml.XmlException> 이 throw 됩니다.|<xref:System.Xml.XmlException> 이 throw 됩니다.|  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Xml.XmlReader> XML 조각을 읽는 개체입니다.  
  
 [!code-csharp[XmlReader.Create#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader.Create/CS/XmlReader_Create.cs#1)]
 [!code-vb[XmlReader.Create#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader.Create/VB/XmlReader_Create.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="DtdProcessing">
      <MemberSignature Language="C#" Value="public System.Xml.DtdProcessing DtdProcessing { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.DtdProcessing DtdProcessing" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.DtdProcessing" />
      <MemberSignature Language="VB.NET" Value="Public Property DtdProcessing As DtdProcessing" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::DtdProcessing DtdProcessing { System::Xml::DtdProcessing get(); void set(System::Xml::DtdProcessing value); };" />
      <MemberSignature Language="F#" Value="member this.DtdProcessing : System.Xml.DtdProcessing with get, set" Usage="System.Xml.XmlReaderSettings.DtdProcessing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.DtdProcessing</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>DTD 처리를 결정하는 값을 가져오거나 설정합니다.</summary>
        <value>DTD 처리를 결정하는 열거형 값 중 하나입니다. 기본값은 <see cref="F:System.Xml.DtdProcessing.Prohibit" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 문서 유형 정의 (DTD) 유효성 검사는 W3C에서 정의 된 유효성 제약 조건을 사용 하 여 구현 됩니다 [Extensible Markup Language (XML) 1.0 (1.0(fourth edition) 권장 사항](https://www.w3.org/TR/2006/REC-xml-20060816/)합니다. Dtd에서는 정식 문법을 사용 하 여 구조체와 호환 XML 문서 구문 설명 콘텐츠 및 XML 문서에 대 한 허용 값을 지정 합니다.  
  
 이 속성은 다음 값 중 하나입니다.  
  
-   <xref:System.Xml.DtdProcessing.Parse?displayProperty=nameWithType> DTD를 처리할 수 있도록 합니다.  
  
-   <xref:System.Xml.DtdProcessing.Prohibit?displayProperty=nameWithType> throw 하는 <xref:System.Xml.XmlException> DTD가 발견 하는 동안 예외가 발생 합니다.  
  
-   <xref:System.Xml.DtdProcessing.Ignore?displayProperty=nameWithType> 경고 또는 예외 없이 처리 하는 DTD를 사용 하지 않도록 설정 합니다.  
  
 DTD에 대한 유효성 검사를 수행하기 위해 <xref:System.Xml.XmlReader>에서는 XML 문서의 DOCTYPE 선언에 정의된 DTD를 사용합니다. DOCTYPE 선언은 인라인 DTD를 가리키거나 외부 DTD 파일에 대한 참조가 될 수 있습니다. DTD에 대 한 XML 파일 유효성을 검사 하려면:  
  
-   <xref:System.Xml.XmlReaderSettings.DtdProcessing%2A?displayProperty=nameWithType> 속성을 `DtdProcessing.Parse.`로 설정합니다.  
  
-   <xref:System.Xml.XmlReaderSettings.ValidationType%2A?displayProperty=nameWithType> 속성을 `ValidationType.DTD`으로 설정합니다.  
  
-   DTD가 인증이 필요한 네트워크 리소스에 저장된 외부 파일인 경우 필요한 자격 증명과 함께 <xref:System.Xml.XmlResolver> 개체를 <xref:System.Xml.XmlReader.Create%2A> 메서드에 전달합니다.  
  
> [!IMPORTANT]
>  경우는 <xref:System.Xml.XmlReaderSettings.DtdProcessing%2A> 속성이 <xref:System.Xml.DtdProcessing.Ignore?displayProperty=nameWithType>는 <xref:System.Xml.XmlReader> Dtd를 보고 하지 것입니다. 즉, DTD/DOCTYPE는 출력에서 손실 됩니다.  
  
   
  
## Examples  
 다음 예제에서는 DTD 파일을 사용하여 XML 파일의 유효성을 검사합니다.  
  
 [!code-cpp[XmlReaderSettings.DtdValidate#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReaderSettings.DtdValidate/CPP/XmlReaderSettings.DtdValidate.cpp#1)]
 [!code-csharp[XmlReaderSettings.DtdValidate#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.DtdValidate/CS/validdtd.cs#1)]
 [!code-vb[XmlReaderSettings.DtdValidate#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.DtdValidate/VB/validdtd.vb#1)]  
  
## <a name="input"></a>입력  
 이 예제에서는 `itemDTD.xml` 파일을 입력으로 사용합니다.  
  
 [!code-xml[XmlReaderSettings.DtdValidate#2](~/samples/snippets/xml/VS_Snippets_Data/XmlReaderSettings.DtdValidate/XML/itemDTD.xml#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IgnoreComments">
      <MemberSignature Language="C#" Value="public bool IgnoreComments { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnoreComments" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.IgnoreComments" />
      <MemberSignature Language="VB.NET" Value="Public Property IgnoreComments As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IgnoreComments { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IgnoreComments : bool with get, set" Usage="System.Xml.XmlReaderSettings.IgnoreComments" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>주석을 무시할지를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>주석을 무시하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성을 설정 `true` 판독기에서 반환 되는 여러 개의 인접 텍스트 노드에서 발생할 수 있습니다. 유효성 검사에는 영향을 주지 않습니다.  
  
   
  
## Examples  
 다음 처리 지침, 주석 및 불필요 한 공백을 제거 하는 판독기를 만드는 데 사용할 수 있는 설정 개체를 만듭니다.  
  
 [!code-cpp[XmlReaderSettings.cctor#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReaderSettings.cctor/CPP/XmlReaderSettings.cctor.cpp#1)]
 [!code-csharp[XmlReaderSettings.cctor#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.cctor/CS/factory_rdr_cctor2.cs#1)]
 [!code-vb[XmlReaderSettings.cctor#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.cctor/VB/factory_rdr_cctor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IgnoreProcessingInstructions">
      <MemberSignature Language="C#" Value="public bool IgnoreProcessingInstructions { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnoreProcessingInstructions" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.IgnoreProcessingInstructions" />
      <MemberSignature Language="VB.NET" Value="Public Property IgnoreProcessingInstructions As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IgnoreProcessingInstructions { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IgnoreProcessingInstructions : bool with get, set" Usage="System.Xml.XmlReaderSettings.IgnoreProcessingInstructions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>처리 명령을 무시할지를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>처리 명령을 무시하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성을 설정 `true` 판독기에서 반환 되는 여러 개의 인접 텍스트 노드에서 발생할 수 있습니다. 유효성 검사에는 영향을 주지 않습니다.  
  
   
  
## Examples  
 다음 처리 지침, 주석 및 불필요 한 공백을 제거 하는 판독기를 만드는 데 사용할 수 있는 설정 개체를 만듭니다.  
  
 [!code-cpp[XmlReaderSettings.cctor#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReaderSettings.cctor/CPP/XmlReaderSettings.cctor.cpp#1)]
 [!code-csharp[XmlReaderSettings.cctor#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.cctor/CS/factory_rdr_cctor2.cs#1)]
 [!code-vb[XmlReaderSettings.cctor#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.cctor/VB/factory_rdr_cctor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IgnoreWhitespace">
      <MemberSignature Language="C#" Value="public bool IgnoreWhitespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnoreWhitespace" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.IgnoreWhitespace" />
      <MemberSignature Language="VB.NET" Value="Public Property IgnoreWhitespace As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IgnoreWhitespace { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IgnoreWhitespace : bool with get, set" Usage="System.Xml.XmlReaderSettings.IgnoreWhitespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>유효하지 않은 공백을 무시할지를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>공백을 무시하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 중요 한 것으로 간주 되지 않습니다는 공백 문자는 공백, 탭 및 가독성을 높이기 위해 태그를 구분 하는 데 사용 되는 빈 줄을 포함 합니다. 이러한 예로 요소 내용에 공백입니다.  
  
 이 속성 설정의 범위 내에서 발생 하는 공백 또는 혼합된 콘텐츠 모드를에서 태그 들 사이의 공백 영향을 주지 않습니다는 `xml:space='preserve'` 특성입니다.  
  
   
  
## Examples  
 다음 처리 지침, 주석 및 불필요 한 공백을 제거 하는 판독기를 만드는 데 사용할 수 있는 설정 개체를 만듭니다.  
  
 [!code-cpp[XmlReaderSettings.cctor#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReaderSettings.cctor/CPP/XmlReaderSettings.cctor.cpp#1)]
 [!code-csharp[XmlReaderSettings.cctor#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.cctor/CS/factory_rdr_cctor2.cs#1)]
 [!code-vb[XmlReaderSettings.cctor#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.cctor/VB/factory_rdr_cctor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="LineNumberOffset">
      <MemberSignature Language="C#" Value="public int LineNumberOffset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LineNumberOffset" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.LineNumberOffset" />
      <MemberSignature Language="VB.NET" Value="Public Property LineNumberOffset As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LineNumberOffset { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.LineNumberOffset : int with get, set" Usage="System.Xml.XmlReaderSettings.LineNumberOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Xml.XmlReader" /> 개체의 줄 번호 오프셋을 가져오거나 설정합니다.</summary>
        <value>줄 번호 오프셋입니다. 기본값은 0입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Xml.XmlReaderSettings.LineNumberOffset%2A> 시점을 확인 하는 설정 위치는 <xref:System.Xml.IXmlLineInfo.LineNumber%2A> 속성이 계산을 시작 합니다. XML 데이터를 더 큰 문서 내에 포함 된 경우에 유용 합니다. 예를 들어, XML 데이터를 더 큰 문서에 포함 된 데이터는 101 문서의 줄에서 시작 하 고 판독기를 100 번 줄에서 시작 함을 지정 하는 것이 좋습니다. 따라서 판독기에서 XML의 첫 번째 줄을 구문 분석 하는 동안 예외가 발생 합니다 줄 1이 아닌 선 101, 줄 번호를 보고할 수 있습니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="LinePositionOffset">
      <MemberSignature Language="C#" Value="public int LinePositionOffset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LinePositionOffset" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.LinePositionOffset" />
      <MemberSignature Language="VB.NET" Value="Public Property LinePositionOffset As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LinePositionOffset { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.LinePositionOffset : int with get, set" Usage="System.Xml.XmlReaderSettings.LinePositionOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Xml.XmlReader" /> 개체의 줄 위치 오프셋을 가져오거나 설정합니다.</summary>
        <value>선 위치 오프셋입니다. 기본값은 0입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Xml.XmlReaderSettings.LinePositionOffset%2A> 시점을 확인 하는 설정 위치는 <xref:System.Xml.IXmlLineInfo.LinePosition%2A> 속성이 계산을 시작 합니다. XML 데이터를 더 큰 문서 내에 포함 된 XML의 시작 부분에 없는 새 줄이 경우에 유용 합니다. 이 경우 판독기가 XML을 구문 분석 하는 동안 예외를 throw 하는 경우 원하는 XML 조각을 상대적 뿐 아니라, 기본 문서를 기준으로 줄 위치를 반환 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="MaxCharactersFromEntities">
      <MemberSignature Language="C#" Value="public long MaxCharactersFromEntities { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaxCharactersFromEntities" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.MaxCharactersFromEntities" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxCharactersFromEntities As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaxCharactersFromEntities { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.MaxCharactersFromEntities : int64 with get, set" Usage="System.Xml.XmlReaderSettings.MaxCharactersFromEntities" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>문서에서 엔터티 확장명 후의 최대 허용 문자 수를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>확장된 엔터티의 최대 허용 문자 수입니다. 기본값은 0입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 값 (0)에 확장명 엔터티의 결과인 문자 수에 제한이 없음을 의미 합니다. 엔터티 확장에서 발생할 수 있는 문자의 최대 수를 지정 하는 0이 아닌 값입니다.  
  
 판독기가 확장 된 크기가이 속성을 초과 하는 엔터티가 포함 된 문서를 읽으려고 하는 경우는 <xref:System.Xml.XmlException> throw 됩니다.  
  
 이 속성을 사용 하면 공격자가 엔터티 확장을 통해 메모리 한도 초과 하려고 하는 XML 문서를 제출 하는 경우 서비스 거부 공격을 완화할 수 있습니다. 확장 된 엔터티의 결과인 문자를 제한 하 여 공격을 탐지 하 고 안정적으로 복구할 수 있습니다.  
  
   
  
## Examples  
 다음 코드는이 속성을 설정 하 고 설정 된 한계 보다 큰 크기로 확장 되는 엔터티가 포함 된 문서를 구문 분석 하려고 시도 합니다. 실제 시나리오에서 설정한이 한도 아직 유효한 문서를 처리 하기에 충분히 큰 값으로 악의적인 문서의 위협 제한 수 있을 만큼 적습니다.  
  
```csharp  
string markup =  
@"<!DOCTYPE Root [  
  <!ENTITY anEntity ""Expands to more than 30 characters"">  
  <!ELEMENT Root (#PCDATA)>  
]>  
<Root>Content &anEntity;</Root>";  
  
XmlReaderSettings settings = new XmlReaderSettings();  
settings.DtdProcessing = DtdProcessing.Parse;  
settings.ValidationType = ValidationType.DTD;  
settings.MaxCharactersFromEntities = 30;  
  
try  
{  
    XmlReader reader = XmlReader.Create(new StringReader(markup), settings);  
    while (reader.Read()) { }  
}  
catch (XmlException ex)  
{  
    Console.WriteLine(ex.Message);  
}  
```  
  
```vb  
Dim markup As String = _  
    "<!DOCTYPE Root [" + Environment.NewLine + _  
    "  <!ENTITY anEntity ""Expands to more than 30 characters"">" + Environment.NewLine + _  
    "  <!ELEMENT Root (#PCDATA)>" + Environment.NewLine + _  
    "]>" + Environment.NewLine + _  
    "<Root>Content &anEntity;</Root>"  
  
Dim settings As XmlReaderSettings = New XmlReaderSettings()  
settings.DtdProcessing = DtdProcessing.Parse;  
settings.ValidationType = ValidationType.DTD  
settings.MaxCharactersFromEntities = 30  
  
Try  
    Dim reader As XmlReader = XmlReader.Create(New StringReader(markup), settings)  
    While (reader.Read())  
    End While  
Catch ex As XmlException  
    Console.WriteLine(ex.Message)  
End Try  
```  
  
 이 예제는 다음과 같은 출력을 생성합니다.  
  
```  
There is an error in XML document (MaxCharactersFromEntities, ).  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxCharactersInDocument">
      <MemberSignature Language="C#" Value="public long MaxCharactersInDocument { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaxCharactersInDocument" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.MaxCharactersInDocument" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxCharactersInDocument As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaxCharactersInDocument { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.MaxCharactersInDocument : int64 with get, set" Usage="System.Xml.XmlReaderSettings.MaxCharactersInDocument" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>XML 문서의 최대 허용 문자 수를 나타내는 값을 가져오거나 설정합니다. 값 0은 XML 문서 크기에 제한이 없음을 의미합니다. 0이 아닌 값은 최대 크기(문자 수)를 지정합니다.</summary>
        <value>XML 문서의 최대 허용 문자 수입니다. 기본값은 0입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 0 (0) 값을 구문 분석 된 문서에는 문자 수에 제한이 없음을 의미합니다. 0이 아닌 값을 구문 분석할 수 있는 문자의 최대 수를 지정 합니다.  
  
 문서에 대 한 최대 문자 수를 확장 된 엔터티의 결과인 문자 수를 포함 합니다.  
  
 이 속성을 초과 하는 크기를 사용 하 여 문서를 읽는 판독기 하려고 시도 하는 경우는 <xref:System.Xml.XmlException> throw 됩니다.  
  
 이 속성을 사용 하면 공격자가 매우 큰 XML 문서를 제출 하는 경우 서비스 거부 공격을 완화할 수 있습니다. 문서 크기를 제한 하 여 공격을 탐지 하 고 안정적으로 복구할 수 있습니다.  
  
   
  
## Examples  
 다음 코드는이 속성을 설정 하 고 제한 보다 큰 문서를 구문 분석 하려고 시도 합니다. 실제 시나리오에서 설정한이 한도 아직 유효한 문서를 처리 하기에 충분히 큰 값으로 악의적인 문서의 위협 제한 수 있을 만큼 적습니다.  
  
```csharp  
string markup = "<Root>Content</Root>";  
  
XmlReaderSettings settings = new XmlReaderSettings();  
settings.MaxCharactersInDocument = 10;  
  
try  
{  
    XmlReader reader = XmlReader.Create(new StringReader(markup), settings);  
    while (reader.Read()) { }  
}  
catch (XmlException ex)  
{  
    Console.WriteLine(ex.Message);  
}  
```  
  
```vb  
Dim markup As String = "<Root>Content</Root>"  
  
Dim settings As XmlReaderSettings = New XmlReaderSettings()  
settings.MaxCharactersInDocument = 10  
  
Try  
    Dim reader As XmlReader = XmlReader.Create(New StringReader(markup), settings)  
    While (reader.Read())  
    End While  
Catch ex As XmlException  
    Console.WriteLine(ex.Message)  
End Try  
```  
  
 이 코드의 결과는 다음과 같습니다.  
  
```  
There is an error in XML document (MaxCharactersInDocument, ).  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NameTable">
      <MemberSignature Language="C#" Value="public System.Xml.XmlNameTable NameTable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlNameTable NameTable" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.NameTable" />
      <MemberSignature Language="VB.NET" Value="Public Property NameTable As XmlNameTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlNameTable ^ NameTable { System::Xml::XmlNameTable ^ get(); void set(System::Xml::XmlNameTable ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NameTable : System.Xml.XmlNameTable with get, set" Usage="System.Xml.XmlReaderSettings.NameTable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNameTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>원자화된 문자열을 비교하는 데 사용할 <see cref="T:System.Xml.XmlNameTable" />을 가져오거나 설정합니다.</summary>
        <value>이 <see cref="T:System.Xml.XmlNameTable" /> 개체를 사용하여 만든 모든 <see cref="T:System.Xml.XmlReader" /> 인스턴스에서 사용하는 원자화된 문자열 전체가 저장되는 <see cref="T:System.Xml.XmlReaderSettings" />입니다.  
  
기본값은 <see langword="null" />입니다. 이 값이 <see langword="null" />이면 <see cref="T:System.Xml.XmlReader" /> 인스턴스는 비어 있는 새 <see cref="T:System.Xml.NameTable" />을 사용합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성을 설정 된 <xref:System.Xml.XmlNameTable> 모든 간에 공용 이름 테이블을 공유 하려는 경우 인스턴스 만들어진 <xref:System.Xml.XmlReader> 인스턴스.  
  
> [!NOTE]
>  <xref:System.Xml.NameTable> 클래스는 스레드로부터 안전하지 않습니다 따라서 간에 공유할 수 없습니다 <xref:System.Xml.XmlReader> 서로 다른 스레드에서 동시에 실행 되는 개체입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProhibitDtd">
      <MemberSignature Language="C#" Value="public bool ProhibitDtd { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ProhibitDtd" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.ProhibitDtd" />
      <MemberSignature Language="VB.NET" Value="Public Property ProhibitDtd As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ProhibitDtd { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ProhibitDtd : bool with get, set" Usage="System.Xml.XmlReaderSettings.ProhibitDtd" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.Obsolete("Use XmlReaderSettings.DtdProcessing property instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>DTD(문서 형식 정의) 프로세스를 금지할지를 나타내는 값을 가져오거나 설정합니다. 이 속성은 사용되지 않습니다. 대신 <see cref="P:System.Xml.XmlTextReader.DtdProcessing" />를 사용하세요.</summary>
        <value>DTD 프로세스를 금지하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 로 설정 하면 `true`서 <xref:System.Xml.XmlReader> throw는 <xref:System.Xml.XmlException> DTD 내용이 발생 시. 서비스 거부 문제가 염려되거나 신뢰할 수 없는 소스를 사용하는 경우 DTD 처리를 사용하지 마십시오.  
  
 DTD 처리를 활성화하는 경우 <xref:System.Xml.XmlSecureResolver>를 사용하여 <xref:System.Xml.XmlReader>가 액세스할 수 있는 리소스를 제한할 수 있습니다. 또한 응용 프로그램을 직접 디자인하여 XML 처리에 필요한 메모리 및 시간을 제한할 수 있습니다. 예를 들어, ASP.NET 응용 프로그램에서 시간 제한을 구성합니다.  
  
 이 속성은 사용되지 않습니다. 대신 <xref:System.Xml.XmlTextReader.DtdProcessing%2A>를 사용하세요. 사용자가 설정한 경우 <xref:System.Xml.XmlReaderSettings.ProhibitDtd%2A> 기본값으로 `true` 설정 <xref:System.Xml.XmlTextReader.DtdProcessing%2A> 하려면 `Prohibit`합니다. 사용자가 설정한 경우 <xref:System.Xml.XmlReaderSettings.ProhibitDtd%2A> 하 `false` 설정 <xref:System.Xml.XmlTextReader.DtdProcessing%2A> 에 `Parse`입니다.  
  
   
  
## Examples  
 다음 예제에서는 DTD를 사용 하 여 데이터의 유효성을 검사 합니다.  
  
 [!code-cpp[XmlReaderSettings.DtdValidate#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReaderSettings.DtdValidate/CPP/XmlReaderSettings.DtdValidate.cpp#1)]
 [!code-csharp[XmlReaderSettings.DtdValidate#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.DtdValidate/CS/validdtd.cs#1)]
 [!code-vb[XmlReaderSettings.DtdValidate#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.DtdValidate/VB/validdtd.vb#1)]  
  
 이 예제에서는 입력으로 itemDTD.xml 파일을 사용합니다.  
  
 [!code-xml[XmlReaderSettings.DtdValidate#2](~/samples/snippets/xml/VS_Snippets_Data/XmlReaderSettings.DtdValidate/XML/itemDTD.xml#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReaderSettings.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; unit" Usage="xmlReaderSettings.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>설정 클래스의 멤버를 해당 기본값으로 다시 설정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 인스턴스에 대 한 초기 속성 값을 보여 줍니다. <xref:System.Xml.XmlReaderSettings>합니다.  
  
|속성|초기 값|  
|--------------|-------------------|  
|<xref:System.Xml.XmlReaderSettings.Async%2A>|`false`.|  
|<xref:System.Xml.XmlReaderSettings.CheckCharacters%2A>|`true`.|  
|<xref:System.Xml.XmlReaderSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document>.|  
|<xref:System.Xml.XmlReaderSettings.IgnoreComments%2A>|`false`.|  
|<xref:System.Xml.XmlReaderSettings.IgnoreProcessingInstructions%2A>|`false`.|  
|<xref:System.Xml.XmlReaderSettings.IgnoreWhitespace%2A>|`false`.|  
|<xref:System.Xml.XmlReaderSettings.LineNumberOffset%2A>|0.|  
|<xref:System.Xml.XmlReaderSettings.LinePositionOffset%2A>|0.|  
|<xref:System.Xml.XmlReaderSettings.MaxCharactersFromEntities%2A>|0 (확장명 엔터티의 결과인 문자 수를 제한 하지 않습니다).|  
|<xref:System.Xml.XmlReaderSettings.MaxCharactersInDocument%2A>|0 (무제한 XML 문서의 크기에).|  
|<xref:System.Xml.XmlReaderSettings.NameTable%2A>|`null`.|  
|<xref:System.Xml.XmlTextReader.DtdProcessing%2A>|<xref:System.Xml.DtdProcessing.Prohibit>|  
|<xref:System.Xml.XmlReaderSettings.ProhibitDtd%2A>|`true`. 이 속성은 사용되지 않습니다. 대신 <xref:System.Xml.XmlTextReader.DtdProcessing%2A>를 사용하세요. 사용자가 설정한 경우 <xref:System.Xml.XmlReaderSettings.ProhibitDtd%2A> 기본값으로 `true` 설정 <xref:System.Xml.XmlTextReader.DtdProcessing%2A> 하려면 `Prohibit`합니다. 사용자가 설정한 경우 <xref:System.Xml.XmlReaderSettings.ProhibitDtd%2A> 하 `false` 설정 <xref:System.Xml.XmlTextReader.DtdProcessing%2A> 에 `Parse`입니다.|  
|<xref:System.Xml.XmlReaderSettings.Schemas%2A>|빈 <xref:System.Xml.Schema.XmlSchemaSet> 개체입니다.|  
|<xref:System.Xml.XmlReaderSettings.ValidationFlags%2A>|<xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints>.|  
|<xref:System.Xml.XmlReaderSettings.ValidationType%2A>|<xref:System.Xml.ValidationType.None>.|  
|<xref:System.Xml.XmlReaderSettings.XmlResolver%2A>|새 <xref:System.Xml.XmlUrlResolver> 개체입니다.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Schemas">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaSet Schemas { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaSet Schemas" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.Schemas" />
      <MemberSignature Language="VB.NET" Value="Public Property Schemas As XmlSchemaSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaSet ^ Schemas { System::Xml::Schema::XmlSchemaSet ^ get(); void set(System::Xml::Schema::XmlSchemaSet ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Schemas : System.Xml.Schema.XmlSchemaSet with get, set" Usage="System.Xml.XmlReaderSettings.Schemas" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>스키마 유효성 검사를 수행할 때 사용할 <see cref="T:System.Xml.Schema.XmlSchemaSet" />을 가져오거나 설정합니다.</summary>
        <value>스키마 유효성 검사를 수행할 때 사용할 <see cref="T:System.Xml.Schema.XmlSchemaSet" />입니다. 기본값은 빈 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 개체입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
> -   알 수 없거나 신뢰할 수 없는 출처 또는 위치에서 스키마를 사용 하지 마세요. 이렇게 하면 코드의 보안이 손상 됩니다.  
> -   XML 스키마 (인라인 스키마 포함)는 서비스 거부 공격;에 기본적으로 취약 이러한 신뢰할 수 없는 시나리오에서 허용 하지 않습니다.  
> -   스키마 유효성 검사 오류 메시지 및 예외 콘텐츠 모델 또는 스키마 파일에 URI 경로 대 한 중요 한 정보를 노출할 수 있습니다. 신뢰할 수 없는 호출자에 게이 정보를 노출 하지 않도록 주의 해야 합니다.  
> -   자세한 내용은 "보안 고려 사항" 섹션을 참조 하세요.  
  
 <xref:System.Xml.Schema.XmlSchemaSet> 클래스에 XML 스키마 정의 언어 (XSD) 스키마만 지원 합니다. <xref:System.Xml.XmlReader> 만든 인스턴스에 <xref:System.Xml.XmlReader.Create%2A> Xml-data Reduced (XDR) 스키마 유효성 검사를 사용 하도록 설정 하려면 메서드를 구성할 수 없습니다.  
  
## <a name="security-considerations"></a>보안 고려 사항  
  
-   알 수 없거나 신뢰할 수 없는 소스에서 스키마를 사용 하지 마세요. 이렇게 하면 코드의 보안이 손상 됩니다. <xref:System.Xml.XmlUrlResolver> 클래스는 외부 스키마를 해결 하려면 기본적으로 사용 됩니다. 포함, 가져오기의 해상도 사용 하지 않도록 설정 하 고 스키마의 요소를 다시 정의 설정 합니다 <xref:System.Xml.Schema.XmlSchemaSet.XmlResolver%2A?displayProperty=nameWithType> 속성을 `null`입니다.  
  
-   사용 하 여 결과로 발생 하는 예외를 <xref:System.Xml.Schema.XmlSchemaSet> 클래스와 같이 <xref:System.Xml.Schema.XmlSchemaException> 클래스에는 신뢰할 수 없는 시나리오에서 노출 되지 않아야 하는 중요 한 정보가 포함 될 수 있습니다. 예를 들어를 <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A> 의 속성을 <xref:System.Xml.Schema.XmlSchemaException> 예외를 발생 시킨 스키마 파일의 URI 경로 반환 합니다. <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A> 속성 신뢰할 수 없는 시나리오에서 노출 되지 않아야 합니다. 신뢰할 수 없는 시나리오에서 중요 한 정보가 노출 되지 않습니다 있도록 예외가 제대로 처리 되어야 합니다.  
  
   
  
## Examples  
 사용 하 여 아래 예제는 <xref:System.Xml.XmlReaderSettings> 개체 및 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> XML 문서를 사용 하 여 스키마를 연결 하는 방법입니다. 스키마에 추가 됩니다는 <xref:System.Xml.XmlReaderSettings.Schemas%2A> 의 속성을 <xref:System.Xml.XmlReaderSettings> 개체입니다. 값을 <xref:System.Xml.XmlReaderSettings.Schemas%2A> 속성이 <xref:System.Xml.Schema.XmlSchemaSet> 개체입니다. 스키마는 XML 문서 스키마 콘텐츠 모델에 맞는지 유효성을 검사 하려면 사용 됩니다. 스키마 유효성 검사 오류 및 경고에서 처리 됩니다는 <xref:System.Xml.XmlReaderSettings.ValidationEventHandler> 에 정의 된 <xref:System.Xml.XmlReaderSettings> 개체.  
  
 [!code-cpp[XmlSchemaSetOverall Example#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlSchemaSetOverall Example/CPP/xmlschemasetexample.cpp#1)]
 [!code-csharp[XmlSchemaSetOverall Example#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaSetOverall Example/CS/xmlschemasetexample.cs#1)]
 [!code-vb[XmlSchemaSetOverall Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaSetOverall Example/VB/xmlschemasetexample.vb#1)]  
  
 이 예제에서는 인수로 books.xml 파일을 사용합니다.  
  
 [!code-xml[XmlSchemaSetOverall Example#2](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaSetOverall Example/XML/books.xml#2)]  
  
 이 예제에서는 입력으로 books.xsd 파일을 사용합니다.  
  
 [!code-xml[XmlSchemaSetOverall Example#3](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaSetOverall Example/XML/books.xsd#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ValidationEventHandler">
      <MemberSignature Language="C#" Value="public event System.Xml.Schema.ValidationEventHandler ValidationEventHandler;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Xml.Schema.ValidationEventHandler ValidationEventHandler" />
      <MemberSignature Language="DocId" Value="E:System.Xml.XmlReaderSettings.ValidationEventHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Xml::Schema::ValidationEventHandler ^ ValidationEventHandler;" />
      <MemberSignature Language="F#" Value="member this.ValidationEventHandler : System.Xml.Schema.ValidationEventHandler " Usage="member this.ValidationEventHandler : System.Xml.Schema.ValidationEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.ValidationEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>판독기에서 유효성 검사 오류가 발견되면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이러한 이벤트가 발생 하는 경우 XML 인스턴스 문서를 읽는 동안 합니다 <xref:System.Xml.XmlReaderSettings.ValidationType%2A> 로 설정 되어 <xref:System.Xml.ValidationType.DTD> 또는 <xref:System.Xml.ValidationType.Schema>합니다. 경우는 <xref:System.Xml.Schema.XmlSchemaValidationFlags.ReportValidationWarnings> 설정에서 활성화 되는 <xref:System.Xml.XmlReaderSettings.ValidationFlags%2A> 속성 유효성 검사 경고가 발생 하는 경우에 이러한 이벤트가 발생 합니다.  
  
 유효성 검사에 대 한 판독기를 구성 및 유효성 검사 이벤트 처리기를 설정한 경우는 <xref:System.Xml.Schema.XmlSchemaValidationException> 모든 유효성 검사 오류에 대해 발생 합니다. (유효성 검사 경고 발생 하지는 <xref:System.Xml.Schema.XmlSchemaValidationException> throw) 합니다.  
  
> [!IMPORTANT]
>  유효성 검사 오류 메시지는 중요 한 콘텐츠 모델 정보를 노출할 수 있습니다. 유효성 검사 오류 및 경고 메시지를 사용 하 여 처리 됩니다는 <xref:System.Xml.Schema.ValidationEventHandler> 대리자 또는으로 노출 됩니다는 <xref:System.Xml.Schema.XmlSchemaValidationException> 이벤트 처리기가 제공 되는 경우를 <xref:System.Xml.XmlReaderSettings> 개체 (유효성 검사 경고 발생 하지 않습니다는 <xref:System.Xml.Schema.XmlSchemaValidationException> 를 throw). 신뢰할 수 없는 시나리오에서이 콘텐츠 모델 정보를 노출 되어야 합니다. 유효성 검사 경고 메시지는 기본적으로 표시 되지 않습니다 하 고 설정 하 여 보고 될 수는 <xref:System.Xml.Schema.XmlSchemaValidationFlags.ReportValidationWarnings> 플래그입니다.  
>   
>  합니다 <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A> 의 속성을 <xref:System.Xml.Schema.XmlSchemaValidationException> 예외를 발생 시킨 스키마 파일의 URI 경로 반환 합니다. <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A> 속성 신뢰할 수 없는 시나리오에서 노출 되지 않아야 합니다.  
  
   
  
## Examples  
 다음 예제에서는 인라인 스키마를 사용 하 여 유효성을 검사 하 고 또한 유효성 검사 경고를 표시 하는 판독기를 만들려면를 지정 하는 설정을 보여 줍니다. 유효성 검사 이벤트 처리기를 사용 하 여 <xref:System.Xml.Schema.XmlSeverityType> 경고 및 오류를 구별 하는 열거형입니다.  
  
 [!code-csharp[XmlReaderSettings.IgnoreInlineSchema#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.IgnoreInlineSchema/CS/factory_rdr_cctor.cs#1)]
 [!code-vb[XmlReaderSettings.IgnoreInlineSchema#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.IgnoreInlineSchema/VB/factory_rdr_cctor.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ValidationFlags">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaValidationFlags ValidationFlags { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.Schema.XmlSchemaValidationFlags ValidationFlags" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.ValidationFlags" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidationFlags As XmlSchemaValidationFlags" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaValidationFlags ValidationFlags { System::Xml::Schema::XmlSchemaValidationFlags get(); void set(System::Xml::Schema::XmlSchemaValidationFlags value); };" />
      <MemberSignature Language="F#" Value="member this.ValidationFlags : System.Xml.Schema.XmlSchemaValidationFlags with get, set" Usage="System.Xml.XmlReaderSettings.ValidationFlags" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaValidationFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>스키마 유효성 검사 설정을 나타내는 값을 가져오거나 설정합니다. 이 설정은 스키마(<see langword="ValidationType.Schema" />로 설정된 <see cref="P:System.Xml.XmlReaderSettings.ValidationType" /> 속성) 유효성 검사를 하는 <see cref="T:System.Xml.XmlReader" /> 개체에 적용됩니다.</summary>
        <value>유효성 검사 옵션을 지정 하는 열거형 값의 비트 조합입니다. <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints" /> 및 <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.AllowXmlAttributes" />는 기본적으로 사용되고 <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema" />, <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation" /> 및 <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ReportValidationWarnings" />는 기본적으로 사용되지 않습니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> 개체의 <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> 및 <xref:System.Xml.XmlReaderSettings> 유효성 검사 플래그는 기본적으로 설정되지 않습니다. 이 플래그를 설정하면 <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> 개체의 <xref:System.Xml.XmlReaderSettings>를 사용하여 <xref:System.Xml.XmlReader>에서 인스턴스 문서에 나타난 스키마 위치를 확인할 수 있습니다. 경우는 <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> 개체가 `null`, 스키마 위치는 확인 되지 않습니다 경우에 합니다 <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> 및 <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> 유효성 검사 플래그를 설정 합니다.  
>   
>  문서의 유효성을 검사하는 동안 스키마를 추가하면 새 형식이 추가되고 해당 문서에 대한 유효성 검사 결과가 달라질 수 있습니다. 결과적으로 외부 스키마는 신뢰할 수 있는 소스에서만 확인해야 합니다.  
>   
>  사용 하지 않도록 설정 된 <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints> 유효성 검사, 신뢰할 수 없는 큰 XML 문서의 많은 부분을 통해 id 제약 조건이 있는 스키마에 대해 가용성 우선 시나리오에서 설명 하는 경우 (기본적으로 사용) 플래그는 것이 좋습니다.  
  
   
  
## Examples  
 다음 예제에서는 인라인 XML 스키마에 대 한 XML 파일을 사용 하 여 유효성을 검사 합니다 <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> 설정 합니다. 유효성 검사 경고를 표시 하는 XML 판독기를 구성, sp 볼 수도 예상 되는 경고의 루트 요소에 합니다.  
  
 [!code-csharp[XmlReaderSettings.IgnoreInlineSchema#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.IgnoreInlineSchema/CS/factory_rdr_cctor.cs#1)]
 [!code-vb[XmlReaderSettings.IgnoreInlineSchema#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.IgnoreInlineSchema/VB/factory_rdr_cctor.vb#1)]  
  
## <a name="input"></a>입력  
 이 예제에서는 inlineSchema.xml 파일을 입력으로 사용합니다.  
  
 [!code-xml[XmlReaderSettings.IgnoreInlineSchema#3](~/samples/snippets/xml/VS_Snippets_Data/XmlReaderSettings.IgnoreInlineSchema/XML/inlineSchema.xml#3)]  
  
## <a name="output"></a>Output  
 경고:   일치 하는 스키마를 찾을 수 없습니다. 유효성 검사가 실행되지 않았습니다. 'root' 요소에 대한 스키마 정보를 찾을 수 없습니다.  
  
 유효성 검사 오류:   'XsdHeadCount:HeadCount' 요소에는 '부서' 잘못 된 자식 요소가 있습니다. 'ID'가 있어야 합니다."  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ValidationType">
      <MemberSignature Language="C#" Value="public System.Xml.ValidationType ValidationType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.ValidationType ValidationType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.ValidationType" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidationType As ValidationType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::ValidationType ValidationType { System::Xml::ValidationType get(); void set(System::Xml::ValidationType value); };" />
      <MemberSignature Language="F#" Value="member this.ValidationType : System.Xml.ValidationType with get, set" Usage="System.Xml.XmlReaderSettings.ValidationType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.ValidationType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Xml.XmlReader" />가 읽는 동안 유효성 검사 또는 형식 할당을 수행할지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>XmlReader가 판독 시 유효성 검사나 형식 할당을 수행하는지 여부를 나타내는 <see cref="T:System.Xml.ValidationType" /> 값 중 하나입니다. 기본값은 <see langword="ValidationType.None" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 <xref:System.Xml.ValidationType> 값입니다.  
  
> [!NOTE]
>  합니다 <xref:System.Xml.ValidationType.Auto> 및 <xref:System.Xml.ValidationType.XDR> 열거형 값은.NET Framework 버전 2.0에서에서 사용 되지 않습니다.  
  
|ValidationType|설명|  
|--------------------|-----------------|  
|`DTD`|유효성 검사는 문서 형식 정의 (DTD)를 사용 하 여 수행 됩니다. **참고:**  합니다 <xref:System.Xml.XmlReaderSettings.DtdProcessing%2A> 속성 설정 해야 <xref:System.Xml.DtdProcessing.Parse>합니다.|  
|`None`|<xref:System.Xml.XmlReader> 모든 형식 할당을 수행 하거나 데이터의 유효성을 검사 하지 않습니다.|  
|`Schema`|유효성 검사 및 형식 할당은 XML 스키마 정의 언어 (XSD) 스키마를 사용 하 여 수행 됩니다. 판독기는 다음을 사용 하 여 XML 스키마에 액세스 합니다.<br /><br /> -사용 된 <xref:System.Xml.XmlReaderSettings.Schemas%2A> 속성에 액세스를 <xref:System.Xml.Schema.XmlSchemaSet> 이 판독기와 연결 된 개체입니다.<br />-XML 인스턴스 문서에 포함 된 인라인 스키마를 사용 합니다. (의 <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> 옵션이 설정 되어야 합니다.)<br />--스키마 위치 힌트에서 지정한 XML 스키마를 사용 하는 중 (`xsi:schemaLocation` 또는 `xsi:noNamespaceSchemaLocation` 특성) XML 인스턴스 문서에서 찾을 수 있습니다. (의 <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> 옵션이 설정 되어야 합니다.)|  
  
   
  
## Examples  
 다음 예제에서 저장 된 스키마를 사용 하 여 유효성을 검사 합니다 <xref:System.Xml.Schema.XmlSchemaSet>합니다.  
  
 [!code-cpp[XmlReader_Validate_SchemaSet#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReader_Validate_SchemaSet/CPP/XmlReader_Validate_SchemaSet.cpp#1)]
 [!code-csharp[XmlReader_Validate_SchemaSet#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader_Validate_SchemaSet/CS/validschemaset.cs#1)]
 [!code-vb[XmlReader_Validate_SchemaSet#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader_Validate_SchemaSet/VB/validschemaset.vb#1)]  
  
 이 샘플에서는 다음 입력된 파일 사용:  
  
 `booksSchemaFail.xml`  
  
 [!code-xml[XmlReader_Validate_SchemaSet#2](~/samples/snippets/xml/VS_Snippets_Data/XmlReader_Validate_SchemaSet/XML/booksschemafail.xml#2)]  
  
 `books.xsd`  
  
 [!code-xml[XmlReader_Validate_SchemaSet#3](~/samples/snippets/xml/VS_Snippets_Data/XmlReader_Validate_SchemaSet/XML/books.xsd#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaValidationFlags" />
      </Docs>
    </Member>
    <Member MemberName="XmlResolver">
      <MemberSignature Language="C#" Value="public System.Xml.XmlResolver XmlResolver { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlResolver XmlResolver" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.XmlResolver" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlResolver As XmlResolver" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlResolver ^ XmlResolver {  void set(System::Xml::XmlResolver ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XmlResolver : System.Xml.XmlResolver" Usage="System.Xml.XmlReaderSettings.XmlResolver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlResolver</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>외부 문서에 액세스하는 데 사용할 <see cref="T:System.Xml.XmlResolver" />를 설정합니다.</summary>
        <value>외부 문서에 액세스하는 데 사용할 <see cref="T:System.Xml.XmlResolver" />입니다. 값을 <see langword="null" />로 설정하면 <see cref="T:System.Xml.XmlException" />가 외부 리소스에 액세스하려고 할 때 <see cref="T:System.Xml.XmlReader" />이 throw됩니다. 기본값은 자격 증명이 없는 새 <see cref="T:System.Xml.XmlUrlResolver" />입니다.  .NET Framework 4.5.2부터이 설정에 기본값은 <see langword="null" />합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.XmlResolver> 되을 찾거나 XML 인스턴스 문서를 열 또는 XML 인스턴스 문서에 참조 된 외부 리소스를 엽니다. 이 엔터티, DTD 또는 스키마에 포함할 수 있습니다. <xref:System.Xml.XmlResolver.Credentials%2A?displayProperty=nameWithType> 네트워크 인증에 필요한 자격 증명을 지정 하려면 속성을 사용할 수 있습니다.  
  
> [!IMPORTANT]
>  때문에 합니다 <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> 포함 될 수 있습니다 사용자 자격 증명과 같은 중요 한 정보가 주의 해야 캐싱 <xref:System.Xml.XmlReaderSettings> 개체를 전달 하는 경우 또는 <xref:System.Xml.XmlReaderSettings> 다른 하나는 구성 요소에서 개체입니다.  
>   
>  <xref:System.Xml.XmlSecureResolver> 외부 문서에 액세스 하는 데 사용 될 수 있습니다. <xref:System.Xml.XmlSecureResolver> 클래스의 다른 구현을 보호 하는 데 도움이 <xref:System.Xml.XmlResolver> 래핑하여를 <xref:System.Xml.XmlResolver> 개체 및 리소스를 제한 하는 기본 <xref:System.Xml.XmlResolver> 에 액세스할 수 합니다.  
>   
>  <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> 개체의 <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> 및 <xref:System.Xml.XmlReaderSettings> 유효성 검사 플래그는 기본적으로 설정되지 않습니다. 이 플래그를 설정하면 <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> 개체의 <xref:System.Xml.XmlReaderSettings>를 사용하여 <xref:System.Xml.XmlReader>에서 인스턴스 문서에 나타난 스키마 위치를 확인할 수 있습니다. 경우는 <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> 개체가 `null`, 스키마 위치는 확인 되지 않습니다 경우에 합니다 <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> 및 <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> 유효성 검사 플래그를 설정 합니다.  
>   
>  문서의 유효성을 검사하는 동안 스키마를 추가하면 새 형식이 추가되고 해당 문서에 대한 유효성 검사 결과가 달라질 수 있습니다. 결과적으로 외부 스키마는 신뢰할 수 있는 소스에서만 확인해야 합니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Xml.XmlReader> 를 사용 하는 <xref:System.Xml.XmlSecureResolver> 기본 자격 증명을 사용 하 여 합니다.  
  
 [!code-csharp[XmlReader.Create#10](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader.Create/CS/XmlReader_Create.cs#10)]
 [!code-vb[XmlReader.Create#10](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader.Create/VB/XmlReader_Create.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>