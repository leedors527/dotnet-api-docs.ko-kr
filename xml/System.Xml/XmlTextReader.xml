<Type Name="XmlTextReader" FullName="System.Xml.XmlTextReader">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9c3a10e5c970de7b67995d6c4627beb9f91f457d" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="64996377" /></Metadata><TypeSignature Language="C#" Value="public class XmlTextReader : System.Xml.XmlReader, System.Xml.IXmlLineInfo, System.Xml.IXmlNamespaceResolver" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlTextReader extends System.Xml.XmlReader implements class System.Xml.IXmlLineInfo, class System.Xml.IXmlNamespaceResolver" />
  <TypeSignature Language="DocId" Value="T:System.Xml.XmlTextReader" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlTextReader&#xA;Inherits XmlReader&#xA;Implements IXmlLineInfo, IXmlNamespaceResolver" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlTextReader : System::Xml::XmlReader, System::Xml::IXmlLineInfo, System::Xml::IXmlNamespaceResolver" />
  <TypeSignature Language="F#" Value="type XmlTextReader = class&#xA;    inherit XmlReader&#xA;    interface IXmlLineInfo&#xA;    interface IXmlNamespaceResolver" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Xml.XmlReader</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Xml.IXmlLineInfo</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Xml.IXmlNamespaceResolver</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netcore-2.2;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1">
      <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>빠르고, 캐시되지 않으며 앞으로만 이동 가능한 XML 데이터 액세스를 제공하는 판독기를 나타냅니다.  
  
.NET Framework 2.0부터 <see cref="T:System.Xml.XmlReader" /> 클래스를 대신 사용하는 것이 좋습니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
 <xref:System.Xml.XmlTextReader> 스트림의 XML 데이터에 대 한 정방향 전용, 읽기 전용 액세스를 제공합니다. 현재 노드란 판독기가 배치된 노드를 말합니다. 읽기 방법 중 하나를 사용 하는 판독기 및 속성은 현재 노드의 값을 반영 합니다.  
  
 이 클래스는 구현 <xref:System.Xml.XmlReader> 는 W3C XML Extensible Markup Language () 1.0 및 Namespaces in XML 권장 사항 준수 합니다. `XmlTextReader` 다음 기능을 제공 합니다.  
  
-   올바른 형식의 xml 규칙을 적용 합니다.  
  
-   `XmlTextReader` 데이터 유효성 검사를 제공 하지 않습니다.  
  
-   검사 `DocumentType` 노드가 제대로 구성 되어 있습니다. `XmlTextReader` 올바른 형식 인지에 대 한 DTD를 확인 하지만 DTD를 사용 하 여 유효성을 검사 하지 않습니다.  
  
-   노드에 대 한 위치 <xref:System.Xml.XmlTextReader.NodeType%2A> 됩니다 `XmlNodeType.EntityReference`, 비어 있는 단일 `EntityReference` 노드가 반환 됩니다 (즉,는 <xref:System.Xml.XmlTextReader.Value%2A> 속성은 `String.Empty`).  
  
> [!NOTE]
>  DTD의 엔터티에 대 한 실제 선언을 `Entity` 노드. 호출 될 데이터에이 노드를 참조할 때 `EntityReference` 노드.  
  
-   기본 특성을 확장 하지 않습니다.  
  
 때문에 `XmlTextReader` 데이터 유효성 검사를 위해 필요한 추가 검사를 수행 하지 않습니다 빠른 제대로 파서를 제공 합니다.  
  
 데이터 유효성 검사를 수행 하려면 유효성 검사를 사용 하 여 <xref:System.Xml.XmlReader>입니다.  
  
 XML 데이터를 읽을 수는 <xref:System.Xml.XmlDocument>를 사용 하 여 <xref:System.Xml.XmlNodeReader>입니다.  
  
 `XmlTextReader` throw는 <xref:System.Xml.XmlException> xml 구문 분석 오류입니다. 예외가 throw 된 후 판독기의 상태 예측 가능한 아닙니다. 예를 들어, 보고 된 노드 유형을 현재 노드의 실제 노드 형식과 다를 수 있습니다. 사용 된 <xref:System.Xml.XmlTextReader.ReadState%2A> 판독기가 오류 상태 인지 여부를 확인할 속성입니다.  
  
## <a name="security-considerations"></a>보안 고려 사항  
 다음은 사용 하는 경우를 고려해 야 할 사항은 <xref:System.Xml.XmlTextReader> 클래스입니다.  
  
-   Throw 된 예외는 <xref:System.Xml.XmlTextReader> 애플리케이션에 버블링 하지 않을 경로 정보가 노출 될 수 있습니다. 애플리케이션에서는 예외를 캐치하고 적절히 처리해야 합니다.  
  
-   DTD 처리는 기본적으로 활성화되어 있습니다. 서비스 거부 문제 또는 신뢰할 수 없는 소스를 사용 하 여 처리할 경우 염려 하는 경우 DTD 처리는 사용 하지 않도록 설정 합니다. 설정 된 <xref:System.Xml.XmlTextReader.DtdProcessing%2A> 속성을 <xref:System.Xml.DtdProcessing.Prohibit> DTD 처리를 사용 하지 않도록 설정 합니다.  
  
     DTD 처리를 활성화하는 경우 <xref:System.Xml.XmlSecureResolver>를 사용하여 <xref:System.Xml.XmlTextReader>가 액세스할 수 있는 리소스를 제한할 수 있습니다. 또한 애플리케이션을 직접 디자인하여 XML 처리에 필요한 메모리 및 시간을 제한할 수 있습니다. 예를 들어, ASP.NET 애플리케이션에서 시간 제한을 구성합니다.  
  
-   XML 데이터가 DTD 파일 등의 외부 리소스에 대 한 참조를 포함할 수 있습니다. 기본적으로 외부 리소스는 사용자 자격 증명 없이 <xref:System.Xml.XmlUrlResolver> 개체를 사용하여 확인됩니다. 이러한 경우 다음 중 하나를 수행하여 보안을 강화할 수 있습니다.  
  
    -   <xref:System.Xml.XmlTextReader> 속성을 <xref:System.Xml.XmlTextReader.XmlResolver%2A> 개체로 설정하여 <xref:System.Xml.XmlSecureResolver>에서 액세스 가능한 리소스를 제한합니다.  
  
    -   <xref:System.Xml.XmlReader> 속성을 <xref:System.Xml.XmlTextReader.XmlResolver%2A>로 설정하여 `null`가 모든 외부 리소스를 열 수 없도록 하십시오.  
  
-   XML 데이터에는 처리하는 데 시간이 많이 걸리는 수많은 특성, 네임스페이스 선언, 중첩된 요소 등이 포함될 수 있습니다. 로 전송 되는 입력의 크기를 제한 하는 <xref:System.Xml.XmlTextReader>사용자 지정 IStream 구현을 만들고 제공 합니다 <xref:System.Xml.XmlTextReader>합니다.  
  
-   <xref:System.Xml.XmlReader.ReadValueChunk%2A> 메서드를 사용 하 여 데이터의 큰 스트림을 처리할 수 있습니다. 이 메서드는 전체 값에 대한 단일 문자열을 할당하는 대신 한 번에 적은 수의 문자를 읽습니다.  
  
-   기본적으로 일반 엔터티는 확장되지 않습니다. <xref:System.Xml.XmlTextReader.ResolveEntity%2A> 메서드를 호출해야 일반 엔터티가 확장됩니다.  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>이 클래스는 상속 요청이 있습니다. 완전 신뢰에서 상속 해야 <see langword="XmlTextReader" />합니다.</para></block>
    <related type="Article" href="~/docs/standard/data/xml/index.md">XML 문서 및 데이터</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Xml.XmlTextReader" />의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XmlTextReader ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; XmlTextReader();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see langword="XmlTextReader" />의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextReader (System.IO.Stream input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (input As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextReader(System::IO::Stream ^ input);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextReader : System.IO.Stream -&gt; System.Xml.XmlTextReader" Usage="new System.Xml.XmlTextReader input" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="input" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="input">읽을 XML 데이터를 포함하고 있는 스트림입니다.</param>
        <summary>지정된 스트림을 사용하여 <see cref="T:System.Xml.XmlTextReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
 합니다 <xref:System.Xml.XmlTextReader> 스트림을 사용 디코딩합니다 <xref:System.Text.Encoding?displayProperty=nameWithType>합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" />가 <see langword="null" />인 경우</exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextReader (System.IO.TextReader input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextReader input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.IO.TextReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (input As TextReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextReader(System::IO::TextReader ^ input);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextReader : System.IO.TextReader -&gt; System.Xml.XmlTextReader" Usage="new System.Xml.XmlTextReader input" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="input" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="input">읽을 XML 데이터를 포함하는 <see langword="TextReader" />입니다.</param>
        <summary>지정된 <see cref="T:System.Xml.XmlTextReader" />를 사용하여 <see cref="T:System.IO.TextReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
 있다고 가정 합니다 `TextReader` 가 이미 올바른 인코딩으로 설정 합니다. 이 다중 파트 MIME 시나리오에서 스트림에서 몇 가지 작업을 이미 읽은 하는 클라이언트에서 사용 됩니다.  
  
   
  
## Examples  
 다음 예제에서는 XML 문자열을 로드 합니다 `XmlTextReader` 를 사용 하 여 개체를 <xref:System.IO.StringReader> 클래스입니다.  
  
 [!code-cpp[XmlTextReader.cctor1#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlTextReader.cctor1/CPP/rdrcctor1.cpp#1)]
 [!code-csharp[XmlTextReader.cctor1#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlTextReader.cctor1/CS/rdrcctor1.cs#1)]
 [!code-vb[XmlTextReader.cctor1#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlTextReader.cctor1/VB/rdrcctor1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextReader (string url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (url As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextReader(System::String ^ url);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextReader : string -&gt; System.Xml.XmlTextReader" Usage="new System.Xml.XmlTextReader url" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="url">XML 데이터를 포함하는 파일의 URL입니다. <see cref="P:System.Xml.XmlTextReader.BaseURI" />는 이 값으로 설정됩니다.</param>
        <summary>지정된 파일을 사용하여 <see cref="T:System.Xml.XmlTextReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
 사용 하 여 파일 액세스 자격 증명을 요구 하는 리소스에 있으면는 <xref:System.Xml.XmlTextReader.XmlResolver%2A> 속성이 필요한 자격 증명을 지정 합니다.  
  
> [!NOTE]
>  버전 1.1에에서는 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], 코드에서 설정할 수 없습니다를 부분적으로 신뢰할 수 있는 `XmlResolver` 속성입니다. 만들려면이 문제를 해결은 <xref:System.Xml.XmlUrlResolver> 필요한 자격 증명을 사용 하 여 URI를 전달 합니다 <xref:System.Xml.XmlUrlResolver.GetEntity%2A?displayProperty=nameWithType> 메서드를 다음 구문 합니다 `XmlTextReader` 결과 사용 하 여 <xref:System.IO.Stream> 개체. 해결 방법은 다음 C# 코드에 설명 되어 있습니다.  
  
```csharp  
// Create a resolver with the necessary credentials.  
XmlUrlResolver resolver = new XmlUrlResolver();  
NetworkCredential nc = new NetworkCredential(SecurelyStoredUserName, SecurelyStoredPassword, SecurelyStoredDomain);  
resolver.Credentials = nc;   
// Get a Stream object containing the XML file.  
Uri myUri = new Uri ("http://myServer/data/books.xml");  
Stream s=(Stream)resolver.GetEntity(myUri, null, typeof(Stream));  
// Construct a reader using the Stream object.  
XmlTextReader reader = new XmlTextReader(s);  
```  
  
   
  
## Examples  
 다음 예제에서는 XML 파일을 읽고 각 노드를 표시 합니다.  
  
 [!code-cpp[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/VB/source.vb#1)]  
  
 이 예제에서는 파일을 사용 하 여 `items.xml`입력으로 합니다.  
  
 [!code-xml[Classic WebData XmlTextReader.Name Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">지정된 된 파일을 찾을 수 없습니다.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">파일 이름 또는 디렉터리의 일부를 찾을 수 없습니다.</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="url" />이 빈 문자열인 경우</exception>
        <exception cref="T:System.Net.WebException">원격 파일 이름을 확인할 수 없습니다.  
  
또는 
이 요청을 처리하는 동안 오류가 발생했습니다.</exception>
        <exception cref="T:System.UriFormatException"><paramref name="url" /> 경로는 유효한 URI가 아닙니다.</exception>
        <altmember cref="P:System.Xml.XmlTextReader.XmlResolver" />
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XmlTextReader (System.Xml.XmlNameTable nt);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlNameTable nt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.Xml.XmlNameTable)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (nt As XmlNameTable)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; XmlTextReader(System::Xml::XmlNameTable ^ nt);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextReader : System.Xml.XmlNameTable -&gt; System.Xml.XmlTextReader" Usage="new System.Xml.XmlTextReader nt" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="nt" Type="System.Xml.XmlNameTable" />
      </Parameters>
      <Docs>
        <param name="nt">사용할 <see langword="XmlNameTable" />입니다.</param>
        <summary>지정된 <see cref="T:System.Xml.XmlTextReader" />를 사용하여 <see cref="T:System.Xml.XmlNameTable" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextReader (System.IO.Stream input, System.Xml.XmlNameTable nt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream input, class System.Xml.XmlNameTable nt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNameTable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (input As Stream, nt As XmlNameTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextReader(System::IO::Stream ^ input, System::Xml::XmlNameTable ^ nt);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextReader : System.IO.Stream * System.Xml.XmlNameTable -&gt; System.Xml.XmlTextReader" Usage="new System.Xml.XmlTextReader (input, nt)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="input" Type="System.IO.Stream" />
        <Parameter Name="nt" Type="System.Xml.XmlNameTable" />
      </Parameters>
      <Docs>
        <param name="input">읽을 XML 데이터를 포함하고 있는 스트림입니다.</param>
        <param name="nt">사용할 <see langword="XmlNameTable" />입니다.</param>
        <summary>지정된 스트림, <see cref="T:System.Xml.XmlNameTable" />를 사용하여 <see cref="T:System.Xml.XmlTextReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
 합니다 <xref:System.Xml.XmlTextReader> 스트림을 사용 디코딩합니다 <xref:System.Text.Encoding?displayProperty=nameWithType>합니다.  
  
 이름 테이블을 지정 하는 경우이 생성자는 해당 테이블에 이미 정의 된 이름을 사용 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException">합니다 <paramref name="input" /> 나 <paramref name="nt" /> 값은 <see langword="null" />합니다.</exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextReader (System.IO.TextReader input, System.Xml.XmlNameTable nt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextReader input, class System.Xml.XmlNameTable nt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.IO.TextReader,System.Xml.XmlNameTable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (input As TextReader, nt As XmlNameTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextReader(System::IO::TextReader ^ input, System::Xml::XmlNameTable ^ nt);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextReader : System.IO.TextReader * System.Xml.XmlNameTable -&gt; System.Xml.XmlTextReader" Usage="new System.Xml.XmlTextReader (input, nt)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="input" Type="System.IO.TextReader" />
        <Parameter Name="nt" Type="System.Xml.XmlNameTable" />
      </Parameters>
      <Docs>
        <param name="input">읽을 XML 데이터를 포함하는 <see langword="TextReader" />입니다.</param>
        <param name="nt">사용할 <see langword="XmlNameTable" />입니다.</param>
        <summary>지정된 <see cref="T:System.Xml.XmlTextReader" /> 및 <see cref="T:System.IO.TextReader" />를 사용하여 <see cref="T:System.Xml.XmlNameTable" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
 있다고 가정 합니다 `TextReader` 가 이미 올바른 인코딩으로 설정 합니다. 이 다중 파트 MIME 시나리오에서 스트림에서 몇 가지 작업을 이미 읽은 하는 클라이언트에서 사용 됩니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException"><paramref name="nt" /> 값이 <see langword="null" />입니다.</exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextReader (string url, System.IO.Stream input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string url, class System.IO.Stream input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (url As String, input As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextReader(System::String ^ url, System::IO::Stream ^ input);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextReader : string * System.IO.Stream -&gt; System.Xml.XmlTextReader" Usage="new System.Xml.XmlTextReader (url, input)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="input" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="url">외부 리소스를 확인하는 데 사용할 URL입니다. <see cref="P:System.Xml.XmlTextReader.BaseURI" />는 이 값으로 설정됩니다.</param>
        <param name="input">읽을 XML 데이터를 포함하고 있는 스트림입니다.</param>
        <summary>지정된 URL과 스트림을 사용하여 <see cref="T:System.Xml.XmlTextReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" />가 <see langword="null" />인 경우</exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextReader (string url, System.IO.TextReader input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string url, class System.IO.TextReader input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.TextReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (url As String, input As TextReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextReader(System::String ^ url, System::IO::TextReader ^ input);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextReader : string * System.IO.TextReader -&gt; System.Xml.XmlTextReader" Usage="new System.Xml.XmlTextReader (url, input)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="input" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="url">외부 리소스를 확인하는 데 사용할 URL입니다. <see cref="P:System.Xml.XmlTextReader.BaseURI" />는 이 값으로 설정됩니다.</param>
        <param name="input">읽을 XML 데이터를 포함하는 <see langword="TextReader" />입니다.</param>
        <summary>지정된 URL과 <see cref="T:System.IO.TextReader" />를 사용하여 <see cref="T:System.Xml.XmlTextReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
 있다고 가정 합니다 `TextReader` 가 이미 올바른 인코딩으로 설정 합니다. 이 다중 파트 MIME 시나리오에서 스트림에서 몇 가지 작업을 이미 읽은 하는 클라이언트에서 사용 됩니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextReader (string url, System.Xml.XmlNameTable nt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string url, class System.Xml.XmlNameTable nt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNameTable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (url As String, nt As XmlNameTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextReader(System::String ^ url, System::Xml::XmlNameTable ^ nt);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextReader : string * System.Xml.XmlNameTable -&gt; System.Xml.XmlTextReader" Usage="new System.Xml.XmlTextReader (url, nt)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="nt" Type="System.Xml.XmlNameTable" />
      </Parameters>
      <Docs>
        <param name="url">읽을 XML 데이터를 포함하는 파일의 URL입니다.</param>
        <param name="nt">사용할 <see langword="XmlNameTable" />입니다.</param>
        <summary>지정된 파일과 <see cref="T:System.Xml.XmlNameTable" />을 사용하여 <see cref="T:System.Xml.XmlTextReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException"><paramref name="nt" /> 값이 <see langword="null" />입니다.</exception>
        <exception cref="T:System.IO.FileNotFoundException">지정된 된 파일을 찾을 수 없습니다.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">파일 이름 또는 디렉터리의 일부를 찾을 수 없습니다.</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="url" />이 빈 문자열인 경우</exception>
        <exception cref="T:System.Net.WebException">원격 파일 이름을 확인할 수 없습니다.  
  
또는 
이 요청을 처리하는 동안 오류가 발생했습니다.</exception>
        <exception cref="T:System.UriFormatException"><paramref name="url" /> 경로는 유효한 URI가 아닙니다.</exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextReader (System.IO.Stream xmlFragment, System.Xml.XmlNodeType fragType, System.Xml.XmlParserContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream xmlFragment, valuetype System.Xml.XmlNodeType fragType, class System.Xml.XmlParserContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNodeType,System.Xml.XmlParserContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (xmlFragment As Stream, fragType As XmlNodeType, context As XmlParserContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextReader(System::IO::Stream ^ xmlFragment, System::Xml::XmlNodeType fragType, System::Xml::XmlParserContext ^ context);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextReader : System.IO.Stream * System.Xml.XmlNodeType * System.Xml.XmlParserContext -&gt; System.Xml.XmlTextReader" Usage="new System.Xml.XmlTextReader (xmlFragment, fragType, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="xmlFragment" Type="System.IO.Stream" />
        <Parameter Name="fragType" Type="System.Xml.XmlNodeType" />
        <Parameter Name="context" Type="System.Xml.XmlParserContext" />
      </Parameters>
      <Docs>
        <param name="xmlFragment">구문 분석할 XML 조각을 포함하는 스트림입니다.</param>
        <param name="fragType">XML 조각의 <see cref="T:System.Xml.XmlNodeType" />입니다. 또한 조각에 포함되는 사항을 결정합니다. 아래 표를 참조하세요.</param>
        <param name="context"><paramref name="xmlFragment" />가 구문 분석될 <see cref="T:System.Xml.XmlParserContext" />입니다. 사용할 <see cref="T:System.Xml.XmlNameTable" />, 인코딩, 네임스페이스 범위, 현재 <c>xml:lang</c> 및 <c>xml:space</c> 범위가 포함됩니다.</param>
        <summary>지정된 스트림, <see cref="T:System.Xml.XmlNodeType" />, <see cref="T:System.Xml.XmlParserContext" />를 사용하여 <see cref="T:System.Xml.XmlTextReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
 이 생성자는 XML 조각으로 지정 된 문자열을 구문 분석 합니다. XML 조각 요소 또는 특성 이면 올바른 형식의 XML 문서에 대 한 루트 수준 규칙을 무시할 수 있습니다.  
  
 다음 표에 대 한 유효한 값 `fragType`합니다.  
  
|XmlNodeType|조각에 포함 됩니다.|  
|-----------------|--------------------------|  
|`Element`|모든 유효한 요소 내용 (예를 들어, 요소, 주석, 처리 명령, CDATA 섹션, 텍스트 및 엔터티 참조의 모든 조합)입니다.<br /><br /> XML 선언을 제공할 수도 있습니다. 설정 하는 대신 XML 조각에 대 한 인코딩을 지정할 수 있습니다이 <xref:System.Xml.XmlParserContext> 개체입니다.|  
|`Attribute`|값 특성 (따옴표 내 부분)입니다.|  
|`Document`|전체 XML 문서의 내용입니다. 이 문서 수준 규칙을 적용 합니다.|  
  
 판독기는 스트림의 인코딩을 결정 하려면 다음을 사용 합니다.  
  
1.  확인 된 <xref:System.Xml.XmlParserContext.Encoding%2A?displayProperty=nameWithType> 인코딩을 결정 하는 속성입니다.  
  
2.  경우는 `Encoding` 속성은 `null`, 판독기가 스트림의 시작 부분에서 바이트 순서 표시를 위한 확인 합니다.  
  
3.  경우는 `Encoding` 속성은 `null`, 바이트 순서 표시가 없는 발견 되 고 판독기 스트림이 u t F-8에서 인코딩된 것으로 가정 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException"><paramref name="fragType" /> 이 요소, 특성 또는 문서 <see langword="XmlNodeType" />합니다.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="xmlFragment" />가 <see langword="null" />인 경우</exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextReader (string url, System.IO.Stream input, System.Xml.XmlNameTable nt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string url, class System.IO.Stream input, class System.Xml.XmlNameTable nt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.Stream,System.Xml.XmlNameTable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (url As String, input As Stream, nt As XmlNameTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextReader(System::String ^ url, System::IO::Stream ^ input, System::Xml::XmlNameTable ^ nt);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextReader : string * System.IO.Stream * System.Xml.XmlNameTable -&gt; System.Xml.XmlTextReader" Usage="new System.Xml.XmlTextReader (url, input, nt)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="input" Type="System.IO.Stream" />
        <Parameter Name="nt" Type="System.Xml.XmlNameTable" />
      </Parameters>
      <Docs>
        <param name="url">외부 리소스를 확인하는 데 사용할 URL입니다. <see cref="P:System.Xml.XmlTextReader.BaseURI" />는 이 값으로 설정됩니다. <paramref name="url" />이<see langword="null" />이면 <see langword="BaseURI" />가 <see langword="String.Empty" />로 설정됩니다.</param>
        <param name="input">읽을 XML 데이터를 포함하고 있는 스트림입니다.</param>
        <param name="nt">사용할 <see langword="XmlNameTable" />입니다.</param>
        <summary>지정된 URL, 스트림 및 <see cref="T:System.Xml.XmlNameTable" />을 사용하여 <see cref="T:System.Xml.XmlTextReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException">합니다 <paramref name="input" /> 나 <paramref name="nt" /> 값은 <see langword="null" />합니다.</exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextReader (string url, System.IO.TextReader input, System.Xml.XmlNameTable nt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string url, class System.IO.TextReader input, class System.Xml.XmlNameTable nt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.TextReader,System.Xml.XmlNameTable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (url As String, input As TextReader, nt As XmlNameTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextReader(System::String ^ url, System::IO::TextReader ^ input, System::Xml::XmlNameTable ^ nt);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextReader : string * System.IO.TextReader * System.Xml.XmlNameTable -&gt; System.Xml.XmlTextReader" Usage="new System.Xml.XmlTextReader (url, input, nt)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="input" Type="System.IO.TextReader" />
        <Parameter Name="nt" Type="System.Xml.XmlNameTable" />
      </Parameters>
      <Docs>
        <param name="url">외부 리소스를 확인하는 데 사용할 URL입니다. <see cref="P:System.Xml.XmlTextReader.BaseURI" />는 이 값으로 설정됩니다. <paramref name="url" />이<see langword="null" />이면 <see langword="BaseURI" />가 <see langword="String.Empty" />로 설정됩니다.</param>
        <param name="input">읽을 XML 데이터를 포함하는 <see langword="TextReader" />입니다.</param>
        <param name="nt">사용할 <see langword="XmlNameTable" />입니다.</param>
        <summary>지정된 URL과 <see cref="T:System.IO.TextReader" /> <see cref="T:System.Xml.XmlNameTable" />를 사용하여 <see cref="T:System.Xml.XmlTextReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
 있다고 가정 합니다 `TextReader` 가 이미 올바른 인코딩으로 설정 합니다. 이 다중 파트 MIME 시나리오에서 스트림에서 몇 가지 작업을 이미 읽은 하는 클라이언트에서 사용 됩니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="nt" /> 값이 <see langword="null" />입니다.</exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextReader (string xmlFragment, System.Xml.XmlNodeType fragType, System.Xml.XmlParserContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string xmlFragment, valuetype System.Xml.XmlNodeType fragType, class System.Xml.XmlParserContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNodeType,System.Xml.XmlParserContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (xmlFragment As String, fragType As XmlNodeType, context As XmlParserContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextReader(System::String ^ xmlFragment, System::Xml::XmlNodeType fragType, System::Xml::XmlParserContext ^ context);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextReader : string * System.Xml.XmlNodeType * System.Xml.XmlParserContext -&gt; System.Xml.XmlTextReader" Usage="new System.Xml.XmlTextReader (xmlFragment, fragType, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="xmlFragment" Type="System.String" />
        <Parameter Name="fragType" Type="System.Xml.XmlNodeType" />
        <Parameter Name="context" Type="System.Xml.XmlParserContext" />
      </Parameters>
      <Docs>
        <param name="xmlFragment">구문 분석할 XML 조각을 포함하는 문자열입니다.</param>
        <param name="fragType">XML 조각의 <see cref="T:System.Xml.XmlNodeType" />입니다. 또한 조각 문자열에 포함되는 사항을 결정합니다. 아래 표를 참조하세요.</param>
        <param name="context"><paramref name="xmlFragment" />가 구문 분석될 <see cref="T:System.Xml.XmlParserContext" />입니다. 사용할 <see cref="T:System.Xml.XmlNameTable" />, 인코딩, 네임스페이스 범위, 현재 <c>xml:lang</c> 및 <c>xml:space</c> 범위가 포함됩니다.</param>
        <summary>지정된 문자열, <see cref="T:System.Xml.XmlNodeType" />, <see cref="T:System.Xml.XmlParserContext" />를 사용하여 <see cref="T:System.Xml.XmlTextReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
 이 생성자는 XML 조각으로 지정 된 문자열을 구문 분석 합니다. XML 조각 요소 또는 특성 이면 올바른 형식의 XML 문서에 대 한 루트 수준 규칙을 무시할 수 있습니다. 이 생성자에서 반환 된 문자열을 처리할 수 <xref:System.Xml.XmlReader.ReadInnerXml%2A>입니다.  
  
 다음 표에 대 한 유효한 값 `fragType` 판독기 다른 노드 형식 구문 분석 하는 방법 및 합니다.  
  
|XmlNodeType|조각에 포함 됩니다.|  
|-----------------|--------------------------|  
|요소|모든 유효한 요소 내용 (예를 들어, 요소, 주석, 처리 명령, CDATA 섹션, 텍스트 및 엔터티 참조의 모든 조합)입니다.<br /><br /> XML 선언을 제공할 수도 있습니다. 설정 하는 대신 XML 조각에 대 한 인코딩을 지정할 수 있습니다이 <xref:System.Xml.XmlParserContext> 개체입니다.|  
|특성|값 특성 (따옴표 내 부분)입니다.|  
|문서|전체 XML 문서의 내용입니다. 이 문서 수준 규칙을 적용 합니다.|  
  
   
  
## Examples  
 다음 예제에서는 XML 조각을 구문 분석합니다. 사용 하 여는 `XmlParserContext` 고 <xref:System.Xml.XmlNamespaceManager> 네임 스페이스 확인을 처리할 수 있습니다.  
  
 [!code-cpp[XmlTextReader.Cctor#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlTextReader.Cctor/CPP/readfrag.cpp#1)]
 [!code-csharp[XmlTextReader.Cctor#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlTextReader.Cctor/CS/readfrag.cs#1)]
 [!code-vb[XmlTextReader.Cctor#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlTextReader.Cctor/VB/readfrag.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException"><paramref name="fragType" /> 아닙니다를 <see langword="Element" />, <see langword="Attribute" />, 또는 <see langword="Document" /> <see langword="XmlNodeType" />합니다.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="xmlFragment" />가 <see langword="null" />인 경우</exception>
        <altmember cref="T:System.Xml.XmlParserContext" />
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="AttributeCount">
      <MemberSignature Language="C#" Value="public override int AttributeCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AttributeCount" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.AttributeCount" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property AttributeCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int AttributeCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.AttributeCount : int" Usage="System.Xml.XmlTextReader.AttributeCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 노드의 특성 수를 가져옵니다.</summary>
        <value>현재 노드에 포함된 특성의 수입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
 이 속성이 관련이 `Element`, `DocumentType` 및 `XmlDeclaration` 노드만 있습니다. (다른 노드 형식 특성이 없습니다.)  
  
   
  
## Examples  
 다음 예에서는 현재 노드의 모든 특성을 표시합니다.  
  
 [!code-cpp[Classic WebData XmlTextReader.MoveToElement Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToElement Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.MoveToElement Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToElement Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.MoveToElement Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToElement Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="BaseURI">
      <MemberSignature Language="C#" Value="public override string BaseURI { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BaseURI" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.BaseURI" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property BaseURI As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ BaseURI { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseURI : string" Usage="System.Xml.XmlTextReader.BaseURI" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 노드의 기본 URI를 가져옵니다.</summary>
        <value>현재 노드의 기본 URI입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
 네트워크에 연결 된 XML 문서를 다양 한 W3C 표준 포함 메커니즘을 사용 하 여 집계 데이터의 청크 이루어집니다 및 서로 다른 위치에서 제공 되는 노드를 포함 합니다. DTD 엔터티 예가이 있고이 Dtd에 제한 되지 않습니다. 기본 URI 알려 이러한 노드를 가져온 위치입니다. 반환 되는 노드에 대 한 기본 URI 인지 (예를 들어, 구문 분석 된 경우 메모리 내 문자열에서), `String.Empty` 반환 됩니다.  
  
   
  
## Examples  
 다음 예제에서는 각 노드에 대 한 기본 URI를 표시합니다.  
  
 [!code-cpp[Classic WebData XmlTextReader.BaseURI Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.BaseURI Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.BaseURI Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.BaseURI Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.BaseURI Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.BaseURI Example/VB/source.vb#1)]  
  
 이 예제에서는 파일을 사용 하 여 `baseuri.xml`입력으로 합니다.  
  
 [!code-xml[Classic WebData XmlTextReader.BaseURI Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.BaseURI Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="CanReadBinaryContent">
      <MemberSignature Language="C#" Value="public override bool CanReadBinaryContent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanReadBinaryContent" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.CanReadBinaryContent" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanReadBinaryContent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanReadBinaryContent { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanReadBinaryContent : bool" Usage="System.Xml.XmlTextReader.CanReadBinaryContent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Xml.XmlTextReader" />가 이진 콘텐츠 읽기 메서드를 구현하는지를 나타내는 값을 가져옵니다.</summary>
        <value>이진 콘텐츠 읽기 메서드를 구현하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. <see cref="T:System.Xml.XmlTextReader" /> 클래스는 항상 <see langword="true" />를 반환합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
 이진 콘텐츠 읽기 메서드를 포함 합니다 <xref:System.Xml.XmlTextReader.ReadContentAsBase64%2A>, <xref:System.Xml.XmlTextReader.ReadContentAsBinHex%2A>를 <xref:System.Xml.XmlTextReader.ReadElementContentAsBase64%2A>, 및 <xref:System.Xml.XmlTextReader.ReadElementContentAsBinHex%2A> 메서드.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="CanReadValueChunk">
      <MemberSignature Language="C#" Value="public override bool CanReadValueChunk { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanReadValueChunk" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.CanReadValueChunk" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanReadValueChunk As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanReadValueChunk { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanReadValueChunk : bool" Usage="System.Xml.XmlTextReader.CanReadValueChunk" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Xml.XmlTextReader" />가 <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> 메서드를 구현하는지를 나타내는 값을 가져옵니다.</summary>
        <value><see cref="T:System.Xml.XmlTextReader" />가 <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> 메서드를 구현하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. <see cref="T:System.Xml.XmlTextReader" /> 클래스는 항상 <see langword="false" />를 반환합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
 합니다 <xref:System.Xml.XmlTextReader> throw를 <xref:System.NotSupportedException> 경우는 <xref:System.Xml.XmlReader.ReadValueChunk%2A> 메서드가 호출 됩니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="CanResolveEntity">
      <MemberSignature Language="C#" Value="public override bool CanResolveEntity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanResolveEntity" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.CanResolveEntity" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanResolveEntity As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanResolveEntity { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanResolveEntity : bool" Usage="System.Xml.XmlTextReader.CanResolveEntity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 판독기가 엔터티를 구문 분석하고 확인할 수 있는지를 나타내는 값을 가져옵니다.</summary>
        <value>판독기가 엔터티를 구문 분석하고 확인할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. <see langword="XmlTextReader" /> 클래스는 항상 <see langword="true" />를 반환합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
 이 변경 내용에 [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)] 릴리스 합니다. 이전 버전에서의 `XmlTextReader` 클래스 엔터티를 확인할 수 없습니다 및 `CanResolveEntity` 항상 반환 `false`합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="override this.Close : unit -&gt; unit" Usage="xmlTextReader.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="P:System.Xml.XmlReader.ReadState" />를 <see langword="Closed" />로 변경합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
 이 메서드는 또한 읽는 동안 보유 한 모든 리소스를 해제 합니다. 이 판독기에 생성 된 스트림을 사용 하는 경우이 메서드 호출 `Close` 내부 스트림 합니다.  
  
 경우 `Close` 이미 호출 조치가 수행 됩니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Depth">
      <MemberSignature Language="C#" Value="public override int Depth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Depth" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.Depth" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Depth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int Depth { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Depth : int" Usage="System.Xml.XmlTextReader.Depth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>XML 문서에서 현재 노드의 수준을 가져옵니다.</summary>
        <value>XML 문서의 현재 노드 수준입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
   
  
## Examples  
 다음 예에서는 수준, 줄 번호 및 줄 위치를 포함 하 여 각 노드를 표시 합니다.  
  
 [!code-cpp[XmlTextReader.LineNum#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlTextReader.LineNum/CPP/readlinenum.cpp#1)]
 [!code-csharp[XmlTextReader.LineNum#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlTextReader.LineNum/CS/readlinenum.cs#1)]
 [!code-vb[XmlTextReader.LineNum#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlTextReader.LineNum/VB/readlinenum.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="DtdProcessing">
      <MemberSignature Language="C#" Value="public System.Xml.DtdProcessing DtdProcessing { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.DtdProcessing DtdProcessing" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.DtdProcessing" />
      <MemberSignature Language="VB.NET" Value="Public Property DtdProcessing As DtdProcessing" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::DtdProcessing DtdProcessing { System::Xml::DtdProcessing get(); void set(System::Xml::DtdProcessing value); };" />
      <MemberSignature Language="F#" Value="member this.DtdProcessing : System.Xml.DtdProcessing with get, set" Usage="System.Xml.XmlTextReader.DtdProcessing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.DtdProcessing</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Xml.DtdProcessing" /> 열거형을 가져오거나 설정합니다.</summary>
        <value><see cref="T:System.Xml.DtdProcessing" /> 열거형입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Xml.DtdProcessing> 열거형을 포함 합니다 <xref:System.Xml.DtdProcessing.Prohibit>, <xref:System.Xml.DtdProcessing.Ignore>, 및 <xref:System.Xml.DtdProcessing.Parse> 열거자입니다. <xref:System.Xml.DtdProcessing.Parse> 기본 동작이입니다. 합니다 <xref:System.Xml.XmlTextReader.DtdProcessing%2A> 속성을 대체 합니다 `ProhibitDTD` 속성 DOCTYPE 요소를 무시 하는 기능을 추가 합니다.  
  
> [!IMPORTANT]
>  경우는 <xref:System.Xml.XmlTextReader.DtdProcessing%2A> 속성이 <xref:System.Xml.DtdProcessing.Ignore?displayProperty=nameWithType>는 <xref:System.Xml.XmlTextReader> Dtd를 보고 하지 것입니다. 즉, DTD/DOCTYPE는 출력에서 손실 됩니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public System.Text.Encoding Encoding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding Encoding" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.Encoding" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Encoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Encoding ^ Encoding { System::Text::Encoding ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Encoding : System.Text.Encoding" Usage="System.Xml.XmlTextReader.Encoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>문서의 인코딩을 가져옵니다.</summary>
        <value>인코딩 값입니다. 인코딩 특성이 없는 경우 바이트 순서 표시가 없으면 기본값은 UTF-8로 설정됩니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
 때문에 <xref:System.Xml.XmlTextReader> 사용 하는 <xref:System.Text.Encoding?displayProperty=nameWithType> 클래스 `XmlTextReader` 도 해당 클래스에서 지 원하는 모든 인코딩을 지원 합니다. 이 예외는 u t F-7 EBCDIC 매핑하는 등 모든 인코딩을 `<?xml` 시퀀스 utf-8 이외의 다른 바이트 값입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EntityHandling">
      <MemberSignature Language="C#" Value="public System.Xml.EntityHandling EntityHandling { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.EntityHandling EntityHandling" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.EntityHandling" />
      <MemberSignature Language="VB.NET" Value="Public Property EntityHandling As EntityHandling" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::EntityHandling EntityHandling { System::Xml::EntityHandling get(); void set(System::Xml::EntityHandling value); };" />
      <MemberSignature Language="F#" Value="member this.EntityHandling : System.Xml.EntityHandling with get, set" Usage="System.Xml.XmlTextReader.EntityHandling" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.EntityHandling</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>판독기가 엔터티를 처리하는 방법을 지정하는 값을 가져오거나 설정합니다.</summary>
        <value><see cref="T:System.Xml.EntityHandling" /> 값 중 하나입니다. <see langword="EntityHandling" />을 지정하지 않으면 기본값이 <see langword="EntityHandling.ExpandCharEntities" />로 설정됩니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
 다음 후 신속 하 게 하 고 사용 결과에이 속성을 변경할 수 있습니다 <xref:System.Xml.XmlTextReader.Read%2A> 호출 합니다.  
  
 때 `EntityHandling` 로 설정 된 `ExpandCharEntities`, 특성 값만 부분적으로 정규화 됩니다. 판독기는 인접 한 엔터티 참조 노드 내용에서 독립적으로 각 개별 텍스트 노드를 정규화합니다.  
  
 엔터티 간의 차이점을 설명 하기 위해 처리 모드는 다음 XML을 고려 합니다.  
  
```  
<!DOCTYPE doc [<!ENTITY num "123">]>  
    <doc> &#65; &num; </doc>  
```  
  
 때 `EntityHandling` 로 설정 된 `ExpandEntities` "doc" 요소 노드 확장된 엔터티 텍스트를 사용 하 여 하나의 텍스트 노드를 포함 합니다.  
  
|깊이|노드 형식|이름|값|  
|-----------|---------------|----------|-----------|  
|1|`Text`||A 123|  
  
 때 `EntityHandling` 로 설정 된 `ExpandCharEntities`, 및 <xref:System.Xml.XmlTextReader.WhitespaceHandling%2A> 로 설정 되어 `Significant` 또는 `All`, 문자 엔터티를 확장 하 고 노드로 일반 엔터티를 반환 하는 "doc" 요소:  
  
|깊이|노드 형식|이름|값|  
|-----------|---------------|----------|-----------|  
|1|`Text`||A|  
|1|`EntityReference`|num||  
|1|`SignificantWhitespace`|||  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="EOF">
      <MemberSignature Language="C#" Value="public override bool EOF { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EOF" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.EOF" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property EOF As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool EOF { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.EOF : bool" Usage="System.Xml.XmlTextReader.EOF" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>판독기가 스트림의 맨 끝에 있는지를 나타내는 값을 가져옵니다.</summary>
        <value>판독기가 스트림의 맨 끝에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>특성의 값을 가져옵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAttribute">
      <MemberSignature Language="C#" Value="public override string GetAttribute (int i);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetAttribute(int32 i) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.GetAttribute(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetAttribute (i As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ GetAttribute(int i);" />
      <MemberSignature Language="F#" Value="override this.GetAttribute : int -&gt; string" Usage="xmlTextReader.GetAttribute i" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="i">특성의 인덱스입니다. 인덱스는 0부터 시작합니다. 첫 번째 특성의 인덱스는 0입니다.</param>
        <summary>지정된 인덱스가 있는 특성의 값을 가져옵니다.</summary>
        <returns>지정된 특성의 값을 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
 이 메서드는 판독기를 이동하지 않습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">합니다 <paramref name="i" /> 매개 변수는 보다 작거나 0 보다 크거나 같음 <see cref="P:System.Xml.XmlTextReader.AttributeCount" />합니다.</exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="GetAttribute">
      <MemberSignature Language="C#" Value="public override string GetAttribute (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetAttribute(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.GetAttribute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetAttribute (name As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ GetAttribute(System::String ^ name);" />
      <MemberSignature Language="F#" Value="override this.GetAttribute : string -&gt; string" Usage="xmlTextReader.GetAttribute name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">특성의 정규화된 이름입니다.</param>
        <summary>지정된 이름이 있는 특성의 값을 가져옵니다.</summary>
        <returns>지정된 특성의 값을 반환합니다. 특성이 없으면 <see langword="null" />이 반환됩니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
 이 메서드는 판독기를 이동하지 않습니다.  
  
 판독기가 위치에 `DocumentType` 노드를이 메서드는 PUBLIC과 SYSTEM 리터럴, 예를 들어, 가져오는 데 사용할 수 있습니다 `reader.GetAttribute("PUBLIC")`  
  
   
  
## Examples  
 다음 예제에서는 ISBN 특성의 값을 가져옵니다.  
  
 [!code-cpp[Classic WebData XmlTextReader.GetAttribute1 Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.GetAttribute1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.GetAttribute1 Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.GetAttribute1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.GetAttribute1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.GetAttribute1 Example/VB/source.vb#1)]  
  
 이 예제에서는 파일을 사용 하 여 `attrs.xml`입력으로 합니다.  
  
 [!code-xml[Classic WebData XmlTextReader.GetAttribute1 Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.GetAttribute1 Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="GetAttribute">
      <MemberSignature Language="C#" Value="public override string GetAttribute (string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetAttribute(string localName, string namespaceURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.GetAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetAttribute (localName As String, namespaceURI As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ GetAttribute(System::String ^ localName, System::String ^ namespaceURI);" />
      <MemberSignature Language="F#" Value="override this.GetAttribute : string * string -&gt; string" Usage="xmlTextReader.GetAttribute (localName, namespaceURI)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">특성의 로컬 이름입니다.</param>
        <param name="namespaceURI">특성의 네임스페이스 URI입니다.</param>
        <summary>지정된 로컬 이름과 네임스페이스 URI가 있는 특성의 값을 가져옵니다.</summary>
        <returns>지정된 특성의 값을 반환합니다. 특성이 없으면 <see langword="null" />이 반환됩니다. 이 메서드는 판독기를 이동하지 않습니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
 다음 XML 특정 네임 스페이스의 특성을 포함 합니다.  
  
```xml  
<test xmlns:dt="urn:datatypes" dt:type="int"/>  
```  
  
 조회 수는 `dt:type` (접두사와 로컬 이름)의 인수를 하나 또는 두 개의 인수 (로컬 이름 및 네임 스페이스 URI)를 사용 하 여 특성:  
  
```csharp  
String dt = reader.GetAttribute("dt:type");  
String dt2 = reader.GetAttribute("type","urn:datatypes");  
```  
  
 조회 하는 `xmlns:dt` 특성에 다음 인수 중 하나를 사용 합니다.  
  
```csharp  
String dt3 = reader.GetAttribute("xmlns:dt");  
String dt4 = reader.GetAttribute("dt",http://www.w3.org/2000/xmlns/);  
```  
  
 사용 하 여이 정보를 가져올 수도 있습니다는 <xref:System.Xml.XmlTextReader.Prefix%2A> 속성입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="GetNamespacesInScope">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,string&gt; GetNamespacesInScope (System.Xml.XmlNamespaceScope scope);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, string&gt; GetNamespacesInScope(valuetype System.Xml.XmlNamespaceScope scope) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.GetNamespacesInScope(System.Xml.XmlNamespaceScope)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNamespacesInScope (scope As XmlNamespaceScope) As IDictionary(Of String, String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^ GetNamespacesInScope(System::Xml::XmlNamespaceScope scope);" />
      <MemberSignature Language="F#" Value="member this.GetNamespacesInScope : System.Xml.XmlNamespaceScope -&gt; System.Collections.Generic.IDictionary&lt;string, string&gt;" Usage="xmlTextReader.GetNamespacesInScope scope" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="System.Xml.XmlNamespaceScope" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="scope">반환할 네임스페이스 노드의 형식을 지정하는 <see cref="T:System.Xml.XmlNamespaceScope" /> 값입니다.</param>
        <summary>현재 범위 내에 있는 모든 네임스페이스가 포함된 컬렉션을 가져옵니다.</summary>
        <returns>현재 범위 내에 있는 모든 네임스페이스가 포함된 <see cref="T:System.Collections.IDictionary" /> 개체입니다. 판독기가 요소에 배치되지 않은 경우에는 네임스페이스가 없는 빈 사전이 반환됩니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
 사전 컬렉션 접두사가 붙은 네임 스페이스 이름으로 구성 됩니다. 범위에서 네임 스페이스 열거를 사용할 수 있습니다. 사전은 연결이 끊긴된 복사본 판독기의 네임 스페이스 목록입니다. 변경 되지 않습니다 판독기 위치, 현재 범위에서 네임 스페이스 목록을 변경 합니다.  
  
 다음 표에서 설명 하는 방법을 <xref:System.Xml.XmlNamespaceScope> 하지는 기본 및 기본 제공 네임 스페이스는 반환 되는 또는 열거형 값에 있는지 여부를 영향을 줍니다 <xref:System.Xml.XmlTextReader.GetNamespacesInScope%2A>합니다.  
  
|XmlNamespaceScope 값|xmlns:xml|xmlns:xmlns|xmlns=""|  
|-----------------------------|---------------|-----------------|---------------|  
|`All`|예|no|아니요|  
|`ExcludeXml`|아니요|아니요|아니요|  
|`Local`|아니요|아니요|예|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="GetRemainder">
      <MemberSignature Language="C#" Value="public System.IO.TextReader GetRemainder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.TextReader GetRemainder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.GetRemainder" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRemainder () As TextReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::TextReader ^ GetRemainder();" />
      <MemberSignature Language="F#" Value="member this.GetRemainder : unit -&gt; System.IO.TextReader" Usage="xmlTextReader.GetRemainder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.TextReader</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>버퍼링된 XML의 나머지 부분을 가져옵니다.</summary>
        <returns>버퍼링된 XML 의 나머지 부분을 포함하는 <see cref="T:System.IO.TextReader" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
 때문에 <xref:System.Xml.XmlTextReader> 버퍼링 않습니다 `Read`, 데이터는 손실 되지 않도록 사용 되지 않는 버퍼의 나머지 부분을 반환 하는 일을 할 수 있어야 합니다. 이렇게 하면 패키지에서 다른 작업으로 동일한 스트림에서 XML 프로토콜 (예: 다중 파트 MIME).  
  
 이 메서드를 호출한 후 <xref:System.Xml.XmlTextReader.EOF%2A> 로 설정 된 `true`합니다.  
  
   
  
## Examples  
 다음 예제에서는 첫 번째 부분은 XML 문서를 읽고 사용 하 여 `GetRemainder` 두 번째 판독기를 사용 하는 문서 읽기를 완료 합니다.  
  
 [!code-cpp[Classic WebData XmlTextReader.GetRemainder Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.GetRemainder Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.GetRemainder Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.GetRemainder Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.GetRemainder Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.GetRemainder Example/VB/source.vb#1)]  
  
 이 예제에서는 입력된 파일 사용 `tworeads.xml`합니다.  
  
 [!code-xml[Classic WebData XmlTextReader.GetRemainder Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.GetRemainder Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="HasLineInfo">
      <MemberSignature Language="C#" Value="public bool HasLineInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HasLineInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.HasLineInfo" />
      <MemberSignature Language="VB.NET" Value="Public Function HasLineInfo () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool HasLineInfo();" />
      <MemberSignature Language="F#" Value="abstract member HasLineInfo : unit -&gt; bool&#xA;override this.HasLineInfo : unit -&gt; bool" Usage="xmlTextReader.HasLineInfo " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.IXmlLineInfo.HasLineInfo</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>클래스에서 줄 정보를 반환할 수 있는지를 나타내는 값을 가져옵니다.</summary>
        <returns>클래스에서 줄 정보를 반환할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="HasValue">
      <MemberSignature Language="C#" Value="public override bool HasValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasValue" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.HasValue" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property HasValue As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool HasValue { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasValue : bool" Usage="System.Xml.XmlTextReader.HasValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 노드에 <see langword="String.Empty" /> 이외의 <see cref="P:System.Xml.XmlTextReader.Value" />를 사용할 수 있는지를 나타내는 값을 가져옵니다.</summary>
        <value>현재 판독기가 위치한 노드에 <see langword="Value" />가 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
 다음 표에서는 반환할 값이 있는 노드 형식을 보여 줍니다.  
  
|노드 형식|값|  
|---------------|-----------|  
|`Attribute`|특성 값|  
|`CDATA`|CDATA 섹션 내용입니다.|  
|`Comment`|주석의 내용입니다.|  
|`DocumentType`|내부 하위 집합입니다.|  
|`ProcessingInstruction`|대상을 제외한 전체 내용입니다.|  
|`SignificantWhitespace`|혼합된 내용 모델에서 태그 들 사이의 공백입니다.|  
|`Text`|텍스트 노드의 내용입니다.|  
|`Whitespace`|태그 사이의 공백입니다.|  
|`XmlDeclaration`|선언 내용입니다.|  
  
   
  
## Examples  
 다음 예제에서는 값을 가질 수 있는 모든 노드에 대 한 값을 표시 합니다.  
  
 [!code-cpp[Classic WebData XmlTextReader.HasValue Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.HasValue Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.HasValue Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.HasValue Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.HasValue Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.HasValue Example/VB/source.vb#1)]  
  
 이 예제에서는 파일을 사용 하 여 `book1.xml`입력으로 합니다.  
  
 [!code-xml[Classic WebData XmlTextReader.HasValue Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.HasValue Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="IsDefault">
      <MemberSignature Language="C#" Value="public override bool IsDefault { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDefault" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.IsDefault" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsDefault As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsDefault { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDefault : bool" Usage="System.Xml.XmlTextReader.IsDefault" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 노드가 DTD 또는 스키마에 정의된 기본값에서 생성된 특성인지를 나타내는 값을 얻습니다.</summary>
        <value>이 속성은 항상 <see langword="false" />를 반환합니다. <see cref="T:System.Xml.XmlTextReader" />는 기본 특성을 확장하지 않습니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
 특성 노드에만이 속성이 적용 됩니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="IsEmptyElement">
      <MemberSignature Language="C#" Value="public override bool IsEmptyElement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmptyElement" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.IsEmptyElement" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsEmptyElement As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsEmptyElement { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEmptyElement : bool" Usage="System.Xml.XmlTextReader.IsEmptyElement" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 노드가 빈 요소(예: <c>&lt;MyElement/&gt;</c>)인지를 나타내는 값을 가져옵니다.</summary>
        <value><see langword="true" /> 현재 노드가 요소 이면 (<see cref="P:System.Xml.XmlTextReader.NodeType" /> equals <see langword="XmlNodeType.Element" />)로 끝나는 <c>/ &gt;</c>고, 그렇지 않으면 <see langword="false" />합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
 이 속성을 사용하여 다음 간의 차이를 확인할 수 있습니다.  
  
 `<item num="123"/>` (`IsEmptyElement` 는 `true`).  
  
 `<item num="123">` (`IsEmptyElement` 는 `false`요소 내용이 비어 있지만).  
  
 해당 `EndElement` 빈 요소에 대 한 노드 생성 되지 않습니다.  
  
 `IsEmptyElement` 원본 문서의 요소 했습니다 끝 요소 태그가 있는지 여부를 보고 합니다.  
  
   
  
## Examples  
 다음 예제에서는 각 요소의 텍스트 콘텐츠를 표시합니다.  
  
 [!code-cpp[Classic WebData XmlReader.IsStartElement Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlReader.IsStartElement Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlReader.IsStartElement Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlReader.IsStartElement Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlReader.IsStartElement Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlReader.IsStartElement Example/VB/source.vb#1)]  
  
 이 예제에서는 파일을 사용 하 여 `elems.xml`입력으로 합니다.  
  
 [!code-xml[Classic WebData XmlReader.IsStartElement Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlReader.IsStartElement Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public override string this[int i] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overrides ReadOnly Property Item(i As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ default[int] { System::String ^ get(int i); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : string" Usage="System.Xml.XmlTextReader.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" Index="0" FrameworkAlternate="netframework-1.1" />
      </Parameters>
      <Docs>
        <param name="i">특성의 인덱스입니다.</param>
        <summary>지정된 인덱스가 있는 특성의 값을 가져옵니다.</summary>
        <value>특성 값</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public override string this[string name] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Item(string)" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overrides ReadOnly Property Item(name As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ default[System::String ^] { System::String ^ get(System::String ^ name); };" />
      <MemberSignature Language="F#" Value="member this.Item(string) : string" Usage="System.Xml.XmlTextReader.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public override string this[string name, string namespaceURI] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Item(string, string)" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.Item(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overrides ReadOnly Property Item(name As String, namespaceURI As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ default[System::String ^, System::String ^] { System::String ^ get(System::String ^ name, System::String ^ namespaceURI); };" />
      <MemberSignature Language="F#" Value="member this.Item(string * string) : string" Usage="System.Xml.XmlTextReader.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="namespaceURI" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1" />
      </Parameters>
      <Docs>
        <param name="name">특성의 로컬 이름입니다.</param>
        <param name="namespaceURI">특성의 네임스페이스 URI입니다.</param>
        <summary>지정된 로컬 이름과 네임스페이스 URI가 있는 특성의 값을 가져옵니다.</summary>
        <value>지정된 특성의 값을 반환합니다. 특성이 없으면 반환 <see langword="null" />합니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LineNumber">
      <MemberSignature Language="C#" Value="public int LineNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LineNumber" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.LineNumber" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LineNumber As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LineNumber { int get(); };" />
      <MemberSignature Language="F#" Value="member this.LineNumber : int" Usage="System.Xml.XmlTextReader.LineNumber" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Xml.IXmlLineInfo.LineNumber</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 줄 번호를 가져옵니다.</summary>
        <value>현재 줄 번호입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
 이 속성은 오류 보고를 위해 가장 많이 사용 되지만 언제 든 지 호출할 수 있습니다. 이 속성에 대 한 값의 시작 `1`합니다.  
  
 결합할 <xref:System.Xml.XmlTextReader.LinePosition%2A>, 값 `1,1` 문서의 시작을 나타냅니다.  
  
   
  
## Examples  
 다음 예에서는 수준, 줄 번호 및 줄 위치를 포함 하 여 각 노드를 표시 합니다.  
  
 [!code-cpp[XmlTextReader.LineNum#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlTextReader.LineNum/CPP/readlinenum.cpp#1)]
 [!code-csharp[XmlTextReader.LineNum#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlTextReader.LineNum/CS/readlinenum.cs#1)]
 [!code-vb[XmlTextReader.LineNum#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlTextReader.LineNum/VB/readlinenum.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="LinePosition">
      <MemberSignature Language="C#" Value="public int LinePosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LinePosition" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.LinePosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LinePosition As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LinePosition { int get(); };" />
      <MemberSignature Language="F#" Value="member this.LinePosition : int" Usage="System.Xml.XmlTextReader.LinePosition" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Xml.IXmlLineInfo.LinePosition</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 줄 위치를 가져옵니다.</summary>
        <value>현재 줄 위치입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
 이 속성은 오류 보고를 위해 가장 많이 사용 되지만 언제 든 지 호출할 수 있습니다. 속성의 시작 값은 `1`합니다.  
  
 표시 되는 위치에는 태그에서 텍스트의 첫 번째 문자입니다.  
  
```  
<root>  
abc<tag/>  
</root>  
```  
  
 앞의 XML 텍스트의 첫 번째 줄에는 `LinePosition` 의 `2` 문자에 해당 하 `r`; 두 번째 줄에는 `LinePosition` 의 `5` 문자에 해당 `t`; 및 세 번째 줄을 `LinePosition` 의 `3` 문자에 해당 `r`합니다.  
  
 결합할 <xref:System.Xml.XmlTextReader.LineNumber%2A>, 값 `1,1` 문서의 시작을 나타냅니다.  
  
   
  
## Examples  
 다음 예에서는 수준, 줄 번호 및 줄 위치를 포함 하 여 각 노드를 표시 합니다.  
  
 [!code-cpp[XmlTextReader.LineNum#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlTextReader.LineNum/CPP/readlinenum.cpp#1)]
 [!code-csharp[XmlTextReader.LineNum#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlTextReader.LineNum/CS/readlinenum.cs#1)]
 [!code-vb[XmlTextReader.LineNum#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlTextReader.LineNum/VB/readlinenum.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="LocalName">
      <MemberSignature Language="C#" Value="public override string LocalName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LocalName" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.LocalName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property LocalName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ LocalName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalName : string" Usage="System.Xml.XmlTextReader.LocalName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 노드의 로컬 이름을 가져옵니다.</summary>
        <value>접두사를 제거한 현재 노드의 이름입니다. 예를 들어 <see langword="LocalName" /> 됩니다 <see langword="book" /> 요소에 대 한 <c>&lt;예&gt;</c>합니다.  
  
이름이 없는 노드 형식(예: <see langword="Text" />, <see langword="Comment" /> 등)의 경우 이 속성은 <see langword="String.Empty" />를 반환합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
   
  
## Examples  
 다음 예제에서는 각 노드의 로컬 이름을 표시 하 고, 있을 경우, 접두사 및 네임 스페이스 URI 합니다.  
  
 [!code-cpp[Classic WebData XmlTextReader.LocalName Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.LocalName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.LocalName Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.LocalName Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.LocalName Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.LocalName Example/VB/source.vb#1)]  
  
 이 예제에서는 파일을 사용 하 여 `book2.xml`입력으로 합니다.  
  
 [!code-xml[Classic WebData XmlTextReader.LocalName Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.LocalName Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="LookupNamespace">
      <MemberSignature Language="C#" Value="public override string LookupNamespace (string prefix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string LookupNamespace(string prefix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.LookupNamespace(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function LookupNamespace (prefix As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ LookupNamespace(System::String ^ prefix);" />
      <MemberSignature Language="F#" Value="override this.LookupNamespace : string -&gt; string" Usage="xmlTextReader.LookupNamespace prefix" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">확인할 네임스페이스 URI의 접두사입니다. 기본 네임스페이스와 일치시키려면 빈 문자열을 전달합니다. 이 문자열은 원자화할 필요가 없습니다.</param>
        <summary>현재 요소의 범위에서 네임스페이스 접두사를 확인합니다.</summary>
        <returns>접두사가 매핑되는 네임스페이스 URI이거나 일치하는 접두사가 없는 경우 <see langword="null" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
 다음 XML에 판독기가 배치 하는 경우에 `href` 특성을 접두사 `a` 호출 하 여 해결 될 `reader.LookupNamespace("a")`. 반환 된 문자열은 `urn:456`합니다.  
  
```xml  
<root xmlns:a="urn:456">  
 <item>  
 <ref href="a:b"/>  
 </item>  
</root>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="P:System.Xml.XmlTextReader.Namespaces" /> 속성이 <see langword="true" /> 하며 <paramref name="prefix" /> 값은 <see langword="null" />합니다.</exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <MemberGroup MemberName="MoveToAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>지정된 특성으로 이동합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="MoveToAttribute">
      <MemberSignature Language="C#" Value="public override void MoveToAttribute (int i);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void MoveToAttribute(int32 i) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.MoveToAttribute(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub MoveToAttribute (i As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void MoveToAttribute(int i);" />
      <MemberSignature Language="F#" Value="override this.MoveToAttribute : int -&gt; unit" Usage="xmlTextReader.MoveToAttribute i" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="i">특성의 인덱스입니다.</param>
        <summary>지정된 인덱스가 있는 특성으로 이동합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
   
  
## Examples  
 다음 예에서는 현재 노드의 모든 특성을 표시합니다.  
  
 [!code-cpp[Classic WebData XmlTextReader.MoveToElement Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToElement Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.MoveToElement Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToElement Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.MoveToElement Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToElement Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">합니다 <paramref name="i" /> 매개 변수는 보다 작거나 0 보다 크거나 같음 <see cref="P:System.Xml.XmlReader.AttributeCount" />합니다.</exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="MoveToAttribute">
      <MemberSignature Language="C#" Value="public override bool MoveToAttribute (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveToAttribute(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.MoveToAttribute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MoveToAttribute (name As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool MoveToAttribute(System::String ^ name);" />
      <MemberSignature Language="F#" Value="override this.MoveToAttribute : string -&gt; bool" Usage="xmlTextReader.MoveToAttribute name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">특성의 정규화된 이름입니다.</param>
        <summary>지정된 이름이 있는 특성으로 이동합니다.</summary>
        <returns>특성이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. <see langword="false" />이면, 판독기의 위치는 변경되지 않습니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
 호출한 후 `MoveToAttribute`의 <xref:System.Xml.XmlTextReader.Name%2A>를 <xref:System.Xml.XmlTextReader.NamespaceURI%2A>, 및 <xref:System.Xml.XmlTextReader.Prefix%2A> 속성에는 해당 특성의 속성이 표시 됩니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="MoveToAttribute">
      <MemberSignature Language="C#" Value="public override bool MoveToAttribute (string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveToAttribute(string localName, string namespaceURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.MoveToAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MoveToAttribute (localName As String, namespaceURI As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool MoveToAttribute(System::String ^ localName, System::String ^ namespaceURI);" />
      <MemberSignature Language="F#" Value="override this.MoveToAttribute : string * string -&gt; bool" Usage="xmlTextReader.MoveToAttribute (localName, namespaceURI)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">특성의 로컬 이름입니다.</param>
        <param name="namespaceURI">특성의 네임스페이스 URI입니다.</param>
        <summary>지정된 로컬 이름과 네임스페이스 URI가 있는 특성으로 이동합니다.</summary>
        <returns>특성이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. <see langword="false" />이면, 판독기의 위치는 변경되지 않습니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
 호출한 후 `MoveToAttribute`의 <xref:System.Xml.XmlTextReader.Name%2A>를 <xref:System.Xml.XmlTextReader.NamespaceURI%2A>, 및 <xref:System.Xml.XmlTextReader.Prefix%2A> 속성에는 해당 특성의 속성이 표시 됩니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="MoveToElement">
      <MemberSignature Language="C#" Value="public override bool MoveToElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveToElement() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.MoveToElement" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MoveToElement () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool MoveToElement();" />
      <MemberSignature Language="F#" Value="override this.MoveToElement : unit -&gt; bool" Usage="xmlTextReader.MoveToElement " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>현재 특성 노드가 포함된 요소로 이동합니다.</summary>
        <returns>판독기가 특성에 있으면(특성이 있는 요소로 판독기가 이동하면) <see langword="true" />이고, 판독기가 특성에 없으면(판독기의 위치가 바뀌지 않으면) <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
 이 메서드를 사용 하 여 해당 특성을 통해 이동한 후 요소 돌아갑니다. 이 메서드는 다음 노드 형식 중 하나에 판독기를 이동 합니다. `Element`, `DocumentType`, 또는 `XmlDeclaration`합니다.  
  
   
  
## Examples  
 다음 예에서는 현재 노드의 모든 특성을 표시합니다.  
  
 [!code-cpp[Classic WebData XmlTextReader.MoveToElement Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToElement Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.MoveToElement Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToElement Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.MoveToElement Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToElement Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="MoveToFirstAttribute">
      <MemberSignature Language="C#" Value="public override bool MoveToFirstAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveToFirstAttribute() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.MoveToFirstAttribute" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MoveToFirstAttribute () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool MoveToFirstAttribute();" />
      <MemberSignature Language="F#" Value="override this.MoveToFirstAttribute : unit -&gt; bool" Usage="xmlTextReader.MoveToFirstAttribute " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>첫 번째 특성으로 이동합니다.</summary>
        <returns>특성이 있으면(판독기가 첫 번째 특성으로 이동하면) <see langword="true" />이고, 그렇지 않으면(판독기의 위치가 바뀌지 않으면) <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
   
  
## Examples  
 다음 예제에서는 루트 노드의 첫 번째 특성의 값을 가져옵니다.  
  
 [!code-cpp[Classic WebData XmlTextReader.MoveToFirstAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToFirstAttribute Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.MoveToFirstAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToFirstAttribute Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.MoveToFirstAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToFirstAttribute Example/VB/source.vb#1)]  
  
 이 예제에서는 파일을 사용 하 여 `attrs.xml`입력으로 합니다.  
  
 [!code-xml[Classic WebData XmlTextReader.MoveToFirstAttribute Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToFirstAttribute Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="MoveToNextAttribute">
      <MemberSignature Language="C#" Value="public override bool MoveToNextAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveToNextAttribute() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.MoveToNextAttribute" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MoveToNextAttribute () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool MoveToNextAttribute();" />
      <MemberSignature Language="F#" Value="override this.MoveToNextAttribute : unit -&gt; bool" Usage="xmlTextReader.MoveToNextAttribute " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>다음 특성으로 이동합니다.</summary>
        <returns>다음 특성이 있으면 <see langword="true" />이고, 더 이상 특성이 없으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
 현재 노드가 요소 노드인 경우이 메서드는 <xref:System.Xml.XmlTextReader.MoveToFirstAttribute%2A>합니다. 하는 경우 `MoveToNextAttribute` 반환 `true`, 판독기의 위치가 바뀌지 않으면이 고, 그렇지 않으면 다음 특성으로 판독기를 이동 합니다.  
  
   
  
## Examples  
 다음 예에서는 현재 노드의 모든 특성을 표시합니다.  
  
 [!code-cpp[Classic WebData XmlReader.HasAttributes Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlReader.HasAttributes Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlReader.HasAttributes Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlReader.HasAttributes Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlReader.HasAttributes Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlReader.HasAttributes Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public override string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Xml.XmlTextReader.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 노드의 정규화된 이름을 가져옵니다.</summary>
        <value>현재 노드의 정규화된 이름입니다. 예를 들어 <see langword="Name" /> 됩니다 <see langword="bk:book" /> 요소에 대 한 <c>&lt;예&gt;</c>합니다.  
  
반환되는 이름은 다음과 같이 노드의 <see cref="P:System.Xml.XmlTextReader.NodeType" />에 따라 달라집니다. 다음 노드 형식은 나열된 값을 반환합니다. 기타 모든 노드 형식은 빈 문자열을 반환합니다.  
  
 <list type="table"><listheader><term> 노드 형식 
 </term><description> 이름 
 </description></listheader><item><term><see langword="Attribute" /></term><description> 특성 이름입니다.  
  
 </description></item><item><term><see langword="DocumentType" /></term><description> 문서 형식 이름입니다.  
  
 </description></item><item><term><see langword="Element" /></term><description> 태그 이름입니다.  
  
 </description></item><item><term><see langword="EntityReference" /></term><description> 참조된 엔터티의 이름입니다.  
  
 </description></item><item><term><see langword="ProcessingInstruction" /></term><description> 처리 명령의 대상입니다.  
  
 </description></item><item><term><see langword="XmlDeclaration" /></term><description> 리터럴 문자열 <see langword="xml" />합니다.  
  
 </description></item></list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
   
  
## Examples  
 다음 예제에서는 XML 파일을 읽고 각 노드를 표시 합니다.  
  
 [!code-cpp[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/VB/source.vb#1)]  
  
 파일을 사용 하는 샘플 `items.xml`합니다.  
  
 [!code-xml[Classic WebData XmlTextReader.Name Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Namespaces">
      <MemberSignature Language="C#" Value="public bool Namespaces { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Namespaces" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.Namespaces" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespaces As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Namespaces { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Namespaces : bool with get, set" Usage="System.Xml.XmlTextReader.Namespaces" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>네임스페이스 지원 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>네임스페이스를 지원하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
 이 속성은 판독기 www.w3.org/TR/REC-xml-names 위치한 XML 권장 사항의 W3C 네임 스페이스를 지원 하는지 여부를 결정 합니다.  
  
 `Namespaces` 읽기 작업이 발생 한 후 속성을 설정할 수 없습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">읽기 작업이 발생 한 후이 속성을 설정 (<see cref="P:System.Xml.XmlTextReader.ReadState" /> 아닙니다 <see langword="ReadState.Initial" />).</exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="NamespaceURI">
      <MemberSignature Language="C#" Value="public override string NamespaceURI { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NamespaceURI" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.NamespaceURI" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property NamespaceURI As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ NamespaceURI { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NamespaceURI : string" Usage="System.Xml.XmlTextReader.NamespaceURI" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>W3C 네임스페이스 사양에서 정의된 것처럼 판독기가 있는 노드의 네임스페이스 URI를 가져옵니다.</summary>
        <value>현재 노드의 네임스페이스 URI이거나 빈 문자열입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
 이 속성이 관련이 `Element` 고 `Attribute` 노드만 있습니다.  
  
   
  
## Examples  
 다음 예제에서는 각 노드의 로컬 이름을 표시 하 고, 있을 경우, 접두사 및 네임 스페이스 URI 합니다.  
  
 [!code-cpp[Classic WebData XmlTextReader.LocalName Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.LocalName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.LocalName Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.LocalName Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.LocalName Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.LocalName Example/VB/source.vb#1)]  
  
 이 예제에서는 파일을 사용 하 여 `book2.xml`입력으로 합니다.  
  
 [!code-xml[Classic WebData XmlTextReader.LocalName Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.LocalName Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="NameTable">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlNameTable NameTable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlNameTable NameTable" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.NameTable" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property NameTable As XmlNameTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::XmlNameTable ^ NameTable { System::Xml::XmlNameTable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NameTable : System.Xml.XmlNameTable" Usage="System.Xml.XmlTextReader.NameTable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNameTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 구현과 관련된 <see cref="T:System.Xml.XmlNameTable" />을 가져옵니다.</summary>
        <value>노드 내에 있는 문자열의 원자화된 버전을 가져올 수 있도록 하는 <see langword="XmlNameTable" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
 반환 된 모든 노드 및 특성 이름은 <xref:System.Xml.XmlTextReader> 를 사용 하 여 원자화 되는 `NameTable`합니다. 이름이 같은 여러 번에 반환 될 때 (예를 들어 `Customer`), 한 다음 동일한 `String` 해당 이름의 개체가 반환 됩니다. 이렇게 하면 개체에 비용이 많이 드는 문자열 비교 대신 이러한 문자열 비교를 수행 하는 효율적인 코드를 작성할 수 있습니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlNameTable" />
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlNodeType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlNodeType NodeType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.NodeType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property NodeType As XmlNodeType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::XmlNodeType NodeType { System::Xml::XmlNodeType get(); };" />
      <MemberSignature Language="F#" Value="member this.NodeType : System.Xml.XmlNodeType" Usage="System.Xml.XmlTextReader.NodeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNodeType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 노드의 형식을 가져옵니다.</summary>
        <value>현재 노드의 형식을 나타내는 <see cref="T:System.Xml.XmlNodeType" /> 값 중 하나입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
 이 속성은 다음을 반환 하지 않습니다 `XmlNodeType` 형식: `Document`, `DocumentFragment`, `Entity`합니다 `EndEntity`, 또는 `Notation`합니다.  
  
   
  
## Examples  
 다음 예제에서는 XML 파일을 읽고 각 노드를 표시 합니다.  
  
 [!code-cpp[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/VB/source.vb#1)]  
  
 파일을 사용 하는 샘플 `items.xml`합니다.  
  
 [!code-xml[Classic WebData XmlTextReader.Name Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Normalization">
      <MemberSignature Language="C#" Value="public bool Normalization { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Normalization" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.Normalization" />
      <MemberSignature Language="VB.NET" Value="Public Property Normalization As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Normalization { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Normalization : bool with get, set" Usage="System.Xml.XmlTextReader.Normalization" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>공백과 특성 값을 정규화할지를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>정규화하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
 이 속성은 언제 든 지 변경할 수 있습니다 및 다음 읽기 작업에 영향을 미칩니다.  
  
> [!NOTE]
>  경우는 <xref:System.Xml.XmlTextReader> 생성 하는 데 사용 되는 <xref:System.Xml.XmlValidatingReader>특성 값을 정규화 하 `Normalization` 로 설정 되어야 합니다 `true`합니다.  
  
 하는 경우 `Normalization` 로 설정 된 `false`, 문자 범위 숫자 엔터티에 대 한 확인 비활성화 합니다. 결과적으로, 엔터티를 같은 문자 `&#0;`, 허용 됩니다.  
  
 다음은 특성 값 표준화에 대 한 설명입니다.  
  
-   문자 참조의 경우 참조된 문자를 특성 값에 추가합니다.  
  
-   엔터티 참조 경우 엔터티의 대체 텍스트를 재귀적으로 처리합니다.  
  
-   공백 문자 (#x20 #xD, #xA, #x9)에 대 한 표준화 된 값에 #x20을 추가 합니다. (만 단일 #x20 구문 분석 된 외부 엔터티의 일부 또는 구문 분석 된 내부 엔터티의 리터럴 엔터티 값인 "#xD #xA" 시퀀스에 대 한 추가 됩니다.)  
  
-   표준화된 값에 기타 문자를 추가하여 처리합니다.  
  
-   선언 된 값을 CDATA 없는 경우에 선행 및 후행 공백 (#x20) 문자를 삭제 하 고 (#x20) 공백 문자의 시퀀스를 단일 공백 (#x20) 문자로 바꿉니다.  
  
 `XmlTextReader` 만 특성 또는 CDATA 정규화를 수행 합니다. 내에서 래핑된 경우가 아니면 DTD 별 정규화를 수행 하지 않습니다는 `XmlValidatingReader`합니다.  
  
 자세한 내용은 정규화에 대 한 W3C XML 1.0 권장 사항을 참조 하십시오.  
  
   
  
## Examples  
 다음 예제에서는 설정 정규화를 사용 하 여 판독기 동작을 보여 줍니다. 한 다음 해제 합니다.  
  
 [!code-cpp[XmlTextReader.Normalization#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlTextReader.Normalization/CPP/readnormal.cpp#1)]
 [!code-csharp[XmlTextReader.Normalization#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlTextReader.Normalization/CS/readnormal.cs#1)]
 [!code-vb[XmlTextReader.Normalization#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlTextReader.Normalization/VB/readnormal.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">판독기가 닫힐 때이 속성을 설정 (<see cref="P:System.Xml.XmlTextReader.ReadState" /> 는 <see langword="ReadState.Closed" />).</exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Prefix">
      <MemberSignature Language="C#" Value="public override string Prefix { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Prefix" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.Prefix" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Prefix As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Prefix { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Prefix : string" Usage="System.Xml.XmlTextReader.Prefix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 노드와 관련된 네임스페이스 접두사를 가져옵니다.</summary>
        <value>현재 노드와 관련된 네임스페이스 접두사입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
   
  
## Examples  
 다음 예제에서는 각 노드의 로컬 이름을 표시 하 고, 있을 경우, 접두사 및 네임 스페이스 URI 합니다.  
  
 [!code-cpp[Classic WebData XmlTextReader.LocalName Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.LocalName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.LocalName Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.LocalName Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.LocalName Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.LocalName Example/VB/source.vb#1)]  
  
 이 예제에서는 파일을 사용 하 여 `book2.xml`입력으로 합니다.  
  
 [!code-xml[Classic WebData XmlTextReader.LocalName Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.LocalName Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="ProhibitDtd">
      <MemberSignature Language="C#" Value="public bool ProhibitDtd { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ProhibitDtd" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.ProhibitDtd" />
      <MemberSignature Language="VB.NET" Value="Public Property ProhibitDtd As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ProhibitDtd { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ProhibitDtd : bool with get, set" Usage="System.Xml.XmlTextReader.ProhibitDtd" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.Obsolete("Use DtdProcessing property instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>DTD 처리를 허용할지를 나타내는 값을 가져오거나 설정합니다. 이 속성은 사용되지 않습니다. 대신 <see cref="P:System.Xml.XmlTextReader.DtdProcessing" />를 사용하세요.</summary>
        <value>DTD 처리를 허용하지 않으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
 DTD 처리는 기본적으로 사용에 대 한 이전 버전과 호환성. 그러나 애플리케이션에 DTD 처리가 필요한 경우가 아니면이 설정을 비활성화 해야 합니다. DTD 처리를 비활성화하면 특정 서비스 거부(Denial of service) 공격을 차단하는 데 유용할 수 있습니다. 경우로 `true`, 판독기 throw는 <xref:System.Xml.XmlException> DTD 내용이 발생 시.  
  
 DTD 처리를 사용 하는 경우 가능한 서비스 거부 공격 및 신뢰할 수 없는 소스에서 Dtd를 포함 하 여 주의 해야 합니다. 사용 하 여는 <xref:System.Xml.XmlSecureResolver> 리소스를 제한 하는 <xref:System.Xml.XmlTextReader> 액세스할 수 있습니다. 또한 애플리케이션을 직접 디자인하여 XML 처리에 필요한 메모리 및 시간을 제한할 수 있습니다. 예를 들어, ASP.NET 애플리케이션에서 제한 시간 구성  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="QuoteChar">
      <MemberSignature Language="C#" Value="public override char QuoteChar { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char QuoteChar" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.QuoteChar" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property QuoteChar As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property char QuoteChar { char get(); };" />
      <MemberSignature Language="F#" Value="member this.QuoteChar : char" Usage="System.Xml.XmlTextReader.QuoteChar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>특성 노드의 값을 묶을 때 사용하는 인용 부호 문자를 가져옵니다.</summary>
        <value>특성 노드의 값을 묶을 때 사용하는 인용 부호 문자입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
 특성 노드에만이 속성이 적용 됩니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public override bool Read ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Read() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.Read" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Read () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Read();" />
      <MemberSignature Language="F#" Value="override this.Read : unit -&gt; bool" Usage="xmlTextReader.Read " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>스트림에서 다음 노드를 읽습니다.</summary>
        <returns>다음 노드를 읽었으면 <see langword="true" />이고, 더 이상 읽을 노드가 없으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
 먼저 판독기가 만들어지고 초기화 됩니다을 하는 경우 정보가 없는 사용할 수 있습니다. 호출 해야 `Read` 첫 번째 노드를 읽을 수 있습니다.  
  
 이 메서드는 데이터 스트림에서 4 바이트 이상 구문 분석을 시작 하기 위해 필요 합니다. 4 바이트 미만인 반환 됩니다 스트림의 데이터가 더 이상 없는 경우 메서드가 실패 합니다. 스트림에서 더 많은 데이터를 네 번째 바이트가 수신 될 때까지 구문 분석 메서드가 차단 됩니다.  
  
   
  
## Examples  
 다음 예제에서는 XML 파일을 읽고 각 노드를 표시 합니다.  
  
 [!code-cpp[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/VB/source.vb#1)]  
  
 파일을 사용 하는 샘플 `items.xml`합니다.  
  
 [!code-xml[Classic WebData XmlTextReader.Name Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">XML을 구문 분석하는 동안 오류가 발생했습니다.</exception>
        <altmember cref="T:System.Xml.EntityHandling" />
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="ReadAttributeValue">
      <MemberSignature Language="C#" Value="public override bool ReadAttributeValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool ReadAttributeValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.ReadAttributeValue" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadAttributeValue () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool ReadAttributeValue();" />
      <MemberSignature Language="F#" Value="override this.ReadAttributeValue : unit -&gt; bool" Usage="xmlTextReader.ReadAttributeValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>특성 값을 하나 이상의 <see langword="Text" />, <see langword="EntityReference" /> 또는 <see langword="EndEntity" /> 노드로 구문 분석합니다.</summary>
        <returns>반환할 노드가 있는 경우 <see langword="true" />입니다.  
  
 처음 호출할 때 판독기가 특성 노드에 있거나 모든 특성 값을 읽은 경우 <see langword="false" />입니다.  
  
<c>misc=""</c>와 같은 빈 특성은 <see langword="true" />를 반환하며 이것은 단일 노드가 <see langword="String.Empty" />의 값을 갖는 것을 의미합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
 이 메서드를 사용 하 여 호출한 후 `MoveToAttribute` 특성 값을 구성 하는 텍스트 또는 엔터티 참조 노드를 읽을 수 있습니다. <xref:System.Xml.XmlReader.Depth%2A> 특성 값 노드 1을 더한 특성 노드의 깊이 증가 하 고 내부 및 외부로 일반 엔터티 참조를 단계별로 실행할 때 1 씩 감소 합니다.  
  
   
  
## Examples  
 다음 예제에서는 텍스트와 엔터티 노드를 사용 하 여 특성을 읽습니다.  
  
 [!code-cpp[XmlTextReader.ReadAttributeValue#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlTextReader.ReadAttributeValue/CPP/readattrval.cpp#1)]
 [!code-csharp[XmlTextReader.ReadAttributeValue#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlTextReader.ReadAttributeValue/CS/readattrval.cs#1)]
 [!code-vb[XmlTextReader.ReadAttributeValue#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlTextReader.ReadAttributeValue/VB/readattrval.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="ReadBase64">
      <MemberSignature Language="C#" Value="public int ReadBase64 (byte[] array, int offset, int len);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ReadBase64(unsigned int8[] array, int32 offset, int32 len) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.ReadBase64(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadBase64 (array As Byte(), offset As Integer, len As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ReadBase64(cli::array &lt;System::Byte&gt; ^ array, int offset, int len);" />
      <MemberSignature Language="F#" Value="member this.ReadBase64 : byte[] * int * int -&gt; int" Usage="xmlTextReader.ReadBase64 (array, offset, len)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="len" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">텍스트 콘텐츠를 쓸 버퍼 역할을 하는 문자 배열입니다.</param>
        <param name="offset">메서드가 버퍼에 쓰기를 시작할 수 있는 위치를 지정하는 배열의 0부터 시작하는 인덱스입니다.</param>
        <param name="len">버퍼에 쓸 바이트 수입니다.</param>
        <summary>Base64를 디코딩하고 디코딩된 이진 바이트를 반환합니다.</summary>
        <returns>버퍼에 쓴 바이트 수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
 같은 <xref:System.Xml.XmlTextReader.ReadChars%2A>, 포함 된 텍스트의 큰 스트림을 읽도록이 메서드를 연속 해 서 호출할 수 있습니다. Base64 콘텐츠 디코딩하고 디코딩된 이진 바이트를 반환 합니다 (예를 들어, 인라인 Base64 인코딩된 GIF 이미지) 버퍼에 있습니다. 1521 RFC를 참조 하세요. (에서 Rfc를 구할 수는 [의견 웹 사이트에 대 한 요청](https://www.rfc-editor.org).)  
  
   
  
## Examples  
 다음 예에서는 Base64 및 BinHex 데이터가 포함 된 파일을 읽습니다.  
  
 [!code-cpp[Classic WebData XmlTextReader.ReadBase64 Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.ReadBase64 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.ReadBase64 Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.ReadBase64 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.ReadBase64 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.ReadBase64 Example/VB/source.vb#1)]  
  
 파일을 사용 하는 샘플 `binary.xml`  
  
 [!code-xml[Classic WebData XmlTextReader.ReadBase64 Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.ReadBase64 Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">Base64 시퀀스가 잘못 되었습니다.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="array" /> 값이 <see langword="null" />인 경우</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" /> &lt; 0, <paramref name="len" /> &lt; 0, <paramref name="len" /> &gt; <paramref name="array" />.Length- <paramref name="offset" />인 경우.</exception>
        <altmember cref="M:System.Xml.XmlTextWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="ReadBinHex">
      <MemberSignature Language="C#" Value="public int ReadBinHex (byte[] array, int offset, int len);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ReadBinHex(unsigned int8[] array, int32 offset, int32 len) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.ReadBinHex(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadBinHex (array As Byte(), offset As Integer, len As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ReadBinHex(cli::array &lt;System::Byte&gt; ^ array, int offset, int len);" />
      <MemberSignature Language="F#" Value="member this.ReadBinHex : byte[] * int * int -&gt; int" Usage="xmlTextReader.ReadBinHex (array, offset, len)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="len" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">디코딩된 이진 바이트를 쓸 버퍼 역할을 하는 바이트 배열입니다.</param>
        <param name="offset">메서드가 버퍼에 쓰기를 시작할 수 있는 위치를 지정하는 배열의 0부터 시작하는 인덱스입니다.</param>
        <param name="len">버퍼에 쓸 바이트 수입니다.</param>
        <summary><see langword="BinHex" />를 디코딩하고 디코딩된 이진 바이트를 반환합니다.</summary>
        <returns>버퍼에 쓴 바이트 수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
 같은 <xref:System.Xml.XmlTextReader.ReadChars%2A>, 포함 된 텍스트의 큰 스트림을 읽도록이 메서드를 연속 해 서 호출할 수 있습니다. 해당 디코딩합니다 `BinHex` 콘텐츠 및 디코딩된 이진 바이트를 반환 합니다 (예를 들어, 인라인 `BinHex` 인코딩된 GIF 이미지) 버퍼에 합니다.  
  
   
  
## Examples  
 다음 예제에서는 포함 된 파일을 읽고 `Base64` 고 `BinHex` 데이터입니다.  
  
 [!code-cpp[Classic WebData XmlTextReader.ReadBase64 Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.ReadBase64 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.ReadBase64 Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.ReadBase64 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.ReadBase64 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.ReadBase64 Example/VB/source.vb#1)]  
  
 파일을 사용 하는 샘플 `binary.xml`  
  
 [!code-xml[Classic WebData XmlTextReader.ReadBase64 Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.ReadBase64 Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException"><see langword="BinHex" /> 시퀀스가 잘못 되었습니다.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="array" /> 값이 <see langword="null" />인 경우</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" /> &lt; 0, <paramref name="len" /> &lt; 0, <paramref name="len" /> &gt; <paramref name="array" />.Length- <paramref name="offset" />인 경우.</exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="ReadChars">
      <MemberSignature Language="C#" Value="public int ReadChars (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ReadChars(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.ReadChars(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadChars (buffer As Char(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ReadChars(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="member this.ReadChars : char[] * int * int -&gt; int" Usage="xmlTextReader.ReadChars (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">텍스트 콘텐츠를 쓸 버퍼 역할을 하는 문자 배열입니다.</param>
        <param name="index">메서드가 텍스트 콘텐츠 쓰기를 시작할 수 있는 <paramref name="buffer" /> 내 위치입니다.</param>
        <param name="count"><paramref name="buffer" />로 쓸 문자 수입니다.</param>
        <summary>요소의 텍스트 콘텐츠를 문자 버퍼로 읽습니다. 이 메서드는 뒤이어 호출하면 포함된 텍스트의 큰 스트림을 읽도록 디자인되었습니다.</summary>
        <returns>읽을 문자 수입니다. 판독기가 요소에 배치되지 않았거나 현재 컨텍스트에 반환할 텍스트 콘텐츠가 없는 경우 반환 값은 <see langword="0" />이 될 수 있습니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
 이것이 매우 큰 XML 문서에 포함 된 텍스트 스트림을 처리 하는 데 가장 효율적인 방법입니다. 큰 문자열 개체를 할당 하는 대신 `ReadChars` 한 번에 텍스트 콘텐츠 버퍼를 반환 합니다. 이 메서드가 요소 노드에 대해서만 작동 하도록 설계 되었습니다. 다른 노드 형식을 사용 하면 `ReadChars` 반환할 `0`합니다.  
  
 다음 xml 시작 태그에 판독기가 배치 되 면 `ReadChars` 반환 `test` 끝 태그 뒤 판독기를 배치 합니다.  
  
```xml  
<Item>test</Item>  
```  
  
 `ReadChars` 다음 기능이 있습니다.  
  
-   이 메서드는 요소 노드만에서 작동 하도록 설계 되었습니다. 다른 노드 형식을 사용 하면 `ReadChars` 0을 반환 합니다.  
  
-   이 메서드는 실제 문자 내용이 반환합니다. 엔터티, CDATA 또는 다른 태그를 확인 하지가 않습니다. `ReadChars` 모든 시작 태그와 태그를 포함 한 끝 태그 사이 반환 합니다.  
  
-   `ReadChars` 제대로 구성 되지 않은 XML 태그를 무시 합니다. 예를 들어, 다음 XML 문자열을 때 읽기 `<A>1<A>2</A>`, `ReadChars` 반환 `1<A>2</A>`합니다. (일치 하는 요소 쌍에서 태그를 반환 하 고 나머지는 무시 합니다.)  
  
-   이 메서드는 정규화를 수행 하지 않습니다.  
  
-   때 `ReadChars` 끝에 도달한 문자 스트림 값 0을 반환 하 고 끝 태그 뒤 판독기가 배치 합니다.  
  
-   특성을 사용 하는 동안 메서드를 사용할 수 없는 읽을 `ReadChars`합니다.  
  
 예를 들어, 다음 XML을 사용 하 여:  
  
```xml  
<thing>  
 some text  
</thing>  
<item>  
</item>  
```  
  
 판독기가 `<item>` while의 끝에 있는 요소를 반복 합니다.  
  
```csharp  
if (XmlNodeType.Element == reader.NodeType && "thing" == reader.Name)  
{  
 while(0 != reader.ReadChars(buffer, 0, 1)  
 {  
 // Do something.  
 // Attribute values are not available at this point.  
 }  
}  
```  
  
   
  
## Examples  
 다음 예제에서는 사용 하 여 XML 읽습니다 `ReadChars`합니다.  
  
 [!code-cpp[Classic WebData XmlTextReader.ReadChars Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.ReadChars Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.ReadChars Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.ReadChars Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.ReadChars Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.ReadChars Example/VB/source.vb#1)]  
  
 이 예제에서는 `items.xml` 파일을 입력으로 사용합니다.  
  
 [!code-xml[Classic WebData XmlTextReader.Name Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="count" />가 <paramref name="buffer" />에 지정된 공간(버퍼 크기 - <paramref name="index" />)보다 큽니다.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="buffer" /> 값이 <see langword="null" />입니다.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" />
          <see langword="&lt; 0" /> 또는 <paramref name="count" /><see langword="&lt; 0" /></exception>
        <altmember cref="M:System.Xml.XmlTextReader.ReadBase64(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Xml.XmlTextReader.ReadBinHex(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsBase64">
      <MemberSignature Language="C#" Value="public override int ReadContentAsBase64 (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 ReadContentAsBase64(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadContentAsBase64 (buffer As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int ReadContentAsBase64(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.ReadContentAsBase64 : byte[] * int * int -&gt; int" Usage="xmlTextReader.ReadContentAsBase64 (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="index" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="buffer">결과 텍스트를 복사해 넣을 버퍼입니다. 이 값은 <see langword="null" />일 수 없습니다.</param>
        <param name="index">버퍼에 넣을 결과 복사가 시작되는 오프셋입니다.</param>
        <param name="count">버퍼에 복사할 최대 바이트 수입니다. 복사된 실제 바이트 수가 이 메서드에서 반환됩니다.</param>
        <summary>콘텐츠를 읽고 <see langword="Base64" /> 디코딩된 이진 바이트를 반환합니다.</summary>
        <returns>버퍼에 쓴 바이트 수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
 이 메서드는 콘텐츠를 스트리밍하는 `Base64` content 및 디코딩된 이진 바이트를 반환 합니다 (예를 들어, 인라인 `Base64`-인코딩된 GIF 이미지) 버퍼에 합니다. 포함 된 텍스트의 큰 스트림을 읽도록 연속적으로이 메서드를 호출할 수 있습니다. 자세한 내용은 RFC 1521을 참조 하세요. "MIME (Multipurpose Internet Mail Extensions) 파트 1: 메커니즘을 지정 하 고 인터넷 메시지 본문의 형식을 설명 하는 "입니다. Rfc를 구할 수는 [의견 웹 사이트에 대 한 요청](https://www.rfc-editor.org)합니다.  
  
> [!NOTE]
>  에 대 한 호출 간의 판독기 속성을 액세스 하지 않아야 합니다 <xref:System.Xml.XmlTextReader.ReadContentAsBase64%2A> 메서드 값 0을 반환할 때까지 메서드.  
  
 이 메서드에 다음과 같은 동작이 있습니다.  
  
-   <xref:System.Xml.XmlTextReader.ReadContentAsBase64%2A> 작동 하 던 바이트 스트림의 끝에 도달한 경우 값 0을 반환 합니다. 판독기는 첫 번째 비 콘텐츠 노드에 배치 됩니다.  
  
-   더 적은 묻는 경우 남아 있는 것 보다는 스트림 판독기 바이트의 정확한 수를 현재 위치에 유지 됩니다.  
  
-   <xref:System.Xml.XmlTextReader.ReadContentAsBase64%2A> 다음 XML 노드 형식에서 지원 되지 않습니다: `Element`, `XmlDeclaration`, `None`, `Document`를 `DocumentType`를 `Notation`, `Entity`, `DocumentFragment`합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="buffer" /> 값이 <see langword="null" />입니다.</exception>
        <exception cref="T:System.InvalidOperationException">현재 노드에서 <see cref="M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" />를 지원하지 않는 경우</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">버퍼 또는 인덱스 + 카운트에 대 한 인덱스 할당된 된 버퍼 크기 보다 큽니다.</exception>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="T:System.Xml.XmlNodeType" />
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsBinHex">
      <MemberSignature Language="C#" Value="public override int ReadContentAsBinHex (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 ReadContentAsBinHex(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadContentAsBinHex (buffer As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int ReadContentAsBinHex(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.ReadContentAsBinHex : byte[] * int * int -&gt; int" Usage="xmlTextReader.ReadContentAsBinHex (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="index" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="buffer">결과 텍스트를 복사해 넣을 버퍼입니다. 이 값은 <see langword="null" />일 수 없습니다.</param>
        <param name="index">버퍼에 넣을 결과 복사가 시작되는 오프셋입니다.</param>
        <param name="count">버퍼에 복사할 최대 바이트 수입니다. 복사된 실제 바이트 수가 이 메서드에서 반환됩니다.</param>
        <summary>콘텐츠를 읽고 <see langword="BinHex" /> 디코딩된 이진 바이트를 반환합니다.</summary>
        <returns>버퍼에 쓴 바이트 수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
 이 메서드는 콘텐츠를 스트리밍하는 `BinHex` content 및 디코딩된 이진 바이트를 반환 합니다 (예를 들어, 인라인 `BinHex` 인코딩된 GIF 이미지) 버퍼에 합니다. 포함 된 텍스트의 큰 스트림을 읽도록 연속적으로이 메서드를 호출할 수 있습니다.  
  
> [!NOTE]
>  에 대 한 호출 간의 판독기 속성을 액세스 하지 않아야 합니다 <xref:System.Xml.XmlTextReader.ReadContentAsBinHex%2A> 메서드 값 0을 반환할 때까지 메서드.  
  
 이 메서드에 다음과 같은 동작이 있습니다.  
  
-   <xref:System.Xml.XmlTextReader.ReadContentAsBinHex%2A> 작동 하 던 바이트 스트림의 끝에 도달한 경우 값 0을 반환 합니다. 판독기는 첫 번째 비 콘텐츠 노드에 배치 됩니다.  
  
-   더 적은 묻는 경우 남아 있는 것 보다는 스트림 판독기 바이트의 정확한 수를 현재 위치에 유지 됩니다.  
  
-   <xref:System.Xml.XmlTextReader.ReadContentAsBinHex%2A> 다음 XML 노드 형식에서 지원 되지 않습니다: `Element`, `XmlDeclaration`, `None`, `Document`를 `DocumentType`를 `Notation`, `Entity`, `DocumentFragment`합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="buffer" /> 값이 <see langword="null" />입니다.</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.Xml.XmlTextReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />가 현재 노드에서 지원되지 않습니다.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">버퍼 또는 인덱스 + 카운트에 대 한 인덱스 할당된 된 버퍼 크기 보다 큽니다.</exception>
        <exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XmlTextReader" /> 구현은이 메서드를 지원 하지 않습니다.</exception>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlTextReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="T:System.Xml.XmlNodeType" />
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsBase64">
      <MemberSignature Language="C#" Value="public override int ReadElementContentAsBase64 (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 ReadElementContentAsBase64(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadElementContentAsBase64 (buffer As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int ReadElementContentAsBase64(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.ReadElementContentAsBase64 : byte[] * int * int -&gt; int" Usage="xmlTextReader.ReadElementContentAsBase64 (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="index" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="buffer">결과 텍스트를 복사해 넣을 버퍼입니다. 이 값은 <see langword="null" />일 수 없습니다.</param>
        <param name="index">버퍼에 넣을 결과 복사가 시작되는 오프셋입니다.</param>
        <param name="count">버퍼에 복사할 최대 바이트 수입니다. 복사된 실제 바이트 수가 이 메서드에서 반환됩니다.</param>
        <summary>요소를 읽고 Base64 콘텐츠를 디코딩합니다.</summary>
        <returns>버퍼에 쓴 바이트 수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
 이 메서드는 요소 내용을 읽고 Base64 인코딩을 사용 하 여 디코딩하고 디코딩된 이진 바이트를 반환 합니다 (예를 들어, 인라인 Base64 인코딩된 GIF 이미지) 버퍼에 있습니다. 자세한 내용은 RFC 1521을 참조 하세요. "MIME (Multipurpose Internet Mail Extensions) 파트 1: 메커니즘을 지정 하 고 인터넷 메시지 본문의 형식을 설명 하는 "입니다. Rfc를 구할 수는 [의견 웹 사이트에 대 한 요청](https://www.rfc-editor.org)합니다.  
  
 이 메서드는 단순 콘텐츠 요소를 읽을 수만 있습니다. 요소는 텍스트, 공백, 유효 공백 문자를 CDATA 섹션, 주석과 처리 명령을 포함할 수 있습니다. 이 자동으로 확장 하는 엔터티 참조를 포함할 수도 있습니다. 요소는 자식 요소를 가질 수 없습니다.  
  
 이 메서드는 매우 비슷합니다는 <xref:System.Xml.XmlTextReader.ReadContentAsBase64%2A> 한다는 점을 제외 하면 메서드는 요소 노드 형식에만 호출할 수 있습니다.  
  
 경우는 `count` 문서에서 바이트의 수보다 큰 값은 문서에서 바이트의 수와 동일한 경우 또는 <xref:System.Xml.XmlTextReader> 문서의 나머지 모든 바이트를 읽고 읽은 바이트 수를 반환 합니다. 다음 <xref:System.Xml.XmlTextReader> 메서드 호출 0을 반환 하 고 판독기를 노드 다음의 <xref:System.Xml.XmlNodeType.EndElement>합니다.  
  
 호출 하는 경우 <xref:System.Xml.XmlTextReader.Read%2A> 요소 내용을 모두 사용 하기 전에 판독기 겉으로 사용 된 첫 번째 콘텐츠 차례로 <xref:System.Xml.XmlTextReader.Read%2A> 메서드를 호출한 합니다. 즉, 판독기 끝 요소가 발견 될 때까지 모든 텍스트를 읽습니다. 다음 끝 태그 노드를 읽고, 다음 노드를 읽고 후속 노드에 배치 합니다.  
  
   
  
## Examples  
 참조 <xref:System.Xml.XmlReader.ReadElementContentAsBase64%2A?displayProperty=nameWithType> 에이 메서드를 사용 하는 예제를 참조 하세요.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="buffer" /> 값이 <see langword="null" />입니다.</exception>
        <exception cref="T:System.InvalidOperationException">현재 노드가 요소 노드가 아닌 경우</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">버퍼 또는 인덱스 + 카운트에 대 한 인덱스 할당된 된 버퍼 크기 보다 큽니다.</exception>
        <exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XmlTextReader" /> 구현은이 메서드를 지원 하지 않습니다.</exception>
        <exception cref="T:System.Xml.XmlException">요소가 혼합 된 콘텐츠를 포함 합니다.</exception>
        <exception cref="T:System.FormatException">콘텐츠는 요청된 된 형식으로 변환할 수 없습니다.</exception>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlTextReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsBinHex">
      <MemberSignature Language="C#" Value="public override int ReadElementContentAsBinHex (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 ReadElementContentAsBinHex(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadElementContentAsBinHex (buffer As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int ReadElementContentAsBinHex(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.ReadElementContentAsBinHex : byte[] * int * int -&gt; int" Usage="xmlTextReader.ReadElementContentAsBinHex (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="index" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="buffer">결과 텍스트를 복사해 넣을 버퍼입니다. 이 값은 <see langword="null" />일 수 없습니다.</param>
        <param name="index">버퍼에 넣을 결과 복사가 시작되는 오프셋입니다.</param>
        <param name="count">버퍼에 복사할 최대 바이트 수입니다. 복사된 실제 바이트 수가 이 메서드에서 반환됩니다.</param>
        <summary>요소를 읽고 <see langword="BinHex" /> 콘텐츠를 디코딩합니다.</summary>
        <returns>버퍼에 쓴 바이트 수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
 이 메서드는 요소 내용을 읽고, 사용 하 여 디코딩 `BinHex` 인코딩 및 디코딩된 이진 바이트를 반환 합니다 (예를 들어, 인라인 `BinHex` 인코딩된 GIF 이미지) 버퍼에 있습니다.  
  
 이 메서드는 단순 콘텐츠 요소를 읽을 수만 있습니다. 요소는 텍스트, 공백, 유효 공백 문자를 CDATA 섹션, 주석과 처리 명령을 포함할 수 있습니다. 이 자동으로 확장 하는 엔터티 참조를 포함할 수도 있습니다. 요소는 자식 요소를 가질 수 없습니다.  
  
 이 메서드는 매우 비슷합니다는 <xref:System.Xml.XmlTextReader.ReadContentAsBinHex%2A> 한다는 점을 제외 하면 메서드는 요소 노드 형식에만 호출할 수 있습니다.  
  
 경우는 `count` 문서에서 바이트의 수보다 큰 값은 문서에서 바이트의 수와 동일한 경우 또는 <xref:System.Xml.XmlTextReader> 문서의 나머지 모든 바이트를 읽고 읽은 바이트 수를 반환 합니다. 다음 <xref:System.Xml.XmlTextReader> 메서드 호출 0을 반환 하 고 판독기를 노드 다음의 <xref:System.Xml.XmlNodeType.EndElement>합니다.  
  
 호출 하는 경우 <xref:System.Xml.XmlTextReader.Read%2A> 요소 내용을 모두 사용 하기 전에 판독기 겉으로 사용 된 첫 번째 콘텐츠 차례로 <xref:System.Xml.XmlTextReader.Read%2A> 메서드를 호출한 합니다. 즉, 판독기 끝 요소가 발견 될 때까지 모든 텍스트를 읽습니다. 다음 끝 태그 노드를 읽고, 다음 노드를 읽고 후속 노드에 배치 합니다.  
  
   
  
## Examples  
 참조 <xref:System.Xml.XmlReader.ReadElementContentAsBinHex%2A?displayProperty=nameWithType> 에이 메서드를 사용 하는 예제를 참조 하세요.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="buffer" /> 값이 <see langword="null" />입니다.</exception>
        <exception cref="T:System.InvalidOperationException">현재 노드가 요소 노드가 아닌 경우</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">버퍼 또는 인덱스 + 카운트에 대 한 인덱스 할당된 된 버퍼 크기 보다 큽니다.</exception>
        <exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XmlReader" /> 구현은이 메서드를 지원 하지 않습니다.</exception>
        <exception cref="T:System.Xml.XmlException">요소가 혼합 된 콘텐츠를 포함 합니다.</exception>
        <exception cref="T:System.FormatException">콘텐츠는 요청된 된 형식으로 변환할 수 없습니다.</exception>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlTextReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ReadState">
      <MemberSignature Language="C#" Value="public override System.Xml.ReadState ReadState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.ReadState ReadState" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.ReadState" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReadState As ReadState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::ReadState ReadState { System::Xml::ReadState get(); };" />
      <MemberSignature Language="F#" Value="member this.ReadState : System.Xml.ReadState" Usage="System.Xml.XmlTextReader.ReadState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.ReadState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>판독기의 상태를 가져옵니다.</summary>
        <value><see cref="T:System.Xml.ReadState" /> 값 중 하나입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadString">
      <MemberSignature Language="C#" Value="public override string ReadString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ReadString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.ReadString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ReadString();" />
      <MemberSignature Language="F#" Value="override this.ReadString : unit -&gt; string" Usage="xmlTextReader.ReadString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>요소 또는 텍스트 노드의 내용을 문자열로 읽습니다.</summary>
        <returns>요소 또는 텍스트 노드의 내용입니다. 판독기가 요소 또는 텍스트 노드 이외의 위치에 있거나 현재 컨텍스트에 반환할 텍스트 콘텐츠가 없는 경우 이것은 빈 문자열입니다.  
  
 <see langword="Note:" /> 텍스트 노드는 요소 또는 특성 텍스트 노드입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
 요소에 배치 되 면 `ReadString` 모든 텍스트, 유효 공백 문자, 공백, 연결 및 `CData` 섹션 노드 함께 형식 및 요소 내용으로 연결 된 데이터를 반환 합니다. 처리 명령 및 메모를 포함 하 여 모든 태그가 발생 하면 중지 됩니다. 이러한 동작은 혼합 내용 모델에서 발생하거나 요소 끝 태그를 읽을 때 발생할 수 있습니다.  
  
 텍스트 노드에 있을 경우 `ReadString` 요소 끝 태그를 텍스트 노드에서 동일한 연결을 수행 합니다. 판독기가 특성 텍스트 노드에 있을 경우 `ReadString`에는 판독기가 요소 시작 태그에 있을 때와 같은 기능이 있습니다. 연결된 모든 요소 텍스트 노드를 반환합니다.  
  
   
  
## Examples  
 다음 예제에서는 각 요소의 텍스트 콘텐츠를 표시합니다.  
  
 [!code-cpp[Classic WebData XmlReader.IsStartElement Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlReader.IsStartElement Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlReader.IsStartElement Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlReader.IsStartElement Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlReader.IsStartElement Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlReader.IsStartElement Example/VB/source.vb#1)]  
  
 이 예제에서는 파일을 사용 하 여 `elems.xml`입력으로 합니다.  
  
 [!code-xml[Classic WebData XmlReader.IsStartElement Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlReader.IsStartElement Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">XML을 구문 분석하는 동안 오류가 발생했습니다.</exception>
        <exception cref="T:System.InvalidOperationException">잘못 된 작업을 시도 했습니다.</exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="ResetState">
      <MemberSignature Language="C#" Value="public void ResetState ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.ResetState" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetState ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetState();" />
      <MemberSignature Language="F#" Value="member this.ResetState : unit -&gt; unit" Usage="xmlTextReader.ResetState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>판독기의 상태를 ReadState.Initial로 다시 설정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
 이 메서드를 사용 하면 단일 스트림의 여러 XML 문서를 구문 분석할 수 있습니다. 호출할 수는 XML 문서의 끝에 도달 하면 `ResetState` 를 다음 XML 문서에 대 한 준비 판독기의 상태를 다시 설정 합니다.  
  
> [!IMPORTANT]
>  스트림에서 문서 인코딩이 동일한 공유 해야 합니다. 이 경우 없는 경우 때 `ResetState` 라고는 <xref:System.Xml.XmlException> throw 됩니다. (.NET Framework 버전 1.1 및 이전 버전에서에서 동작 변경입니다).  
  
 다음 속성을 받지 않으므로 `ResetState`합니다.  
  
-   <xref:System.Xml.XmlTextReader.Normalization%2A>  
  
-   <xref:System.Xml.XmlTextReader.Namespaces%2A>  
  
-   <xref:System.Xml.XmlTextReader.XmlResolver%2A>  
  
-   <xref:System.Xml.XmlTextReader.WhitespaceHandling%2A>  
  
   
  
## Examples  
 다음 예제에서는 단일 스트림의 두 개의 XML 문서 구문 분석합니다.  
  
 [!code-cpp[XmlTextReader.ResetState#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlTextReader.ResetState/CPP/resetstate.cpp#1)]
 [!code-csharp[XmlTextReader.ResetState#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlTextReader.ResetState/CS/resetstate.cs#1)]
 [!code-vb[XmlTextReader.ResetState#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlTextReader.ResetState/VB/resetstate.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">호출 <see langword="ResetState" /> 판독기를 사용 하 여 생성 된 경우는 <see cref="T:System.Xml.XmlParserContext" />합니다.</exception>
        <exception cref="T:System.Xml.XmlException">단일 스트림의 문서 인코딩이 동일 하는 것을 공유 하지 않습니다.</exception>
        <altmember cref="T:System.Xml.ReadState" />
      </Docs>
    </Member>
    <Member MemberName="ResolveEntity">
      <MemberSignature Language="C#" Value="public override void ResolveEntity ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ResolveEntity() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.ResolveEntity" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ResolveEntity ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ResolveEntity();" />
      <MemberSignature Language="F#" Value="override this.ResolveEntity : unit -&gt; unit" Usage="xmlTextReader.ResolveEntity " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see langword="EntityReference" /> 노드에 대해 엔터티 참조를 확인합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
 판독기가 위치에 `EntityReference` 노드 (`XmlNodeType.EntityReference`) 이면 <xref:System.Xml.XmlTextReader.Read%2A> 이 메서드를 엔터티 대체 텍스트를 구문 분석 하는 호출 후에 호출 됩니다. 엔터티 대체 텍스트를 마치면는 `EndEntity` 노드가 엔터티 참조 범위를 닫습니다 반환 됩니다.  
  
> [!NOTE]
>  이 메서드를 호출한 후 엔터티를 특성 값의 일부인 경우 호출 해야 <xref:System.Xml.XmlTextReader.ReadAttributeValue%2A> 엔터티 한 단계씩 실행 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Settings">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlReaderSettings Settings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlReaderSettings Settings" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.Settings" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Settings As XmlReaderSettings" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::XmlReaderSettings ^ Settings { System::Xml::XmlReaderSettings ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Settings : System.Xml.XmlReaderSettings" Usage="System.Xml.XmlTextReader.Settings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReaderSettings</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 <see cref="T:System.Xml.XmlTextReader" /> 인스턴스를 만드는 데 사용되는 <see cref="T:System.Xml.XmlReaderSettings" /> 개체를 가져옵니다.</summary>
        <value>이 <see cref="T:System.Xml.XmlTextReader" /> 인스턴스를 만드는 데 사용된 <see cref="T:System.Xml.XmlReaderSettings" /> 개체이거나, <see cref="Overload:System.Xml.XmlReader.Create" /> 메서드를 사용하여 판독기를 만들지 않은 경우에는 <see langword="null" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  

> [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]에서는 <xref:System.Xml.XmlReader> 클래스와 <xref:System.Xml.XmlReaderSettings> 메서드를 사용하여 <xref:System.Xml.XmlReader.Create%2A> 인스턴스를 만드는 것이 좋습니다. 그러면 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]의 새로운 기능을 모두 사용할 수 있습니다. 자세한 내용은 주의 섹션을 참조 합니다 <xref:System.Xml.XmlReader> 참조 페이지입니다.

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Skip">
      <MemberSignature Language="C#" Value="public override void Skip ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Skip() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.Skip" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Skip ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Skip();" />
      <MemberSignature Language="F#" Value="override this.Skip : unit -&gt; unit" Usage="xmlTextReader.Skip " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>현재 노드의 자식을 건너뜁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
 다음 xml에서에 판독기가 배치 하는 경우을 입력 합니다 `<a>` 노드 또는 해당 특성, 호출 `Skip` 판독기가 `<b>` 노드.  
  
 경우 판독기가 리프 노드에 이미 (같은 합니다 `<x>` 노드 또는 텍스트 노드의 `abc`)를 호출 `Skip` 호출 하는 것 같습니다 <xref:System.Xml.XmlTextReader.Read%2A>합니다.  
  
```xml  
<a name="bob" age="123">  
  <x/>abc<y/>  
</a>  
<b>  
 ...  
</b>  
```  
  
 이 메서드는 올바른 형식의 XML에 대 한 확인합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="System.Xml.IXmlLineInfo.HasLineInfo">
      <MemberSignature Language="C#" Value="bool IXmlLineInfo.HasLineInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Xml.IXmlLineInfo.HasLineInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.System#Xml#IXmlLineInfo#HasLineInfo" />
      <MemberSignature Language="VB.NET" Value="Function HasLineInfo () As Boolean Implements IXmlLineInfo.HasLineInfo" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Xml.IXmlLineInfo.HasLineInfo() = System::Xml::IXmlLineInfo::HasLineInfo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.IXmlLineInfo.HasLineInfo</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 멤버에 대한 설명은 <see cref="M:System.Xml.IXmlLineInfo.HasLineInfo" />를 참조하세요.</summary>
        <returns><see cref="P:System.Xml.IXmlLineInfo.LineNumber" />, <see cref="P:System.Xml.IXmlLineInfo.LinePosition" />을 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
이 멤버는 명시적 인터페이스 멤버 구현이며, <xref:System.Xml.XmlTextReader> 인스턴스가 <xref:System.Xml.IXmlLineInfo> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Xml.IXmlNamespaceResolver.GetNamespacesInScope">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IDictionary&lt;string,string&gt; IXmlNamespaceResolver.GetNamespacesInScope (System.Xml.XmlNamespaceScope scope);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IDictionary`2&lt;string, string&gt; System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(valuetype System.Xml.XmlNamespaceScope scope) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#GetNamespacesInScope(System.Xml.XmlNamespaceScope)" />
      <MemberSignature Language="VB.NET" Value="Function GetNamespacesInScope (scope As XmlNamespaceScope) As IDictionary(Of String, String) Implements IXmlNamespaceResolver.GetNamespacesInScope" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^ System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System::Xml::XmlNamespaceScope scope) = System::Xml::IXmlNamespaceResolver::GetNamespacesInScope;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="System.Xml.XmlNamespaceScope" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="scope">반환할 네임스페이스 노드의 형식을 지정하는 <see cref="T:System.Xml.XmlNamespaceScope" /> 값입니다.</param>
        <summary>이 멤버에 대한 설명은 <see cref="M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)" />를 참조하세요.</summary>
        <returns>현재 범위 내의 네임스페이스가 포함된 <see cref="T:System.Collections.IDictionary" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 멤버는 명시적 인터페이스 멤버 구현이며, <xref:System.Xml.XmlTextReader> 인스턴스가 <xref:System.Xml.IXmlNamespaceResolver> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="System.Xml.IXmlNamespaceResolver.LookupNamespace">
      <MemberSignature Language="C#" Value="string IXmlNamespaceResolver.LookupNamespace (string prefix);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.Xml.IXmlNamespaceResolver.LookupNamespace(string prefix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#LookupNamespace(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function LookupNamespace (prefix As String) As String Implements IXmlNamespaceResolver.LookupNamespace" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.Xml.IXmlNamespaceResolver.LookupNamespace(System::String ^ prefix) = System::Xml::IXmlNamespaceResolver::LookupNamespace;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="prefix">찾을 네임스페이스 URI의 접두사입니다.</param>
        <summary>이 멤버에 대한 설명은 <see cref="M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)" />를 참조하세요.</summary>
        <returns>접두사에 매핑된 네임스페이스 URI이거나, 접두사가 네임스페이스 URI에 매핑되지 않은 경우 <see langword="null" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 멤버는 명시적 인터페이스 멤버 구현이며, <xref:System.Xml.XmlTextReader> 인스턴스가 <xref:System.Xml.IXmlNamespaceResolver> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="System.Xml.IXmlNamespaceResolver.LookupPrefix">
      <MemberSignature Language="C#" Value="string IXmlNamespaceResolver.LookupPrefix (string namespaceName);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.Xml.IXmlNamespaceResolver.LookupPrefix(string namespaceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#LookupPrefix(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function LookupPrefix (namespaceName As String) As String Implements IXmlNamespaceResolver.LookupPrefix" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.Xml.IXmlNamespaceResolver.LookupPrefix(System::String ^ namespaceName) = System::Xml::IXmlNamespaceResolver::LookupPrefix;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="namespaceName" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="namespaceName">찾을 접두사의 네임스페이스 URI입니다.</param>
        <summary>이 멤버에 대한 설명은 <see cref="M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)" />를 참조하세요.</summary>
        <returns>네임스페이스 URI에 매핑된 접두사이거나, 네임스페이스 URI가 접두사에 매핑되지 않은 경우 <see langword="null" />입니다.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public override string Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.Value" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Value As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Value { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : string" Usage="System.Xml.XmlTextReader.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 노드의 텍스트 값을 가져옵니다.</summary>
        <value>노드의 <see cref="P:System.Xml.XmlTextReader.NodeType" />에 따라 반환되는 값이 달라집니다. 다음 표에서는 반환할 값이 있는 노드 형식을 보여 줍니다. 다른 모든 노드 형식은 <see langword="String.Empty" />를 반환합니다.  
  
 <list type="table"><listheader><term> 노드 형식 
 </term><description> 값 
 </description></listheader><item><term><see langword="Attribute" /></term><description> 특성 값  
  
 </description></item><item><term><see langword="CDATA" /></term><description> CDATA 섹션 내용입니다.  
  
 </description></item><item><term><see langword="Comment" /></term><description> 주석의 내용입니다.  
  
 </description></item><item><term><see langword="DocumentType" /></term><description> 내부 하위 집합입니다.  
  
 </description></item><item><term><see langword="ProcessingInstruction" /></term><description> 대상을 제외한 전체 내용입니다.  
  
 </description></item><item><term><see langword="SignificantWhitespace" /></term><description> 공백을 <see langword="xml:space" />= 'preserve' 범위입니다.  
  
 </description></item><item><term><see langword="Text" /></term><description> 텍스트 노드의 내용입니다.  
  
 </description></item><item><term><see langword="Whitespace" /></term><description> 태그 사이의 공백입니다.  
  
 </description></item><item><term><see langword="XmlDeclaration" /></term><description> 선언 내용입니다.  
  
 </description></item></list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
   
  
## Examples  
 다음 예제에서는 XML 파일을 읽고 각 노드를 표시 합니다.  
  
 [!code-cpp[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/VB/source.vb#1)]  
  
 파일을 사용 하는 샘플 `items.xml`합니다.  
  
 [!code-xml[Classic WebData XmlTextReader.Name Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="WhitespaceHandling">
      <MemberSignature Language="C#" Value="public System.Xml.WhitespaceHandling WhitespaceHandling { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.WhitespaceHandling WhitespaceHandling" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.WhitespaceHandling" />
      <MemberSignature Language="VB.NET" Value="Public Property WhitespaceHandling As WhitespaceHandling" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::WhitespaceHandling WhitespaceHandling { System::Xml::WhitespaceHandling get(); void set(System::Xml::WhitespaceHandling value); };" />
      <MemberSignature Language="F#" Value="member this.WhitespaceHandling : System.Xml.WhitespaceHandling with get, set" Usage="System.Xml.XmlTextReader.WhitespaceHandling" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.WhitespaceHandling</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>공백이 처리되는 방법을 지정하는 값을 가져오거나 설정합니다.</summary>
        <value><see cref="T:System.Xml.WhitespaceHandling" /> 값 중 하나입니다. 기본값은 <see langword="WhitespaceHandling.All" />이고 <see langword="Whitespace" /> <see langword="SignificantWhitespace" /> 노드를 반환합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
 이 속성은 언제 든 지 변경할 수 있습니다 및 다음 읽기 작업에 영향을 미칩니다.  
  
 때문에 `XmlTextReader` DTD 정보를 사용할 수 없는 `SignificantWhitepsace` 내만 반환 되는 노드가 `xml:space='preserve'` 범위입니다.  
  
   
  
## Examples  
 다음 예제에서는 XML 조각을 읽습니다.  
  
 [!code-cpp[Classic WebData XmlTextReader.WhitespaceHandling Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.WhitespaceHandling Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.WhitespaceHandling Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.WhitespaceHandling Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.WhitespaceHandling Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.WhitespaceHandling Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">잘못 된 값을 지정 합니다.</exception>
        <exception cref="T:System.InvalidOperationException">판독기가 닫힐 때이 속성을 설정 (<see cref="P:System.Xml.XmlTextReader.ReadState" /> 는 <see langword="ReadState.Closed" />).</exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="XmlLang">
      <MemberSignature Language="C#" Value="public override string XmlLang { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string XmlLang" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.XmlLang" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property XmlLang As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ XmlLang { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.XmlLang : string" Usage="System.Xml.XmlTextReader.XmlLang" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 <see langword="xml:lang" /> 범위를 가져옵니다.</summary>
        <value>현재 <see langword="xml:lang" /> 범위입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
 이 속성을 나타냅니다는 `xml:lang` 내 현재 노드에 있는 범위입니다. 예를 들어, 사용 하 여 XML 조각을 같습니다 `xml:lang` 루트 요소에서 영어 (미국)로 설정 합니다.  
  
 \<root xml:lang="en-us">  
  
 \<name>Fred\</name>  
  
 \</root>  
  
 판독기가 배치 하는 경우는 `name` 요소에는 영어 (미국)의 범위에는이 속성을 사용할 수 있습니다 `xml:lang` 특성입니다.  
  
   
  
## Examples  
 다음 예제에서는 표시 된 `xml:lang` 각 노드의 값입니다.  
  
 [!code-cpp[XmlTextReader.XmlLang#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlTextReader.XmlLang/CPP/readlang.cpp#1)]
 [!code-csharp[XmlTextReader.XmlLang#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlTextReader.XmlLang/CS/readlang.cs#1)]
 [!code-vb[XmlTextReader.XmlLang#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlTextReader.XmlLang/VB/readlang.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="XmlResolver">
      <MemberSignature Language="C#" Value="public System.Xml.XmlResolver XmlResolver { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlResolver XmlResolver" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.XmlResolver" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlResolver As XmlResolver" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlResolver ^ XmlResolver {  void set(System::Xml::XmlResolver ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XmlResolver : System.Xml.XmlResolver" Usage="System.Xml.XmlTextReader.XmlResolver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlResolver</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>DTD 참조를 확인하는 데 사용된 <see cref="T:System.Xml.XmlResolver" />를 설정합니다.</summary>
        <value>사용할 <see langword="XmlResolver" />입니다. <see langword="null" />로 설정되면 외부 리소스는 확인되지 않습니다.  
  
[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 버전 1.1에서는 완전히 신뢰할 수 있는 호출자만 <see langword="XmlResolver" />를 지정할 수 있습니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
 판독기를 사용 하 여 `XmlResolver` 판독기로 로드할 파일의 위치를 확인 하 고 DTD 참조를 확인 합니다. 예를 들어 XML에 포함 된 DOCTYPE 선언 `<!DOCTYPE book SYSTEM book.dtd>` 판독기가이 외부 파일을 확인 하 고 잘 구성 된 DTD 인지 확인 합니다. 판독기는 유효성 검사에 대 한 DTD를 사용 하지 않습니다.  
  
 이 속성은 언제 든 지 변경할 수 있습니다 및 다음 읽기 작업에 영향을 미칩니다. 이 속성 설정 된 경우 `null`, 판독기에서 발생 한 모든 외부 DTD 참조는 확인 되지 않습니다.  
  
 버전 1.1에에서는 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)],이 속성을 설정 하지 않으면 애플리케이션의 신뢰 수준을 기본 동작을 결정 합니다.  
  
 `Fully trusted code:` 기본값을 사용 하 여 판독기 <xref:System.Xml.XmlUrlResolver> 사용자 자격 증명 없이 합니다. 사용 하 여 네트워크 리소스에 액세스 하는 데 인증이 필요 합니다 `XmlResolver` 속성에 지정할는 `XmlResolver` 에 필요한 자격 증명입니다.  
  
 `Semi-trusted code:` 합니다 `XmlResolver` 속성이 `null`합니다. 외부 리소스가 확인 되지 않습니다.  
  
   
  
## Examples  
 다음 예제에서는 `XmlResolver` 속성 네트워크로 연결 된 파일에 액세스 하는 데 필요한 자격 증명을 지정 합니다.  
  
 [!code-cpp[XmlTextReader.XmlResolver#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlTextReader.XmlResolver/CPP/rdr_resolver.cpp#1)]
 [!code-csharp[XmlTextReader.XmlResolver#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlTextReader.XmlResolver/CS/rdr_resolver.cs#1)]
 [!code-vb[XmlTextReader.XmlResolver#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlTextReader.XmlResolver/VB/rdr_resolver.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.XmlUrlResolver.Credentials" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Net.NetworkCredential" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="XmlSpace">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlSpace XmlSpace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlSpace XmlSpace" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.XmlSpace" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property XmlSpace As XmlSpace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::XmlSpace XmlSpace { System::Xml::XmlSpace get(); };" />
      <MemberSignature Language="F#" Value="member this.XmlSpace : System.Xml.XmlSpace" Usage="System.Xml.XmlTextReader.XmlSpace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlSpace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 <see langword="xml:space" /> 범위를 가져옵니다.</summary>
        <value><see cref="T:System.Xml.XmlSpace" /> 값 중 하나입니다. <see langword="xml:space" /> 범위가 존재하지 않으면 이 속성은 기본적으로 <see langword="XmlSpace.None" />으로 설정됩니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  사용자가 만든 권장.NET Framework 2.0 부터는 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 새 기능을 활용 하는 방법입니다.  
  
   
  
## Examples  
 다음 예제에서는 파일을 구문 분석 하 고 경우에 유효 공백 문자를 반환 합니다는 `xml:space='preserve'` 범위를 찾을 수 있습니다.  
  
 [!code-cpp[XmlTextReader.XmlSpace#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlTextReader.XmlSpace/CPP/readspace.cpp#1)]
 [!code-csharp[XmlTextReader.XmlSpace#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlTextReader.XmlSpace/CS/readspace.cs#1)]
 [!code-vb[XmlTextReader.XmlSpace#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlTextReader.XmlSpace/VB/readspace.vb#1)]  
  
 이 예제에서는 파일을 사용 하 여 `authors.xml`입력으로 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
  </Members>
</Type>