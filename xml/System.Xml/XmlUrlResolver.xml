<Type Name="XmlUrlResolver" FullName="System.Xml.XmlUrlResolver">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7d406a90f389de7cb0ab9bea84dc62b5716b660a" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58703128" /></Metadata><TypeSignature Language="C#" Value="public class XmlUrlResolver : System.Xml.XmlResolver" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlUrlResolver extends System.Xml.XmlResolver" />
  <TypeSignature Language="DocId" Value="T:System.Xml.XmlUrlResolver" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlUrlResolver&#xA;Inherits XmlResolver" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlUrlResolver : System::Xml::XmlResolver" />
  <TypeSignature Language="F#" Value="type XmlUrlResolver = class&#xA;    inherit XmlResolver" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Xml.XmlResolver</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>URI(Uniform Resource Identifier)로 명명된 외부 XML 리소스를 확인합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.XmlUrlResolver> 엔터티, 문서 형식 정의 (Dtd) 또는 스키마와 같은 외부 XML 리소스를 확인 하는 데 사용 됩니다. 에 사용 되는 것도 프로세스 등 언어 XSL (Extensible StyleSheet) 스타일 시트 또는 XML 스키마 정의 언어 (XSD) 스키마에 있는 요소를 가져옵니다.  
  
 <xref:System.Xml.XmlUrlResolver> 가 모든 클래스에 대 한 기본 확인자를 <xref:System.Xml> 네임 스페이스입니다. `file://` 및 `http://` 프로토콜을 지원하고 <xref:System.Net.WebRequest> 클래스에서 요청합니다.  
  
> [!IMPORTANT]
>  <xref:System.Xml.XmlUrlResolver> 개체에는 사용자 자격 증명과 같은 중요한 정보가 포함될 수 있습니다. 캐시할 경우 주의 해야 <xref:System.Xml.XmlUrlResolver> 개체를 전달 해서는 안 <xref:System.Xml.XmlUrlResolver> 신뢰할 수 없는 구성 요소에는 개체입니다.  
  
## <a name="resolving-dtds"></a>Dtd를 확인합니다.  
 경우 XML 판독기 (<xref:System.Xml.XmlReader>) 외부 DTD가 포함 된 XML 파일을 읽고, 호출 된 <xref:System.Xml.XmlUrlResolver.GetEntityAsync%2A?displayProperty=nameWithType> DTD의 스트림 표현을 가져오는 방법입니다. XML 판독기를 호출 하는 경우 DTD의 URI가 상대 URI를를 <xref:System.Xml.XmlUrlResolver.ResolveUri%2A?displayProperty=nameWithType> 메서드에 대 한 절대 URI를 반환 하 고는 지정 된 `relativeUri` 및 `baseURi` 매개 변수입니다. 경우는 <xref:System.Xml.XmlUrlResolver> URI를 확인 하는 방법을 모르는 반환 `null`합니다.  
  
 <xref:System.Xml.XmlUrlResolver.GetEntity%2A?displayProperty=nameWithType> 메서드는 <xref:System.Xml.XmlUrlResolver.Credentials%2A> 속성의 정보를 적절히 사용하여 리소스에 액세스합니다. 보안상 이유로 이 속성에는 `get` 접근자가 없습니다. 덮어쓸 때 <xref:System.Xml.XmlResolver>, **GetEntity** 에서 자격 증명 정보를 활용 하는 방법은 합니다 **자격 증명** 속성입니다.  
  
 다른 모든 XML 리소스를 확인하는 것은 DTD를 확인하는 것과 매우 유사합니다. <xref:System.Xml.XmlResolver> 외부 리소스와의 연결을 협상 하 고 반환을 <xref:System.IO.Stream> 콘텐츠의 표현 합니다. 호출 하는 개체 <xref:System.Xml.XmlResolver> 스트림 해석 합니다.  
  
## <a name="extending-the-xmlurlresolver-class"></a>XmlUrlResolver 클래스 확장  
 <xref:System.Xml.XmlUrlResolver> 클래스의 기본 동작은 캐시가 아닌 해당 소스에서 XML 데이터 리소스를 확인하는 것입니다 경우에 따라 캐시에서 데이터 리소스를 확인하면 데이터 리소스의 서버로 이동하는 시간이 절약되므로 응용 프로그램 성능이 향상될 수 있습니다. 성능 향상을 최신 내용의 필요성과 비교하여 검토해야 합니다.  
  
 다음 예제에서는 확장 <xref:System.Xml.XmlUrlResolver> 새 클래스를 작성 하 고 `XmlCachingResolver`를 캐시에서 리소스를 검색 합니다. 이 작업은 <xref:System.Xml.XmlUrlResolver.Credentials%2A?displayProperty=nameWithType> 속성 및 <xref:System.Xml.XmlUrlResolver.GetEntity%2A?displayProperty=nameWithType> 메서드를 재정의하여 수행됩니다.  
  
 [!code-csharp[XmlCachingResolver_ex#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlCachingResolver_ex/CS/XmlCachingResolver_ex.cs#1)]
 [!code-vb[XmlCachingResolver_ex#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlCachingResolver_ex/VB/XmlCachingResolver_ex.vb#1)]  
  
 `XmlCachingResolver` 클래스의 캐시 동작은 `GetEntity` 메서드에서 구현됩니다. 이 작업은 새 <xref:System.Net.WebRequest> 및 <xref:System.Net.Cache.HttpRequestCachePolicy> 개체를 만들어서 수행됩니다. <xref:System.Net.Cache.HttpRequestCachePolicy> 개체는 <xref:System.Net.Cache.HttpRequestCacheLevel.Default> 열거형의 <xref:System.Net.Cache.HttpRequestCacheLevel> 멤버를 사용하여 만들어집니다.  
  
 <xref:System.Net.WebRequest.CachePolicy%2A> 개체의 <xref:System.Net.WebRequest> 속성은 <xref:System.Net.Cache.HttpRequestCachePolicy> 개체로 설정됩니다.  
  
 `XmlCachingResolver` 클래스의 인스턴스는 `Boolean` `enableHttpCaching`을 사용하여 만들어집니다. 이 값 설정 하면 `true`, 인스턴스 가능한 경우 기본 캐시에서 리소스를 확인 합니다. 때 `enableHttpCaching` 로 설정 된 `false`, 인스턴스는 기본 동작을 사용 하 고 해당 원본에서 리소스를 확인 합니다.  
  
> [!NOTE]
>  이 예제에서는.NET Framework의 XML 클래스 확장성을 활용합니다. 특정 응용 프로그램의 필요성을 만족시키기 위해 다른 클래스를 확장하고 사용자 지정할 수도 있습니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Xml.XmlReader> 를 사용 하는 <xref:System.Xml.XmlUrlResolver> 기본 자격 증명을 사용 하 여 합니다.  
  
 [!code-csharp[XmlResolver_Samples#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlResolver_Samples/CS/XmlResolver_Samples.cs#1)]
 [!code-vb[XmlResolver_Samples#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlResolver_Samples/VB/XmlResolver_Samples.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/standard/data/xml/index.md">XML 문서 및 데이터</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlUrlResolver ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlUrlResolver.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlUrlResolver();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Xml.XmlUrlResolver" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CachePolicy">
      <MemberSignature Language="C#" Value="public System.Net.Cache.RequestCachePolicy CachePolicy { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Cache.RequestCachePolicy CachePolicy" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlUrlResolver.CachePolicy" />
      <MemberSignature Language="VB.NET" Value="Public Property CachePolicy As RequestCachePolicy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Cache::RequestCachePolicy ^ CachePolicy {  void set(System::Net::Cache::RequestCachePolicy ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CachePolicy : System.Net.Cache.RequestCachePolicy" Usage="System.Xml.XmlUrlResolver.CachePolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.Cache.RequestCachePolicy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>내부 <see cref="T:System.Net.WebRequest" /> 개체에 대한 캐시 정책을 가져오거나 설정합니다.</summary>
        <value>내부 웹 요청에 대한 캐시 정책입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Credentials">
      <MemberSignature Language="C#" Value="public override System.Net.ICredentials Credentials { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.ICredentials Credentials" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlUrlResolver.Credentials" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Credentials As ICredentials" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Net::ICredentials ^ Credentials {  void set(System::Net::ICredentials ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Credentials : System.Net.ICredentials" Usage="System.Xml.XmlUrlResolver.Credentials" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.ICredentials</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>웹 요청을 인증하는 데 사용된 자격 증명을 설정합니다.</summary>
        <value>웹 요청을 인증하는 데 사용하는 자격 증명입니다. 이 속성이 설정되지 않으면 기본적으로 값은 <see langword="null" />로 설정됩니다. 즉, <see langword="XmlUrlResolver" />에 사용자 자격 증명이 없습니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 가상 디렉터리에는 인증이 필요 하지 않은, 하는 경우이 속성이 필요는 없습니다 설정 해야 합니다. 그렇지 않으면 사용자의 자격 증명이 제공 되어야 합니다.  
  
 다른 Uri를 사용 하 여 다른 자격 증명을 연결 하 고 캐시에 추가할 수 있습니다. 다음 XML의 원래 소스에 관계 없이 다른 Uri에 대 한 인증을 확인 하려면 자격 증명을 사용할 수 있습니다.  
  
 다음 C# 코드를 설정 하는 방법을 보여 줍니다는 <xref:System.Xml.XmlUrlResolver.Credentials%2A> 자격 증명 캐시에는 속성입니다.  
  
```csharp  
NetworkCredential myCred = new NetworkCredential(UserName,SecurelyStoredPassword,Domain);   
CredentialCache myCache = new CredentialCache();   
myCache.Add(new Uri("http://www.contoso.com/"), "Basic", myCred);   
myCache.Add(new Uri("http://app.contoso.com/"), "Basic", myCred);  
XmlUrlResolver resolver = new XmlUrlResolver();  
resolver.Credentials = myCache;  
```  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Xml.XmlUrlResolver> 자격 증명을 사용 하 여 개체입니다. <xref:System.Xml.XmlReader> 에서 자격 증명을 사용 하는 <xref:System.Xml.XmlUrlResolver> 네트워크 리소스에 액세스 하는 개체입니다.  
  
 [!code-csharp[XmlResolver_Samples#2](~/samples/snippets/csharp/VS_Snippets_Data/XmlResolver_Samples/CS/XmlResolver_Samples.cs#2)]
 [!code-vb[XmlResolver_Samples#2](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlResolver_Samples/VB/XmlResolver_Samples.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Net.NetworkCredential" />
      </Docs>
    </Member>
    <Member MemberName="GetEntity">
      <MemberSignature Language="C#" Value="public override object GetEntity (Uri absoluteUri, string role, Type ofObjectToReturn);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object GetEntity(class System.Uri absoluteUri, string role, class System.Type ofObjectToReturn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlUrlResolver.GetEntity(System.Uri,System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEntity (absoluteUri As Uri, role As String, ofObjectToReturn As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ GetEntity(Uri ^ absoluteUri, System::String ^ role, Type ^ ofObjectToReturn);" />
      <MemberSignature Language="F#" Value="override this.GetEntity : Uri * string * Type -&gt; obj" Usage="xmlUrlResolver.GetEntity (absoluteUri, role, ofObjectToReturn)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="absoluteUri" Type="System.Uri" />
        <Parameter Name="role" Type="System.String" />
        <Parameter Name="ofObjectToReturn" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="absoluteUri"><see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" />에서 반환된 URI입니다.</param>
        <param name="role">현재 사용되지 않습니다.</param>
        <param name="ofObjectToReturn">반환할 개체의 형식입니다. 현재 구현에서는 <see cref="T:System.IO.Stream" /> 개체만 반환합니다.</param>
        <summary>실제 리소스가 포함된 개체로 URI를 매핑합니다.</summary>
        <returns>스트림 개체이거나, 스트림 외의 다른 형식이 지정된 경우 <see langword="null" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 호출자가 URI가 나타내는 리소스를 포함 하는 개체에 지정된 된 URI에 매핑할 때 사용 됩니다.  
  
 이 메서드의 비동기 버전을 참조 하세요. <xref:System.Xml.XmlUrlResolver.GetEntityAsync%2A>합니다.  
  
> [!IMPORTANT]
>  응용 프로그램 메모리에 대 한 서비스 거부를 완화할 수는 <xref:System.Xml.XmlUrlResolver.GetEntity%2A> IStream을 구현 하 여 메서드 <xref:System.Runtime.InteropServices.ComTypes.IStream> 읽은 바이트 수를 제한 합니다. 이렇게 하면 악성 코드가 무한 바이트 스트림을를 전달 하려고 시도 하는 위치는 상황에 대 한 보호를 <xref:System.Xml.XmlUrlResolver.GetEntity%2A> 메서드.  
  
   
  
## Examples  
 다음 예제는 `GetEntity` 고 <xref:System.Xml.XmlResolver.ResolveUri%2A> 메서드.  
  
 [!code-cpp[Classic WebData XmlUrlResolver.ResolveUri Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlUrlResolver.ResolveUri Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlUrlResolver.ResolveUri Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlUrlResolver.ResolveUri Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlUrlResolver.ResolveUri Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlUrlResolver.ResolveUri Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException"><paramref name="ofObjectToReturn" />이 <see langword="null" /> 또는 <see langword="Stream" /> 형식이 아닌 경우</exception>
        <exception cref="T:System.UriFormatException">지정된 URI가 절대 URI가 아닌 경우</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="absoluteUri" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.Exception">런타임 오류(예: 중단된 서버 연결)가 발생한 경우</exception>
        <altmember cref="T:System.Uri" />
      </Docs>
    </Member>
    <Member MemberName="GetEntityAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;object&gt; GetEntityAsync (Uri absoluteUri, string role, Type ofObjectToReturn);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;object&gt; GetEntityAsync(class System.Uri absoluteUri, string role, class System.Type ofObjectToReturn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlUrlResolver.GetEntityAsync(System.Uri,System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEntityAsync (absoluteUri As Uri, role As String, ofObjectToReturn As Type) As Task(Of Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task&lt;System::Object ^&gt; ^ GetEntityAsync(Uri ^ absoluteUri, System::String ^ role, Type ^ ofObjectToReturn);" />
      <MemberSignature Language="F#" Value="override this.GetEntityAsync : Uri * string * Type -&gt; System.Threading.Tasks.Task&lt;obj&gt;" Usage="xmlUrlResolver.GetEntityAsync (absoluteUri, role, ofObjectToReturn)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="absoluteUri" Type="System.Uri" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="role" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="ofObjectToReturn" Type="System.Type" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="absoluteUri"><see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" />에서 반환된 URI입니다.</param>
        <param name="role">현재 사용되지 않습니다.</param>
        <param name="ofObjectToReturn">반환할 개체의 형식입니다. 현재 구현에서는 <see cref="T:System.IO.Stream" /> 개체만 반환합니다.</param>
        <summary>실제 리소스가 포함된 개체로 URI를 비동기적으로 매핑합니다.</summary>
        <returns>스트림 개체이거나, 스트림 외의 다른 형식이 지정된 경우 <see langword="null" />입니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Proxy">
      <MemberSignature Language="C#" Value="public System.Net.IWebProxy Proxy { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.IWebProxy Proxy" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlUrlResolver.Proxy" />
      <MemberSignature Language="VB.NET" Value="Public Property Proxy As IWebProxy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::IWebProxy ^ Proxy {  void set(System::Net::IWebProxy ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Proxy : System.Net.IWebProxy" Usage="System.Xml.XmlUrlResolver.Proxy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.IWebProxy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>기본 <see cref="T:System.Net.WebRequest" /> 개체에 대한 캐시 정책을 가져오거나 설정합니다.</summary>
        <value>인터넷 리소스에 액세스하기 위해 사용할 <see cref="T:System.Net.IWebProxy" />입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolveUri">
      <MemberSignature Language="C#" Value="public override Uri ResolveUri (Uri baseUri, string relativeUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Uri ResolveUri(class System.Uri baseUri, string relativeUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlUrlResolver.ResolveUri(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ResolveUri (baseUri As Uri, relativeUri As String) As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Uri ^ ResolveUri(Uri ^ baseUri, System::String ^ relativeUri);" />
      <MemberSignature Language="F#" Value="override this.ResolveUri : Uri * string -&gt; Uri" Usage="xmlUrlResolver.ResolveUri (baseUri, relativeUri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseUri" Type="System.Uri" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="relativeUri" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="baseUri">상대 URI를 확인하는 데 사용된 기본 URI입니다.</param>
        <param name="relativeUri">확인할 URI입니다. 절대 URI나 상대 URI일 수 있습니다. 절대 URI인 경우 이 값은 <paramref name="baseUri" /> 값을 효율적으로 대체합니다. 상대 URI인 경우 <paramref name="baseUri" />와 결합하여 절대 URI를 만듭니다.</param>
        <summary>기본 및 상대 URI에서 절대 URI를 확인합니다.</summary>
        <returns>절대 URI이거나, 상대 URI를 확인할 수 없는 경우 <see langword="null" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 절대 URI이이 URI와 관련 된 엔터티에 대 한 후속 요청에 대 한 기본 URI로 사용할 수 있습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="baseUri" />가 <see langword="null" />이거나 <paramref name="relativeUri" />가 <see langword="null" />인 경우</exception>
        <block subset="none" type="overrides"><para>이 메서드는 상속 요청. 재정의 하려면 완전 신뢰가 필요 합니다 <see cref="M:System.Xml.XmlUrlResolver.ResolveUri(System.Uri,System.String)" /> 메서드.</para></block>
      </Docs>
    </Member>
  </Members>
</Type>