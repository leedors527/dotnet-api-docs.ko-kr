<Type Name="XmlValidatingReader" FullName="System.Xml.XmlValidatingReader">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b2799c74b5d9f360a02646bb795ab2a0debce9d9" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="64996569" /></Metadata><TypeSignature Language="C#" Value="public class XmlValidatingReader : System.Xml.XmlReader, System.Xml.IXmlLineInfo, System.Xml.IXmlNamespaceResolver" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlValidatingReader extends System.Xml.XmlReader implements class System.Xml.IXmlLineInfo, class System.Xml.IXmlNamespaceResolver" />
  <TypeSignature Language="DocId" Value="T:System.Xml.XmlValidatingReader" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlValidatingReader&#xA;Inherits XmlReader&#xA;Implements IXmlLineInfo, IXmlNamespaceResolver" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlValidatingReader : System::Xml::XmlReader, System::Xml::IXmlLineInfo, System::Xml::IXmlNamespaceResolver" />
  <TypeSignature Language="F#" Value="type XmlValidatingReader = class&#xA;    inherit XmlReader&#xA;    interface IXmlLineInfo&#xA;    interface IXmlNamespaceResolver" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Xml.XmlReader</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Xml.IXmlLineInfo</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Xml.IXmlNamespaceResolver</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
      <AttributeName>System.Obsolete("Use XmlReader created by XmlReader.Create() method using appropriate XmlReaderSettings instead. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-3.0;netstandard-2.1">
      <AttributeName>System.Obsolete("Use XmlReader created by XmlReader.Create() method using appropriate XmlReaderSettings instead. https://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>DTD(문서 종류 정의), XDR(XML-Data Reduced) 스키마 및 XSD(XML 스키마 정의 언어)의 유효성 검사를 제공하는 판독기를 나타냅니다.  
  
이 클래스는 사용되지 않습니다. .NET Framework 2.0으로 시작하여 유효성 검사 XML 판독기를 만들려면 <see cref="T:System.Xml.XmlReaderSettings" /> 클래스 및 <see cref="Overload:System.Xml.XmlReader.Create" /> 메서드를 사용하는 것이 좋습니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `XmlValidatingReader` 구현 된 <xref:System.Xml.XmlReader> 클래스 및 데이터 유효성 검사에 대 한 지원을 제공 합니다. 사용 합니다 <xref:System.Xml.XmlValidatingReader.Schemas%2A> 속성에 캐시 된 스키마 파일을 사용 하 여 유효성 검사 판독기는 <xref:System.Xml.Schema.XmlSchemaCollection>합니다. <xref:System.Xml.XmlValidatingReader.ValidationType%2A> 속성은 판독기가 수행할 유효성 검사의 유형을 지정 합니다. 유효성 검사 없는 판독기를 만듭니다 ValidationType.None 속성을 설정 합니다.  
  
 <xref:System.Xml.XmlValidatingReader> throw는 <xref:System.Xml.XmlException> xml 구문 분석 오류입니다. 예외가 throw 된 후 판독기의 상태 예측 가능한 아닙니다. 예를 들어, 보고 된 노드 유형을 현재 노드의 실제 노드 형식과 다를 수 있습니다. 사용 된 <xref:System.Xml.XmlValidatingReader.ReadState%2A> 판독기가 오류 상태 인지 여부를 확인할 속성입니다.  
  
> [!NOTE]
>  합니다 <xref:System.Xml.XmlValidatingReader> 클래스에서 사용 되지 [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]합니다. 유효성 검사를 만들 수 있습니다 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReaderSettings> 클래스 및 <xref:System.Xml.XmlReader.Create%2A> 메서드. 자세한 내용은 <xref:System.Xml.XmlReader> 참조 페이지의 설명 섹션을 참조하세요.  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>이 클래스는 상속 요청이 있습니다. 완전 신뢰에서 상속 해야 <see langword="XmlValidatingReader" />합니다.</para></block>
    <altmember cref="T:System.Xml.XmlReader" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see langword="XmlValidatingReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlValidatingReader (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.#ctor(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (reader As XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlValidatingReader(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlValidatingReader : System.Xml.XmlReader -&gt; System.Xml.XmlValidatingReader" Usage="new System.Xml.XmlValidatingReader reader" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">유효성을 검사하는 동안 읽을 <see langword="XmlReader" />입니다. 현재 구현은 <see cref="T:System.Xml.XmlTextReader" />만 지원합니다.</param>
        <summary>주어진 <see cref="T:System.Xml.XmlReader" />에서 반환된 콘텐츠의 유효성을 검사하는 <see langword="XmlValidatingReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  합니다 <xref:System.Xml.XmlValidatingReader> 클래스에서 사용 되지 [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]합니다. 유효성 검사를 만들 수 있습니다 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReaderSettings> 클래스 및 <xref:System.Xml.XmlReader.Create%2A> 메서드. 자세한 내용은 <xref:System.Xml.XmlReader> 참조 페이지의 설명 섹션을 참조하세요.  
  
 반환 된 모든 노드는 지정 된 `XmlReader` 진행에서 정보 손실 없이 이므로 유효성 검사 판독기에서 반환도 됩니다. 새 노드를 기본 판독기에서 반환 되지 않습니다 (예를 들어, 기본 특성 및 엔터티 참조의 자식)이이 판독기에서 추가할 수 있습니다. 에 설정 된 모든 속성을 지정 `XmlTextReader` 이 유효성 검사 판독기에도 적용 합니다. 예를 들어 제공 된 판독기 WhitespaceHandling.None 집합 있으면이 유효성 검사 판독기 공백을 무시 합니다.  
  
 외부 문서 유형 정의 (Dtd) 또는 스키마 유효성 검사를 위해 필요한 경우는 <xref:System.Xml.XmlValidatingReader.XmlResolver%2A> 속성 집합을 <xref:System.Xml.XmlResolver> 외부 리소스 확인에 사용할 개체입니다.  
  
   
  
## Examples  
 다음 예제에서는 두 개의 문서를 확인합니다.  
  
 [!code-cpp[XmlValidatingReader.Cctor#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlValidatingReader.Cctor/CPP/valid_xsd2.cpp#1)]
 [!code-csharp[XmlValidatingReader.Cctor#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlValidatingReader.Cctor/CS/valid_xsd2.cs#1)]
 [!code-vb[XmlValidatingReader.Cctor#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlValidatingReader.Cctor/VB/valid_xsd2.vb#1)]  
  
 이 샘플에서는 다음 입력된 파일 사용:  
  
 `notValidXSD.xml`  
  
 [!code-xml[XmlValidatingReader.Cctor#2](~/samples/snippets/xml/VS_Snippets_Data/XmlValidatingReader.Cctor/XML/notvalidxsd.xml#2)]  
  
 `books.xsd`  
  
 [!code-xml[XmlValidatingReader.Cctor#3](~/samples/snippets/xml/VS_Snippets_Data/XmlValidatingReader.Cctor/XML/books.xsd#3)]  
  
 `inlineXSD.xml`  
  
 [!code-xml[XmlValidatingReader.Cctor#4](~/samples/snippets/xml/VS_Snippets_Data/XmlValidatingReader.Cctor/XML/inlinexsd.xml#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">지정 된 판독기를 <see langword="XmlTextReader" />입니다.</exception>
        <altmember cref="T:System.Xml.XmlTextReader" />
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlValidatingReader (System.IO.Stream xmlFragment, System.Xml.XmlNodeType fragType, System.Xml.XmlParserContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream xmlFragment, valuetype System.Xml.XmlNodeType fragType, class System.Xml.XmlParserContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.#ctor(System.IO.Stream,System.Xml.XmlNodeType,System.Xml.XmlParserContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (xmlFragment As Stream, fragType As XmlNodeType, context As XmlParserContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlValidatingReader(System::IO::Stream ^ xmlFragment, System::Xml::XmlNodeType fragType, System::Xml::XmlParserContext ^ context);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlValidatingReader : System.IO.Stream * System.Xml.XmlNodeType * System.Xml.XmlParserContext -&gt; System.Xml.XmlValidatingReader" Usage="new System.Xml.XmlValidatingReader (xmlFragment, fragType, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="xmlFragment" Type="System.IO.Stream" />
        <Parameter Name="fragType" Type="System.Xml.XmlNodeType" />
        <Parameter Name="context" Type="System.Xml.XmlParserContext" />
      </Parameters>
      <Docs>
        <param name="xmlFragment">구문 분석할 XML 조각을 포함하는 스트림입니다.</param>
        <param name="fragType">XML 조각의 <see cref="T:System.Xml.XmlNodeType" />입니다. 이 매개 변수는 조각에 포함되는 내용을 결정합니다(아래 표 참조).</param>
        <param name="context">XML 조각을 구문 분석할 <see cref="T:System.Xml.XmlParserContext" />입니다. 사용할 <see cref="T:System.Xml.XmlNameTable" />, 인코딩, 네임스페이스 범위, 현재 <see langword="xml:lang" /> 및 <see langword="xml:space" /> 범위가 포함됩니다.</param>
        <summary>지정된 값을 사용하여 <see langword="XmlValidatingReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  합니다 <xref:System.Xml.XmlValidatingReader> 클래스에서 사용 되지 [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]합니다. 유효성 검사를 만들 수 있습니다 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReaderSettings> 클래스 및 <xref:System.Xml.XmlReader.Create%2A> 메서드. 자세한 내용은 <xref:System.Xml.XmlReader> 참조 페이지의 설명 섹션을 참조하세요.  
  
 이 생성자는 XML 조각으로 지정 된 문자열을 구문 분석 합니다. XML 조각 요소 또는 특성 이면 올바른 형식의 XML 문서에 대 한 루트 수준 규칙을 무시할 수 있습니다.  
  
 다음 표에 대 한 유효한 값 `fragType` 판독기 다른 노드 형식 구문 분석 하는 방법 및 합니다.  
  
|XmlNodeType|조각에 포함 됩니다.|  
|-----------------|--------------------------|  
|요소|모든 유효한 요소 내용 (예를 들어, 요소, 주석, 처리 명령, cdata, 텍스트 및 엔터티 참조의 모든 조합)입니다.|  
|특성|값 특성 (따옴표 내 부분)입니다.|  
|문서|전체 XML 문서의 내용 이 문서 수준 규칙을 적용 합니다.|  
  
 판독기 스트림의 인코딩을 결정 하려면 다음 단계를 사용 합니다.  
  
1.  확인 된 <xref:System.Xml.XmlParserContext.Encoding%2A?displayProperty=nameWithType> 인코딩을 결정 하는 속성입니다.  
  
2.  경우는 `Encoding` 속성은 `null`, 판독기가 스트림의 시작 부분에서 바이트 순서 표시를 위한 확인 합니다.  
  
3.  경우는 `Encoding` 속성은 `null`, 바이트 순서 표시가 없는 발견 되 고 판독기 스트림이 u t F-8에서 인코딩된 것으로 가정 합니다.  
  
 이 판독기 유효성을 검사할 문서 형식 정의 (DTD)를 사용 하는 경우 (즉, <xref:System.Xml.XmlValidatingReader.ValidationType%2A> validationtype.dtd로 또는 ValidationType.Auto로 설정), `XmlParserContext` 에 지정 된 생성자는 필요한 모든 DocumentType 정보를 제공 해야 합니다.  
  
> [!NOTE]
>  DTD를 사용 하 여 조각 유효성을 검사 하는 것이 불가능 합니다. 정의 따라 DTD 유효성 검사에 대 한 로드 되도록 전체 문서가 필요 합니다.  
  
 이 판독기는 Xml-data Reduced (XDR) 또는 XML 스키마 정의 언어 (XSD) 스키마를 사용 하 여 유효성을 검사 하는, 하는 경우 사용 하 여는 <xref:System.Xml.XmlValidatingReader.Schemas%2A> 속성을 지정 합니다 <xref:System.Xml.Schema.XmlSchemaCollection> 스키마를 포함 하는 (즉,는 `XmlParserContext` 제공할 필요가 없습니다를 DocumentType 정보)입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException"><paramref name="fragType" /> 아래 표에 나열 된 노드 형식 중 하나가 아닙니다.</exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlValidatingReader (string xmlFragment, System.Xml.XmlNodeType fragType, System.Xml.XmlParserContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string xmlFragment, valuetype System.Xml.XmlNodeType fragType, class System.Xml.XmlParserContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.#ctor(System.String,System.Xml.XmlNodeType,System.Xml.XmlParserContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (xmlFragment As String, fragType As XmlNodeType, context As XmlParserContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlValidatingReader(System::String ^ xmlFragment, System::Xml::XmlNodeType fragType, System::Xml::XmlParserContext ^ context);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlValidatingReader : string * System.Xml.XmlNodeType * System.Xml.XmlParserContext -&gt; System.Xml.XmlValidatingReader" Usage="new System.Xml.XmlValidatingReader (xmlFragment, fragType, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="xmlFragment" Type="System.String" />
        <Parameter Name="fragType" Type="System.Xml.XmlNodeType" />
        <Parameter Name="context" Type="System.Xml.XmlParserContext" />
      </Parameters>
      <Docs>
        <param name="xmlFragment">구문 분석할 XML 조각을 포함하는 문자열입니다.</param>
        <param name="fragType">XML 조각의 <see cref="T:System.Xml.XmlNodeType" />입니다. 이 매개 변수는 조각에 포함되는 내용도 결정합니다(아래 표 참조).</param>
        <param name="context">XML 조각을 구문 분석할 <see cref="T:System.Xml.XmlParserContext" />입니다. 사용할 <see cref="T:System.Xml.NameTable" />, 인코딩, 네임스페이스 범위, 현재 xml:lang 및 xml:space 범위가 포함됩니다.</param>
        <summary>지정된 값을 사용하여 <see langword="XmlValidatingReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  합니다 <xref:System.Xml.XmlValidatingReader> 클래스에서 사용 되지 [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]합니다. 유효성 검사를 만들 수 있습니다 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReaderSettings> 클래스 및 <xref:System.Xml.XmlReader.Create%2A> 메서드. 자세한 내용은 <xref:System.Xml.XmlReader> 참조 페이지의 설명 섹션을 참조하세요.  
  
 이 생성자는 XML 조각으로 지정 된 문자열을 구문 분석 합니다. XML 조각 요소 또는 특성 이면 올바른 형식의 XML 문서에 대 한 루트 수준 규칙을 무시할 수 있습니다. 이 생성자에서 반환 된 문자열을 처리할 수 <xref:System.Xml.XmlReader.ReadInnerXml%2A>입니다.  
  
 다음 표에 대 한 유효한 값 `fragType` 판독기 다른 노드 형식 구문 분석 하는 방법 및 합니다.  
  
|XmlNodeType|조각에 포함 됩니다.|  
|-----------------|--------------------------|  
|요소|모든 유효한 요소 내용 (예를 들어, 요소, 주석, 처리 명령, cdata, 텍스트 및 엔터티 참조의 모든 조합)입니다.|  
|특성|값 특성 (따옴표 내 부분)입니다.|  
|문서|전체 XML 문서의 내용 이 문서 수준 규칙을 적용 합니다.|  
  
 이 판독기 문서 형식 정의 (DTD)를 사용 하 여 유효성을 검사할 경우 (즉, <xref:System.Xml.XmlValidatingReader.ValidationType%2A> validationtype.dtd로 또는 ValidationType.Auto로 설정), `XmlParserContext` 에 지정 된 생성자는 필요한 모든 DocumentType 정보를 제공 해야 합니다.  
  
> [!NOTE]
>  DTD를 사용 하 여 조각 유효성을 검사 하는 것이 불가능 합니다. 정의 따라 DTD 유효성 검사에 대 한 로드 되도록 전체 문서가 필요 합니다.  
  
 이 판독기는 Xml-data Reduced (XDR) 또는 XML 스키마 정의 언어 (XSD) 스키마를 사용 하 여 유효성을 검사 하는, 하는 경우 사용 하 여는 <xref:System.Xml.XmlValidatingReader.Schemas%2A> 속성을 지정 합니다 <xref:System.Xml.Schema.XmlSchemaCollection> 스키마를 포함 하는 (는 `XmlParserContext` DocumentType 제공할 필요가 없습니다 정보)입니다.  
  
   
  
## Examples  
 다음 예제에서는 XML 조각을 읽습니다. 사용 하 여는 `XmlParserContext` 고 <xref:System.Xml.XmlNamespaceManager> 네임 스페이스와 일치 하는 처리 하도록 합니다.  
  
 [!code-csharp[Classic WebData XmlParserContext.XmlParserContext Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlParserContext.XmlParserContext Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlParserContext.XmlParserContext Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlParserContext.XmlParserContext Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException"><paramref name="fragType" /> 아래 표에 나열 된 노드 형식 중 하나가 아닙니다.</exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="AttributeCount">
      <MemberSignature Language="C#" Value="public override int AttributeCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AttributeCount" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.AttributeCount" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property AttributeCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int AttributeCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.AttributeCount : int" Usage="System.Xml.XmlValidatingReader.AttributeCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 노드의 특성 수를 가져옵니다.</summary>
        <value>현재 노드에 포함된 특성의 수입니다. 이 수에는 기본 특성이 포함됩니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  합니다 <xref:System.Xml.XmlValidatingReader> 클래스에서 사용 되지 [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]합니다. 유효성 검사를 만들 수 있습니다 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReaderSettings> 클래스 및 <xref:System.Xml.XmlReader.Create%2A> 메서드. 자세한 내용은 <xref:System.Xml.XmlReader> 참조 페이지의 설명 섹션을 참조하세요.  
  
 이 속성이 관련이 `Element`, `DocumentType`, 및 `XmlDeclaration` 노드만 있습니다. (다른 노드 형식 특성이 없습니다.)  
  
   
  
## Examples  
 다음 예제에서는 루트 노드의 모든 요소를 읽습니다.  
  
 [!code-cpp[Classic WebData XmlValidatingReader.AttributeCount Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.AttributeCount Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.AttributeCount Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.AttributeCount Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.AttributeCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.AttributeCount Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="BaseURI">
      <MemberSignature Language="C#" Value="public override string BaseURI { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BaseURI" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.BaseURI" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property BaseURI As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ BaseURI { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseURI : string" Usage="System.Xml.XmlValidatingReader.BaseURI" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 노드의 기본 URI를 가져옵니다.</summary>
        <value>현재 노드의 기본 URI입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  합니다 <xref:System.Xml.XmlValidatingReader> 클래스에서 사용 되지 [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]합니다. 유효성 검사를 만들 수 있습니다 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReaderSettings> 클래스 및 <xref:System.Xml.XmlReader.Create%2A> 메서드. 자세한 내용은 <xref:System.Xml.XmlReader> 참조 페이지의 설명 섹션을 참조하세요.  
  
 네트워크에 연결 된 XML 문서를 World Wide Web Consortium (W3C)에서 제공 하는 다양 한 표준 포함 메커니즘을 사용 하 여 집계 된 데이터의 청크 이루어져 및 서로 다른 위치에서 제공 되는 노드를 포함 합니다. 문서 유형 정의 (DTD) 엔터티는이 예가 있지만이 Dtd에 제한 되지 않습니다. 기본 URI 알려 이러한 노드를 가져온 위치입니다. 반환 되는 노드에 대 한 기본 URI 인지 (예를 들어, 구문 분석 된 경우 메모리 내 문자열에서), String.Empty가 반환 됩니다.  
  
   
  
## Examples  
 다음 예제에서는 파일의 구문 분석 하 고 각 노드의 기본 URI를 표시 합니다.  
  
 [!code-cpp[Classic WebData XmlValidatingReader.BaseURI Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.BaseURI Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.BaseURI Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.BaseURI Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.BaseURI Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.BaseURI Example/VB/source.vb#1)]  
  
 이 예제에서는 파일을 사용 하 여 `uri.xml`입력으로 합니다.  
  
 [!code-xml[Classic WebData XmlValidatingReader.BaseURI Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.BaseURI Example/XML/source.xml#2)]  
  
 합니다 `style.xml` XML 텍스트를 포함 하는 파일 `<style>hardcover</style>`합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="CanReadBinaryContent">
      <MemberSignature Language="C#" Value="public override bool CanReadBinaryContent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanReadBinaryContent" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.CanReadBinaryContent" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanReadBinaryContent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanReadBinaryContent { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanReadBinaryContent : bool" Usage="System.Xml.XmlValidatingReader.CanReadBinaryContent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Xml.XmlValidatingReader" />가 이진 콘텐츠 읽기 메서드를 구현하는지를 나타내는 값을 가져옵니다.</summary>
        <value>이진 콘텐츠 읽기 메서드를 구현하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. <see cref="T:System.Xml.XmlValidatingReader" /> 클래스는 <see langword="true" />를 반환합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  합니다 <xref:System.Xml.XmlValidatingReader> 클래스에서 사용 되지 [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]합니다. 유효성 검사를 만들 수 있습니다 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReaderSettings> 클래스 및 <xref:System.Xml.XmlReader.Create%2A> 메서드. 자세한 내용은 <xref:System.Xml.XmlReader> 참조 페이지의 설명 섹션을 참조하세요. 
  
 이진 콘텐츠 읽기 메서드를 포함 합니다 <xref:System.Xml.XmlValidatingReader.ReadContentAsBase64%2A>, <xref:System.Xml.XmlValidatingReader.ReadContentAsBinHex%2A>를 <xref:System.Xml.XmlValidatingReader.ReadElementContentAsBase64%2A>, 및 <xref:System.Xml.XmlValidatingReader.ReadElementContentAsBinHex%2A> 메서드.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="CanResolveEntity">
      <MemberSignature Language="C#" Value="public override bool CanResolveEntity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanResolveEntity" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.CanResolveEntity" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanResolveEntity As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanResolveEntity { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanResolveEntity : bool" Usage="System.Xml.XmlValidatingReader.CanResolveEntity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 판독기가 엔터티를 구문 분석하고 확인할 수 있는지를 나타내는 값을 가져옵니다.</summary>
        <value>판독기가 엔터티를 구문 분석하고 확인할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. <see langword="XmlValidatingReader" />는 항상 <see langword="true" />를 반환합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  합니다 <xref:System.Xml.XmlValidatingReader> 클래스에서 사용 되지 [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]합니다. 유효성 검사를 만들 수 있습니다 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReaderSettings> 클래스 및 <xref:System.Xml.XmlReader.Create%2A> 메서드. 자세한 내용은 <xref:System.Xml.XmlReader> 참조 페이지의 설명 섹션을 참조하세요.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="override this.Close : unit -&gt; unit" Usage="xmlValidatingReader.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="P:System.Xml.XmlReader.ReadState" />를 Closed로 변경합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  합니다 <xref:System.Xml.XmlValidatingReader> 클래스에서 사용 되지 [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]합니다. 유효성 검사를 만들 수 있습니다 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReaderSettings> 클래스 및 <xref:System.Xml.XmlReader.Create%2A> 메서드. 자세한 내용은 <xref:System.Xml.XmlReader> 참조 페이지의 설명 섹션을 참조하세요.  
  
 이 메서드는 또한 읽는 동안 보유 한 모든 리소스를 해제 합니다. 이 판독기를 사용 하 여 생성 된 경우는 <xref:System.Xml.XmlTextReader>, 또한이 메서드 호출 `Close` 는 내부 판독기입니다. 이 판독기에는 스트림을 사용 하 여 생성 된 경우이 메서드 호출 `Close` 내부 스트림 합니다.  
  
 경우 `Close` 이미 호출 조치가 수행 됩니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Depth">
      <MemberSignature Language="C#" Value="public override int Depth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Depth" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.Depth" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Depth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int Depth { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Depth : int" Usage="System.Xml.XmlValidatingReader.Depth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>XML 문서에서 현재 노드의 수준을 가져옵니다.</summary>
        <value>XML 문서의 현재 노드 수준입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  합니다 <xref:System.Xml.XmlValidatingReader> 클래스에서 사용 되지 [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]합니다. 유효성 검사를 만들 수 있습니다 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReaderSettings> 클래스 및 <xref:System.Xml.XmlReader.Create%2A> 메서드. 자세한 내용은 <xref:System.Xml.XmlReader> 참조 페이지의 설명 섹션을 참조하세요.  
  
   
  
## Examples  
 다음 예에서는 수준, 줄 번호 및 줄 위치를 포함 하 여 각 노드를 표시 합니다.  
  
 [!code-cpp[IXmlLineInfo#1](~/samples/snippets/cpp/VS_Snippets_Data/IXmlLineInfo/CPP/lineinfo.cpp#1)]
 [!code-csharp[IXmlLineInfo#1](~/samples/snippets/csharp/VS_Snippets_Data/IXmlLineInfo/CS/lineinfo.cs#1)]
 [!code-vb[IXmlLineInfo#1](~/samples/snippets/visualbasic/VS_Snippets_Data/IXmlLineInfo/VB/lineinfo.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.IXmlLineInfo" />
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public System.Text.Encoding Encoding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding Encoding" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.Encoding" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Encoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Encoding ^ Encoding { System::Text::Encoding ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Encoding : System.Text.Encoding" Usage="System.Xml.XmlValidatingReader.Encoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>문서의 인코딩 특성을 가져옵니다.</summary>
        <value>인코딩 값입니다. 인코딩 특성이 없는 경우 바이트 순서 표시가 없으면 기본값은 UTF-8로 설정됩니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  합니다 <xref:System.Xml.XmlValidatingReader> 클래스에서 사용 되지 [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]합니다. 유효성 검사를 만들 수 있습니다 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReaderSettings> 클래스 및 <xref:System.Xml.XmlReader.Create%2A> 메서드. 자세한 내용은 <xref:System.Xml.XmlReader> 참조 페이지의 설명 섹션을 참조하세요.  
  
 (예: 문서 형식 정의 (DTD) 파일에서 엔터티를 확장 또는 스키마 파일을 읽는 동안) 모든 외부 참조를 읽을 때 인코딩 속성이 외부 참조를 인코딩 값으로 설정 됩니다. 외부 참조에는 인코딩이 지정 되지 않은 경우 바이트 순서 표시가 없으면 기본값은 u t F-8로 설정 합니다.  
  
 기본 운영 체제가 지 원하는 모든 인코딩 표준은 지원 됩니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="EntityHandling">
      <MemberSignature Language="C#" Value="public System.Xml.EntityHandling EntityHandling { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.EntityHandling EntityHandling" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.EntityHandling" />
      <MemberSignature Language="VB.NET" Value="Public Property EntityHandling As EntityHandling" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::EntityHandling EntityHandling { System::Xml::EntityHandling get(); void set(System::Xml::EntityHandling value); };" />
      <MemberSignature Language="F#" Value="member this.EntityHandling : System.Xml.EntityHandling with get, set" Usage="System.Xml.XmlValidatingReader.EntityHandling" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.EntityHandling</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>판독기가 엔터티를 처리하는 방법을 지정하는 값을 가져오거나 설정합니다.</summary>
        <value><see cref="T:System.Xml.EntityHandling" /> 값 중 하나입니다. <see langword="EntityHandling" />이 지정되지 않으면 기본값은 EntityHandling.ExpandEntities로 지정됩니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  합니다 <xref:System.Xml.XmlValidatingReader> 클래스에서 사용 되지 [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]합니다. 유효성 검사를 만들 수 있습니다 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReaderSettings> 클래스 및 <xref:System.Xml.XmlReader.Create%2A> 메서드. 자세한 내용은 <xref:System.Xml.XmlReader> 참조 페이지의 설명 섹션을 참조하세요.  
  
 이 속성을 변경할 수 있습니다 및 적용 한 다음 이후 <xref:System.Xml.XmlValidatingReader.Read%2A> 호출 합니다.  
  
 때 `EntityHandling` 로 설정 된 `ExpandCharEntities`, 특성 값만 부분적으로 정규화 됩니다. 판독기는 인접 한 엔터티 참조 노드 내용에서 독립적으로 각 개별 텍스트 노드를 정규화합니다.  
  
 엔터티 간의 차이점을 설명 하기 위해 처리 모드는 다음 XML을 고려 합니다.  
  
```xml  
<!DOCTYPE doc [<!ENTITY num "123">]>  
 <doc> &#65; &num; </doc>  
```  
  
 때 `EntityHandling` 로 설정 된 `ExpandEntities` "doc" 요소 노드 확장된 엔터티 텍스트를 사용 하 여 하나의 텍스트 노드를 포함 합니다.  
  
|깊이|노드 형식|이름|값|  
|-----------|--------------|----------|-----------|  
|1|텍스트||A 123|  
  
 때 `EntityHandling` 로 설정 된 `ExpandCharEntities`, 및 <xref:System.Xml.XmlTextReader.WhitespaceHandling%2A> "doc" 유효 또는,로 설정 된 문자 엔터티를 확장 하 고 노드로 일반 엔터티를 반환 하는 요소:  
  
|깊이|노드 형식|이름|값|  
|-----------|--------------|----------|-----------|  
|1|텍스트||A|  
|1|EntityReference|num||  
|1|SignificantWhitespace|||  
  
   
  
## Examples  
 다음 예제에서는 `ResolveEntity` 일반 엔터티를 확장 하는 방법입니다.  
  
 [!code-cpp[Classic WebData XmlValidatingReader.ResolveEntity Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.ResolveEntity Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.ResolveEntity Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.ResolveEntity Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.ResolveEntity Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.ResolveEntity Example/VB/source.vb#1)]  
  
 이 예제에서는 파일을 사용 하 여 `book1.xml`입력으로 합니다.  
  
 [!code-xml[Classic WebData XmlValidatingReader.ResolveEntity Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.ResolveEntity Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">잘못 된 값이 지정 되었습니다.</exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="EOF">
      <MemberSignature Language="C#" Value="public override bool EOF { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EOF" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.EOF" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property EOF As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool EOF { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.EOF : bool" Usage="System.Xml.XmlValidatingReader.EOF" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>판독기가 스트림의 맨 끝에 있는지를 나타내는 값을 가져옵니다.</summary>
        <value>판독기가 스트림의 맨 끝에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  합니다 <xref:System.Xml.XmlValidatingReader> 클래스에서 사용 되지 [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]합니다. 유효성 검사를 만들 수 있습니다 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReaderSettings> 클래스 및 <xref:System.Xml.XmlReader.Create%2A> 메서드. 자세한 내용은 <xref:System.Xml.XmlReader> 참조 페이지의 설명 섹션을 참조하세요.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>특성의 값을 가져옵니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAttribute">
      <MemberSignature Language="C#" Value="public override string GetAttribute (int i);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetAttribute(int32 i) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.GetAttribute(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetAttribute (i As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ GetAttribute(int i);" />
      <MemberSignature Language="F#" Value="override this.GetAttribute : int -&gt; string" Usage="xmlValidatingReader.GetAttribute i" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="i">특성의 인덱스입니다. 인덱스는 0부터 시작합니다. 첫 번째 특성의 인덱스는 0입니다.</param>
        <summary>지정된 인덱스가 있는 특성의 값을 가져옵니다.</summary>
        <returns>지정된 특성의 값을 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 판독기를 이동하지 않습니다.  
  
> [!NOTE]
>  합니다 <xref:System.Xml.XmlValidatingReader> 클래스에서 사용 되지 [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]합니다. 유효성 검사를 만들 수 있습니다 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReaderSettings> 클래스 및 <xref:System.Xml.XmlReader.Create%2A> 메서드. 자세한 내용은 <xref:System.Xml.XmlReader> 참조 페이지의 설명 섹션을 참조하세요.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">합니다 <paramref name="i" /> 매개 변수는 보다 작거나 0 보다 크거나 같음 <see cref="P:System.Xml.XmlValidatingReader.AttributeCount" />합니다.</exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="GetAttribute">
      <MemberSignature Language="C#" Value="public override string GetAttribute (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetAttribute(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.GetAttribute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetAttribute (name As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ GetAttribute(System::String ^ name);" />
      <MemberSignature Language="F#" Value="override this.GetAttribute : string -&gt; string" Usage="xmlValidatingReader.GetAttribute name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">특성의 정규화된 이름입니다.</param>
        <summary>지정된 이름이 있는 특성의 값을 가져옵니다.</summary>
        <returns>지정된 특성의 값을 반환합니다. 특성이 없으면 <see langword="null" />이 반환됩니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  합니다 <xref:System.Xml.XmlValidatingReader> 클래스에서 사용 되지 [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]합니다. 유효성 검사를 만들 수 있습니다 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReaderSettings> 클래스 및 <xref:System.Xml.XmlReader.Create%2A> 메서드. 자세한 내용은 <xref:System.Xml.XmlReader> 참조 페이지의 설명 섹션을 참조하세요.  
  
 이 메서드는 판독기를 이동하지 않습니다.  
  
 판독기가 위치에 `DocumentType` 노드를이 메서드는 PUBLIC과 SYSTEM 리터럴, 예를 들어, 가져오는 데 사용할 수 있습니다 `reader.GetAttribute("PUBLIC")`  
  
   
  
## Examples  
 다음 예제에서는 ISBN 특성의 값을 가져옵니다.  
  
 [!code-cpp[Classic WebData XmlValidatingReader.GetAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.GetAttribute Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.GetAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.GetAttribute Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.GetAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.GetAttribute Example/VB/source.vb#1)]  
  
 이 예제에서는 파일을 사용 하 여 `attrs.xml`입력으로 합니다.  
  
 [!code-xml[Classic WebData XmlValidatingReader.GetAttribute Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.GetAttribute Example/XML/attrs.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="GetAttribute">
      <MemberSignature Language="C#" Value="public override string GetAttribute (string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetAttribute(string localName, string namespaceURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.GetAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetAttribute (localName As String, namespaceURI As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ GetAttribute(System::String ^ localName, System::String ^ namespaceURI);" />
      <MemberSignature Language="F#" Value="override this.GetAttribute : string * string -&gt; string" Usage="xmlValidatingReader.GetAttribute (localName, namespaceURI)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">특성의 로컬 이름입니다.</param>
        <param name="namespaceURI">특성의 네임스페이스 URI입니다.</param>
        <summary>지정된 로컬 이름이나 네임스페이스 URI(Uniform Resource Identifier)가 있는 특성의 이름을 가져옵니다.</summary>
        <returns>지정된 특성의 값을 반환합니다. 특성이 없으면 <see langword="null" />이 반환됩니다. 이 메서드는 판독기를 이동하지 않습니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  합니다 <xref:System.Xml.XmlValidatingReader> 클래스에서 사용 되지 [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]합니다. 유효성 검사를 만들 수 있습니다 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReaderSettings> 클래스 및 <xref:System.Xml.XmlReader.Create%2A> 메서드. 자세한 내용은 <xref:System.Xml.XmlReader> 참조 페이지의 설명 섹션을 참조하세요.  
  
 다음 XML 특정 네임 스페이스의 특성을 포함 합니다.  
  
```xml  
<test xmlns:dt="urn:datatypes" dt:type="int"/>  
```  
  
 조회할 수 있습니다는 `dt:type` (접두사와 로컬 이름)의 인수를 하나 또는 두 개의 인수 (로컬 이름 및 네임 스페이스 URI)를 사용 하 여 특성:  
  
```csharp  
String dt = reader.GetAttribute("dt:type");  
String dt2 = reader.GetAttribute("type","urn:datatypes");  
```  
  
 조회 하는 `xmlns:dt` 특성에 다음 인수 중 하나를 사용 합니다.  
  
```csharp  
String dt3 = reader.GetAttribute("xmlns:dt");  
String dt4 = reader.GetAttribute("dt",http://www.w3.org/2000/xmlns/);  
```  
  
 사용 하 여이 정보를 가져올 수도 있습니다는 <xref:System.Xml.XmlValidatingReader.Prefix%2A> 속성입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="HasLineInfo">
      <MemberSignature Language="C#" Value="public bool HasLineInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HasLineInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.HasLineInfo" />
      <MemberSignature Language="VB.NET" Value="Public Function HasLineInfo () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool HasLineInfo();" />
      <MemberSignature Language="F#" Value="abstract member HasLineInfo : unit -&gt; bool&#xA;override this.HasLineInfo : unit -&gt; bool" Usage="xmlValidatingReader.HasLineInfo " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.IXmlLineInfo.HasLineInfo</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>클래스에서 줄 정보를 반환할 수 있는지를 나타내는 값을 가져옵니다.</summary>
        <returns>클래스에서 줄 정보를 반환할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  합니다 <xref:System.Xml.XmlValidatingReader> 클래스에서 사용 되지 [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]합니다. 유효성 검사를 만들 수 있습니다 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReaderSettings> 클래스 및 <xref:System.Xml.XmlReader.Create%2A> 메서드. 자세한 내용은 <xref:System.Xml.XmlReader> 참조 페이지의 설명 섹션을 참조하세요.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="HasValue">
      <MemberSignature Language="C#" Value="public override bool HasValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasValue" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.HasValue" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property HasValue As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool HasValue { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasValue : bool" Usage="System.Xml.XmlValidatingReader.HasValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 노드에 String.Empty 이외의 <see cref="P:System.Xml.XmlValidatingReader.Value" />가 있는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>현재 판독기가 위치한 노드에 <see langword="Value" />가 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  합니다 <xref:System.Xml.XmlValidatingReader> 클래스에서 사용 되지 [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]합니다. 유효성 검사를 만들 수 있습니다 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReaderSettings> 클래스 및 <xref:System.Xml.XmlReader.Create%2A> 메서드. 자세한 내용은 <xref:System.Xml.XmlReader> 참조 페이지의 설명 섹션을 참조하세요.  
  
 다음 표에서는 반환할 값이 있는 노드 형식을 보여 줍니다.  
  
|노드 형식|값|  
|---------------|-----------|  
|`Attribute`|특성 값|  
|`CDATA`|CDATA 섹션 내용입니다.|  
|`Comment`|주석의 내용입니다.|  
|`DocumentType`|내부 하위 집합입니다.|  
|`ProcessingInstruction`|대상을 제외한 전체 내용입니다.|  
|`SignificantWhitespace`|혼합된 내용 모델에서 태그 들 사이의 공백입니다.|  
|`Text`|텍스트 노드의 내용입니다.|  
|`Whitespace`|태그 사이의 공백입니다.|  
|`XmlDeclaration`|선언 내용입니다.|  
  
   
  
## Examples  
 다음 예제에서는 XML에서 다양 한 데이터 형식으로 읽고 각 노드를 표시 합니다.  
  
 [!code-cpp[Classic WebData XmlValidatingReader.HasValue Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.HasValue Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.HasValue Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.HasValue Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.HasValue Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.HasValue Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="IsDefault">
      <MemberSignature Language="C#" Value="public override bool IsDefault { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDefault" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.IsDefault" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsDefault As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsDefault { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDefault : bool" Usage="System.Xml.XmlValidatingReader.IsDefault" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 노드가 DTD(문서 종류 정의) 또는 스키마에서 정의한 기본값에서 생성된 특성인지를 나타내는 값을 가져옵니다.</summary>
        <value>현재 노드가 DTD나 스키마에서 정의한 기본값에서 생성된 값을 가진 특성이면 <see langword="true" />이고, 특성 값이 명시적으로 설정되었으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 특성 노드에만이 속성이 적용 됩니다.  
  
> [!NOTE]
>  합니다 <xref:System.Xml.XmlValidatingReader> 클래스에서 사용 되지 [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]합니다. 유효성 검사를 만들 수 있습니다 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReaderSettings> 클래스 및 <xref:System.Xml.XmlReader.Create%2A> 메서드. 자세한 내용은 <xref:System.Xml.XmlReader> 참조 페이지의 설명 섹션을 참조하세요.  
  
   
  
## Examples  
 다음 예제에서는 루트 요소에서 모든 특성 노드를 표시합니다.  
  
 [!code-cpp[XmlValidatingReader.IsDefault#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlValidatingReader.IsDefault/CPP/readdefattr.cpp#1)]
 [!code-csharp[XmlValidatingReader.IsDefault#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlValidatingReader.IsDefault/CS/readdefattr.cs#1)]
 [!code-vb[XmlValidatingReader.IsDefault#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlValidatingReader.IsDefault/VB/readdefattr.vb#1)]  
  
 이 예제에서는 입력으로 다음 파일을 사용 합니다.  
  
 `book4.xml`  
  
 [!code-xml[XmlValidatingReader.IsDefault#2](~/samples/snippets/xml/VS_Snippets_Data/XmlValidatingReader.IsDefault/XML/book4.xml#2)]  
  
 `book.dtd`  
  
 [!code-xml[XmlValidatingReader.IsDefault#3](~/samples/snippets/xml/VS_Snippets_Data/XmlValidatingReader.IsDefault/XML/book.dtd#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="IsEmptyElement">
      <MemberSignature Language="C#" Value="public override bool IsEmptyElement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmptyElement" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.IsEmptyElement" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsEmptyElement As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsEmptyElement { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEmptyElement : bool" Usage="System.Xml.XmlValidatingReader.IsEmptyElement" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 노드가 빈 요소(예: <c>&lt;MyElement/&gt;</c>)인지를 나타내는 값을 가져옵니다.</summary>
        <value><see langword="true" /> 현재 노드가 요소 이면 (<see cref="P:System.Xml.XmlValidatingReader.NodeType" /> equals <see langword="XmlNodeType.Element" />)로 끝나는 <c>/ &gt;</c>고, 그렇지 않으면 <see langword="false" />합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  합니다 <xref:System.Xml.XmlValidatingReader> 클래스에서 사용 되지 [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]합니다. 유효성 검사를 만들 수 있습니다 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReaderSettings> 클래스 및 <xref:System.Xml.XmlReader.Create%2A> 메서드. 자세한 내용은 <xref:System.Xml.XmlReader> 참조 페이지의 설명 섹션을 참조하세요.  
  
 이 속성을 사용하여 다음 간의 차이를 확인할 수 있습니다.  
  
 `<item num="123"/>` (`IsEmptyElement` 는 `true`).  
  
 `<item num="123">` (`IsEmptyElement` 는 `false`요소 내용이 비어 있지만).  
  
 해당 `EndElement` 빈 요소에 대 한 노드 생성 되지 않습니다.  
  
 기본 콘텐츠 스키마 유효성 검사로 인해 요소에 추가한 경우 `IsEmptyElement` 그대로 반환 `true`합니다. 요소에는 기본값이 여부에 관계가 없습니다. 즉, `IsEmptyElement` 원본 문서의 요소 했습니다 끝 요소 태그가 있는지 여부를 보고 합니다.  
  
   
  
## Examples  
 다음 예제에서는 각 요소의 텍스트 콘텐츠를 표시합니다.  
  
 [!code-cpp[Classic WebData XmlValidatingReader.IsEmptyElement Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.IsEmptyElement Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.IsEmptyElement Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.IsEmptyElement Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.IsEmptyElement Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.IsEmptyElement Example/VB/source.vb#1)]  
  
 이 예제에서는 파일을 사용 하 여 `elems.xml`입력으로 합니다.  
  
 [!code-xml[Classic WebData XmlValidatingReader.IsEmptyElement Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.IsEmptyElement Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public override string this[int i] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overrides ReadOnly Property Item(i As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ default[int] { System::String ^ get(int i); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : string" Usage="System.Xml.XmlValidatingReader.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" Index="0" FrameworkAlternate="netframework-1.1" />
      </Parameters>
      <Docs>
        <param name="i">특성의 인덱스입니다.</param>
        <summary>지정된 인덱스가 있는 특성의 값을 가져옵니다.</summary>
        <value>지정된 특성의 값을 반환합니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public override string this[string name] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Item(string)" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overrides ReadOnly Property Item(name As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ default[System::String ^] { System::String ^ get(System::String ^ name); };" />
      <MemberSignature Language="F#" Value="member this.Item(string) : string" Usage="System.Xml.XmlValidatingReader.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public override string this[string name, string namespaceURI] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Item(string, string)" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.Item(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overrides ReadOnly Property Item(name As String, namespaceURI As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ default[System::String ^, System::String ^] { System::String ^ get(System::String ^ name, System::String ^ namespaceURI); };" />
      <MemberSignature Language="F#" Value="member this.Item(string * string) : string" Usage="System.Xml.XmlValidatingReader.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="namespaceURI" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1" />
      </Parameters>
      <Docs>
        <param name="name">특성의 로컬 이름입니다.</param>
        <param name="namespaceURI">특성의 네임스페이스 URI입니다.</param>
        <summary>지정된 로컬 이름과 네임스페이스 URI가 있는 특성의 값을 가져옵니다.</summary>
        <value>지정된 특성의 값을 반환합니다. 특성이 없으면 반환 <see langword="null" />합니다.</value>
        <remarks>이 속성은 판독기를 이동 하지 않습니다.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LineNumber">
      <MemberSignature Language="C#" Value="public int LineNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LineNumber" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.LineNumber" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LineNumber As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LineNumber { int get(); };" />
      <MemberSignature Language="F#" Value="member this.LineNumber : int" Usage="System.Xml.XmlValidatingReader.LineNumber" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Xml.IXmlLineInfo.LineNumber</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 줄 번호를 가져옵니다.</summary>
        <value>현재 줄 번호입니다. 이 속성의 시작 값은 1입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  합니다 <xref:System.Xml.XmlValidatingReader> 클래스에서 사용 되지 [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]합니다. 유효성 검사를 만들 수 있습니다 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReaderSettings> 클래스 및 <xref:System.Xml.XmlReader.Create%2A> 메서드. 자세한 내용은 <xref:System.Xml.XmlReader> 참조 페이지의 설명 섹션을 참조하세요.  
  
 이 속성은 오류 보고를 위해 가장 많이 사용 되지만 언제 든 지 호출할 수 있습니다. 이 속성의 시작 값은 1입니다. 함께 <xref:System.Xml.XmlValidatingReader.LinePosition%2A>, 1, 1은 문서의 시작을 나타냅니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="LinePosition">
      <MemberSignature Language="C#" Value="public int LinePosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LinePosition" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.LinePosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LinePosition As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LinePosition { int get(); };" />
      <MemberSignature Language="F#" Value="member this.LinePosition : int" Usage="System.Xml.XmlValidatingReader.LinePosition" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Xml.IXmlLineInfo.LinePosition</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 줄 위치를 가져옵니다.</summary>
        <value>현재 줄 위치입니다. 이 속성의 시작 값은 1입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  합니다 <xref:System.Xml.XmlValidatingReader> 클래스에서 사용 되지 [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]합니다. 유효성 검사를 만들 수 있습니다 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReaderSettings> 클래스 및 <xref:System.Xml.XmlReader.Create%2A> 메서드. 자세한 내용은 <xref:System.Xml.XmlReader> 참조 페이지의 설명 섹션을 참조하세요.  
  
 이 속성은 오류 보고를 위해 가장 많이 사용 되지만 언제 든 지 호출할 수 있습니다. 이 속성에 대 한 값의 시작 `1`합니다.  
  
 표시 되는 위치에는 태그에서 텍스트의 첫 번째 문자입니다.  
  
```xml  
<root>  
 abc<tag/>  
</root>  
```  
  
 앞의 XML 텍스트의 첫 번째 줄에는 `LinePosition` 의 `2` 문자에 해당 하 `r`; 두 번째 줄에는 `LinePosition` 의 `5` 문자에 해당 `t`; 및 세 번째 줄을 `LinePosition` 의 `3` 문자에 해당 `r`합니다.  
  
 결합할 <xref:System.Xml.XmlValidatingReader.LineNumber%2A>, 값 `1,1` 문서의 시작을 나타냅니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="LocalName">
      <MemberSignature Language="C#" Value="public override string LocalName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LocalName" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.LocalName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property LocalName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ LocalName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalName : string" Usage="System.Xml.XmlValidatingReader.LocalName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 노드의 로컬 이름을 가져옵니다.</summary>
        <value>접두사를 제거한 현재 노드의 이름입니다. 예를 들어 <see langword="LocalName" /> 됩니다 <see langword="book" /> 요소에 대 한 <c>&lt;예&gt;</c>합니다.  
  
이름이 없는 노드 형식(예: <see langword="Text" />, <see langword="Comment" /> 등)의 경우, 이 속성은 String.Empty를 반환합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  합니다 <xref:System.Xml.XmlValidatingReader> 클래스에서 사용 되지 [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]합니다. 유효성 검사를 만들 수 있습니다 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReaderSettings> 클래스 및 <xref:System.Xml.XmlReader.Create%2A> 메서드. 자세한 내용은 <xref:System.Xml.XmlReader> 참조 페이지의 설명 섹션을 참조하세요.  
  
   
  
## Examples  
 다음 예제에서는 XML 조각을 읽습니다.  
  
 [!code-csharp[Classic WebData XmlParserContext.XmlParserContext Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlParserContext.XmlParserContext Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlParserContext.XmlParserContext Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlParserContext.XmlParserContext Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="LookupNamespace">
      <MemberSignature Language="C#" Value="public override string LookupNamespace (string prefix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string LookupNamespace(string prefix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.LookupNamespace(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function LookupNamespace (prefix As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ LookupNamespace(System::String ^ prefix);" />
      <MemberSignature Language="F#" Value="override this.LookupNamespace : string -&gt; string" Usage="xmlValidatingReader.LookupNamespace prefix" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">확인하려는 네임스페이스 URI(Uniform Resource Identifier)의 접두사입니다. 기본 네임스페이스와 일치시키려면 빈 문자열을 전달합니다.</param>
        <summary>현재 요소의 범위에서 네임스페이스 접두사를 확인합니다.</summary>
        <returns>접두사가 매핑되는 네임스페이스 URI이거나 일치하는 접두사가 없는 경우 <see langword="null" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  합니다 <xref:System.Xml.XmlValidatingReader> 클래스에서 사용 되지 [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]합니다. 유효성 검사를 만들 수 있습니다 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReaderSettings> 클래스 및 <xref:System.Xml.XmlReader.Create%2A> 메서드. 자세한 내용은 <xref:System.Xml.XmlReader> 참조 페이지의 설명 섹션을 참조하세요. 
  
 다음 XML 문자열에서 판독기가 배치 하는 경우에 `href` 특성을 접두사 `a` 호출 하 여 해결 될 `reader.LookupNamespace("a", true)`합니다. 반환 된 문자열은 `urn:456`합니다.  
  
```xml  
<root xmlns:a="urn:456">  
 <item>  
 <ref href="a:b"/>  
 </item>  
</root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <MemberGroup MemberName="MoveToAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>지정된 특성으로 이동합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MoveToAttribute">
      <MemberSignature Language="C#" Value="public override void MoveToAttribute (int i);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void MoveToAttribute(int32 i) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.MoveToAttribute(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub MoveToAttribute (i As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void MoveToAttribute(int i);" />
      <MemberSignature Language="F#" Value="override this.MoveToAttribute : int -&gt; unit" Usage="xmlValidatingReader.MoveToAttribute i" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="i">특성의 인덱스입니다.</param>
        <summary>지정된 인덱스가 있는 특성으로 이동합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  합니다 <xref:System.Xml.XmlValidatingReader> 클래스에서 사용 되지 [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]합니다. 유효성 검사를 만들 수 있습니다 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReaderSettings> 클래스 및 <xref:System.Xml.XmlReader.Create%2A> 메서드. 자세한 내용은 <xref:System.Xml.XmlReader> 참조 페이지의 설명 섹션을 참조하세요.  
  
   
  
## Examples  
 다음 예제에서는 루트 노드의 모든 요소를 읽습니다.  
  
 [!code-cpp[Classic WebData XmlValidatingReader.AttributeCount Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.AttributeCount Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.AttributeCount Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.AttributeCount Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.AttributeCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.AttributeCount Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">합니다 <paramref name="i" /> 매개 변수는 보다 작거나 0 보다 크거나 같음 <see cref="P:System.Xml.XmlReader.AttributeCount" />합니다.</exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="MoveToAttribute">
      <MemberSignature Language="C#" Value="public override bool MoveToAttribute (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveToAttribute(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.MoveToAttribute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MoveToAttribute (name As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool MoveToAttribute(System::String ^ name);" />
      <MemberSignature Language="F#" Value="override this.MoveToAttribute : string -&gt; bool" Usage="xmlValidatingReader.MoveToAttribute name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">특성의 정규화된 이름입니다.</param>
        <summary>지정된 이름이 있는 특성으로 이동합니다.</summary>
        <returns>특성이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. <see langword="false" />이면 판독기 위치가 변경되지 않습니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  합니다 <xref:System.Xml.XmlValidatingReader> 클래스에서 사용 되지 [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]합니다. 유효성 검사를 만들 수 있습니다 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReaderSettings> 클래스 및 <xref:System.Xml.XmlReader.Create%2A> 메서드. 자세한 내용은 <xref:System.Xml.XmlReader> 참조 페이지의 설명 섹션을 참조하세요.  
  
 이 메서드를 호출한 후 합니다 <xref:System.Xml.XmlValidatingReader.Name%2A>, <xref:System.Xml.XmlValidatingReader.NamespaceURI%2A>, 및 <xref:System.Xml.XmlValidatingReader.Prefix%2A> 속성 특성의 속성을 반영 합니다.  
  
   
  
## Examples  
 다음 예제에서는 텍스트 및 엔터티 참조 노드를 사용 하 여 특성을 읽습니다.  
  
 [!code-cpp[Classic WebData XmlValidatingReader.MoveToAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.MoveToAttribute Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.MoveToAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.MoveToAttribute Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.MoveToAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.MoveToAttribute Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="MoveToAttribute">
      <MemberSignature Language="C#" Value="public override bool MoveToAttribute (string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveToAttribute(string localName, string namespaceURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.MoveToAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MoveToAttribute (localName As String, namespaceURI As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool MoveToAttribute(System::String ^ localName, System::String ^ namespaceURI);" />
      <MemberSignature Language="F#" Value="override this.MoveToAttribute : string * string -&gt; bool" Usage="xmlValidatingReader.MoveToAttribute (localName, namespaceURI)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">특성의 로컬 이름입니다.</param>
        <param name="namespaceURI">특성의 네임스페이스 URI입니다.</param>
        <summary>지정된 로컬 이름이나 네임스페이스 URI(Uniform Resource Identifier)가 있는 특성으로 이동합니다.</summary>
        <returns>특성이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. <see langword="false" />이면 판독기 위치가 변경되지 않습니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  합니다 <xref:System.Xml.XmlValidatingReader> 클래스에서 사용 되지 [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]합니다. 유효성 검사를 만들 수 있습니다 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReaderSettings> 클래스 및 <xref:System.Xml.XmlReader.Create%2A> 메서드. 자세한 내용은 <xref:System.Xml.XmlReader> 참조 페이지의 설명 섹션을 참조하세요.  
  
 이 메서드를 호출한 후 합니다 <xref:System.Xml.XmlValidatingReader.Name%2A>, <xref:System.Xml.XmlValidatingReader.NamespaceURI%2A>, 및 <xref:System.Xml.XmlValidatingReader.Prefix%2A> 속성 특성의 속성을 반영 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="MoveToElement">
      <MemberSignature Language="C#" Value="public override bool MoveToElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveToElement() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.MoveToElement" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MoveToElement () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool MoveToElement();" />
      <MemberSignature Language="F#" Value="override this.MoveToElement : unit -&gt; bool" Usage="xmlValidatingReader.MoveToElement " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>현재 특성 노드가 포함된 요소로 이동합니다.</summary>
        <returns>판독기가 특성에 있으면(특성이 있는 요소로 판독기가 이동하면) <see langword="true" />이고, 판독기가 특성에 없으면(판독기의 위치가 바뀌지 않으면) <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  합니다 <xref:System.Xml.XmlValidatingReader> 클래스에서 사용 되지 [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]합니다. 유효성 검사를 만들 수 있습니다 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReaderSettings> 클래스 및 <xref:System.Xml.XmlReader.Create%2A> 메서드. 자세한 내용은 <xref:System.Xml.XmlReader> 참조 페이지의 설명 섹션을 참조하세요.  
  
 이 메서드를 사용 하 여 해당 특성을 통해 이동한 후 요소 돌아갑니다. 이 메서드는 다음 노드 형식 중 하나에 판독기를 이동 합니다. `Element`, `DocumentType`, 또는 `XmlDeclaration`합니다.  
  
   
  
## Examples  
 다음 예제에서는 루트 노드의 모든 요소를 읽습니다.  
  
 [!code-cpp[Classic WebData XmlValidatingReader.AttributeCount Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.AttributeCount Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.AttributeCount Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.AttributeCount Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.AttributeCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.AttributeCount Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="MoveToFirstAttribute">
      <MemberSignature Language="C#" Value="public override bool MoveToFirstAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveToFirstAttribute() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.MoveToFirstAttribute" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MoveToFirstAttribute () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool MoveToFirstAttribute();" />
      <MemberSignature Language="F#" Value="override this.MoveToFirstAttribute : unit -&gt; bool" Usage="xmlValidatingReader.MoveToFirstAttribute " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>첫 번째 특성으로 이동합니다.</summary>
        <returns>특성이 있으면(판독기가 첫 번째 특성으로 이동하면) <see langword="true" />이고, 그렇지 않으면(판독기의 위치가 바뀌지 않으면) <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  합니다 <xref:System.Xml.XmlValidatingReader> 클래스에서 사용 되지 [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]합니다. 유효성 검사를 만들 수 있습니다 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReaderSettings> 클래스 및 <xref:System.Xml.XmlReader.Create%2A> 메서드. 자세한 내용은 <xref:System.Xml.XmlReader> 참조 페이지의 설명 섹션을 참조하세요.  
  
   
  
## Examples  
 다음 예제에서는 XML 조각을 읽습니다.  
  
 [!code-cpp[Classic WebData XmlValidatingReader.MoveToFirstAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.MoveToFirstAttribute Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.MoveToFirstAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.MoveToFirstAttribute Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.MoveToFirstAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.MoveToFirstAttribute Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="MoveToNextAttribute">
      <MemberSignature Language="C#" Value="public override bool MoveToNextAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveToNextAttribute() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.MoveToNextAttribute" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MoveToNextAttribute () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool MoveToNextAttribute();" />
      <MemberSignature Language="F#" Value="override this.MoveToNextAttribute : unit -&gt; bool" Usage="xmlValidatingReader.MoveToNextAttribute " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>다음 특성으로 이동합니다.</summary>
        <returns>다음 특성이 있으면 <see langword="true" />이고, 더 이상 특성이 없으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  합니다 <xref:System.Xml.XmlValidatingReader> 클래스에서 사용 되지 [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]합니다. 유효성 검사를 만들 수 있습니다 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReaderSettings> 클래스 및 <xref:System.Xml.XmlReader.Create%2A> 메서드. 자세한 내용은 <xref:System.Xml.XmlReader> 참조 페이지의 설명 섹션을 참조하세요.  
  
 현재 노드가 요소 노드인 경우이 메서드는 <xref:System.Xml.XmlValidatingReader.MoveToFirstAttribute%2A>합니다. 하는 경우 `MoveToNextAttribute` 반환 `true`, 판독기의 위치가 바뀌지 않으면이 고, 그렇지 않으면 다음 특성으로 판독기를 이동 합니다.  
  
   
  
## Examples  
 다음 예제에서는 XML 조각을 읽습니다.  
  
 [!code-cpp[Classic WebData XmlValidatingReader.MoveToFirstAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.MoveToFirstAttribute Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.MoveToFirstAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.MoveToFirstAttribute Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.MoveToFirstAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.MoveToFirstAttribute Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public override string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Xml.XmlValidatingReader.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 노드의 정규화된 이름을 가져옵니다.</summary>
        <value>현재 노드의 정규화된 이름입니다. 예를 들어 <see langword="Name" /> 됩니다 <see langword="bk:book" /> 요소에 대 한 <c>&lt;예&gt;</c>합니다.  
  
반환되는 이름은 다음과 같이 노드의 <see cref="P:System.Xml.XmlValidatingReader.NodeType" />에 따라 달라집니다. 다음 노드 형식은 나열된 값을 반환합니다. 기타 모든 노드 형식은 빈 문자열을 반환합니다.  
  
 <list type="table"><listheader><term> 노드 형식 
 </term><description> 이름 
 </description></listheader><item><term><see langword="Attribute" /></term><description> 특성 이름입니다.  
  
 </description></item><item><term><see langword="DocumentType" /></term><description> 문서 형식 이름입니다.  
  
 </description></item><item><term><see langword="Element" /></term><description> 태그 이름입니다.  
  
 </description></item><item><term><see langword="EntityReference" /></term><description> 참조된 엔터티의 이름입니다.  
  
 </description></item><item><term><see langword="ProcessingInstruction" /></term><description> 처리 명령의 대상입니다.  
  
 </description></item><item><term><see langword="XmlDeclaration" /></term><description> 리터럴 문자열 <see langword="xml" />합니다.  
  
 </description></item></list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  합니다 <xref:System.Xml.XmlValidatingReader> 클래스에서 사용 되지 [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]합니다. 유효성 검사를 만들 수 있습니다 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReaderSettings> 클래스 및 <xref:System.Xml.XmlReader.Create%2A> 메서드. 자세한 내용은 <xref:System.Xml.XmlReader> 참조 페이지의 설명 섹션을 참조하세요.  
  
   
  
## Examples  
 다음 예제에서는 XML 파일을 읽고 각 노드를 표시 합니다.  
  
 [!code-cpp[Classic WebData XmlValidatingReader.Name Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.Name Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.Name Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.Name Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.Name Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.Name Example/VB/source.vb#1)]  
  
 이 예제에서는 파일을 사용 하 여 `items.xml`입력으로 합니다.  
  
 [!code-xml[Classic WebData XmlValidatingReader.Name Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.Name Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Namespaces">
      <MemberSignature Language="C#" Value="public bool Namespaces { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Namespaces" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.Namespaces" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespaces As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Namespaces { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Namespaces : bool with get, set" Usage="System.Xml.XmlValidatingReader.Namespaces" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>네임스페이스 지원 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>네임스페이스를 지원하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  합니다 <xref:System.Xml.XmlValidatingReader> 클래스에서 사용 되지 [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]합니다. 유효성 검사를 만들 수 있습니다 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReaderSettings> 클래스 및 <xref:System.Xml.XmlReader.Create%2A> 메서드. 자세한 내용은 <xref:System.Xml.XmlReader> 참조 페이지의 설명 섹션을 참조하세요.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="NamespaceURI">
      <MemberSignature Language="C#" Value="public override string NamespaceURI { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NamespaceURI" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.NamespaceURI" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property NamespaceURI As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ NamespaceURI { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NamespaceURI : string" Usage="System.Xml.XmlValidatingReader.NamespaceURI" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>W3C(World Wide Web 컨소시엄) 네임스페이스 사양에서 정의된 것처럼 판독기가 있는 노드의 네임스페이스 URI(Uniform Resource Identifier)를 가져옵니다.</summary>
        <value>현재 노드의 네임스페이스 URI이거나 빈 문자열입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성이 관련이 `Element` 고 `Attribute` 노드만 있습니다.  
  
> [!NOTE]
>  합니다 <xref:System.Xml.XmlValidatingReader> 클래스에서 사용 되지 [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]합니다. 유효성 검사를 만들 수 있습니다 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReaderSettings> 클래스 및 <xref:System.Xml.XmlReader.Create%2A> 메서드. 자세한 내용은 <xref:System.Xml.XmlReader> 참조 페이지의 설명 섹션을 참조하세요.  
  
   
  
## Examples  
 다음 예제에서는 XML 조각을 읽습니다.  
  
 [!code-csharp[Classic WebData XmlParserContext.XmlParserContext Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlParserContext.XmlParserContext Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlParserContext.XmlParserContext Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlParserContext.XmlParserContext Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="NameTable">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlNameTable NameTable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlNameTable NameTable" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.NameTable" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property NameTable As XmlNameTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::XmlNameTable ^ NameTable { System::Xml::XmlNameTable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NameTable : System.Xml.XmlNameTable" Usage="System.Xml.XmlValidatingReader.NameTable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNameTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 구현과 관련된 <see cref="T:System.Xml.XmlNameTable" />을 가져옵니다.</summary>
        <value>노드 내에 있는 문자열의 원자화된 버전을 가져올 수 있도록 하는 <see langword="XmlNameTable" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  합니다 <xref:System.Xml.XmlValidatingReader> 클래스에서 사용 되지 [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]합니다. 유효성 검사를 만들 수 있습니다 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReaderSettings> 클래스 및 <xref:System.Xml.XmlReader.Create%2A> 메서드. 자세한 내용은 <xref:System.Xml.XmlReader> 참조 페이지의 설명 섹션을 참조하세요.  
  
 반환 된 모든 노드 및 특성 이름은 <xref:System.Xml.XmlValidatingReader> 를 사용 하 여 원자화 되는 `NameTable`합니다. 이름이 같은 여러 번에 반환 될 때 (예를 들어 `Customer`)를 동일한 `String` 해당 이름의 개체가 반환 됩니다. 이렇게 하면 개체에 비용이 많이 드는 문자열 비교 대신 이러한 문자열 비교를 수행 하는 효율적인 코드를 작성할 수 있습니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlNameTable" />
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlNodeType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlNodeType NodeType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.NodeType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property NodeType As XmlNodeType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::XmlNodeType NodeType { System::Xml::XmlNodeType get(); };" />
      <MemberSignature Language="F#" Value="member this.NodeType : System.Xml.XmlNodeType" Usage="System.Xml.XmlValidatingReader.NodeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNodeType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 노드의 형식을 가져옵니다.</summary>
        <value>현재 노드의 형식을 나타내는 <see cref="T:System.Xml.XmlNodeType" /> 값 중 하나입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  합니다 <xref:System.Xml.XmlValidatingReader> 클래스에서 사용 되지 [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]합니다. 유효성 검사를 만들 수 있습니다 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReaderSettings> 클래스 및 <xref:System.Xml.XmlReader.Create%2A> 메서드. 자세한 내용은 <xref:System.Xml.XmlReader> 참조 페이지의 설명 섹션을 참조하세요.  
  
 이 속성은 다음을 반환 하지 않습니다 `XmlNodeType` 형식: `Document`를 `DocumentFragment`합니다 `Entity`, 또는 `Notation`합니다.  
  
   
  
## Examples  
 다음 예제에서는 XML 파일을 읽고 각 노드를 표시 합니다.  
  
 [!code-cpp[Classic WebData XmlValidatingReader.Name Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.Name Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.Name Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.Name Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.Name Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.Name Example/VB/source.vb#1)]  
  
 이 예제에서는 파일을 사용 하 여 `items.xml`입력으로 합니다.  
  
 [!code-xml[Classic WebData XmlValidatingReader.Name Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.Name Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Prefix">
      <MemberSignature Language="C#" Value="public override string Prefix { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Prefix" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.Prefix" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Prefix As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Prefix { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Prefix : string" Usage="System.Xml.XmlValidatingReader.Prefix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 노드와 관련된 네임스페이스 접두사를 가져옵니다.</summary>
        <value>현재 노드와 관련된 네임스페이스 접두사입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  합니다 <xref:System.Xml.XmlValidatingReader> 클래스에서 사용 되지 [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]합니다. 유효성 검사를 만들 수 있습니다 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReaderSettings> 클래스 및 <xref:System.Xml.XmlReader.Create%2A> 메서드. 자세한 내용은 <xref:System.Xml.XmlReader> 참조 페이지의 설명 섹션을 참조하세요.  
  
   
  
## Examples  
 다음 예제에서는 XML 조각을 읽습니다.  
  
 [!code-csharp[Classic WebData XmlParserContext.XmlParserContext Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlParserContext.XmlParserContext Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlParserContext.XmlParserContext Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlParserContext.XmlParserContext Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="QuoteChar">
      <MemberSignature Language="C#" Value="public override char QuoteChar { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char QuoteChar" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.QuoteChar" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property QuoteChar As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property char QuoteChar { char get(); };" />
      <MemberSignature Language="F#" Value="member this.QuoteChar : char" Usage="System.Xml.XmlValidatingReader.QuoteChar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>특성 노드의 값을 묶을 때 사용하는 인용 부호 문자를 가져옵니다.</summary>
        <value>특성 노드의 값을 묶을 때 사용하는 인용 부호 문자입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 특성 노드에만이 속성이 적용 됩니다.  
  
> [!NOTE]
>  합니다 <xref:System.Xml.XmlValidatingReader> 클래스에서 사용 되지 [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]합니다. 유효성 검사를 만들 수 있습니다 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReaderSettings> 클래스 및 <xref:System.Xml.XmlReader.Create%2A> 메서드. 자세한 내용은 <xref:System.Xml.XmlReader> 참조 페이지의 설명 섹션을 참조하세요.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public override bool Read ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Read() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.Read" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Read () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Read();" />
      <MemberSignature Language="F#" Value="override this.Read : unit -&gt; bool" Usage="xmlValidatingReader.Read " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>스트림에서 다음 노드를 읽습니다.</summary>
        <returns>다음 노드를 읽었으면 <see langword="true" />이고, 더 이상 읽을 노드가 없으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  합니다 <xref:System.Xml.XmlValidatingReader> 클래스에서 사용 되지 [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]합니다. 유효성 검사를 만들 수 있습니다 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReaderSettings> 클래스 및 <xref:System.Xml.XmlReader.Create%2A> 메서드. 자세한 내용은 <xref:System.Xml.XmlReader> 참조 페이지의 설명 섹션을 참조하세요.  
  
 먼저 판독기가 만들어지고 초기화 됩니다을 하는 경우 정보가 없는 사용할 수 있습니다. 호출 해야 `Read` 첫 번째 노드를 읽을 수 있습니다.  
  
   
  
## Examples  
 다음 예제에서는 XML 파일을 읽고 각 노드를 표시 합니다.  
  
 [!code-cpp[Classic WebData XmlValidatingReader.Name Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.Name Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.Name Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.Name Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.Name Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.Name Example/VB/source.vb#1)]  
  
 이 예제에서는 파일을 사용 하 여 `items.xml`입력으로 합니다.  
  
 [!code-xml[Classic WebData XmlValidatingReader.Name Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.Name Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="ReadAttributeValue">
      <MemberSignature Language="C#" Value="public override bool ReadAttributeValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool ReadAttributeValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.ReadAttributeValue" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadAttributeValue () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool ReadAttributeValue();" />
      <MemberSignature Language="F#" Value="override this.ReadAttributeValue : unit -&gt; bool" Usage="xmlValidatingReader.ReadAttributeValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>특성 값을 하나 이상의 <see langword="Text" />, <see langword="EntityReference" /> 또는 <see langword="EndEntity" /> 노드로 구문 분석합니다.</summary>
        <returns>반환할 노드가 있는 경우 <see langword="true" />입니다.  
  
 처음 호출할 때 판독기가 특성 노드에 있거나 모든 특성 값을 읽은 경우 <see langword="false" />입니다.  
  
<c>misc=""</c>와 같은 빈 특성은 <see langword="true" />를 반환하며 이것은 단일 노드가 String.Empty의 값을 갖는 것을 의미합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  합니다 <xref:System.Xml.XmlValidatingReader> 클래스에서 사용 되지 [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]합니다. 유효성 검사를 만들 수 있습니다 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReaderSettings> 클래스 및 <xref:System.Xml.XmlReader.Create%2A> 메서드. 자세한 내용은 <xref:System.Xml.XmlReader> 참조 페이지의 설명 섹션을 참조하세요.  
  
 이 메서드를 사용 하 여 호출한 후 <xref:System.Xml.XmlValidatingReader.MoveToAttribute%2A> 특성 값을 구성 하는 텍스트 또는 엔터티 참조 노드를 읽을 수 있습니다. <xref:System.Xml.XmlReader.Depth%2A> 특성 값 노드 1을 더한 특성 노드의 깊이 됩니다. `Depth` 증가 하 고 내부 및 외부로 일반 엔터티 참조를 단계별로 실행할 때 1 씩 감소 합니다.  
  
 예를 들어, 다음 xml을 사용 합니다. `<test name="a &b; c"/>`  
  
 여기서 엔터티가 `b` 문서 형식 정의 (DTD)에서 다음과 같이 정의 됩니다. `<!ENTITY b "123">`  
  
 경우 <xref:System.Xml.XmlValidatingReader.EntityHandling%2A> 로 설정 된 `ExpandCharEntities`, C# 코드를 다음 두 개의 텍스트 노드와 하나의 엔터티 참조 노드 특성 값을 반환 합니다.  
  
```csharp  
reader.MoveToAttribute("name");  
  while (reader.ReadAttributeValue())  
  {  
  if (reader.NodeType == XmlNodeType.Text)  
  {  
  // at this point reader.Value == "a " or " c"  
  }  
  else if (reader.NodeType == XmlNodeType.EntityReference)  
  {  
  // at this point reader.Name == "b"  
  reader.ResolveEntity();  
  while (reader.ReadAttributeValue() &&  
  reader.NodeType != XmlNodeType.EndEntity)  
  {  
  // reader.Value == "123"  
  }  
  }  
    }  
```  
  
   
  
## Examples  
 다음 예제에서는 텍스트 및 엔터티 참조 노드를 사용 하 여 특성을 읽습니다.  
  
 [!code-cpp[Classic WebData XmlValidatingReader.MoveToAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.MoveToAttribute Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.MoveToAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.MoveToAttribute Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.MoveToAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.MoveToAttribute Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsBase64">
      <MemberSignature Language="C#" Value="public override int ReadContentAsBase64 (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 ReadContentAsBase64(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadContentAsBase64 (buffer As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int ReadContentAsBase64(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.ReadContentAsBase64 : byte[] * int * int -&gt; int" Usage="xmlValidatingReader.ReadContentAsBase64 (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="index" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="buffer">결과 텍스트를 복사해 넣을 버퍼입니다. 이 값은 <see langword="null" />일 수 없습니다.</param>
        <param name="index">버퍼에 넣을 결과 복사가 시작되는 오프셋입니다.</param>
        <param name="count">버퍼에 복사할 최대 바이트 수입니다. 복사된 실제 바이트 수가 이 메서드에서 반환됩니다.</param>
        <summary>콘텐츠를 읽고 Base64 디코딩된 이진 바이트를 반환합니다.</summary>
        <returns>버퍼에 쓴 바이트 수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  합니다 <xref:System.Xml.XmlValidatingReader> 클래스에서 사용 되지 [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]합니다. 유효성 검사를 만들 수 있습니다 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReaderSettings> 클래스 및 <xref:System.Xml.XmlReader.Create%2A> 메서드. 자세한 내용은 <xref:System.Xml.XmlReader> 참조 페이지의 설명 섹션을 참조하세요. 
  
 이 메서드는 콘텐츠를 Base64 내용을 디코딩합니다 고 디코딩된 이진 바이트를 반환 합니다 (예를 들어, 인라인 Base64 인코딩된 GIF 이미지) 버퍼에 있습니다. 포함 된 텍스트의 큰 스트림을 읽도록 연속적으로이 메서드를 호출할 수 있습니다. 자세한 내용은 RFC 1521을 참조 하세요. "MIME (Multipurpose Internet Mail Extensions) 파트 1: 메커니즘을 지정 하 고 인터넷 메시지 본문의 형식을 설명 하는 "입니다. Rfc를 구할 수는 [의견 웹 사이트에 대 한 요청](https://www.rfc-editor.org)합니다.  
  
> [!NOTE]
>  에 대 한 호출 간의 판독기 속성을 액세스 하지 않아야 합니다 <xref:System.Xml.XmlValidatingReader.ReadContentAsBase64%2A> 메서드 값 0을 반환할 때까지 메서드.  
  
 이 메서드에 다음과 같은 동작이 있습니다.  
  
-   <xref:System.Xml.XmlValidatingReader.ReadContentAsBase64%2A> 작동 하 던 바이트 스트림의 끝에 도달한 경우 값 0을 반환 합니다. 판독기는 첫 번째 비 콘텐츠 노드에 배치 됩니다.  
  
-   더 적은 묻는 경우 바이트 스트림 판독기 남아 보다 정확한 수를 현재 위치에 유지 됩니다.  
  
-   <xref:System.Xml.XmlValidatingReader.ReadContentAsBase64%2A> 다음 XML 노드 형식에서 지원 되지 않습니다.  요소, XmlDeclaration, None, 문서, DocumentType, Notation, 엔터티 및 DocumentFragment 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="buffer" /> 값이 <see langword="null" />입니다.</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.Xml.XmlValidatingReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" />가 현재 노드에서 지원되지 않습니다.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">버퍼 또는 인덱스 + 카운트에 대 한 인덱스 할당된 된 버퍼 크기 보다 큽니다.</exception>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlValidatingReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="T:System.Xml.XmlNodeType" />
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsBinHex">
      <MemberSignature Language="C#" Value="public override int ReadContentAsBinHex (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 ReadContentAsBinHex(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadContentAsBinHex (buffer As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int ReadContentAsBinHex(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.ReadContentAsBinHex : byte[] * int * int -&gt; int" Usage="xmlValidatingReader.ReadContentAsBinHex (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="index" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="buffer">결과 텍스트를 복사해 넣을 버퍼입니다. 이 값은 <see langword="null" />일 수 없습니다.</param>
        <param name="index">버퍼에 넣을 결과 복사가 시작되는 오프셋입니다.</param>
        <param name="count">버퍼에 복사할 최대 바이트 수입니다. 복사된 실제 바이트 수가 이 메서드에서 반환됩니다.</param>
        <summary>내용을 읽고 BinHex 디코딩된 이진 바이트를 반환합니다.</summary>
        <returns>버퍼에 쓴 바이트 수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  합니다 <xref:System.Xml.XmlValidatingReader> 클래스에서 사용 되지 [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]합니다. 유효성 검사를 만들 수 있습니다 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReaderSettings> 클래스 및 <xref:System.Xml.XmlReader.Create%2A> 메서드. 자세한 내용은 <xref:System.Xml.XmlReader> 참조 페이지의 설명 섹션을 참조하세요. 
  
 이 메서드는 콘텐츠, BinHex 내용을 디코딩합니다 및 디코딩된 이진 바이트를 반환 합니다 (예를 들어, 인라인 BinHex 인코딩된 GIF 이미지) 버퍼에 있습니다. 포함 된 텍스트의 큰 스트림을 읽도록 연속적으로이 메서드를 호출할 수 있습니다.  
  
> [!NOTE]
>  에 대 한 호출 간의 판독기 속성을 액세스 하지 않아야 합니다 <xref:System.Xml.XmlValidatingReader.ReadContentAsBinHex%2A> 메서드 값 0을 반환할 때까지 메서드.  
  
 이 메서드에 다음과 같은 동작이 있습니다.  
  
-   <xref:System.Xml.XmlValidatingReader.ReadContentAsBinHex%2A> 작동 하 던 바이트 스트림의 끝에 도달한 경우 값 0을 반환 합니다. 판독기는 첫 번째 비 콘텐츠 노드에 배치 됩니다.  
  
-   더 적은 묻는 경우 바이트 스트림 판독기 남아 보다 정확한 수를 현재 위치에 유지 됩니다.  
  
-   <xref:System.Xml.XmlValidatingReader.ReadContentAsBinHex%2A> 다음 XML 노드 형식에서 지원 되지 않습니다.  요소, XmlDeclaration, None, 문서, DocumentType, Notation, 엔터티 및 DocumentFragment 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="buffer" /> 값이 <see langword="null" />입니다.</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.Xml.XmlValidatingReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />가 현재 노드에서 지원되지 않습니다.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">버퍼 또는 인덱스 + 카운트에 대 한 인덱스 할당된 된 버퍼 크기 보다 큽니다.</exception>
        <exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XmlValidatingReader" /> 구현은이 메서드를 지원 하지 않습니다.</exception>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlValidatingReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="T:System.Xml.XmlNodeType" />
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsBase64">
      <MemberSignature Language="C#" Value="public override int ReadElementContentAsBase64 (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 ReadElementContentAsBase64(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadElementContentAsBase64 (buffer As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int ReadElementContentAsBase64(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.ReadElementContentAsBase64 : byte[] * int * int -&gt; int" Usage="xmlValidatingReader.ReadElementContentAsBase64 (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="index" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="buffer">결과 텍스트를 복사해 넣을 버퍼입니다. 이 값은 <see langword="null" />일 수 없습니다.</param>
        <param name="index">버퍼에 넣을 결과 복사가 시작되는 오프셋입니다.</param>
        <param name="count">버퍼에 복사할 최대 바이트 수입니다. 복사된 실제 바이트 수가 이 메서드에서 반환됩니다.</param>
        <summary>요소를 읽고 Base64 콘텐츠를 디코딩합니다.</summary>
        <returns>버퍼에 쓴 바이트 수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  합니다 <xref:System.Xml.XmlValidatingReader> 클래스에서 사용 되지 [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]합니다. 유효성 검사를 만들 수 있습니다 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReaderSettings> 클래스 및 <xref:System.Xml.XmlReader.Create%2A> 메서드. 자세한 내용은 <xref:System.Xml.XmlReader> 참조 페이지의 설명 섹션을 참조하세요.  
  
 이 메서드는 요소 내용을 읽고 Base64 인코딩을 사용 하 여 디코딩하고 디코딩된 이진 바이트를 반환 합니다 (예를 들어, 인라인 Base64 인코딩된 GIF 이미지) 버퍼에 있습니다. 자세한 내용은 RFC 1521을 참조 하세요. "MIME (Multipurpose Internet Mail Extensions) 파트 1: 메커니즘을 지정 하 고 인터넷 메시지 본문의 형식을 설명 하는 "입니다. Rfc를 구할 수는 [의견 웹 사이트에 대 한 요청](https://www.rfc-editor.org)합니다.  
  
 이 메서드는 단순 콘텐츠 요소에만 읽을 수 있습니다. 요소는 텍스트, 공백, 공백, CDATA 섹션, 주석 및 처리 명령을 포함할 수 있습니다. 이 자동으로 확장 하는 엔터티 참조를 포함할 수도 있습니다. 요소는 자식 요소를 가질 수 없습니다.  
  
 이 메서드는 매우 유사 합니다 <xref:System.Xml.XmlValidatingReader.ReadContentAsBase64%2A> 요소 노드 형식에 대해서만 한다는 점을 제외 하면 메서드를 호출할 수 있습니다.  
  
 경우는 `count` 문서에서 바이트의 수보다 큰 값은 문서에서 바이트의 수와 동일한 경우 또는 <xref:System.Xml.XmlValidatingReader> 문서의 나머지 모든 바이트를 읽고 읽은 바이트 수를 반환 합니다. 다음 <xref:System.Xml.XmlValidatingReader> 메서드 호출 0을 반환 하 고 판독기를 노드 다음의 <xref:System.Xml.XmlNodeType.EndElement>합니다.  
  
 호출 하는 경우 <xref:System.Xml.XmlValidatingReader.Read%2A> 요소 내용을 모두 사용 하기 전에 판독기 겉으로 사용 된 첫 번째 콘텐츠 차례로 <xref:System.Xml.XmlValidatingReader.Read%2A> 메서드를 호출한 합니다. 이 판독기가 끝 요소가 발견 될 때까지 모든 텍스트를 읽는 것을 의미 합니다. 그런 다음 끝 태그 노드 읽기, 다음 노드를 읽을 하 고 노드로 이동 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="buffer" /> 값이 <see langword="null" />입니다.</exception>
        <exception cref="T:System.InvalidOperationException">현재 노드가 요소 노드가 아닌 경우</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">버퍼 또는 인덱스 + 카운트에 대 한 인덱스 할당된 된 버퍼 크기 보다 큽니다.</exception>
        <exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XmlValidatingReader" /> 구현은이 메서드를 지원 하지 않습니다.</exception>
        <exception cref="T:System.Xml.XmlException">요소가 혼합 된 콘텐츠를 포함 합니다.</exception>
        <exception cref="T:System.FormatException">콘텐츠는 요청된 된 형식으로 변환할 수 없습니다.</exception>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlValidatingReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsBinHex">
      <MemberSignature Language="C#" Value="public override int ReadElementContentAsBinHex (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 ReadElementContentAsBinHex(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadElementContentAsBinHex (buffer As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int ReadElementContentAsBinHex(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.ReadElementContentAsBinHex : byte[] * int * int -&gt; int" Usage="xmlValidatingReader.ReadElementContentAsBinHex (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="index" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="buffer">결과 텍스트를 복사해 넣을 버퍼입니다. 이 값은 <see langword="null" />일 수 없습니다.</param>
        <param name="index">버퍼에 넣을 결과 복사가 시작되는 오프셋입니다.</param>
        <param name="count">버퍼에 복사할 최대 바이트 수입니다. 복사된 실제 바이트 수가 이 메서드에서 반환됩니다.</param>
        <summary>요소를 읽고 BinHex 콘텐츠를 디코딩합니다.</summary>
        <returns>버퍼에 쓴 바이트 수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  합니다 <xref:System.Xml.XmlValidatingReader> 클래스에서 사용 되지 [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]합니다. 유효성 검사를 만들 수 있습니다 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReaderSettings> 클래스 및 <xref:System.Xml.XmlReader.Create%2A> 메서드. 자세한 내용은 <xref:System.Xml.XmlReader> 참조 페이지의 설명 섹션을 참조하세요.  
  
 이 메서드는 요소 내용을 읽고 BinHex 인코딩을 사용 하 여 디코딩하고 디코딩된 이진 바이트를 반환 합니다 (예를 들어, 인라인 BinHex 인코딩된 GIF 이미지) 버퍼에 있습니다.  
  
 이 메서드는 단순 콘텐츠 요소에만 읽을 수 있습니다. 요소는 텍스트, 공백, 공백, CDATA 섹션, 주석 및 처리 명령을 포함할 수 있습니다. 이 자동으로 확장 하는 엔터티 참조를 포함할 수도 있습니다. 요소는 자식 요소를 가질 수 없습니다.  
  
 이 메서드는 매우 유사 합니다 <xref:System.Xml.XmlValidatingReader.ReadContentAsBinHex%2A> 요소 노드 형식에 대해서만 한다는 점을 제외 하면 메서드를 호출할 수 있습니다.  
  
 경우는 `count` 문서에서 바이트의 수보다 큰 값은 문서에서 바이트의 수와 동일한 경우 또는 <xref:System.Xml.XmlValidatingReader> 문서의 나머지 모든 바이트를 읽고 읽은 바이트 수를 반환 합니다. 다음 <xref:System.Xml.XmlValidatingReader> 메서드 호출 0을 반환 하 고 판독기를 노드 다음의 <xref:System.Xml.XmlNodeType.EndElement>합니다.  
  
 호출 하는 경우 <xref:System.Xml.XmlValidatingReader.Read%2A> 요소 내용을 모두 사용 하기 전에 판독기 겉으로 사용 된 첫 번째 콘텐츠 차례로 <xref:System.Xml.XmlValidatingReader.Read%2A> 메서드를 호출한 합니다. 이 판독기가 끝 요소가 발견 될 때까지 모든 텍스트를 읽는 것을 의미 합니다. 그런 다음 끝 태그 노드 읽기, 다음 노드를 읽을 하 고 노드로 이동 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="buffer" /> 값이 <see langword="null" />입니다.</exception>
        <exception cref="T:System.InvalidOperationException">현재 노드가 요소 노드가 아닌 경우</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">버퍼 또는 인덱스 + 카운트에 대 한 인덱스 할당된 된 버퍼 크기 보다 큽니다.</exception>
        <exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XmlValidatingReader" /> 구현은이 메서드를 지원 하지 않습니다.</exception>
        <exception cref="T:System.Xml.XmlException">요소가 혼합 된 콘텐츠를 포함 합니다.</exception>
        <exception cref="T:System.FormatException">콘텐츠는 요청된 된 형식으로 변환할 수 없습니다.</exception>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlValidatingReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Reader">
      <MemberSignature Language="C#" Value="public System.Xml.XmlReader Reader { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlReader Reader" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.Reader" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Reader As XmlReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlReader ^ Reader { System::Xml::XmlReader ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Reader : System.Xml.XmlReader" Usage="System.Xml.XmlValidatingReader.Reader" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 <see langword="XmlValidatingReader" />를 생성하는 데 사용된 <see cref="T:System.Xml.XmlReader" />를 가져옵니다.</summary>
        <value>생성자에 지정된 <see langword="XmlReader" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  합니다 <xref:System.Xml.XmlValidatingReader> 클래스에서 사용 되지 [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]합니다. 유효성 검사를 만들 수 있습니다 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReaderSettings> 클래스 및 <xref:System.Xml.XmlReader.Create%2A> 메서드. 자세한 내용은 <xref:System.Xml.XmlReader> 참조 페이지의 설명 섹션을 참조하세요.  
  
 이 속성에는 사용자를 제공 된 판독기에 관련 된 속성에 액세스할 수 있습니다. 형식화 된 반환 `XmlReader`합니다. 캐스팅 하기 전에 형식에 대 한 사용자를 쿼리해야 합니다.  
  
 반환된 된 판독기 (예를 들어 읽기 메서드 호출 하나)의 상태를 변경 하면 예기치 않은 결과가 발생할 수 있습니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="ReadState">
      <MemberSignature Language="C#" Value="public override System.Xml.ReadState ReadState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.ReadState ReadState" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.ReadState" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReadState As ReadState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::ReadState ReadState { System::Xml::ReadState get(); };" />
      <MemberSignature Language="F#" Value="member this.ReadState : System.Xml.ReadState" Usage="System.Xml.XmlValidatingReader.ReadState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.ReadState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>판독기의 상태를 가져옵니다.</summary>
        <value><see cref="T:System.Xml.ReadState" /> 값 중 하나입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  합니다 <xref:System.Xml.XmlValidatingReader> 클래스에서 사용 되지 [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]합니다. 유효성 검사를 만들 수 있습니다 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReaderSettings> 클래스 및 <xref:System.Xml.XmlReader.Create%2A> 메서드. 자세한 내용은 <xref:System.Xml.XmlReader> 참조 페이지의 설명 섹션을 참조하세요.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="ReadString">
      <MemberSignature Language="C#" Value="public override string ReadString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ReadString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.ReadString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ReadString();" />
      <MemberSignature Language="F#" Value="override this.ReadString : unit -&gt; string" Usage="xmlValidatingReader.ReadString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>요소 또는 텍스트 노드의 내용을 문자열로 읽습니다.</summary>
        <returns>요소 또는 텍스트 노드의 내용입니다. 판독기가 요소 또는 텍스트 노드 이외의 위치에 있거나 현재 컨텍스트에 반환할 텍스트 콘텐츠가 없는 경우 이것은 빈 문자열입니다.  
  
 <block subset="none" type="note"><para>  
 텍스트 노드는 요소 또는 특성 텍스트 노드입니다.  
  
</para></block></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  합니다 <xref:System.Xml.XmlValidatingReader> 클래스에서 사용 되지 [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]합니다. 유효성 검사를 만들 수 있습니다 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReaderSettings> 클래스 및 <xref:System.Xml.XmlReader.Create%2A> 메서드. 자세한 내용은 <xref:System.Xml.XmlReader> 참조 페이지의 설명 섹션을 참조하세요.  
  
 요소에 배치 되 면 `ReadString` 모든 텍스트, 유효 공백, 공백 및 CDATA 섹션 노드 유형은 함께 연결 하 고 요소 내용으로 연결 된 데이터를 반환 합니다. 판독기는 주석을 포함 하 고 처리 명령이 태그가 발견 되 면 중지 합니다. 이러한 동작은 혼합 내용 모델에서 발생하거나 요소 끝 태그를 읽을 때 발생할 수 있습니다.  
  
 텍스트 노드에 있을 경우 `ReadString` 요소 끝 태그를 텍스트 노드에서 동일한 연결을 수행 합니다. 판독기가 특성 텍스트 노드에 있을 경우 `ReadString`에는 판독기가 요소 시작 태그에 있을 때와 같은 기능이 있습니다. 연결된 모든 요소 텍스트 노드를 반환합니다.  
  
 <xref:System.Xml.XmlValidatingReader.EntityHandling%2A> 속성에 따라 결정 하는 방법을 `ReadString` 다음과 같이 작동 합니다.  
  
|값|설명|  
|-----------|-----------------|  
|ExpandEntities|확장 된 문자, 일반 엔터티를 반환 합니다. 이 값이 기본값입니다.|  
|ExpandCharEntities|일반 엔터티 참조를 포함 하지 않고 최대 텍스트 콘텐츠를 반환합니다. 이 일반 엔터티 발생을 중지 하려면 ReadString을 의미 합니다. 호출 해야 `Read` 엔터티 참조를 합니다.|  
  
   
  
## Examples  
 다음 예제에서는 각 요소의 텍스트 콘텐츠를 표시합니다.  
  
 [!code-cpp[Classic WebData XmlValidatingReader.IsEmptyElement Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.IsEmptyElement Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.IsEmptyElement Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.IsEmptyElement Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.IsEmptyElement Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.IsEmptyElement Example/VB/source.vb#1)]  
  
 이 예제에서는 파일을 사용 하 여 `elems.xml`입력으로 합니다.  
  
 [!code-xml[Classic WebData XmlValidatingReader.IsEmptyElement Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.IsEmptyElement Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="ReadTypedValue">
      <MemberSignature Language="C#" Value="public object ReadTypedValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object ReadTypedValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.ReadTypedValue" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadTypedValue () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ ReadTypedValue();" />
      <MemberSignature Language="F#" Value="member this.ReadTypedValue : unit -&gt; obj" Usage="xmlValidatingReader.ReadTypedValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>지정된 XSD(XML 스키마 정의 언어) 형식의 공용 언어 런타임 형식을 가져옵니다.</summary>
        <returns>지정된 XML 스키마 형식의 공용 언어 런타임 형식입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  합니다 <xref:System.Xml.XmlValidatingReader> 클래스에서 사용 되지 [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]합니다. 유효성 검사를 만들 수 있습니다 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReaderSettings> 클래스 및 <xref:System.Xml.XmlReader.Create%2A> 메서드. 자세한 내용은 <xref:System.Xml.XmlReader> 참조 페이지의 설명 섹션을 참조하세요.  
  
 예를 들어 스키마 형식으로 정의 됩니다 `xsd:int`, 런타임 형식 `int32` 개체에 대해 반환 됩니다. 이 사용 하 여 테스트할 수는 <xref:System.Object.GetType%2A> 메서드와 캐스트 적절 하 게 합니다. 합니다 <xref:System.Xml.XmlValidatingReader.ReadTypedValue%2A> 메서드는 항상에서 파생 된 형식을 반환 합니다 <xref:System.Object> 클래스입니다. 반환 하지 않습니다는 <xref:System.Object> 형식입니다.  
  
 판독기가 특성에 배치,이 메서드는 런타임 형식화 된 개체를 반환 하지만 판독기의 위치가 변경 되지 않습니다. 요소에 판독기가 배치 되 면 `ReadTypedValue` 런타임 형식의 개체를 반환 하 고 종료 태그에 판독기를 배치 CDATA, 텍스트, 공백, 유효 공백 문자 및 주석 노드를 읽습니다. 없는 직접 매핑이 예를 들어 모든 형식을 `NMTOKENS`를 문자열로 반환 됩니다.  
  
> [!NOTE]
>  경우 <xref:System.Xml.XmlValidatingReader.ValidationType%2A> 설정한 ValidationType.None, 데이터 형식 정보가 없습니다 스키마 또는 문서 유형 정의 (Dtd)에서 제공 됩니다.  
  
> [!CAUTION]
>  호출한 후 <xref:System.Xml.XmlValidatingReader.Close%2A>하십시오 `ReadTypedValue` 돌아갑니다 `null`합니다.  
  
   
  
## Examples  
 다음 예제에서는 XML 문서의 각 요소에 대 한 형식 정보를 표시합니다.  
  
 [!code-cpp[XmlValidatingReader.SchemaType#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlValidatingReader.SchemaType/CPP/schematype.cpp#1)]
 [!code-csharp[XmlValidatingReader.SchemaType#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlValidatingReader.SchemaType/CS/schematype.cs#1)]
 [!code-vb[XmlValidatingReader.SchemaType#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlValidatingReader.SchemaType/VB/schematype.vb#1)]  
  
 이 예제에서는 다음 입력된 파일을 사용 합니다.  
  
 `booksSchema.xml`  
  
 [!code-xml[XmlValidatingReader.SchemaType#2](~/samples/snippets/xml/VS_Snippets_Data/XmlValidatingReader.SchemaType/XML/booksschema.xml#2)]  
  
 `books.xsd`  
  
 [!code-xml[XmlValidatingReader.SchemaType#3](~/samples/snippets/xml/VS_Snippets_Data/XmlValidatingReader.SchemaType/XML/books.xsd#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="ResolveEntity">
      <MemberSignature Language="C#" Value="public override void ResolveEntity ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ResolveEntity() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.ResolveEntity" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ResolveEntity ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ResolveEntity();" />
      <MemberSignature Language="F#" Value="override this.ResolveEntity : unit -&gt; unit" Usage="xmlValidatingReader.ResolveEntity " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see langword="EntityReference" /> 노드에 대해 엔터티 참조를 확인합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  합니다 <xref:System.Xml.XmlValidatingReader> 클래스에서 사용 되지 [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]합니다. 유효성 검사를 만들 수 있습니다 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReaderSettings> 클래스 및 <xref:System.Xml.XmlReader.Create%2A> 메서드. 자세한 내용은 <xref:System.Xml.XmlReader> 참조 페이지의 설명 섹션을 참조하세요.  
  
 판독기가 위치에 `EntityReference` 노드 (`XmlNodeType.EntityReference`) 이면 <xref:System.Xml.XmlValidatingReader.Read%2A> 이 메서드를 엔터티 대체 텍스트를 구문 분석 하는 호출 후에 호출 됩니다. 엔터티 대체 텍스트를 완료 한 후는 `EndEntity` 노드가 엔터티 참조 범위를 닫습니다 반환 됩니다.  
  
> [!NOTE]
>  이 메서드를 호출한 후 엔터티를 특성 값의 일부인 경우 호출 해야 <xref:System.Xml.XmlValidatingReader.ReadAttributeValue%2A> 엔터티 한 단계씩 실행 합니다.  
  
   
  
## Examples  
 다음 예제에서는 `ResolveEntity` 일반 엔터티를 확장 합니다.  
  
 [!code-cpp[Classic WebData XmlValidatingReader.ResolveEntity Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.ResolveEntity Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.ResolveEntity Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.ResolveEntity Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.ResolveEntity Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.ResolveEntity Example/VB/source.vb#1)]  
  
 이 예제에서는 파일을 사용 하 여 `book1.xml`입력으로 합니다.  
  
 [!code-xml[Classic WebData XmlValidatingReader.ResolveEntity Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.ResolveEntity Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">에 판독기가 <see langword="EntityReference" /> 노드.</exception>
        <altmember cref="T:System.Xml.EntityHandling" />
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Schemas">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaCollection Schemas { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaCollection Schemas" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.Schemas" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Schemas As XmlSchemaCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaCollection ^ Schemas { System::Xml::Schema::XmlSchemaCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Schemas : System.Xml.Schema.XmlSchemaCollection" Usage="System.Xml.XmlValidatingReader.Schemas" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>유효성 검사에 사용할 <see cref="T:System.Xml.Schema.XmlSchemaCollection" />을 가져옵니다.</summary>
        <value>유효성 검사에 사용할 <see langword="XmlSchemaCollection" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  합니다 <xref:System.Xml.XmlValidatingReader> 클래스에서 사용 되지 [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]합니다. 유효성 검사를 만들 수 있습니다 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReaderSettings> 클래스 및 <xref:System.Xml.XmlReader.Create%2A> 메서드. 자세한 내용은 <xref:System.Xml.XmlReader> 참조 페이지의 설명 섹션을 참조하세요.  
  
 `XmlSchemaCollection` 미리 로드 된 Xml-data Reduced (XDR) 및 XML 스키마 정의 언어 (XSD) 스키마를 보유 합니다. 이 속성 스키마의 캐시에 읽기 권한자 액세스 권한을 제공 하 고 스키마를 다시 로드 될 때마다 필요 없이 유효성을 검사할 수 있습니다. 판독기에 아무 것도 추가 하지 않습니다는 `XmlSchemaCollection`합니다.  
  
 경우는 `XmlSchemaCollection` 포함 된 XML 스키마 (XSD)를 포함 `include` 또는 `import` 유효성 검사를 위해서만 다른 네임 스페이스는 로드에 대 한 스키마를 다른 네임 스페이스를 참조 하는 요소입니다. 이러한 스키마는 스키마 컬렉션에 명시적으로 추가 된, 하지 않는 한 컬렉션 메서드 또는 속성 중 하나를 사용 하 여 액세스할 됩니다. 예를 들어 스키마 파일을 포함 하는 컬렉션 `a.xsd`, 스키마 파일에 대 한 참조를 포함 하는 `b.xsd`를 추가 해야 합니다 `b.xsd` 컬렉션 메서드 또는 속성 중 하나를 사용 하 여 액세스 하려면 먼저 스키마 컬렉션에 있습니다.  
  
 때를 `XmlSchemaCollection` 를 사용 하 여 액세스 하는 `Schemas` 속성을 <xref:System.Xml.Schema.XmlSchemaCollection.Add%2A?displayProperty=nameWithType> 메서드를 <xref:System.Xml.XmlResolver> 에 지정 된를 <xref:System.Xml.XmlValidatingReader.XmlResolver%2A?displayProperty=nameWithType> 속성.  
  
> [!NOTE]
>  스키마에 추가 해야 합니다 `XmlSchemaCollection` 첫 번째 `Read` 호출 합니다.  
  
   
  
## Examples  
 다음 예제에서는 XmlSchemaCollection에 저장 된 스키마를 사용 하 여 세 개의 XML 파일의 유효성을 검사 합니다.  
  
 [!code-cpp[Classic WebData XmlValidatingReader.Schemas Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.Schemas Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.Schemas Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.Schemas Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.Schemas Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.Schemas Example/VB/source.vb#1)]  
  
 이 샘플에서는 다음과 같은 5 개의 입력된 파일 사용:  
  
 `booksSchema.xml`  
  
 [!code-xml[Classic WebData XmlValidatingReader.Schemas Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.Schemas Example/XML/source.xml#2)]  
  
 `booksSchemaFail.xml`  
  
 [!code-xml[Classic WebData XmlValidatingReader.Schemas Example#3](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.Schemas Example/XML/source.xml#3)]  
  
 `newbooks.xml`  
  
 [!code-xml[Classic WebData XmlValidatingReader.Schemas Example#4](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.Schemas Example/XML/source.xml#4)]  
  
 `books.xsd`  
  
 [!code-xml[Classic WebData XmlValidatingReader.Schemas Example#5](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.Schemas Example/XML/source.xml#5)]  
  
 `schema1.xdr`  
  
 [!code-xml[Classic WebData XmlValidatingReader.Schemas Example#6](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.Schemas Example/XML/source.xml#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="SchemaType">
      <MemberSignature Language="C#" Value="public object SchemaType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SchemaType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.SchemaType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SchemaType As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ SchemaType { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SchemaType : obj" Usage="System.Xml.XmlValidatingReader.SchemaType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>스키마 형식 개체를 가져옵니다.</summary>
        <value>노드 값이 기본 제공 XSD(XML 스키마 정의 언어) 형식인지 사용자 정의 simpleType 또는 complexType인지 여부에 따라 <see cref="T:System.Xml.Schema.XmlSchemaDatatype" />, <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> 또는 <see cref="T:System.Xml.Schema.XmlSchemaComplexType" />입니다. 현재 노드에 스키마 형식이 없으면 <see langword="null" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  합니다 <xref:System.Xml.XmlValidatingReader> 클래스에서 사용 되지 [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]합니다. 유효성 검사를 만들 수 있습니다 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReaderSettings> 클래스 및 <xref:System.Xml.XmlReader.Create%2A> 메서드. 자세한 내용은 <xref:System.Xml.XmlReader> 참조 페이지의 설명 섹션을 참조하세요.  
  
 사용자는 반환 된 형식에 대 한 테스트 해야 합니다. 예를 들면 다음과 같습니다.  
  
```csharp  
object obj = vreader.SchemaType;  
 if (obj is XmlSchemaType)  
 {  
   XmlSchemaType st = (XmlSchemaType)obj;  
   // use XmlSchemaType object  
 }  
 if (obj is XmlSchemaDatatype)  
 {  
   XmlSchemaDatatype sd = (XmlSchemaDatatype)obj;  
   Type vt = sd.ValueType;  
   // use XmlSchemaDatatype object  
       }  
```  
  
 XML 스키마 유효성 검사를 수행 하는 경우는 `XmlSchemaType` 또는 `XmlSchemaDatatype` 읽고 있는 현재 요소에 해당 합니다. 이 속성을 반환 하는 경우 문서 유형 정의 (DTD 유효성 검사)를 수행할 `null`합니다.  
  
 `XmlSchemaDatatype` 현재 요소 또는 특성에는 단순 유형 min 및 max와 같은 단순 형식에 대 한 특별 한 유효성 검사 제약 조건을 지정할 수 있는 경우 반환 됩니다.  
  
 `XmlSchemaSimpleType` 현재 요소 또는 특성을 사용자 정의 simpleType 경우 반환 됩니다.  
  
 `XmlSchemaComplexType` 현재 요소 이면 사용자 정의 complexType 반환 됩니다. 이 형식은 특성으로 반환할 수 없습니다.  
  
> [!NOTE]
>  경우 <xref:System.Xml.XmlValidatingReader.ValidationType%2A> 설정한 ValidationType.None, 데이터 형식 정보가 없는 스키마 또는 Dtd에서 제공 됩니다.  
  
> [!CAUTION]
>  호출 후 <xref:System.Xml.XmlValidatingReader.Close%2A>, SchemaType Null이 반환 됩니다.  
  
   
  
## Examples  
 다음 예제에서는 XML 문서의 각 요소에 대 한 형식 정보를 표시합니다.  
  
 [!code-cpp[XmlValidatingReader.SchemaType#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlValidatingReader.SchemaType/CPP/schematype.cpp#1)]
 [!code-csharp[XmlValidatingReader.SchemaType#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlValidatingReader.SchemaType/CS/schematype.cs#1)]
 [!code-vb[XmlValidatingReader.SchemaType#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlValidatingReader.SchemaType/VB/schematype.vb#1)]  
  
 이 예제에서는 다음 입력된 파일을 사용 합니다.  
  
 `booksSchema.xml`  
  
 [!code-xml[XmlValidatingReader.SchemaType#2](~/samples/snippets/xml/VS_Snippets_Data/XmlValidatingReader.SchemaType/XML/booksschema.xml#2)]  
  
 `books.xsd`  
  
 [!code-xml[XmlValidatingReader.SchemaType#3](~/samples/snippets/xml/VS_Snippets_Data/XmlValidatingReader.SchemaType/XML/books.xsd#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Settings">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlReaderSettings Settings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlReaderSettings Settings" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.Settings" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Settings As XmlReaderSettings" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::XmlReaderSettings ^ Settings { System::Xml::XmlReaderSettings ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Settings : System.Xml.XmlReaderSettings" Usage="System.Xml.XmlValidatingReader.Settings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReaderSettings</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 <see cref="T:System.Xml.XmlValidatingReader" /> 인스턴스를 만드는 데 사용된 <see cref="T:System.Xml.XmlReaderSettings" /> 개체를 가져옵니다.</summary>
        <value><see cref="T:System.Xml.XmlValidatingReader" /> 개체는 <see cref="T:System.Xml.XmlReaderSettings" /> 클래스 및 <see cref="Overload:System.Xml.XmlReader.Create" /> 메서드를 사용하여 인스턴스화되지 않기 때문에 <see langword="null" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  

> [!NOTE]
> <xref:System.Xml.XmlValidatingReader> 클래스는 .NET Framework 버전 2.0에서 사용되지 않습니다. 유효성 검사를 만들 수 있습니다 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReaderSettings> 클래스 및 <xref:System.Xml.XmlReader.Create%2A> 메서드. 자세한 내용은 [XmlReader 사용 하 여 XML 데이터 유효성 검사](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/hdf992b8(v=vs.100))합니다.

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Xml.IXmlLineInfo.HasLineInfo">
      <MemberSignature Language="C#" Value="bool IXmlLineInfo.HasLineInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Xml.IXmlLineInfo.HasLineInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.System#Xml#IXmlLineInfo#HasLineInfo" />
      <MemberSignature Language="VB.NET" Value="Function HasLineInfo () As Boolean Implements IXmlLineInfo.HasLineInfo" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Xml.IXmlLineInfo.HasLineInfo() = System::Xml::IXmlLineInfo::HasLineInfo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.IXmlLineInfo.HasLineInfo</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>클래스에서 줄 정보를 반환할 수 있는지를 나타내는 값을 가져옵니다.</summary>
        <returns><see cref="P:System.Xml.IXmlLineInfo.LineNumber" />, <see cref="P:System.Xml.IXmlLineInfo.LinePosition" />을 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Xml.IXmlNamespaceResolver.GetNamespacesInScope">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IDictionary&lt;string,string&gt; IXmlNamespaceResolver.GetNamespacesInScope (System.Xml.XmlNamespaceScope scope);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IDictionary`2&lt;string, string&gt; System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(valuetype System.Xml.XmlNamespaceScope scope) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.System#Xml#IXmlNamespaceResolver#GetNamespacesInScope(System.Xml.XmlNamespaceScope)" />
      <MemberSignature Language="VB.NET" Value="Function GetNamespacesInScope (scope As XmlNamespaceScope) As IDictionary(Of String, String) Implements IXmlNamespaceResolver.GetNamespacesInScope" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^ System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System::Xml::XmlNamespaceScope scope) = System::Xml::IXmlNamespaceResolver::GetNamespacesInScope;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="System.Xml.XmlNamespaceScope" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="scope">판독기의 범위를 식별하는 <see cref="T:System.Xml.XmlNamespaceScope" /> 개체입니다.</param>
        <summary>이 멤버에 대한 설명은 <see cref="M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)" />를 참조하세요.</summary>
        <returns>범위에서 네임스페이스를 식별하는 T:System.Collections.IDictionary 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 멤버는 명시적 인터페이스 멤버 구현이며, <xref:System.Xml.XmlValidatingReader> 인스턴스가 <xref:System.Xml.IXmlNamespaceResolver> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Xml.IXmlNamespaceResolver.LookupNamespace">
      <MemberSignature Language="C#" Value="string IXmlNamespaceResolver.LookupNamespace (string prefix);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.Xml.IXmlNamespaceResolver.LookupNamespace(string prefix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.System#Xml#IXmlNamespaceResolver#LookupNamespace(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function LookupNamespace (prefix As String) As String Implements IXmlNamespaceResolver.LookupNamespace" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.Xml.IXmlNamespaceResolver.LookupNamespace(System::String ^ prefix) = System::Xml::IXmlNamespaceResolver::LookupNamespace;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="prefix">네임스페이스 접두사입니다.</param>
        <summary>이 멤버에 대한 설명은 <see cref="M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)" />를 참조하세요.</summary>
        <returns>접두사와 관련된 네임스페이스 URI가 포함된 문자열 값입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 멤버는 명시적 인터페이스 멤버 구현이며, <xref:System.Xml.XmlValidatingReader> 인스턴스가 <xref:System.Xml.IXmlNamespaceResolver> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="System.Xml.IXmlNamespaceResolver.LookupPrefix">
      <MemberSignature Language="C#" Value="string IXmlNamespaceResolver.LookupPrefix (string namespaceName);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.Xml.IXmlNamespaceResolver.LookupPrefix(string namespaceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.System#Xml#IXmlNamespaceResolver#LookupPrefix(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function LookupPrefix (namespaceName As String) As String Implements IXmlNamespaceResolver.LookupPrefix" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.Xml.IXmlNamespaceResolver.LookupPrefix(System::String ^ namespaceName) = System::Xml::IXmlNamespaceResolver::LookupPrefix;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="namespaceName" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="namespaceName">접두사와 관련된 네임스페이스입니다.</param>
        <summary>이 멤버에 대한 설명은 <see cref="M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)" />를 참조하세요.</summary>
        <returns><paramref name="namespaceName" />과 관련된 네임스페이스 접두사가 포함된 문자열 값입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 멤버는 명시적 인터페이스 멤버 구현이며, <xref:System.Xml.XmlValidatingReader> 인스턴스가 <xref:System.Xml.IXmlNamespaceResolver> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidationEventHandler">
      <MemberSignature Language="C#" Value="public event System.Xml.Schema.ValidationEventHandler ValidationEventHandler;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Xml.Schema.ValidationEventHandler ValidationEventHandler" />
      <MemberSignature Language="DocId" Value="E:System.Xml.XmlValidatingReader.ValidationEventHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Xml::Schema::ValidationEventHandler ^ ValidationEventHandler;" />
      <MemberSignature Language="F#" Value="member this.ValidationEventHandler : System.Xml.Schema.ValidationEventHandler " Usage="member this.ValidationEventHandler : System.Xml.Schema.ValidationEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.ValidationEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>DTD(언어 종류 정의), XDR(XML-Data Reduced) 스키마 및 XSD(XML 스키마 정의 언어) 스키마 유효성 검사 오류에 대한 정보를 받는 이벤트 처리기를 설정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  합니다 <xref:System.Xml.XmlValidatingReader> 클래스에서 사용 되지 [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]합니다. 유효성 검사를 만들 수 있습니다 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReaderSettings> 클래스 및 <xref:System.Xml.XmlReader.Create%2A> 메서드. 자세한 내용은 <xref:System.Xml.XmlReader> 참조 페이지의 설명 섹션을 참조하세요.  
  
 이러한 이벤트 중에 발생 <xref:System.Xml.XmlValidatingReader.Read%2A> 경우에을 <xref:System.Xml.XmlValidatingReader.ValidationType%2A> DTD, XDR, 스키마 또는 자동 됩니다 지정 합니다.  
  
 없는 이벤트 처리기가 제공 하는 경우는 <xref:System.Xml.XmlException> (심각도 않으면) 첫 번째 유효성 검사 오류가 throw 됩니다.  
  
> [!NOTE]
>  하지만 유효성 검사 오류를 보고 하는 요소, 해당 요소에 대 한 콘텐츠 모델의 나머지 부분에 유효성이 검사 되지 않은 경우 자식의 유효성을 검사 합니다. 판독기는 지정된 된 요소에 대 한 첫 번째 오류만 보고합니다.  
  
 콜백 처리기를 사용할 수는 <xref:System.Xml.Schema.ValidationEventArgs.Severity%2A?displayProperty=nameWithType> 속성 스키마를 XML 인스턴스 문서의 유효성을 검사할는 보장을 합니다. `Severity` 속성을 사용 하면 심각한 오류 (심각도 않으면) 유효성 검사 오류 및 유효성 검사 경고가 (심각도 XmlSeverityType.Warning 같음)를 구분할 수 없는 스키마 정보가 제공 됩니다.  
  
   
  
## Examples  
 다음 예제에서는 XML 스키마에 대해 파일의 유효성을 검사 합니다.  
  
 [!code-cpp[Classic WebData XmlValidatingReader.ValidationEventHandler Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.ValidationEventHandler Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.ValidationEventHandler Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.ValidationEventHandler Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.ValidationEventHandler Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.ValidationEventHandler Example/VB/source.vb#1)]  
  
 이 샘플에서는 다음 두 개의 입력된 파일 사용:  
  
 `notValidXSD.xml` (의 `xsi:schemaLocation` 판독기에 대 한 XML 스키마를 식별 하는 특성입니다.)  
  
 [!code-xml[Classic WebData XmlValidatingReader.ValidationEventHandler Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.ValidationEventHandler Example/XML/source.xml#2)]  
  
 `books.xsd`  
  
 [!code-xml[Classic WebData XmlValidatingReader.ValidationEventHandler Example#3](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.ValidationEventHandler Example/XML/source.xml#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Schema.XmlSeverityType" />
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="ValidationType">
      <MemberSignature Language="C#" Value="public System.Xml.ValidationType ValidationType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.ValidationType ValidationType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.ValidationType" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidationType As ValidationType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::ValidationType ValidationType { System::Xml::ValidationType get(); void set(System::Xml::ValidationType value); };" />
      <MemberSignature Language="F#" Value="member this.ValidationType : System.Xml.ValidationType with get, set" Usage="System.Xml.XmlValidatingReader.ValidationType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.ValidationType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>수행할 유효성 검사의 형식을 나타내는 값을 가져오거나 설정합니다.</summary>
        <value><see cref="T:System.Xml.ValidationType" /> 값 중 하나입니다. 이 속성이 설정되지 않으면 기본값은 ValidationType.Auto로 설정됩니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  합니다 <xref:System.Xml.XmlValidatingReader> 클래스에서 사용 되지 [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]합니다. 유효성 검사를 만들 수 있습니다 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReaderSettings> 클래스 및 <xref:System.Xml.XmlReader.Create%2A> 메서드. 자세한 내용은 <xref:System.Xml.XmlReader> 참조 페이지의 설명 섹션을 참조하세요.  
  
 첫 번째 호출 하기 전에이 속성을 설정 해야 <xref:System.Xml.XmlValidatingReader.Read%2A>합니다. 이 속성을 ValidationType.None 비검증 판독기를 만듭니다.  
  
 외부 문서 유형 정의 (Dtd) 또는 스키마 유효성 검사를 위해 필요한 경우는 <xref:System.Xml.XmlResolver> 사용 됩니다.  
  
   
  
## Examples  
 다음 예제에서는 두 파일의 유효성을 검사 합니다.  
  
 [!code-cpp[Classic WebData XmlValidatingReader.ValidationType Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.ValidationType Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.ValidationType Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.ValidationType Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.ValidationType Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.ValidationType Example/VB/source.vb#1)]  
  
 이 샘플에서는 다음 네 개의 입력된 파일 사용:  
  
 `notValid.xml` (의 "x 스키마:" 접두사 판독기에 대 한 Xml-data Reduced (XDR) 스키마를 식별 합니다.)  
  
 [!code-xml[Classic WebData XmlValidatingReader.ValidationType Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.ValidationType Example/XML/source.xml#2)]  
  
 `schema1.xdr`  
  
 [!code-xml[Classic WebData XmlValidatingReader.ValidationType Example#3](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.ValidationType Example/XML/source.xml#3)]  
  
 `cdDTD.xml`  
  
 [!code-xml[Classic WebData XmlValidatingReader.ValidationType Example#4](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.ValidationType Example/XML/source.xml#4)]  
  
 `book1.xml`  
  
 [!code-xml[Classic WebData XmlValidatingReader.ValidationType Example#5](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.ValidationType Example/XML/source.xml#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">읽기를 호출한 후 속성을 설정 합니다.</exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public override string Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.Value" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Value As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Value { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : string" Usage="System.Xml.XmlValidatingReader.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 노드의 텍스트 값을 가져옵니다.</summary>
        <value>노드의 <see cref="P:System.Xml.XmlValidatingReader.NodeType" />에 따라 반환되는 값이 달라집니다. 다음 표에서는 반환할 값이 있는 노드 형식을 보여 줍니다. 다른 모든 노드 형식은 String.Empty를 반환합니다.  
  
 <list type="table"><listheader><term> 노드 형식 
 </term><description> 값 
 </description></listheader><item><term><see langword="Attribute" /></term><description> 특성 값  
  
 </description></item><item><term><see langword="CDATA" /></term><description> CDATA 섹션 내용입니다.  
  
 </description></item><item><term><see langword="Comment" /></term><description> 주석의 내용입니다.  
  
 </description></item><item><term><see langword="DocumentType" /></term><description> 내부 하위 집합입니다.  
  
 </description></item><item><term><see langword="ProcessingInstruction" /></term><description> 대상을 제외한 전체 내용입니다.  
  
 </description></item><item><term><see langword="SignificantWhitespace" /></term><description> 혼합된 내용 모델에서 태그 들 사이의 공백입니다.  
  
 </description></item><item><term><see langword="Text" /></term><description> 텍스트 노드의 내용입니다.  
  
 </description></item><item><term><see langword="Whitespace" /></term><description> 태그 사이의 공백입니다.  
  
 </description></item><item><term><see langword="XmlDeclaration" /></term><description> 선언 내용입니다.  
  
 </description></item></list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  합니다 <xref:System.Xml.XmlValidatingReader> 클래스에서 사용 되지 [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]합니다. 유효성 검사를 만들 수 있습니다 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReaderSettings> 클래스 및 <xref:System.Xml.XmlReader.Create%2A> 메서드. 자세한 내용은 <xref:System.Xml.XmlReader> 참조 페이지의 설명 섹션을 참조하세요.  
  
   
  
## Examples  
 다음 예제에서는 XML 파일을 읽고 각 노드를 표시 합니다.  
  
 [!code-cpp[Classic WebData XmlValidatingReader.Name Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.Name Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.Name Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.Name Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.Name Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.Name Example/VB/source.vb#1)]  
  
 이 예제에서는 파일을 사용 하 여 `items.xml`입력으로 합니다.  
  
 [!code-xml[Classic WebData XmlValidatingReader.Name Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.Name Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="XmlLang">
      <MemberSignature Language="C#" Value="public override string XmlLang { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string XmlLang" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.XmlLang" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property XmlLang As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ XmlLang { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.XmlLang : string" Usage="System.Xml.XmlValidatingReader.XmlLang" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 <see langword="xml:lang" /> 범위를 가져옵니다.</summary>
        <value>현재 <see langword="xml:lang" /> 범위입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  합니다 <xref:System.Xml.XmlValidatingReader> 클래스에서 사용 되지 [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]합니다. 유효성 검사를 만들 수 있습니다 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReaderSettings> 클래스 및 <xref:System.Xml.XmlReader.Create%2A> 메서드. 자세한 내용은 <xref:System.Xml.XmlReader> 참조 페이지의 설명 섹션을 참조하세요.  
  
 이 속성은 현재 노드가 속해 있는 xml: lang 범위를 나타냅니다. 예를 들어, 사용 하 여 XML 조각을 같습니다 `xml:lang` 미국으로 설정 루트 요소에서 영어:  
  
```xml  
<root xml:lang="en-us">   
<name>Fred</name>   
</root>   
```  
  
 판독기가 배치 하는 경우는 `name` 요소인 미국의 범위에 있는지를 찾으려면이 속성을 사용할 수 있습니다 영어 `xml:lang` 특성입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="XmlResolver">
      <MemberSignature Language="C#" Value="public System.Xml.XmlResolver XmlResolver { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlResolver XmlResolver" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.XmlResolver" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlResolver As XmlResolver" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlResolver ^ XmlResolver {  void set(System::Xml::XmlResolver ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XmlResolver : System.Xml.XmlResolver" Usage="System.Xml.XmlValidatingReader.XmlResolver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlResolver</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>외부 DTD(Document Type Definition) 및 스키마 위치 참조를 확인하는 데 사용되는 <see cref="T:System.Xml.XmlResolver" />를 설정합니다. 또한 <see langword="XmlResolver" />는 XSD(XML 스키마 정의 언어) 스키마에 있는 포함 요소 또는 가져오기 요소를 처리하는 데도 사용됩니다.</summary>
        <value>사용할 <see langword="XmlResolver" />입니다. <see langword="null" />로 설정되면 외부 리소스는 확인되지 않습니다.  
  
[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 버전 1.1에서는 완전히 신뢰할 수 있는 호출자만 <see langword="XmlResolver" />를 지정할 수 있습니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  합니다 <xref:System.Xml.XmlValidatingReader> 클래스에서 사용 되지 [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]합니다. 유효성 검사를 만들 수 있습니다 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReaderSettings> 클래스 및 <xref:System.Xml.XmlReader.Create%2A> 메서드. 자세한 내용은 <xref:System.Xml.XmlReader> 참조 페이지의 설명 섹션을 참조하세요.  
  
 `XmlResolver` 모든 Dtd, 엔터티, 또는 유효성 검사 프로세스를 완료 하는 데 필요한 스키마를 로드 하는 데 사용 됩니다.  
  
 언제 든 지가이 속성을 설정할 수 있습니다 및 다음 후에 반영 됩니다 <xref:System.Xml.XmlValidatingReader.Read%2A> 호출 합니다. 이 속성 설정 된 경우 `null`, 판독기는 외부 참조를 확인 하지 않으려는 것으로 가정 합니다. 이 경우 리소스가 있는 경우 판독기 내부 리소스에 대해 확인만 합니다.  
  
 버전 1.1에서는 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] ,이 속성을 설정 하지 않으면 애플리케이션의 신뢰 수준을 기본 동작을 결정 합니다.  
  
 `Fully trusted code:` 기본값을 사용 하 여 판독기 <xref:System.Xml.XmlUrlResolver> 사용자 자격 증명 없이 합니다. 사용 하 여 네트워크 리소스에 액세스 하는 데 인증이 필요 합니다 `XmlResolver` 속성에 지정할는 `XmlResolver` 에 필요한 자격 증명입니다.  
  
 `Semi-trusted code:` 합니다 `XmlResolver` 속성이 `null`합니다. 외부 리소스가 확인 되지 않습니다.  
  
 스키마를 사용 하 여 유효성을 검사 하는 경우 제공 하 여 비용이 많이 드는 로드 프로세스를 방지할 수 있습니다는 <xref:System.Xml.Schema.XmlSchemaCollection> 를 사용 하 여 <xref:System.Xml.XmlValidatingReader.Schemas%2A> 속성.  
  
   
  
## Examples  
 다음 예제에서는 `XmlResolver` 속성 네트워크로 연결 된 DTD 파일에 액세스 하는 데 필요한 자격 증명을 지정 합니다.  
  
 [!code-cpp[XmlValidatingReader.XmlResolver#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlValidatingReader.XmlResolver/CPP/vrdr_resolver.cpp#1)]
 [!code-csharp[XmlValidatingReader.XmlResolver#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlValidatingReader.XmlResolver/CS/vrdr_resolver.cs#1)]
 [!code-vb[XmlValidatingReader.XmlResolver#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlValidatingReader.XmlResolver/VB/vrdr_resolver.vb#1)]  
  
 이 예제에서는 입력으로 다음 파일을 사용 합니다.  
  
 `book5.xml`  
  
 [!code-xml[XmlValidatingReader.XmlResolver#2](~/samples/snippets/xml/VS_Snippets_Data/XmlValidatingReader.XmlResolver/XML/book5.xml#2)]  
  
 `books.dtd`  
  
 [!code-xml[XmlValidatingReader.XmlResolver#3](~/samples/snippets/xml/VS_Snippets_Data/XmlValidatingReader.XmlResolver/XML/books.dtd#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.XmlUrlResolver.Credentials" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Net.NetworkCredential" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="XmlSpace">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlSpace XmlSpace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlSpace XmlSpace" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.XmlSpace" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property XmlSpace As XmlSpace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::XmlSpace XmlSpace { System::Xml::XmlSpace get(); };" />
      <MemberSignature Language="F#" Value="member this.XmlSpace : System.Xml.XmlSpace" Usage="System.Xml.XmlValidatingReader.XmlSpace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlSpace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 <see langword="xml:space" /> 범위를 가져옵니다.</summary>
        <value><see cref="T:System.Xml.XmlSpace" /> 값 중 하나입니다. <see langword="xml:space" /> 범위가 존재하지 않으면 이 속성은 기본적으로 <see langword="XmlSpace.None" />으로 설정됩니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  합니다 <xref:System.Xml.XmlValidatingReader> 클래스에서 사용 되지 [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]합니다. 유효성 검사를 만들 수 있습니다 <xref:System.Xml.XmlReader> 를 사용 하 여 인스턴스를 <xref:System.Xml.XmlReaderSettings> 클래스 및 <xref:System.Xml.XmlReader.Create%2A> 메서드. 자세한 내용은 <xref:System.Xml.XmlReader> 참조 페이지의 설명 섹션을 참조하세요.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
  </Members>
</Type>