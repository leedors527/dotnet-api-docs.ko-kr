<Type Name="XmlWriterSettings" FullName="System.Xml.XmlWriterSettings">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c7638e1113f3c22b83b566bd79a025d291e0c9c0" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58725136" /></Metadata><TypeSignature Language="C#" Value="public sealed class XmlWriterSettings" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit XmlWriterSettings extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.XmlWriterSettings" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class XmlWriterSettings" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlWriterSettings sealed" />
  <TypeSignature Language="F#" Value="type XmlWriterSettings = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><see cref="T:System.Xml.XmlWriter" /> 메서드를 사용하여 만든 <see cref="Overload:System.Xml.XmlWriter.Create" /> 개체에서 지원할 기능 집합을 지정합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Xml.XmlWriter.Create%2A> 메서드를 가져오기 위한 기본 메커니즘은 <xref:System.Xml.XmlWriter> 인스턴스. 합니다 <xref:System.Xml.XmlWriter.Create%2A> 메서드를 <xref:System.Xml.XmlWriterSettings> 클래스에서 구현 하는 기능을 지정 하는 <xref:System.Xml.XmlWriter> 만들어지는 개체입니다.  
  
> [!NOTE]
>  사용 중인 경우는 <xref:System.Xml.XmlWriter> 개체를 <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> 메서드를 사용할지를 <xref:System.Xml.Xsl.XslCompiledTransform.OutputSettings%2A> 속성을는 <xref:System.Xml.XmlWriterSettings> 올바른 설정 사용 하 여 개체입니다. 이에 따라 만들어진 <xref:System.Xml.XmlWriter> 개체가 올바른 출력 설정을 갖게 됩니다.  
  
 <xref:System.Xml.XmlWriterSettings> 클래스 속성을 해당 컨트롤 데이터 규칙 및 출력 형식을 제공 합니다.  
  
 데이터 규칙 검사 및 자동 수정에 대 한 이러한 속성을 사용 합니다.  
  
|속성|설명|값|기본값|  
|--------------|---------------|-----------|-------------|  
|<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>|W3C에서 정의 된 대로 올바른 xml에서 문자는 확인할 지 여부를 문자 집합,입니다.|`true` 또는 `false`|`true`|  
|<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>|출력을 올바른 형식의 XML 1.0 문서 또는 조각 인지 확인 여부를 나타냅니다.|<xref:System.Xml.ConformanceLevel.Document?displayProperty=nameWithType> (문서 수준), <xref:System.Xml.ConformanceLevel.Fragment> (조각 수준), 또는 <xref:System.Xml.ConformanceLevel.Auto> (자동 검색)|<xref:System.Xml.ConformanceLevel.Document?displayProperty=nameWithType> (문서 수준 규칙)|  
|<xref:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose%2A>|닫히지 않은 모든 요소에 닫는 태그를 추가할지 여부를 때는 <xref:System.Xml.XmlWriter.Close%2A> 메서드가 호출 됩니다.|`true` 또는 `false`|`true`|  
  
 출력 형식에 지정 하려면 이러한 속성을 사용 합니다.  
  
|속성|설명|값|기본값|  
|--------------|---------------|-----------|-------------|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|사용할 텍스트 인코딩입니다.|<xref:System.Text.Encoding?displayProperty=nameWithType> 값|<xref:System.Text.Encoding.UTF8?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|요소의 들여쓰기 여부를|`true` 또는 `false`|`false` (들여쓰기 없음)|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|들여쓸 때 사용할 문자열 (때 사용한 <xref:System.Xml.XmlWriterSettings.Indent%2A> 로 설정 된 `true`).|문자열|공백 두 개|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|줄 바꿈에 사용할 문자열입니다.|문자열|`\r\n` (캐리지 리턴, 줄 바꿈)|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|줄 바꿈 문자를 처리 하는 방법입니다.|<xref:System.Xml.NewLineHandling?displayProperty=nameWithType> 값: <xref:System.Xml.NewLineHandling.Entitize> (표준화) <xref:System.Xml.NewLineHandling.Replace> (교체) 또는 <xref:System.Xml.NewLineHandling.None> (변경 되지 않은 상태로 둠)|<xref:System.Xml.NewLineHandling.Replace> (지정 된 문자로 바꿉니다 <xref:System.Xml.XmlWriterSettings.NewLineChars%2A>)|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|특성을 개별 줄에 쓸지 여부를 (이 없는 경우 적용 <xref:System.Xml.XmlWriterSettings.Indent%2A> 는 `false`).|`true` 또는 `false`|`false`|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|XML 선언을 쓸지 여부를 나타냅니다.|`true` 또는 `false`|`false`|  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Xml.XmlWriter> XML 파일에 기록 하 고 새 줄에 각 특성을 씁니다.  
  
 [!code-csharp[XmlWriterSettings.NewLineOnAttributes#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.NewLineOnAttributes/CS/writenewlineattrs.cs#1)]
 [!code-vb[XmlWriterSettings.NewLineOnAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.NewLineOnAttributes/VB/writenewlineattrs.vb#1)]  
  
 샘플 출력은 다음과 같습니다.  
  
```xml  
<order  
  orderID="367A54"  
  date="2001-05-03">  
  <price>19.95</price>  
</order>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterSettings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriterSettings.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterSettings();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Xml.XmlWriterSettings" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 인스턴스에 대 한 초기 속성 값을 보여 줍니다. <xref:System.Xml.XmlWriterSettings>합니다.  
  
|속성|초기 값|  
|--------------|-------------------|  
|<xref:System.Xml.XmlWriterSettings.Async%2A>|`false`.|  
|<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>|`true`.|  
|<xref:System.Xml.XmlWriterSettings.CloseOutput%2A>|`false`.|  
|<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document>.|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|`Encoding.UTF8`.|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|`false`.|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|두 공간입니다.|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|`\r\n` (캐리지 리턴, 줄 바꿈).|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|<xref:System.Xml.NewLineHandling.Replace>.|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|`false`.|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|`false`.|  
|<xref:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose%2A>|`true`.|  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Xml.XmlWriter> 들여쓰기에 탭 문자를 사용 하는 개체입니다.  
  
 [!code-csharp[XmlWriterSettings.Indent#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.Indent/CS/writeindent.cs#1)]
 [!code-vb[XmlWriterSettings.Indent#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.Indent/VB/writeindent.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Async">
      <MemberSignature Language="C#" Value="public bool Async { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Async" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.Async" />
      <MemberSignature Language="VB.NET" Value="Public Property Async As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Async { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Async : bool with get, set" Usage="System.Xml.XmlWriterSettings.Async" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>비동기 <see cref="T:System.Xml.XmlWriter" /> 메서드를 특정 <see cref="T:System.Xml.XmlWriter" /> 인스턴스에서 사용할 수 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>비동기 메서드를 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 값을 설정 해야 합니다 `true` 만들면 새 <xref:System.Xml.XmlWriter> 하려는 경우 사용 하 여 비동기 인스턴스 <xref:System.Xml.XmlWriter> 해당 인스턴스에 대 한 메서드. 후 합니다 <xref:System.Xml.XmlWriter> 만들어지면이 인스턴스는 <xref:System.Xml.XmlWriterSettings.Async%2A> 속성은 읽기 전용입니다. 이 속성의 기본값은 `false`입니다.  
  
 이 플래그는 무시 합니다 <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> 오버 로드 합니다. 즉, 새로 만든 경우 <xref:System.Xml.XmlWriter> 기존 기반으로 <xref:System.Xml.XmlWriter>, 비동기 동작 입력에 따라 달라 집니다 <xref:System.Xml.XmlWriter>를 사용할 수 없습니다는 <xref:System.Xml.XmlWriterSettings.Async%2A> 비동기 동작을 변경 하는 플래그입니다.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Async 및 Await를 사용한 비동기 프로그래밍(C# 및 Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="CheckCharacters">
      <MemberSignature Language="C#" Value="public bool CheckCharacters { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CheckCharacters" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.CheckCharacters" />
      <MemberSignature Language="VB.NET" Value="Public Property CheckCharacters As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CheckCharacters { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CheckCharacters : bool with get, set" Usage="System.Xml.XmlWriterSettings.CheckCharacters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>XML 작성기가 문서의 모든 문자가 W3C [XML 1.0 권장 사항](https://www.w3.org/TR/REC-xml/#charsets)의 "2.2 문자" 섹션을 따르는지 확인해야 하는지 표시하는 값을 가져오거나 설정합니다.</summary>
        <value>문자를 검사하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 <xref:System.Xml.XmlWriter> 개체를 지 원하는 문자 검사, 모든 문자가 W3C의 "2.2 문자" 섹션에서 지정 하는 유효한 XML 문자 범위를 벗어나는 경우 예외가 발생 [XML 1.0 권장 사항](https://www.w3.org/TR/REC-xml/#charsets)합니다.  
  
 문자 검사 XML 이름에 잘못 된 문자에 대 한 확인 하거나 모든 XML 이름이 유효한 지 검사 포함 되지 않습니다. 이러한 검사에는 규칙 검사의 일부 이며 항상 수행 됩니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Xml.XmlWriterSettings Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlWriterSettings Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriterSettings.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As XmlWriterSettings" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlWriterSettings ^ Clone();" />
      <MemberSignature Language="F#" Value="member this.Clone : unit -&gt; System.Xml.XmlWriterSettings" Usage="xmlWriterSettings.Clone " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriterSettings</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Xml.XmlWriterSettings" /> 인스턴스의 복사본을 만듭니다.</summary>
        <returns>복제된 <see cref="T:System.Xml.XmlWriterSettings" /> 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 복제 된 <xref:System.Xml.XmlWriterSettings> 설정을 원래 개체에 영향을 주지 않고 개체를 수정할 수 있습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CloseOutput">
      <MemberSignature Language="C#" Value="public bool CloseOutput { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CloseOutput" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.CloseOutput" />
      <MemberSignature Language="VB.NET" Value="Public Property CloseOutput As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CloseOutput { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CloseOutput : bool with get, set" Usage="System.Xml.XmlWriterSettings.CloseOutput" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Xml.XmlWriter" /> 메서드를 호출한 경우 <see cref="T:System.IO.TextWriter" />가 내부 스트림 또는 <see cref="M:System.Xml.XmlWriter.Close" />도 함께 닫을지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>내부 스트림 또는 <see cref="T:System.IO.TextWriter" />를 함께 닫으려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 XML 스트림에 쓰고 후 스트림의 끝에 추가 정보를 추가 하려는 경우이 설정은 유용 합니다.는 <xref:System.Xml.XmlWriter> 작성을 완료 합니다.  
  
 이 속성에만 적용 됩니다 <xref:System.Xml.XmlWriter> 스트림으로 XML 출력 인스턴스 콘텐츠 또는 <xref:System.IO.TextWriter>고, 그렇지 않으면이 설정은 무시 됩니다.  
  
   
  
## Examples  
 다음 예제에서는 XML 조각을 메모리 스트림으로 씁니다.  
  
 [!code-csharp[XmlWriterSettings.CloseOutput#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.CloseOutput/CS/writestream2.cs#1)]
 [!code-vb[XmlWriterSettings.CloseOutput#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.CloseOutput/VB/writestream2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConformanceLevel">
      <MemberSignature Language="C#" Value="public System.Xml.ConformanceLevel ConformanceLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.ConformanceLevel ConformanceLevel" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.ConformanceLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property ConformanceLevel As ConformanceLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::ConformanceLevel ConformanceLevel { System::Xml::ConformanceLevel get(); void set(System::Xml::ConformanceLevel value); };" />
      <MemberSignature Language="F#" Value="member this.ConformanceLevel : System.Xml.ConformanceLevel with get, set" Usage="System.Xml.XmlWriterSettings.ConformanceLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.ConformanceLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>XML 작성기가 XML 출력을 확인하는 규칙 수준을 가져오거나 설정합니다.</summary>
        <value>규칙 수준(문서, 조각 또는 자동 검색)을 지정하는 열거형 값 중 하나입니다. 기본값은 <see cref="F:System.Xml.ConformanceLevel.Document" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A?displayProperty=nameWithType> 속성 작성 중인 스트림이 특정 규칙 집합을 사용 하 여 준수 여부를 확인 하는 XML 작성기를 구성 합니다. XML 데이터에 올바른 형식의 XML 1.0 문서 또는 문서 조각에 대 한 규칙을 따르는지 확인할 수 있습니다. 다음 표에 세 가지 설정이 있습니다. 기본값은 문서 수준 규칙.  
  
|설정|설명|  
|-------------|-----------------|  
|<xref:System.Xml.ConformanceLevel.Document>|XML 출력을 준수 하는지 확인 합니다 [올바른 형식의 XML 1.0 문서에 대 한 규칙](https://www.w3.org/TR/REC-xml/#sec-well-formed) 표준에 맞는 모든 프로세서에서 처리 될 수 있습니다.<br /><br /> 문서 규칙 검사는 조각 수준 검사의 대부분을 포함 하 고도 다음 확인 합니다.<br /><br /> -최상위 항목을 XML 선언, DTD, 요소, 주석, 공백 또는 처리 명령 이외의 다른 노드가 없습니다.<br />-XML 데이터에 하나의 최상위 요소 노드가 있습니다.<br /><br /> XML 작성기에는 DTD 정보가 작성 된 구문 분석 하지 않습니다. 사용자가 DTD는 잘 구성 된 것을 담당 합니다.|  
|<xref:System.Xml.ConformanceLevel.Fragment>|XML 출력을 준수 하는지 확인 합니다 [올바른 형식의 XML 1.0 문서 조각에 대 한 규칙](https://www.w3.org/TR/REC-xml/#wf-entities)합니다.<br /><br /> 이 설정은 최상위 수준에 여러 루트 요소 또는 텍스트 노드만 있는 XML 데이터를 허용 합니다. 이 검사 수준은 프로세서에서 구문 분석된 외부 XML 1.0 엔터티로 읽히는 스트림을 사용할 수 있도록 합니다.<br /><br /> DTD 정보가 문서 조각에서 허용 되지 않습니다.|  
|<xref:System.Xml.ConformanceLevel.Auto>|XML 작성기는 수준의 규칙 검사 들어오는 데이터를 기반으로 하는지 확인 하도록 지정 합니다. 이 설정은 생성된 된 XML이 올바른 형식의 XML 문서 또는 조각 않을 것인지 여부를 알 수 없는 경우에 유용 합니다.<br /><br /> 다음과 같은 경우 문서 규칙 검사가 적용됩니다.<br /><br /> -는 <xref:System.Xml.XmlWriter.WriteStartDocument%2A> 메서드가 호출 됩니다.<br />-경우 DTD 정보가 기록 됩니다.<br /><br /> XML 데이터를 다음 중 하나를 포함 하는 경우 fragment 규칙 검사가 적용 됩니다.<br /><br /> 루트 수준에서 텍스트, CDATA 또는 EntityReference 노드.<br />-루트 수준에서 둘 이상의 요소입니다.<br />-루트 수준 요소입니다.<br /><br /> 루트 수준에 텍스트 노드와 DTD를 쓰려고 시도하는 경우와 같이 충돌이 있을 경우 <xref:System.Xml.XmlException>이 throw됩니다.<br /><br /> 다른 줄 바꿈 하는 경우 <xref:System.Xml.XmlWriter> 개체에서 외부 개체는 추가 규칙 검사를 수행 하지 않습니다; 그리고이 기본 개체에 남아 있습니다.|  
  
 XML 작성기에서 지정된 된 수준의 규칙을 위반 하는 모든 정보를 발견 하면 예외가 throw 됩니다. 경우에 따라 XML 작성기를 자동으로 규칙 오류를 수정합니다. 예를 들어, 작성기는 예외를 throw 하지 않고 닫히지 않은 특성을 닫습니다. 다음 표에서 각 설정에서 처리 되는 다양 한 규칙 위반 보여 줍니다.  
  
|조건|<xref:System.Xml.ConformanceLevel.Document>|<xref:System.Xml.ConformanceLevel.Fragment>|<xref:System.Xml.ConformanceLevel.Auto>|  
|---------------|---------------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------|  
|DTD 정보를 찾을 수 있습니다.|이 설정에 대 한 위반 하지 않습니다. 그러나 XML 작성기; DTD를 확인 하지 않습니다. 사용자는 DTD 잘못 인지 확인 해야 합니다.|<xref:System.Xml.XmlException> 이 throw 됩니다.|문서 규칙 검사가 적용 됩니다.|  
|<xref:System.Xml.XmlWriter.WriteStartDocument%2A>이 호출됩니다.|이 설정에 대 한 위반으로 간주 되지 않습니다.|<xref:System.Xml.XmlException> 이 throw 됩니다.|문서 규칙 검사가 적용 됩니다.|  
|<xref:System.Xml.XmlWriter.WriteStartDocument%2A>가 여러 번 호출되는 경우|<xref:System.Xml.XmlException> 이 throw 됩니다.|<xref:System.Xml.XmlException> 이 throw 됩니다.|<xref:System.Xml.XmlException> 이 throw 됩니다.|  
|텍스트 값 (밑이 아니라 요소 또는 특성 노드) 최상위 수준에 나타납니다.|<xref:System.Xml.XmlException> 이 throw 됩니다.|위반으로 간주 되지 않습니다.|Fragment 규칙 검사가 적용됩니다.|  
|여러 요소 또는 요소가 없는 최상위 수준에 나타납니다.|<xref:System.Xml.XmlException> 이 throw 됩니다.|위반으로 간주 되지 않습니다.|Fragment 규칙 검사가 적용됩니다.|  
|최상위 항목은 공백입니다.|위반으로 간주 되지 않습니다.|위반으로 간주 되지 않습니다.|위반으로 간주 되지 않습니다.|  
|<xref:System.Xml.XmlWriter.WriteEndAttribute%2A> 특성 노드가 종료 하기 위해 호출 되지 않습니다.|XML 작성기에서 수정 되었습니다.|XML 작성기에서 수정 되었습니다.|XML 작성기에서 수정 되었습니다.|  
|XML 작성기가 잘못 중첩 된 상태 (예를 들어를 <xref:System.Xml.XmlWriter.WriteStartElement%2A> 뒤에 호출을 <xref:System.Xml.XmlWriter.WriteEndAttribute%2A>).|<xref:System.Xml.XmlException> 이 throw 됩니다.|<xref:System.Xml.XmlException> 이 throw 됩니다.|<xref:System.Xml.XmlException> 이 throw 됩니다.|  
|최상위 항목에는 특성입니다.|<xref:System.Xml.XmlException> 이 throw 됩니다.|<xref:System.Xml.XmlException> 이 throw 됩니다.|<xref:System.Xml.XmlException> 이 throw 됩니다.|  
|인접한 텍스트 노드가 여러 개 있을 경우|위반으로 간주 되지 이지만 텍스트 노드를 연결 하는 사용자의 책임입니다.|위반으로 간주 되지 이지만 텍스트 노드를 연결 하는 사용자의 책임입니다.|위반으로 간주 되지 이지만 텍스트 노드를 연결 하는 사용자의 책임입니다.|  
|한 요소에서 동일한 네임스페이스 접두사를 두 번 선언한 경우|XML 작성기에는 두 번째 네임 스페이스에 대 한 새 접두사를 생성합니다.|XML 작성기에는 두 번째 네임 스페이스에 대 한 새 접두사를 생성합니다.|XML 작성기에는 두 번째 네임 스페이스에 대 한 새 접두사를 생성합니다.|  
|<xref:System.Xml.XmlWriter.WriteStartElement%2A> 접두사와 하지 해당 범위 내에 선언 된 네임 스페이스를 지정 또는 접두사는 다른 네임 스페이스를 사용 하 여 연결 합니다.|XML 작성기에서 필요한 네임 스페이스 노드를 씁니다.|XML 작성기에서 필요한 네임 스페이스 노드를 씁니다.|XML 작성기에서 필요한 네임 스페이스 노드를 씁니다.|  
|<xref:System.Xml.XmlWriter.WriteStartAttribute%2A> 접두사와 해당 범위 내에서 선언 되지 네임 스페이스를 지정 합니다.|XML 작성기에서 필요한 네임 스페이스 노드를 씁니다.|XML 작성기에서 필요한 네임 스페이스 노드를 씁니다.|XML 작성기에서 필요한 네임 스페이스 노드를 씁니다.|  
|<xref:System.Xml.XmlWriter.WriteStartAttribute%2A> 다른 범위에서 네임 스페이스와 연결 된 접두사 및 네임 스페이스에 있지만 접두사를 지정 합니다.|XML 작성기는 지정 된 접두사를 무시 하 고 올바른 접두사를 조회 하거나 새 접두사를 생성 합니다.|XML 작성기는 지정 된 접두사를 무시 하 고 올바른 접두사를 조회 하거나 새 접두사를 생성 합니다.|XML 작성기는 지정 된 접두사를 무시 하 고 올바른 접두사를 조회 하거나 새 접두사를 생성 합니다.|  
|<xref:System.Xml.XmlWriter.WriteQualifiedName%2A> 범위 내에서 존재 하지 않는 네임 스페이스를 사용 하 여 요소 내용을 쓰는 데 사용 됩니다.|<xref:System.Xml.XmlException> 이 throw 됩니다.|<xref:System.Xml.XmlException> 이 throw 됩니다.|<xref:System.Xml.XmlException> 이 throw 됩니다.|  
|<xref:System.Xml.XmlWriter.WriteQualifiedName%2A> 범위 내에서 존재 하지 않는 네임 스페이스를 사용 하 여 특성 내용을 쓰는 데 사용 됩니다.|XML 작성기에는 필요한 네임 스페이스 선언을 씁니다.|XML 작성기에는 필요한 네임 스페이스 선언을 씁니다.|XML 작성기에는 필요한 네임 스페이스 선언을 씁니다.|  
|`xml:space` 특성에 유효한 값을 포함 하지 않습니다.|<xref:System.Xml.XmlException> 이 throw 됩니다.|<xref:System.Xml.XmlException> 이 throw 됩니다.|<xref:System.Xml.XmlException> 이 throw 됩니다.|  
|잘못된 이름이 발견된 경우|<xref:System.Xml.XmlException> 이 throw 됩니다.|<xref:System.Xml.XmlException> 이 throw 됩니다.|<xref:System.Xml.XmlException> 이 throw 됩니다.|  
|`xml` 접두사가 URI와 일치 하지 않습니다.|XML 작성기는이 유형의 위반에 대 한 확인 하지 않습니다.|XML 작성기는이 유형의 위반에 대 한 확인 하지 않습니다.|XML 작성기는이 유형의 위반에 대 한 확인 하지 않습니다.|  
|합니다 `xml` 접두사를 일치 하지 않습니다는 http://www.w3.org/XML/1998/namespace URI입니다.|<xref:System.Xml.XmlException> 이 throw 됩니다.|<xref:System.Xml.XmlException> 이 throw 됩니다.|<xref:System.Xml.XmlException> 이 throw 됩니다.|  
|`xmlns` 접두사 또는 로컬 이름이 URI와 일치 하지 않습니다.|XML 작성기는이 유형의 위반에 대 한 확인 하지 않습니다.|XML 작성기는이 유형의 위반에 대 한 확인 하지 않습니다.|XML 작성기는이 유형의 위반에 대 한 확인 하지 않습니다.|  
|합니다 `xmlns` 접두사 또는 로컬 이름이 일치 하지 않습니다는 http://www.w3.org/2000/xmlns URI입니다.|<xref:System.Xml.XmlException> 이 throw 됩니다.|<xref:System.Xml.XmlException> 이 throw 됩니다.|<xref:System.Xml.XmlException> 이 throw 됩니다.|  
  
   
  
## Examples  
 다음 예제에서는 XML 조각을 메모리 스트림으로 씁니다.  
  
 [!code-csharp[XmlWriterSettings.CloseOutput#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.CloseOutput/CS/writestream2.cs#1)]
 [!code-vb[XmlWriterSettings.CloseOutput#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.CloseOutput/VB/writestream2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DoNotEscapeUriAttributes">
      <MemberSignature Language="C#" Value="public bool DoNotEscapeUriAttributes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DoNotEscapeUriAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.DoNotEscapeUriAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Property DoNotEscapeUriAttributes As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DoNotEscapeUriAttributes { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.DoNotEscapeUriAttributes : bool with get, set" Usage="System.Xml.XmlWriterSettings.DoNotEscapeUriAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Xml.XmlWriter" />에서 URI 특성을 이스케이프하는 않는지를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value><see langword="true" /> 경우는 <see cref="T:System.Xml.XmlWriter" /> URI 특성을 이스케이프 하지 않으면이 고, 그렇지 않으면 <see langword="false" />합니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public System.Text.Encoding Encoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding Encoding" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.Encoding" />
      <MemberSignature Language="VB.NET" Value="Public Property Encoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Encoding ^ Encoding { System::Text::Encoding ^ get(); void set(System::Text::Encoding ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Encoding : System.Text.Encoding with get, set" Usage="System.Xml.XmlWriterSettings.Encoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>사용할 텍스트 인코딩의 형식을 가져오거나 설정합니다.</summary>
        <value>사용할 텍스트 인코딩입니다. 기본값은 <see langword="Encoding.UTF8" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.XmlWriter> 한 번에 모든 것이 아니라 문자 버퍼의 문자를 인코딩합니다. 때 예외가 throw 되는 <xref:System.Xml.XmlWriter.Flush%2A> 인코딩 오류가 발생 하는 경우 메서드가 호출 됩니다.  
  
 합니다 <xref:System.Xml.XmlWriterSettings.Encoding%2A> 속성에만 적용 됩니다는 <xref:System.Xml.XmlWriter> 지정을 사용 하 여 생성 되는 인스턴스 <xref:System.IO.Stream> 또는 지정된 된 파일 이름입니다. 경우는 <xref:System.Xml.XmlWriter> 인스턴스를 만들 지정 된 <xref:System.IO.TextWriter>의 <xref:System.Xml.XmlWriterSettings.Encoding%2A> 기본 인코딩을 통해 속성을 재정의 <xref:System.IO.TextWriter>. 예를 들어가이 속성은 특정 유니코드 (utf-16)로 설정할 <xref:System.Xml.XmlWriter>, 내부 작성기 이지만 <xref:System.IO.StreamWriter> (에서 파생 되는 <xref:System.IO.TextWriter>) 출력은 u t F-8로 인코딩된 해당 인코딩과 함께 UTF8로 설정 됩니다.  
  
 경우는 <xref:System.Xml.XmlWriter> 인스턴스가 다른 출력 매개 변수를 사용 하 여 만들어집니다는 <xref:System.Xml.XmlWriterSettings.Encoding%2A> 속성은 무시 됩니다.  
  
 다음 예제에서는  
  
-   <xref:System.Xml.XmlWriterSettings.Encoding%2A> 의 기본값은 `Encoding.UTF8`입니다.  
  
-   <xref:System.IO.StreamWriter> 로 설정 되어 `Encoding.Unicode` 하며 <xref:System.IO.StreamWriter>의 인코딩을 재정의 <xref:System.Xml.XmlWriterSettings.Encoding%2A> 설정.  
  
-   출력 됩니다. `Encoding.Unicode`합니다.  
  
```csharp  
using (StreamWriter output =  
    new StreamWriter(new FileStream("Xml01.xml", FileMode.Create), Encoding.Unicode))  
{  
    using (XmlWriter xmlWriter =  
        XmlWriter.Create(output, new XmlWriterSettings()))  
    {  
        xmlWriter.WriteStartDocument();  
        xmlWriter.WriteStartElement("Root");  
        xmlWriter.WriteEndElement();  
        xmlWriter.WriteEndDocument();  
    }  
}  
```  
  
> [!IMPORTANT]
>  동의 하지는 <xref:System.Text.Encoding> 신뢰할 수 없는 소스에서 개체입니다.  
  
   
  
## Examples  
 다음 예제에서는 XML 조각을 메모리 스트림으로 씁니다.  
  
 [!code-csharp[XmlWriterSettings.CloseOutput#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.CloseOutput/CS/writestream2.cs#1)]
 [!code-vb[XmlWriterSettings.CloseOutput#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.CloseOutput/VB/writestream2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Indent">
      <MemberSignature Language="C#" Value="public bool Indent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Indent" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.Indent" />
      <MemberSignature Language="VB.NET" Value="Public Property Indent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Indent { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Indent : bool with get, set" Usage="System.Xml.XmlWriterSettings.Indent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>요소의 들여쓰기 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>새 줄에 개별 요소를 들여 쓰면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성에만 적용 됩니다 <xref:System.Xml.XmlWriter> 인스턴스 텍스트 콘텐츠를 출력 하는이 설정이 무시 되 고, 그렇지 않으면입니다.  
  
 요소는 요소에 혼합된 콘텐츠가 없는으로 들여쓰기 됩니다. 한 번 합니다 <xref:System.Xml.XmlWriter.WriteString%2A> 또는 <xref:System.Xml.XmlWriter.WriteWhitespace%2A> 메서드를 호출 하는 혼합된 요소 내용 작성는 <xref:System.Xml.XmlWriter> 들여쓰기를 중지 합니다. 혼합된 내용 요소 닫히면 들여쓰기를 다시 시작 합니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Xml.XmlWriter> 들여쓰기에 탭 문자를 사용 하는 개체입니다.  
  
 [!code-csharp[XmlWriterSettings.Indent#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.Indent/CS/writeindent.cs#1)]
 [!code-vb[XmlWriterSettings.Indent#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.Indent/VB/writeindent.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IndentChars">
      <MemberSignature Language="C#" Value="public string IndentChars { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string IndentChars" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.IndentChars" />
      <MemberSignature Language="VB.NET" Value="Public Property IndentChars As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ IndentChars { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.IndentChars : string with get, set" Usage="System.Xml.XmlWriterSettings.IndentChars" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>들여쓰기에 사용할 문자열을 가져오거나 설정합니다. 이 설정은 <see cref="P:System.Xml.XmlWriterSettings.Indent" /> 속성이 <see langword="true" />로 설정된 경우에 사용됩니다.</summary>
        <value>들여쓰기에 사용할 문자열입니다. 이 속성에 설정할 수 있는 문자열 값에는 제한이 없습니다. 그러나 XML을 올바르게 유지하려면 공백 문자, 탭, 캐리지 리턴 또는 줄 바꿈 같은 유효한 공백 문자만 지정해야 합니다. 기본값은 공백 두 개입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성에만 적용 됩니다 <xref:System.Xml.XmlWriter> 인스턴스 텍스트 콘텐츠를 출력 하는이 설정이 무시 되 고, 그렇지 않으면입니다. <xref:System.Xml.XmlWriter> 들여쓰기 문자가 인해 XML이 잘못 된 경우 예외를 throw 합니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Xml.XmlWriter> 들여쓰기에 탭 문자를 사용 하는 개체입니다.  
  
 [!code-csharp[XmlWriterSettings.Indent#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.Indent/CS/writeindent.cs#1)]
 [!code-vb[XmlWriterSettings.Indent#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.Indent/VB/writeindent.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="P:System.Xml.XmlWriterSettings.IndentChars" />에 할당된 값이 <see langword="null" />인 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="NamespaceHandling">
      <MemberSignature Language="C#" Value="public System.Xml.NamespaceHandling NamespaceHandling { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.NamespaceHandling NamespaceHandling" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.NamespaceHandling" />
      <MemberSignature Language="VB.NET" Value="Public Property NamespaceHandling As NamespaceHandling" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::NamespaceHandling NamespaceHandling { System::Xml::NamespaceHandling get(); void set(System::Xml::NamespaceHandling value); };" />
      <MemberSignature Language="F#" Value="member this.NamespaceHandling : System.Xml.NamespaceHandling with get, set" Usage="System.Xml.XmlWriterSettings.NamespaceHandling" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.NamespaceHandling</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>XML 콘텐츠를 쓸 때 <see cref="T:System.Xml.XmlWriter" />에서 중복된 네임스페이스 선언을 제거할지 여부를 표시하는 값을 가져오거나 설정합니다. 기본 동작은 작성기에서 작성기의 네임스페이스 확인자에 있는 모든 네임스페이스 선언을 출력하는 것입니다.</summary>
        <value><see cref="T:System.Xml.NamespaceHandling" />에서 중복된 네임스페이스 선언을 제거할지 여부를 지정하는 데 사용되는 <see cref="T:System.Xml.XmlWriter" /> 열거형입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NewLineChars">
      <MemberSignature Language="C#" Value="public string NewLineChars { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NewLineChars" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.NewLineChars" />
      <MemberSignature Language="VB.NET" Value="Public Property NewLineChars As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NewLineChars { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NewLineChars : string with get, set" Usage="System.Xml.XmlWriterSettings.NewLineChars" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>줄 바꿈에 사용할 문자열을 가져오거나 설정합니다.</summary>
        <value>줄 바꿈에 사용할 문자열입니다. 이 속성에 설정할 수 있는 문자열 값에는 제한이 없습니다. 그러나 XML을 올바르게 유지하려면 공백 문자, 탭, 캐리지 리턴 또는 줄 바꿈 같은 유효한 공백 문자만 지정해야 합니다. 기본값은 <c>\r\n</c> (캐리지 리턴, 줄 바꿈).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성에만 적용 됩니다 <xref:System.Xml.XmlWriter> 인스턴스 텍스트 콘텐츠를 출력 하는이 설정이 무시 되 고, 그렇지 않으면입니다. <xref:System.Xml.XmlWriter> 줄 바꿈 문자로 인해 XML이 잘못 된 경우 예외를 throw 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="P:System.Xml.XmlWriterSettings.NewLineChars" />에 할당된 값이 <see langword="null" />인 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="NewLineHandling">
      <MemberSignature Language="C#" Value="public System.Xml.NewLineHandling NewLineHandling { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.NewLineHandling NewLineHandling" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.NewLineHandling" />
      <MemberSignature Language="VB.NET" Value="Public Property NewLineHandling As NewLineHandling" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::NewLineHandling NewLineHandling { System::Xml::NewLineHandling get(); void set(System::Xml::NewLineHandling value); };" />
      <MemberSignature Language="F#" Value="member this.NewLineHandling : System.Xml.NewLineHandling with get, set" Usage="System.Xml.XmlWriterSettings.NewLineHandling" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.NewLineHandling</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>줄 바꿈을 출력에 정규화할지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value><see cref="T:System.Xml.NewLineHandling" /> 값 중 하나입니다. 기본값은 <see cref="F:System.Xml.NewLineHandling.Replace" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 설정은 텍스트 콘텐츠 또는 특성 값을 작성할 때 적용 됩니다. 각는 <xref:System.Xml.NewLineHandling> 아래 값에 설명 합니다.  
  
-   <xref:System.Xml.NewLineHandling.Entitize> 설정은 알립니다 합니다 <xref:System.Xml.XmlWriter> 는 유지 하지를 정규화 하 여 새 줄 문자를 바꾸려면 <xref:System.Xml.XmlReader> 문자 엔터티를 사용 하 여 합니다. 이 정규화 하 여 출력을 읽을 라운드트립 시나리오에서 유용 <xref:System.Xml.XmlReader>합니다. 바꾸므로 라운드트립에서 특성 값에 대 한 추가 정규화 규칙 적용 `\t`, `\n` 하 고 `\r` 특성 값에서 정규화 하는 경우 공백으로 바뀝니다는 <xref:System.Xml.XmlReader>.  
  
-   <xref:System.Xml.NewLineHandling.Replace> 설정은 알립니다 합니다 <xref:System.Xml.XmlWriter> 사용 하 여 새 줄 문자를 바꿀 `\r\n`, 형식인 새 줄 Microsoft Windows 운영 체제에서 사용 합니다. 이렇게 하면 파일을 메모장 이나 Microsoft Word 응용 프로그램에 올바르게 표시할 수 있습니다. 또한이 설정은 문자를 유지 하기 위해 문자 엔터티를 사용 하 여 특성의 새 줄을 바꿉니다. 기본값입니다.  
  
-   <xref:System.Xml.NewLineHandling.None> 설정은 알립니다는 <xref:System.Xml.XmlWriter> 를 변경 하지 않고 입력 합니다. 이 설정은 모든 줄 바꿈 처리 하지 않을 때 사용 됩니다. 출력을 읽을 때 유용를 <xref:System.Xml.XmlReader> 정규화를 수행 하지 않습니다 (예를 들어는 <xref:System.Xml.XmlTextReader> 기본 설정을 사용 하 여.)  
  
 다음 표에의 출력을 <xref:System.Xml.XmlWriter.WriteString%2A> 메서드는 입력 값에 따라 제공 되는 경우는 <xref:System.Xml.XmlWriterSettings.NewLineHandling%2A> 속성 설정 합니다. 텍스트 콘텐츠를 쓸 때 테이블에 출력을 표시 및 특성 값을 작성 하는 경우.  
  
 `Text Node Value:`  
  
||\r\n|\n|\r|\t|  
|-|------------|---------|---------|---------|  
|Entitize|& #D; \n|\n|&#D;|\t|  
|Replace|\r\n|\r\n|\r\n|\t|  
|없음|\r\n|\n|\r|\t|  
  
 `Attribute Value:`  
  
||\r\n|\n|\r|\t|  
|-|------------|---------|---------|---------|  
|Entitize|&#D;&#A;|&#A;|&#D;|&\#9;|  
|Replace|&#D;&#A;|&#A;|&#D;|&\#9;|  
|없음|\r\n|\n|\r|\t|  
  
> [!NOTE]
>  <xref:System.Xml.XmlWriter> CDATA 섹션, 주석 또는 처리 명령 내에서 콘텐츠를 작성 하는 경우 다음 동작을 포함 합니다. 새 줄의 문자 엔터티를 바꾸지 않습니다 경우에 합니다 <xref:System.Xml.XmlWriterSettings.NewLineHandling%2A> 속성이 <xref:System.Xml.NewLineHandling.Entitize>합니다. 즉, 문자 엔터티는 CDATA 섹션, 주석 또는 처리 명령에서 인식 되지 않습니다. 경우는 <xref:System.Xml.XmlWriterSettings.NewLineHandling%2A> 속성이 <xref:System.Xml.NewLineHandling.None> 또는 <xref:System.Xml.NewLineHandling.Replace>, 동작은 텍스트 노드 값을 작성 하는 경우와 동일 합니다.  
  
 다음 표에서 정규화 <xref:System.Xml.XmlReader> 공백 각 입력에 대해 반환 합니다. 자세한 내용은 2.11 및 3.3.3 W3C의 섹션을 참조 하세요 [XML 1.0 권장 사항](https://www.w3.org/TR/REC-xml/)합니다.  
  
> [!NOTE]
>  정규화 판독기는 모든 <xref:System.Xml.XmlReader> 하 여 만든 개체는 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 메서드. 이러한 개체는 항상 줄 바꿈 정규화 및 특성의 전체 정규화를 수행합니다. 합니다 <xref:System.Xml.XmlTextReader> 있으면 개체 정규화 판독기 수도 있습니다 <xref:System.Xml.XmlTextReader.Normalization%2A> 속성이 `true`합니다.  
  
||\r\n|\n|\r|\t|  
|-|------------|---------|---------|---------|  
|텍스트 노드 값|\n|\n|\n|\t|  
|특성 값|공백|공백|공백|공백|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewLineOnAttributes">
      <MemberSignature Language="C#" Value="public bool NewLineOnAttributes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NewLineOnAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.NewLineOnAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Property NewLineOnAttributes As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool NewLineOnAttributes { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.NewLineOnAttributes : bool with get, set" Usage="System.Xml.XmlWriterSettings.NewLineOnAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>특성을 새 줄에 쓸지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>특성을 개별 줄에 쓰려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.  
  
 <block subset="none" type="note"><para>  
 <see cref="P:System.Xml.XmlWriterSettings.Indent" /> 속성 값이 <see langword="false" />인 경우에는 이 설정을 적용해도 효과가 없습니다.  
  
</para></block>  
  
 <see cref="P:System.Xml.XmlWriterSettings.NewLineOnAttributes" />를 <see langword="true" />로 설정하면 각 특성 앞에 줄 바꿈과 한 수준 들여쓰기가 추가됩니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성에만 적용 됩니다 <xref:System.Xml.XmlWriter> 인스턴스 텍스트 콘텐츠를 출력 하는이 설정이 무시 되 고, 그렇지 않으면입니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Xml.XmlWriter> XML 파일에 기록 하 고 새 줄에 각 특성을 씁니다.  
  
 [!code-csharp[XmlWriterSettings.NewLineOnAttributes#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.NewLineOnAttributes/CS/writenewlineattrs.cs#1)]
 [!code-vb[XmlWriterSettings.NewLineOnAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.NewLineOnAttributes/VB/writenewlineattrs.vb#1)]  
  
 샘플 출력은 다음과 같습니다.  
  
```xml  
<order  
  orderID="367A54"  
  date="2001-05-03">  
  <price>19.95</price>  
</order>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OmitXmlDeclaration">
      <MemberSignature Language="C#" Value="public bool OmitXmlDeclaration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool OmitXmlDeclaration" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.OmitXmlDeclaration" />
      <MemberSignature Language="VB.NET" Value="Public Property OmitXmlDeclaration As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool OmitXmlDeclaration { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.OmitXmlDeclaration : bool with get, set" Usage="System.Xml.XmlWriterSettings.OmitXmlDeclaration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>XML 선언을 생략할지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>XML 선언을 생략하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />로, XML 선언이 작성됩니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성에만 적용 됩니다 <xref:System.Xml.XmlWriter> 인스턴스 텍스트 콘텐츠를 출력 하는이 설정이 무시 되 고, 그렇지 않으면입니다.  
  
 하는 경우 <xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A> 로 설정 된 `false`, XML 선언이 자동으로 작성 됩니다  
  
 경우에 항상 XML 선언을 쓸지 <xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A> 로 설정 된 <xref:System.Xml.ConformanceLevel.Document>경우에 <xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A> 로 설정 된 `true`합니다.  
  
 경우에 XML 선언을 작성 되지 않습니다 <xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A> 로 설정 된 <xref:System.Xml.ConformanceLevel.Fragment>합니다. 호출할 수 있습니다 <xref:System.Xml.XmlWriter.WriteProcessingInstruction%2A> 을 명시적으로 XML 선언을 작성 합니다.  
  
   
  
## Examples  
 다음 예제에서는 XML 조각을 메모리 스트림으로 씁니다.  
  
 [!code-csharp[XmlWriterSettings.CloseOutput#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.CloseOutput/CS/writestream2.cs#1)]
 [!code-vb[XmlWriterSettings.CloseOutput#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.CloseOutput/VB/writestream2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OutputMethod">
      <MemberSignature Language="C#" Value="public System.Xml.XmlOutputMethod OutputMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlOutputMethod OutputMethod" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.OutputMethod" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OutputMethod As XmlOutputMethod" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlOutputMethod OutputMethod { System::Xml::XmlOutputMethod get(); };" />
      <MemberSignature Language="F#" Value="member this.OutputMethod : System.Xml.XmlOutputMethod" Usage="System.Xml.XmlWriterSettings.OutputMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XmlOutputMethod</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Xml.XmlWriter" /> 출력을 serialize하는 데 사용되는 메서드를 가져옵니다.</summary>
        <value><see cref="T:System.Xml.XmlOutputMethod" /> 값 중 하나입니다. 기본값은 <see cref="F:System.Xml.XmlOutputMethod.Xml" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성에는 출력을 serialize 하는 데 사용 하는 메서드를 지정 합니다. 규칙은 HTML, XML 1.0 규칙 및 등을 사용 하 여 출력을 serialize 할 수 있습니다. 이 설정은 XSLT 프로세서에서 설정 되 고 Visual Studio에서 내부적으로 사용 됩니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriterSettings.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; unit" Usage="xmlWriterSettings.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>설정 클래스의 멤버를 해당 기본값으로 다시 설정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 기본 인스턴스에 대 한 속성 값이 표시 <xref:System.Xml.XmlWriterSettings>합니다.  
  
|속성|초기 값|  
|--------------|-------------------|  
|<xref:System.Xml.XmlWriterSettings.Async%2A>|`false`.|  
|<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>|`true`.|  
|<xref:System.Xml.XmlWriterSettings.CloseOutput%2A>|`false`.|  
|<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document>.|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|`Encoding.UTF8`.|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|`false`.|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|두 공간입니다.|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|`\r\n`.|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|<xref:System.Xml.NewLineHandling.Replace>.|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|`false`.|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|`false`.|  
|<xref:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose%2A>|`true`.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteEndDocumentOnClose">
      <MemberSignature Language="C#" Value="public bool WriteEndDocumentOnClose { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool WriteEndDocumentOnClose" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose" />
      <MemberSignature Language="VB.NET" Value="Public Property WriteEndDocumentOnClose As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool WriteEndDocumentOnClose { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.WriteEndDocumentOnClose : bool with get, set" Usage="System.Xml.XmlWriterSettings.WriteEndDocumentOnClose" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Xml.XmlWriter" /> 메서드가 호출될 때 <see cref="M:System.Xml.XmlWriter.Close" />가 닫히지 않은 모든 요소 태그에 닫는 태그를 추가할지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>닫히지 않은 모든 요소 태그가 닫히면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 플래그를 설정 하는 경우 `false`, 출력 XML 파일을 제대로 구성 되지 않을 수 있습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>