<Type Name="AccessViolationException" FullName="System.AccessViolationException">
  <Metadata><Meta Name="ms.openlocfilehash" Value="af4cae868333721997233f2ac2270d3287455362" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="65009445" /></Metadata><TypeSignature Language="C#" Value="public class AccessViolationException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit AccessViolationException extends System.SystemException" />
  <TypeSignature Language="DocId" Value="T:System.AccessViolationException" />
  <TypeSignature Language="VB.NET" Value="Public Class AccessViolationException&#xA;Inherits SystemException" />
  <TypeSignature Language="C++ CLI" Value="public ref class AccessViolationException : SystemException" />
  <TypeSignature Language="F#" Value="type AccessViolationException = class&#xA;    inherit SystemException" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>보호된 메모리를 읽거나 쓰려고 할 때 발생하는 예외입니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 코드를 읽거나 할당 되지 않은, 또는 하는 액세스 권한이 있는 메모리에 쓸 때 비관리 코드나 안전 하지 않은 코드에서 액세스 위반이 발생 합니다. 이 문제는 일반적으로 포인터에 잘못 된 값 때문에 발생 합니다. 잘못된 포인터를 통해 읽거나 쓸 때 항상 액세스 위반이 발생하는 것은 아닙니다. 액세스 위반은 일반적으로 잘못된 포인터를 통해 여러 차례 읽기 또는 쓰기 작업을 수행하여 메모리가 손상되었을 수 있음을 나타냅니다. 따라서 액세스 위반은 거의 항상 심각한 프로그래밍 오류를 나타냅니다. <xref:System.AccessViolationException> 분명 하 게 이러한 심각한 오류를 식별 합니다.  
  
 확인할 수 있는 관리 되는 코드로 구성 된 프로그램에 대 한 모든 참조는 유효 하거나 null 및 액세스 위반 가능 하지 않습니다. 안정형 코드 throw에 null 참조를 참조 하려고 하는 모든 작업을 <xref:System.NullReferenceException> 예외입니다. <xref:System.AccessViolationException> 만 확인할 수 있는 관리 되는 코드가 상호 작용할 때 안전 하지 않은 관리 되는 코드 또는 비관리 코드를 사용 하 여 발생 합니다.  
  
## <a name="troubleshooting-accessviolationexception-exceptions"></a>AccessViolationException 예외 문제 해결  
 <xref:System.AccessViolationException> 검증할 수 있는 관리 되는 경우 코드와 비관리 코드 상호 작용 또는 관리 되는 안전 하지 않은 코드에만 예외가 발생할 수 있습니다.  
  
-   안전 하지 않은 관리 코드에서 발생 하는 액세스 위반으로 표현 될 수는 <xref:System.NullReferenceException> 예외 또는 <xref:System.AccessViolationException> 플랫폼에 따라 예외입니다.  
  
-   관리 코드로 전달 하는 관리 되지 않는 코드에서 액세스 위반이 래핑됩니다 항상는 <xref:System.AccessViolationException> 예외입니다.  
  
 두 경우 모두 식별 및 수정 하 여 수를 <xref:System.AccessViolationException> 다음과 같은 예외:  
  
 액세스하려는 메모리가 할당되어 있는지 확인합니다.  
 <xref:System.AccessViolationException> 즉-보호 된 메모리 액세스에 할당 되지 않은 또는 프로세스에 의해 소유 하지 않은 메모리 액세스를 시도 하는 항상 예외가 발생 합니다.  
  
 자동 메모리 관리는 공용 언어 런타임에서 제공하는 서비스 중 하나입니다. 비관리 코드와 동일한 기능을 제공 하는 관리 코드에는이 기능을 활용 하려면 관리 되는 코드를 이동 하는 것이 좋습니다. 자세한 내용은 [Automatic Memory Management](~/docs/standard/automatic-memory-management.md)을 참조하십시오.  
  
 액세스하려는 메모리가 손상되지 않았는지 확인합니다.  
 잘못된 포인터를 통해 읽기 또는 쓰기 작업을 여러 차례 수행하면 메모리가 손상될 수 있습니다. 이 문제는 일반적으로 미리 정의 된 버퍼 외부 주소로 쓰거나 읽을 때 발생 합니다.  
  
## <a name="accessviolationexception-and-trycatch-blocks"></a>AccessViolationException 및 try/catch 블록  
 부터 합니다 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], <xref:System.AccessViolationException> 에서 공용 언어 런타임에서 throw 된 예외를 처리 하지 않습니다는 `catch` 일반적인 언어에 예약 된 메모리 외부 예외가 발생 하는 경우 구조적된 예외 처리기에서 문 런타임입니다. 등을 처리 하는 <xref:System.AccessViolationException> 적용 해야 예외는 <xref:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute> 특성을 메서드에 예외가 throw 됩니다. 이 변경의 영향을 주지 않습니다 <xref:System.AccessViolationException> 포착 하 여 계속 수 하는 사용자 코드에 의해 throw 된 예외는 `catch` 문입니다. 컴파일하고에서 수정 없이 실행할 하려는.NET Framework의 이전 버전용으로 작성 된 코드에 대 한는 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]를 추가할 수 있습니다 합니다 [ \<legacyCorruptedStateExceptionsPolicy >](~/docs/framework/configure-apps/file-schema/runtime/legacycorruptedstateexceptionspolicy-element.md) 요소에 앱의 구성 파일입니다. 에 대 한 처리기를 정의 하는 경우 예외에 대 한 알림을 받을 수도 있습니다는 <xref:System.AppDomain.FirstChanceException?displayProperty=nameWithType> 또는 <xref:System.AppDomain.UnhandledException?displayProperty=nameWithType> 이벤트입니다.  
  
## <a name="version-information"></a>버전 정보  
 .NET Framework 2.0 이상 버전에서이 예외가 throw 됩니다. 이전 버전의.NET Framework, 비관리 코드 또는 안전 하지 않은 관리 되는 코드에서 액세스 위반이 표시 됩니다는 <xref:System.NullReferenceException> 관리 코드에서. <xref:System.NullReferenceException> 검증할 수 있는 관리 되는 코드, 데이터 손상, 포함 되지 않은 항목에에서 null 참조를 역참조 하 고 버전 1.0 또는 1.1에서에서 두 가지 상황을 구별할 수 없으므로 경우에 throw 됩니다.  
  
 관리자가 선택한 애플리케이션의.NET Framework 버전 1.1의 동작으로 되돌릴 수 있습니다. 다음 줄을 배치 합니다 [&lt;런타임&gt; 요소](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) 애플리케이션에 대 한 구성 파일의 섹션:  
  
```  
<legacyNullReferenceExceptionPolicy enabled = "1"/>  
```  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/standard/exceptions/index.md">예외 처리 및 Throw</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.AccessViolationException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AccessViolationException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AccessViolationException.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AccessViolationException();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>오류를 설명하는 시스템 제공 메시지를 사용하여 <see cref="T:System.AccessViolationException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 생성자는 <xref:System.Exception.Message%2A> 오류를 설명 하는 시스템 제공 메시지로 새 인스턴스의 속성 같은 "읽거나 쓰려고 보호 된 메모리입니다. 이 종종 다른 메모리 손상 되었습니다. " 이 메시지는 현재 시스템 문화권을 고려합니다.  
  
 다음 표에서는 <xref:System.AccessViolationException> 인스턴스의 초기 속성 값을 보여 줍니다.  
  
|속성|값|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|`null`.|  
|<xref:System.Exception.Message%2A>|지역화된 오류 메시지 문자열입니다.|  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/exceptions/index.md">예외 처리 및 Throw</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AccessViolationException (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AccessViolationException.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AccessViolationException(System::String ^ message);" />
      <MemberSignature Language="F#" Value="new AccessViolationException : string -&gt; AccessViolationException" Usage="new System.AccessViolationException message" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">예외를 설명하는 메시지입니다. 이 생성자의 호출자는 이 문자열이 현재 시스템 문화권에 맞게 지역화되었는지 확인하는 데 필요합니다.</param>
        <summary><see cref="T:System.AccessViolationException" /> 클래스의 새 인스턴스를 오류를 설명하는 지정된 메시지로 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서는 <xref:System.AccessViolationException> 인스턴스의 초기 속성 값을 보여 줍니다.  
  
|속성|값|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|`null`.|  
|<xref:System.Exception.Message%2A>|`message`에 지정된 오류 메시지 문자열입니다.|  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/exceptions/index.md">예외 처리 및 Throw</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected AccessViolationException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AccessViolationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; AccessViolationException(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="new AccessViolationException : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; AccessViolationException" Usage="new System.AccessViolationException (info, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">직렬화된 개체 데이터를 보유하는 <see cref="T:System.Runtime.Serialization.SerializationInfo" />입니다.</param>
        <param name="context">소스 또는 대상에 대한 컨텍스트 정보를 포함하는 <see cref="T:System.Runtime.Serialization.StreamingContext" />입니다.</param>
        <summary>serialize된 데이터를 사용하여 <see cref="T:System.AccessViolationException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 생성자는 deserialization을 수행하는 동안 호출되어 스트림을 통해 전송된 예외 개체를 다시 구성합니다. 자세한 내용은 [XML 및 SOAP Serialization](~/docs/standard/serialization/xml-and-soap-serialization.md)합니다.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/serialization/xml-and-soap-serialization.md">XML 및 SOAP Serialization</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AccessViolationException (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AccessViolationException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AccessViolationException(System::String ^ message, Exception ^ innerException);" />
      <MemberSignature Language="F#" Value="new AccessViolationException : string * Exception -&gt; AccessViolationException" Usage="new System.AccessViolationException (message, innerException)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message">예외를 설명하는 메시지입니다. 이 생성자의 호출자는 이 문자열이 현재 시스템 문화권에 맞게 지역화되었는지 확인하는 데 필요합니다.</param>
        <param name="innerException">현재 예외의 원인인 예외입니다. <paramref name="innerException" /> 매개 변수가 <see langword="null" />이 아니면 현재 예외는 내부 예외를 처리하는 <see langword="catch" /> 블록에서 발생합니다.</param>
        <summary>지정된 오류 메시지와 해당 예외의 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:System.AccessViolationException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이전 예외의 직접적인 결과로 throw되는 예외의 <xref:System.Exception.InnerException%2A> 속성에는 이전 예외에 대한 참조가 들어 있어야 합니다. <xref:System.Exception.InnerException%2A> 속성은 생성자에 전달되는 값과 동일한 값을 반환하며, `null` 속성이 생성자에 내부 예외 값을 제공하지 않는 경우에는 <xref:System.Exception.InnerException%2A>을 반환합니다.  
  
 다음 표에서는 <xref:System.AccessViolationException> 인스턴스의 초기 속성 값을 보여 줍니다.  
  
|속성|값|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|`null`.|  
|<xref:System.Exception.Message%2A>|`message`에 지정된 오류 메시지 문자열입니다.|  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/exceptions/index.md">예외 처리 및 Throw</related>
      </Docs>
    </Member>
  </Members>
</Type>