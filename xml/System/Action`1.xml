<Type Name="Action&lt;T&gt;" FullName="System.Action&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8ab953c752307704b27d543b7fddbb8209fb5f1f" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58721566" /></Metadata><TypeSignature Language="C#" Value="public delegate void Action&lt;in T&gt;(T obj);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Action`1&lt;- T&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Action`1" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub Action(Of In T)(obj As T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public delegate void Action(T obj);" />
  <TypeSignature Language="F#" Value="type Action&lt;'T&gt; = delegate of 'T -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="obj" Type="T" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T">이 대리자로 캡슐화되는 메서드의 매개 변수 형식입니다.</typeparam>
    <param name="obj">이 대리자로 캡슐화되는 메서드의 매개 변수입니다.</param>
    <summary>매개 변수가 하나이고 값을 반환하지 않는 메서드를 캡슐화합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용할 수는 <xref:System.Action%601> 대리자를 명시적으로 사용자 지정 대리자를 선언 하지 않고 메서드를 매개 변수로 전달 합니다. 캡슐화 된 메서드에이 대리자에 의해 정의 되는 메서드 시그니처와 일치 해야 합니다. 이 의미는 캡슐화 된 메서드에 값으로 전달 되는 매개 변수 중 하나가 있어야 합니다. 값을 반환 하지 않아야 합니다. (C#에서는 메서드 반환 해야 `void`합니다. Visual Basic의 경우에서 정의 되어야 합니다는 `Sub`...`End Sub` 구문입니다. 또한 수 무시 되는 값을 반환 하는 메서드입니다.) 일반적으로 이러한 메서드는 작업을 수행 하는 합니다.  
  
> [!NOTE]
>  하나의 매개 변수가 있으며 값을 반환 하는 메서드를 참조 하려면 제네릭 사용 <xref:System.Func%602> 대리자를 대신 합니다.  
  
 사용 하는 경우는 <xref:System.Action%601> 대리자 필요가 없습니다를 명시적으로 단일 매개 변수를 사용 하 여 메서드를 캡슐화 하는 대리자를 정의 합니다. 예를 들어, 다음 코드는 라는 대리자를 명시적으로 선언 `DisplayMessage` 중 하나에 대 한 참조를 할당 합니다 <xref:System.Console.WriteLine%2A> 메서드 또는 `ShowWindowsMessage` 해당 대리자 인스턴스에 메서드.  
  
 [!code-cpp[System.Action~1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Action~1/cpp/delegate.cpp#1)]
 [!code-csharp[System.Action~1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Delegate.cs#1)]
 [!code-vb[System.Action~1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~1/vb/Delegate.vb#1)]  
  
 다음 예제에서는 인스턴스화하여이 코드를 간소화는 <xref:System.Action%601> 명시적으로 새 대리자를 정의 하 고 명명된 된 메서드를 할당 하는 대신 대리자입니다.  
  
 [!code-cpp[System.Action~1#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Action~1/cpp/action`1.cpp#2)]
 [!code-csharp[System.Action~1#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Action1.cs#2)]
 [!code-vb[System.Action~1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~1/vb/Action1.vb#2)]  
  
 사용할 수도 있습니다는 <xref:System.Action%601> 다음 예제와 같이 C#에서는 무명 메서드로 위임 합니다. (소개 무명 메서드를 참조 하세요 [무명 메서드](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)  
  
 [!code-csharp[System.Action~1#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Anon.cs#3)]  
  
 람다 식을 할당할 수도 있습니다는 <xref:System.Action%601> 다음 예제와 같이 인스턴스를 위임 합니다. (람다 식에 대 한 소개를 참조 하세요 [람다 식](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)  
  
 [!code-csharp[System.Action~1#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Lambda.cs#4)]
 [!code-vb[System.Action~1#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~1/vb/lambda.vb#4)]  
  
 합니다 <xref:System.Collections.Generic.List%601.ForEach%2A> 하 고 <xref:System.Array.ForEach%2A> 메서드는 각각는 <xref:System.Action%601> 대리자를 매개 변수로 합니다. 대리자에 의해 캡슐화 된 메서드를 사용 하면 배열 또는 목록에서 각 요소에서 작업을 수행할 수 있습니다. 이 예제에서는 사용 된 <xref:System.Collections.Generic.List%601.ForEach%2A> 설명을 제공 하는 방법입니다.  
  
   
  
## Examples  
 다음 예제에서는 사용 합니다 <xref:System.Action%601> 의 내용을 인쇄 하는 대리자를 <xref:System.Collections.Generic.List%601> 개체입니다. 이 예제는 `Print` 메서드는 목록의 내용을 콘솔에 표시 하는 데 사용 됩니다. 또한 C# 예제에는 내용을 콘솔에 표시 하는 무명 메서드의 사용도 보여 줍니다. 이 예제에서는 명시적으로 선언 하지 않는 참고는 <xref:System.Action%601> 변수입니다. 그 대신, 단일 매개 변수를 사용 하는 및에 값을 반환 하지 않는 메서드에 대 한 참조를 전달 합니다 <xref:System.Collections.Generic.List%601.ForEach%2A?displayProperty=nameWithType> 인 단일 매개 변수는 메서드를는 <xref:System.Action%601> 대리자입니다. 마찬가지로, 예제의 C#를 <xref:System.Action%601> 대리자 인스턴스화되지 않는 경우 명시적 무명 메서드의 시그니처가의 시그니처와 일치 하기 때문에 <xref:System.Action%601> 예상 하는 대리자는 <xref:System.Collections.Generic.List%601.ForEach%2A?displayProperty=nameWithType> 메서드.  
  
 [!code-csharp[System.Action_PrintExample#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action_PrintExample/cs/action.cs#01)]
 [!code-vb[System.Action_PrintExample#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action_PrintExample/vb/action.vb#01)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Func`2" />
  </Docs>
</Type>