<Type Name="ArgumentOutOfRangeException" FullName="System.ArgumentOutOfRangeException">
  <Metadata><Meta Name="ms.openlocfilehash" Value="af338b4a8bfe0ac0fdd041092a302c401b2fe9a0" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58707905" /></Metadata><TypeSignature Language="C#" Value="public class ArgumentOutOfRangeException : ArgumentException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit ArgumentOutOfRangeException extends System.ArgumentException implements class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.ArgumentOutOfRangeException" />
  <TypeSignature Language="VB.NET" Value="Public Class ArgumentOutOfRangeException&#xA;Inherits ArgumentException" />
  <TypeSignature Language="C++ CLI" Value="public ref class ArgumentOutOfRangeException : ArgumentException" />
  <TypeSignature Language="F#" Value="type ArgumentOutOfRangeException = class&#xA;    inherit ArgumentException&#xA;    interface ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ArgumentException</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>인수 값이 호출된 메서드에서 정의한 값의 허용 범위를 벗어날 때 throw되는 예외입니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ArgumentOutOfRangeException> 메서드를 호출 하는 메서드에 전달 된 인수 중 하나 이상 없는 경우 예외가 throw 됩니다 `null` 인수에 대 한 예상 값 집합의 구성원이 아닌 잘못 된 값을 포함 합니다. 합니다 <xref:System.ArgumentException.ParamName%2A> 잘못 된 인수를 식별 하는 속성 및 <xref:System.ArgumentOutOfRangeException.ActualValue%2A> 속성 값이 있는 경우 잘못 된 값을 식별 하 합니다.  
  
 일반적으로 <xref:System.ArgumentOutOfRangeException> 개발자 오류를 발생 합니다. 예외를 처리 하는 대신 한 `try` / `catch` 블록, 예외의 원인을 제거 해야 하거나 예외를 throw 하는 인수 메서드 호출에 의해 반환 되었거나 메서드에 전달 되기 전에 사용자가 입력 하는 경우 을 메서드에 전달 하기 전에 인수를 확인 해야 합니다.  
  
 <xref:System.ArgumentOutOfRangeException> 광범위 하 게 사용 합니다.  
  
-   클래스는 <xref:System.Collections> 고 <xref:System.IO> 네임 스페이스입니다.  
  
-   <xref:System.Array> 클래스  
  
-   문자열 조작 메서드는 <xref:System.String> 클래스입니다.  
  
 되는 경우는 <xref:System.ArgumentOutOfRangeException> 예외가 다음과 같습니다.  
  
 해당 인덱스 번호로 컬렉션의 멤버를 검색 하 고 인덱스 번호가 올바르지 않습니다.  
 가장 일반적인 원인은 <xref:System.ArgumentOutOfRangeException> 예외입니다.   일반적으로 인덱스 번호를 올바르지 않은 경우 세 가지 이유 중 하나:  
  
-   컬렉션에 멤버가 없는 있고 코드를 수행 하는 것으로 가정 합니다. 다음 예제에서는 컬렉션 요소가 없는 첫 번째 요소를 검색 하려고 합니다.  
  
     [!code-csharp[System.ArgumentOutOfRangeException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/cs/NoElements.cs#4)]
     [!code-vb[System.ArgumentOutOfRangeException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/vb/NoElements.vb#4)]  
  
     예외를 방지 하려면 확인 여부를 컬렉션의 `Count` 속성은 다음 코드 조각 처럼 모든 멤버를 검색 하는 동안 0 보다 커야 합니다.  
  
     [!code-csharp[System.ArgumentOutOfRangeException#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/cs/NoElements.cs#5)]
     [!code-vb[System.ArgumentOutOfRangeException#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/vb/NoElements.vb#5)]  
  
     일부 경우에서와 같은 메서드를 호출 하는 대신, 존재 하지 않는 인덱스를 사용 하 여 컬렉션에 구성원을 추가 하려고 하기 때문에 발생할 수 있습니다이 `Add`,이 목적을 위해 존재 하는 합니다.  다음 예제에서는 호출 하는 것이 아니라 존재 하지 않는 인덱스를 사용 하 여 컬렉션에 요소를 추가 하려고 합니다 <xref:System.Collections.Generic.List%601.Add%2A?displayProperty=nameWithType> 메서드.  
  
     [!code-csharp[System.ArgumentOutOfRangeException#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/cs/NoElements2.cs#13)]
     [!code-vb[System.ArgumentOutOfRangeException#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/vb/NoElements2.vb#13)]  
  
     다음 코드 조각에서는이 오류를 해결합니다.  
  
     [!code-csharp[System.ArgumentOutOfRangeException#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/cs/NoElements2.cs#14)]
     [!code-vb[System.ArgumentOutOfRangeException#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/vb/NoElements2.vb#14)]  
  
-   음수 인덱스 항목을 검색 하려고 합니다. 이 문제는 일반적으로 특정 요소의 인덱스에 대 한 컬렉션을 검색 한를 성공적으로 검색 되었는지 잘못 가정 하기 때문에 발생 합니다. 다음 예제에서는 호출에에서는 <xref:System.Collections.Generic.List%601.FindIndex%28System.Predicate%7B%600%7D%29?displayProperty=nameWithType> -1을 반환 하는 "Z" 등 동일한 문자열을 찾지 못하면 메서드. 그러나이 값은 잘못 된 인덱스 값입니다.  
  
     [!code-csharp[System.ArgumentOutOfRangeException#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/cs/BadSearch.cs#6)]
     [!code-vb[System.ArgumentOutOfRangeException#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/vb/BadSearch.vb#6)]  
  
     예외를 방지 하는 반환 된 인덱스 보다 큽니다. 또는 컬렉션에서 항목을 검색 하기 전에 0과 같지 다음 코드 조각을 확인 하 여 검색 성공 인지를 확인 합니다.  
  
     [!code-csharp[System.ArgumentOutOfRangeException#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/cs/BadSearch.cs#7)]
     [!code-vb[System.ArgumentOutOfRangeException#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/vb/BadSearch.vb#7)]  
  
-   인덱스가 컬렉션의 값과 같은 요소를 검색 하려는 `Count` 속성을 다음 예제와 같이 보여 줍니다.  
  
     [!code-csharp[System.ArgumentOutOfRangeException#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/cs/OOR2.cs#8)]
     [!code-vb[System.ArgumentOutOfRangeException#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/vb/OOR2.vb#8)]  
  
     인덱스가 0부터 시작을 사용 하 여.NET Framework의 컬렉션, 컬렉션의 첫 번째 요소는 0, 인덱스 및 인덱스에서 마지막 요소는 때문에 `Count` -1입니다. 인덱스에서 마지막 요소를 액세스 하 여 오류를 제거할 수 있습니다 `Count` -1, 다음 코드 처럼 합니다.  
  
     [!code-csharp[System.ArgumentOutOfRangeException#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/cs/OOR2.cs#9)]
     [!code-vb[System.ArgumentOutOfRangeException#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/vb/OOR2.vb#9)]  
  
 문자열 조작 메서드를 호출 하 여 문자열 작업을 수행 하려고 하 고 문자열의 시작 인덱스 존재 하지 않습니다.  
 같은 같은 메서드의 오버 로드 <xref:System.String.Compare%2A?displayProperty=nameWithType>, <xref:System.String.CompareOrdinal%2A?displayProperty=nameWithType>, <xref:System.String.IndexOf%2A?displayProperty=nameWithType>, <xref:System.String.IndexOfAny%2A>, <xref:System.String.Insert%2A?displayProperty=nameWithType>를 <xref:System.String.LastIndexOf%2A?displayProperty=nameWithType>, <xref:System.String.LastIndexOfAny%2A?displayProperty=nameWithType>, <xref:System.String.Remove%2A>, 또는 <xref:System.String.Substring%2A?displayProperty=nameWithType> 의 시작 인덱스를 지정할 수 있도록 합니다 작업 하려면 문자열 내의 올바른 위치를 인덱스에 있어야 합니다. 0에서 유효한 인덱스 범위 <xref:System.String.Length%2A?displayProperty=nameWithType> -1입니다.  
  
 이 네 가지 일반적인 원인은 <xref:System.ArgumentOutOfRangeException> 예외:  
  
-   빈 문자열을 사용 하 여 작업할 또는 <xref:System.String.Empty?displayProperty=nameWithType>합니다. 때문에 해당 <xref:System.String.Length%2A?displayProperty=nameWithType> 0, 인덱스 throw 하 여 조작 하려고를 반환 하는 속성을 <xref:System.ArgumentOutOfRangeException> 예외입니다. 다음 예제에서는 정의 `GetFirstCharacter` 문자열의 첫 번째 문자를 반환 하는 메서드입니다. 메서드는 최종 문자열에 전달 된 문자열이 비어 있는 경우, 메서드가 throw는 <xref:System.ArgumentOutOfRangeException> 예외입니다.  
  
     [!code-csharp[System.ArgumentOutOfRangeException#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/cs/EmptyString1.cs#15)]
     [!code-vb[System.ArgumentOutOfRangeException#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/vb/EmptyString1.vb#15)]  
  
     테스트 하 여 예외를 제거할 수 있습니다 있는지 여부를 문자열의 <xref:System.String.Length%2A?displayProperty=nameWithType> 를 호출 하거나 0 보다 크면 합니다 <xref:System.String.IsNullOrEmpty%2A> 문자열이 아닌지 확인 하는 방법 `null` 이거나 비어 합니다. 다음 코드는 후자를 수행합니다. 여기서는 문자열이 `null` 이거나 비어 있는 경우는 `GetFirstCharacter` u+0000을 반환 합니다.  
  
     [!code-csharp[System.ArgumentOutOfRangeException#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/cs/EmptyString1.cs#16)]
     [!code-vb[System.ArgumentOutOfRangeException#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/vb/EmptyString1.vb#16)]  
  
-   해당 문자열이 있는 부분 문자열의 위치를 기준으로 하는 문자열을 조작 하는 및 부분 문자열을 실제로 찾을 수 있는지 여부를 확인 하지 못했습니다.  
  
     다음 예제에서는 두 단어 구의 두 번째 단어를 추출합니다. Throw는 <xref:System.ArgumentOutOfRangeException> 예외는 구 이루어져 있습니다만 한 단어 및 따라서 공백이 문자를 포함 하지 않습니다.  이 때문에 발생에 대 한 호출을 <xref:System.String.IndexOf%28System.String%29?displayProperty=nameWithType> 검색이 실패 하 고 잘못 된 값이 전달 됩니다 나타낼 때-1을 반환 하는 메서드를 <xref:System.String.Substring%28System.Int32%29?displayProperty=nameWithType> 메서드.  
  
     [!code-csharp[System.ArgumentOutOfRangeException#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/cs/NoFind1.cs#17)]
     [!code-vb[System.ArgumentOutOfRangeException#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/vb/NoFind1.vb#17)]  
  
     예외를 제거 하는 문자열 조작 메서드를 호출 하기 전에 문자열 검색 메서드에 의해 반환 되는 값을 확인 합니다.  
  
     [!code-csharp[System.ArgumentOutOfRangeException#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/cs/NoFind2.cs#18)]
     [!code-vb[System.ArgumentOutOfRangeException#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/vb/NoFind2.vb#18)]  
  
-  
  
 현재 문자열의 범위 밖에 있는 부분 문자열을 추출 하려고 했습니다.  
 부분 및 끝 부분 문자열의 문자 수가 문자열의 계속 하지 마십시오는 부분 문자열이 시작 위치를 지정 하는 필요한 모든 부분 문자열을 추출 하는 메서드. 되지 않는다는 참고 합니다 *인덱스* 부분 문자열의 마지막 문자입니다.  
  
 <xref:System.ArgumentOutOfRangeException> 일반적으로 경우 없으므로 예외가 올바르게 계산 되지 부분 문자열의 문자 수입니다.  같은 검색 메서드를 사용 하는 경우 <xref:System.String.IndexOf%2A?displayProperty=nameWithType> 시작 및 끝 부분 문자열의 위치를 식별 하려면:  
  
-   끝 위치에 있는 문자를 반환한 경우 <xref:System.String.IndexOf%2A?displayProperty=nameWithType> 는 부분 문자열에 포함 시킬 부분 문자열의 끝 위치를 지정 하 여 수식  
  
    ```  
    endIndex - startIndex + 1  
    ```  
  
-   끝 위치에 있는 문자를 반환한 경우 <xref:System.String.IndexOf%2A?displayProperty=nameWithType> 는 부분 문자열에서 제외 부분 문자열의 끝 위치를 지정 하 여 수식  
  
    ```  
    endIndex - startIndex   
    ```  
  
 다음 예제에서는 정의 `FindWords` 메서드를 사용 하는 <xref:System.String.IndexOfAny%28System.Char%5B%5D%2CSystem.Int32%29?displayProperty=nameWithType> 공백 문자 및 문장 부호를 식별 하는 방법에 문자열로 표시 하 고 문자열에서 찾은 단어를 포함 하는 배열을 반환 합니다.  
  
 [!code-csharp[System.ArgumentOutOfRangeException#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/cs/FindWords1.cs#19)]
 [!code-vb[System.ArgumentOutOfRangeException#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/vb/FindWords1.vb#19)]  
  
 음수 양수 및 0에 필요한 인수와 함께 메서드에 전달한 또는 음수 또는 0만 양수 필요한 인수와 함께 메서드에 전달 했습니다.  
 예를 들어 합니다 <xref:System.Array.CreateInstance%28System.Type%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> 메서드는 2 차원 배열의 각 차원에서 요소의 수를 지정 하는 필요 하며 각 차원에 대 한 유효한 값 범위는 0에서 <xref:System.Int32.MaxValue?displayProperty=nameWithType>합니다. 다음 예제에서는 차원 인수에 음수 값에는 메서드가 throw 하지만 <xref:System.ArgumentOutOfRangeException> 예외입니다.  
  
 [!code-csharp[System.ArgumentOutOfRangeException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/cs/OOR1.cs#1)]
 [!code-vb[System.ArgumentOutOfRangeException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/vb/OOR1.vb#1)]  
  
 오류를 해결 하려면 잘못 된 인수의 값은 음수가 아닌 인지를 확인 합니다. 다음 코드 조각 처럼 유효한 값을 제공 하 여이 수행할 수 있습니다.  
  
 [!code-csharp[System.ArgumentOutOfRangeException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/cs/OOR1.cs#2)]
 [!code-vb[System.ArgumentOutOfRangeException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/vb/OOR1.vb#2)]  
  
 또한 입력의 유효성을 검사 하 수, 유효한 경우 일부 작업을 수행 합니다. 다음 코드 조각에는 메서드를 호출 하는 대신 오류 메시지를 표시 합니다.  
  
 [!code-csharp[System.ArgumentOutOfRangeException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/cs/OOR1.cs#3)]
 [!code-vb[System.ArgumentOutOfRangeException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/vb/OOR1.vb#3)]  
  
 경합 상태는 다중 스레드 또는 비동기적으로 실행 하는 배열 또는 컬렉션을 업데이트 하는 작업에는 앱에 있습니다.  
 다음 예제에서는 한 <xref:System.Collections.Generic.List%601> 개체의 컬렉션을 채우는 데 `Continent` 개체입니다. Throw는 <xref:System.ArgumentOutOfRangeException> 예제 컬렉션을 완전히 채웠으므로 전에 컬렉션에 7 개 항목을 표시 하려고 하는 경우는 예외입니다.  
  
 [!code-csharp[System.ArgumentOutOfRangeException#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/cs/Race1.cs#11)]
 [!code-vb[System.ArgumentOutOfRangeException#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/vb/Race1.vb#11)]  
  
 이 경우 두 리소스에 액세스 하는 데 여러 스레드에서:  
  
-   `continents` 컬렉션입니다. 해당 <xref:System.Collections.Generic.List%601.Add%2A?displayProperty=nameWithType> 여러 스레드에서 호출 됩니다. 또한 주 또는 주 스레드가 해당 멤버를 반복 하면 7 개 요소를 사용 하 여 완벽 하 게 컬렉션을 채웁니다 가정 합니다.  
  
-   `msg` 여러 스레드를 통해 연결 하는 문자열입니다.  
  
 오류를 해결 하려면 공유 상태 스레드로부터 안전한 방식으로 다음과 같이 액세스할가 있는지를 확인 합니다.  
  
-   앱이 배열 또는 컬렉션 개체를 사용 하는 경우의 형식 같은 스레드로부터 안전한 컬렉션 클래스를 사용 하 여 고려해 야 합니다 <xref:System.Collections.Concurrent> 네임 스페이스 또는 <xref:System.Collections.Immutable> 대역의 릴리스 합니다.  
  
-   한 번에 하나의 스레드만 전용 리소스에 액세스할 수 있도록 공유 상태 (즉, 여러 스레드에서 액세스할 수 있는 리소스)에 스레드로부터 안전한 방식으로 액세스를 확인 합니다. 많은 클래스와 같은 <xref:System.Threading.CountdownEvent>, <xref:System.Threading.Interlocked>, <xref:System.Threading.Monitor>, 및 <xref:System.Threading.Mutex>, 리소스에 대 한 액세스를 동기화에 사용할 수 있습니다. 자세한 내용은 [스레딩](~/docs/standard/threading/index.md)합니다. 또한 언어 지원은 합니다 [잠금을](~/docs/csharp/language-reference/keywords/lock-statement.md) C#의 문은 및 [SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md) Visual Basic에서 생성 합니다.  
  
 다음 예제에서는 주소는 <xref:System.ArgumentOutOfRangeException> 예외 및 이전 예제에서 다른 문제입니다. 대체는 <xref:System.Collections.Generic.List%601> 개체를 <xref:System.Collections.Concurrent.ConcurrentBag%601> 컬렉션에 대 한 액세스는 스레드로부터 안전 사용 되었는지 확인 하려면 개체를 <xref:System.Threading.CountdownEvent> 응용 프로그램 스레드가 다른 스레드를 실행 하 고 확인 하는 잠금을 사용 후에 계속 되도록 하기 위해서 개체 하나의 스레드만 액세스할 수 있는지를 `msg` 번 변수입니다.  
  
 [!code-csharp[System.ArgumentOutOfRangeException#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/cs/Race2.cs#12)]
 [!code-vb[System.ArgumentOutOfRangeException#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/vb/Race2.vb#12)]  
  
 <xref:System.ArgumentOutOfRangeException> 값 0x80131502 HRESULT COR_E_ARGUMENTOUTOFRANGE를 사용 합니다.  
  
 인스턴스의 초기 속성 값의 목록을 <xref:System.ArgumentOutOfRangeException>, 참조는 <xref:System.ArgumentOutOfRangeException> 생성자입니다.  
  
   
  
## Examples  
 다음 예제는 초대 된 게스트에 대 한 정보를 포함 하는 클래스를 정의 합니다. 게스트는 21 미만의 경우는 <xref:System.ArgumentOutOfRangeException> 예외가 throw 됩니다.  
  
 [!code-csharp[ArgumentOutOfRangeException#1](~/samples/snippets/csharp/VS_Snippets_CLR/ArgumentOutOfRangeException/CS/program.cs#1)]
 [!code-vb[ArgumentOutOfRangeException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ArgumentOutOfRangeException/VB/program.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Exception" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.ArgumentOutOfRangeException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ArgumentOutOfRangeException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ArgumentOutOfRangeException.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ArgumentOutOfRangeException();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.ArgumentOutOfRangeException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 생성자는 <xref:System.ArgumentException.Message%2A> "음수가 아닌 숫자가 필요 합니다." 오류를 설명 하는 시스템 제공 메시지로 새 인스턴스의 속성 이 메시지는 현재 시스템의 문화권을 따릅니다.  
  
 다음 표에서는 <xref:System.ArgumentOutOfRangeException> 인스턴스의 초기 속성 값을 보여 줍니다.  
  
|속성|값|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|null 참조(Visual Basic의 경우 `Nothing`)|  
|<xref:System.ArgumentOutOfRangeException.Message%2A>|지역화된 오류 메시지 문자열입니다.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ArgumentOutOfRangeException (string paramName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string paramName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ArgumentOutOfRangeException.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (paramName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ArgumentOutOfRangeException(System::String ^ paramName);" />
      <MemberSignature Language="F#" Value="new ArgumentOutOfRangeException : string -&gt; ArgumentOutOfRangeException" Usage="new System.ArgumentOutOfRangeException paramName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="paramName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="paramName">이 예외를 발생시킨 매개 변수의 이름입니다.</param>
        <summary>이 예외를 throw한 매개 변수의 이름을 사용하여 <see cref="T:System.ArgumentOutOfRangeException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 생성자는 <xref:System.ArgumentException.Message%2A> "음수가 아닌 숫자가 필요 합니다." 오류를 설명 하는 시스템 제공 메시지로 새 인스턴스의 속성 이 메시지는 현재 시스템의 문화권을 따릅니다.  
  
 이 생성자는 <xref:System.ArgumentException.ParamName%2A> 매개 변수를 사용하여 새 인스턴스의 `paramName` 속성을 초기화합니다. `paramName` 내용은 사용자의 이해를 돕기 위한 것입니다.  
  
 다음 표에서는 <xref:System.ArgumentOutOfRangeException> 인스턴스의 초기 속성 값을 보여 줍니다.  
  
|속성|값|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|null 참조(Visual Basic의 경우 `Nothing`)|  
|<xref:System.ArgumentOutOfRangeException.Message%2A>|빈 문자열 ("").|  
|<xref:System.ArgumentException.ParamName%2A>|매개 변수 이름 문자열입니다.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ArgumentOutOfRangeException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ArgumentOutOfRangeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ArgumentOutOfRangeException(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="new ArgumentOutOfRangeException : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; ArgumentOutOfRangeException" Usage="new System.ArgumentOutOfRangeException (info, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="info">serialize된 개체 데이터를 보유하는 개체입니다.</param>
        <param name="context">직렬화된 데이터의 원본 또는 대상을 설명하는 개체입니다.</param>
        <summary>serialize된 데이터를 사용하여 <see cref="T:System.ArgumentOutOfRangeException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 deserialization을 수행하는 동안 이 생성자를 호출하여 스트림을 통해 전송될 예외 개체를 다시 구성합니다. 자세한 내용은 [XML 및 SOAP Serialization](~/docs/standard/serialization/xml-and-soap-serialization.md)합니다.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/serialization/xml-and-soap-serialization.md">XML 및 SOAP Serialization</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ArgumentOutOfRangeException (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ArgumentOutOfRangeException(System::String ^ message, Exception ^ innerException);" />
      <MemberSignature Language="F#" Value="new ArgumentOutOfRangeException : string * Exception -&gt; ArgumentOutOfRangeException" Usage="new System.ArgumentOutOfRangeException (message, innerException)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="innerException" Type="System.Exception" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="message">이 예외의 원인을 설명하는 오류 메시지입니다.</param>
        <param name="innerException">현재 예외를 발생시킨 예외입니다. 내부 예외를 지정하지 않은 경우 null 참조(Visual Basic의 경우 <see langword="Nothing" />)입니다.</param>
        <summary>지정된 오류 메시지와 이 예외를 발생시킨 예외를 사용하여 <see cref="T:System.ArgumentOutOfRangeException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ArgumentOutOfRangeException (string paramName, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string paramName, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (paramName As String, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ArgumentOutOfRangeException(System::String ^ paramName, System::String ^ message);" />
      <MemberSignature Language="F#" Value="new ArgumentOutOfRangeException : string * string -&gt; ArgumentOutOfRangeException" Usage="new System.ArgumentOutOfRangeException (paramName, message)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="paramName" Type="System.String" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="paramName">예외를 발생시킨 매개 변수의 이름입니다.</param>
        <param name="message">오류를 설명하는 메시지입니다.</param>
        <summary>이 예외를 발생시킨 매개 변수의 이름과 지정된 오류 메시지를 사용하여 <see cref="T:System.ArgumentOutOfRangeException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 생성자는 <xref:System.ArgumentOutOfRangeException.Message%2A> 속성의 값을 사용 하 여 새 인스턴스를 `message` 매개 변수입니다. `message` 매개 변수의 내용은 사용자가 이해할 수 있도록 만들어졌습니다. 이 생성자의 호출자는 이 문자열이 현재 시스템 문화권에 맞게 지역화되었는지 확인하는 데 필요합니다.  
  
 이 생성자는 <xref:System.ArgumentException.ParamName%2A> 매개 변수를 사용하여 새 인스턴스의 `paramName` 속성을 초기화합니다. `paramName` 내용은 사용자의 이해를 돕기 위한 것입니다.  
  
 다음 표에서는 <xref:System.ArgumentOutOfRangeException> 인스턴스의 초기 속성 값을 보여 줍니다.  
  
|속성|값|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|`null`.|  
|<xref:System.ArgumentOutOfRangeException.Message%2A>|오류 메시지 문자열입니다.|  
|<xref:System.ArgumentException.ParamName%2A>|매개 변수 이름 문자열입니다.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ArgumentOutOfRangeException (string paramName, object actualValue, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string paramName, object actualValue, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (paramName As String, actualValue As Object, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ArgumentOutOfRangeException(System::String ^ paramName, System::Object ^ actualValue, System::String ^ message);" />
      <MemberSignature Language="F#" Value="new ArgumentOutOfRangeException : string * obj * string -&gt; ArgumentOutOfRangeException" Usage="new System.ArgumentOutOfRangeException (paramName, actualValue, message)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="paramName" Type="System.String" />
        <Parameter Name="actualValue" Type="System.Object" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="paramName">예외를 발생시킨 매개 변수의 이름입니다.</param>
        <param name="actualValue">이 예외를 발생시킨 인수의 값입니다.</param>
        <param name="message">오류를 설명하는 메시지입니다.</param>
        <summary>매개 변수 이름, 인수 값 및 지정된 오류 메시지를 사용하여 <see cref="T:System.ArgumentOutOfRangeException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 생성자는 <xref:System.ArgumentException.ParamName%2A> 속성을 사용 하 여 새 인스턴스를 `paramName` 매개 변수를를 <xref:System.ArgumentOutOfRangeException.ActualValue%2A> 사용 하 여 속성을 `actualValue` 매개 변수를 및 <xref:System.ArgumentException.Message%2A> 사용 하 여 속성은 `message` 매개 변수입니다. 콘텐츠를 `paramName` 및 `message` 매개 변수는 사람이 이해할 수 있도록 만들어졌습니다. 이 생성자의 호출자가 현재 시스템 문화권에 맞게 이러한 문자열을 지역화 해야 합니다.  
  
 `actualValue` 매개 변수는.NET Framework 클래스 라이브러리 내에서 사용 되지 않습니다. 그러나는 <xref:System.ArgumentOutOfRangeException.ActualValue%2A> 속성은 응용 프로그램에 사용할 수 있는 인수 값을 사용할 수 있도록 제공 됩니다.  
  
 `actualValue` 매개 변수를 메서드에 전달 되는이 예외를 throw 하면 잘못 된 값을 포함 합니다. 이 값은 <xref:System.ArgumentOutOfRangeException.ActualValue%2A> 속성과 해당 문자열 표현에 포함 된 메시지 문자열에 추가 됩니다는 <xref:System.ArgumentOutOfRangeException.Message%2A> 속성입니다.  
  
 다음 표에서는 <xref:System.ArgumentOutOfRangeException> 인스턴스의 초기 속성 값을 보여 줍니다.  
  
|속성|값|  
|--------------|-----------|  
|<xref:System.ArgumentOutOfRangeException.ActualValue%2A>|인수 값입니다.|  
|<xref:System.Exception.InnerException%2A>|Null 참조 (`Nothing` Visual Basic에서).|  
|<xref:System.ArgumentOutOfRangeException.Message%2A>|오류 메시지 문자열입니다.|  
|<xref:System.ArgumentException.ParamName%2A>|매개 변수 이름 문자열입니다.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActualValue">
      <MemberSignature Language="C#" Value="public virtual object ActualValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ActualValue" />
      <MemberSignature Language="DocId" Value="P:System.ArgumentOutOfRangeException.ActualValue" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ActualValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Object ^ ActualValue { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ActualValue : obj" Usage="System.ArgumentOutOfRangeException.ActualValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 예외를 발생시킨 인수 값을 가져옵니다.</summary>
        <value>현재 <see cref="T:System.Exception" />을 발생시킨 매개 변수의 값을 포함하는 <see langword="Object" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 잘못 된 인수를 검색 하려면이 속성을 사용 합니다.  
  
 합니다 `ActualValue` 생성자에 전달 된 동일한 값을 반환 하는 속성 또는 `null` 제공 된 값이 없으면입니다.  
  
 <xref:System.ArgumentOutOfRangeException.ActualValue%2A> 개체 생성 시 속성 값이 할당 됩니다. 경우는 <xref:System.ArgumentOutOfRangeException.ActualValue%2A> 속성 값이 아닙니다 `null`을 값의 문자열 표현으로 된 메시지 문자열에 추가 됩니다는 <xref:System.ArgumentOutOfRangeException.Message%2A> 속성입니다.  
  
 <xref:System.ArgumentOutOfRangeException.ActualValue%2A> 속성이.NET Framework 클래스 라이브러리 내에서 사용 되지 않습니다. 모든 null 값을 전달 합니다 <xref:System.ArgumentOutOfRangeException> .NET Framework 클래스 라이브러리에서 throw 되는 개체입니다. <xref:System.ArgumentOutOfRangeException.ActualValue%2A> 속성은 응용 프로그램에 사용할 수 있는 인수 값을 사용할 수 있도록 제공 됩니다.  
  
 이 속성은 읽기 전용 및 내용 또는 값의 형식이 사용자 지정에 재정의 해야 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public override void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ArgumentOutOfRangeException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="override this.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="argumentOutOfRangeException.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="info">serialize된 개체 데이터를 보유하는 개체입니다.</param>
        <param name="context">직렬화된 데이터의 원본 또는 대상을 설명하는 개체입니다.</param>
        <summary>잘못된 인수 값 및 추가 예외 정보를 사용하여 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 개체를 설정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ArgumentOutOfRangeException.GetObjectData%2A> 설정 된 <xref:System.Runtime.Serialization.SerializationInfo> serialization 대상인 모든 예외 개체 데이터가 들어 있는 개체입니다. Deserialization 도중 예외 개체에서 다시 구성 됩니다는 <xref:System.Runtime.Serialization.SerializationInfo> 스트림을 통해 전송 합니다.  
  
 자세한 내용은 <xref:System.Runtime.Serialization.SerializationInfo>를 참조하십시오.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="info" /> 개체가 <see langword="null" />인 경우</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">serialization 서비스를 제공 합니다. 연결 된 열거형:   <see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" /> 보안 작업: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /></permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다. 이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</permission>
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
      </Docs>
    </Member>
    <Member MemberName="Message">
      <MemberSignature Language="C#" Value="public override string Message { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Message" />
      <MemberSignature Language="DocId" Value="P:System.ArgumentOutOfRangeException.Message" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Message As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Message { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Message : string" Usage="System.ArgumentOutOfRangeException.Message" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>오류 메시지 및 잘못된 인수 값의 문자열 표현을 가져오거나, 인수 값이 Null인 경우 오류 메시지만 가져옵니다.</summary>
        <value>이 예외에 대한 텍스트 메시지입니다. 이 속성 값은 다음의 두 가지 형식 중 하나를 사용합니다.  
  
 <list type="table"><listheader><term> 조건 
 </term><description> 값 
 </description></listheader><item><term> <paramref name="actualValue" />이 <see langword="null" />인 경우  
  
 </term><description> 해당 생성자에 전달된 <paramref name="message" /> 문자열입니다.  
  
 </description></item><item><term> <paramref name="actualValue" />이 <see langword="null" />이 아닌 경우  
  
 </term><description> 잘못된 인수 값의 문자열 표현이 추가된 <paramref name="message" /> 문자열입니다.  
  
 </description></item></list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성을 재정의 <xref:System.ArgumentException.Message%2A>합니다.  
  
 오류 메시지는이 예외를 발생 시킨 매개 변수의 예상 값을 설명 해야 합니다. 오류 메시지를 지역화 해야 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>