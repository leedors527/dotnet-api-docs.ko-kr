<Type Name="Converter&lt;TInput,TOutput&gt;" FullName="System.Converter&lt;TInput,TOutput&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="dc131a5794feb92812ce0afb2799a549a67e5666" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58702379" /></Metadata><TypeSignature Language="C#" Value="public delegate TOutput Converter&lt;in TInput,out TOutput&gt;(TInput input);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Converter`2&lt;- TInput, + TOutput&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Converter`2" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Converter(Of In TInput, Out TOutput)(input As TInput) As TOutput " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TInput, typename TOutput&gt;&#xA;public delegate TOutput Converter(TInput input);" />
  <TypeSignature Language="F#" Value="type Converter&lt;'Input, 'Output&gt; = delegate of 'Input -&gt; 'Output" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TInput">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TOutput">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="input" Type="TInput" />
  </Parameters>
  <ReturnValue>
    <ReturnType>TOutput</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="TInput">변환될 개체의 형식입니다.</typeparam>
    <typeparam name="TOutput">입력 개체가 변환될 형식입니다.</typeparam>
    <param name="input">변환할 개체입니다.</param>
    <summary>개체를 한 형식에서 다른 형식으로 변환하는 메서드를 나타냅니다.</summary>
    <returns>변환된 <typeparamref name="TOutput" />을 나타내는 <typeparamref name="TInput" />입니다.</returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 대리자에서 사용 되는 <xref:System.Array.ConvertAll%2A> 메서드를 <xref:System.Array> 클래스 및 <xref:System.Collections.Generic.List`1.ConvertAll*> 메서드의 <xref:System.Collections.Generic.List%601> 다른 컬렉션의 각 요소 형식 간에 변환 하는 클래스.  
  
   
  
## Examples  
 이 섹션에는 두 코드 예제가 있습니다. 첫 번째 방법을 보여 줍니다는 <xref:System.Converter%602> 가진 대리자를 <xref:System.Array.ConvertAll%2A> 메서드의 <xref:System.Array> 클래스 및 두 번째 방법을 사용 하 여 대리자를 보여 줍니다는 <xref:System.Collections.Generic.List`1.ConvertAll*> 메서드의 <xref:System.Collections.Generic.List%601> 제네릭 클래스입니다.  
  
 예제 1  
  
 라는 메서드를 정의 하는 다음 코드 예제 `PointFToPoint` 변환 하는 <xref:System.Drawing.PointF> 구조체를 <xref:System.Drawing.Point> 구조. 배열을 만듭니다 <xref:System.Drawing.PointF> 구조를 만들고는 `Converter<PointF, Point>` 대리자 (`Converter(Of PointF, Point)` Visual Basic의)를 나타내는 `PointFToPoint` 메서드를 대리자를 전달 하 고는 <xref:System.Array.ConvertAll%2A> 메서드. <xref:System.Array.ConvertAll%2A> 메서드는 입력 목록의 각 요소에 전달 합니다 `PointFToPoint` 메서드를 새 목록으로 변환 된 요소를 배치 하 고 <xref:System.Drawing.Point> 구조. 두 목록은 모두 표시 됩니다.  
  
 [!code-cpp[Array_ConvertAll#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_ConvertAll/cpp/source.cpp#1)]
 [!code-csharp[Array_ConvertAll#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_ConvertAll/cs/source.cs#1)]
 [!code-vb[Array_ConvertAll#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_ConvertAll/vb/source.vb#1)]  
  
 예제 2  
  
 라는 메서드를 정의 하는 다음 코드 예제 `PointFToPoint` 변환 하는 <xref:System.Drawing.PointF> 구조체를 <xref:System.Drawing.Point> 구조. 만듭니다는 <xref:System.Collections.Generic.List%601> 의 <xref:System.Drawing.PointF> 구조를 만들고를 `Converter\<PointF, Point>` 대리자 (`Converter(Of PointF, Point)` Visual Basic의)를 나타내는 `PointFToPoint` 메서드를 대리자를 전달 하 고는 <xref:System.Collections.Generic.List`1.ConvertAll*> 메서드. <xref:System.Collections.Generic.List`1.ConvertAll*> 메서드는 입력 목록의 각 요소에 전달 합니다 `PointFToPoint` 메서드를 새 목록으로 변환 된 요소를 배치 하 고 <xref:System.Drawing.Point> 구조. 두 목록은 모두 표시 됩니다.  
  
 [!code-cpp[List\`1_ConvertAll#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_ConvertAll/cpp/source.cpp#1)]
 [!code-csharp[List\`1_ConvertAll#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_ConvertAll/cs/source.cs#1)]
 [!code-vb[List\`1_ConvertAll#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_ConvertAll/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
</Type>