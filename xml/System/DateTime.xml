<Type Name="DateTime" FullName="System.DateTime">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c9b5da39d5bfa9906a438d8fd308ba48ecf563ef" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58721015" /></Metadata><TypeSignature Language="C#" Value="public struct DateTime : IComparable, IComparable&lt;DateTime&gt;, IConvertible, IEquatable&lt;DateTime&gt;, IFormattable, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit DateTime extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.DateTime&gt;, class System.IConvertible, class System.IEquatable`1&lt;valuetype System.DateTime&gt;, class System.IFormattable, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.DateTime" />
  <TypeSignature Language="VB.NET" Value="Public Structure DateTime&#xA;Implements IComparable, IComparable(Of DateTime), IConvertible, IEquatable(Of DateTime), IFormattable, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public value class DateTime : IComparable, IComparable&lt;DateTime&gt;, IConvertible, IEquatable&lt;DateTime&gt;, IFormattable, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type DateTime = struct&#xA;    interface IFormattable&#xA;    interface IConvertible&#xA;    interface ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.DateTime&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IConvertible</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.DateTime&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1">
      <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>일반적으로 날짜와 시간으로 표시된 시간을 나타냅니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

## <a name="quick-links-to-example-code"></a>예제 코드에 대 한 빠른 링크

[!INCLUDE[interactive-note](~/includes/csharp-interactive-with-utc-note.md)]

이 문서에서는 사용 하는 몇 가지 예는 `DateTime` 형식:

**초기화 예제**      
- [생성자를 호출 합니다.](#initialization-01)
- [암시적 기본 생성자를 호출 합니다.](#initialization-02)
- [반환 값 할당](#initialization-03)
- [날짜 및 시간을 나타내는 문자열을 구문 분석](#initialization-04)
- [Visual Basic 구문의 날짜 및 시간을 초기화 하려면](#initialization-05)

**서식 지정 `DateTime` 문자열로 개체**  
- [기본 날짜 시간 형식 사용](#formatting-01)
- [날짜 및 시간을 특정 문화권을 사용 하 여 형식을 지정합니다](#formatting-02)
- [표준 또는 사용자 지정 서식 문자열을 사용 하 여 날짜 시간 형식 지정](#formatting-03)
- [형식 문자열 및 특정 문화권을 지정 합니다.](#formatting-04)
- [ISO 8601 표준을 사용 하 여 웹 서비스에 대 한 날짜 시간 형식 지정](#formatting-05)

**문자열을 구문 분석 `DateTime` 개체**  
- [사용 하 여 `Parse` 또는 `TryParse` 문자열을 날짜 및 시간 변환](#parsing-01)
- [사용 하 여 `ParseExact` 또는 `TryParseExact` 알려진 형식으로 문자열 변환](#parsing-02)
- [날짜 및 시간을 ISO 8601 문자열 표현에서 변환](#parsing-03)

**`DateTime` 해결 방법**  
- [날짜 및 시간 값의 해상도 탐색 합니다.](#resolution-01)
- [허용 오차 내에서 동일한 지 비교](#comparison-01)

**문화권 및 달력**  
- [문화권 특정 달력을 사용 하 여 날짜 및 시간 값 표시](#calendars-01)
- [문화권 특정 일정에 따라 문자열을 구문 분석](#calendars-02)
- [특정 문화권의 달력의 시간과 날짜를 초기화 합니다.](#calendars-03)
- [특정 문화권의 달력을 사용 하 여 날짜 및 시간 속성에 액세스](#calendars-04)
- [주 문화권 특정 달력을 사용 하 여 연도 검색 합니다.](#calendars-05)

**지속성**  
- [문자열에서 현지 표준 시간대로 날짜 및 시간 값 유지](#persistence-01)
- [고정 문화권 및 시간 형식에서 문자열로 유지 날짜 및 시간 값](#persistence-02)
- [영구 날짜 및 시간 값을 정수로](#persistence-03)
- [사용 하 여 유지 날짜 및 시간 값을 `XmlSerializer`](#persistence-04)
- [사용 하 여 유지 날짜 및 시간 값을 `BinaryFormatter`](#persistence-05)
- [표준 시간대 데이터를 사용 하 여 날짜 및 시간 값 유지](#persistence-06)

## <a name="quick-links-to-remarks-topics"></a>빠른 항목의 링크를 설명 합니다.

이 섹션의 여러 일반적인 용도 대 한 항목이 포함 된 `DateTime` 구조체:
  
- [초기화는 `DateTime` 개체](#initializing-a-datetime-object)
- [DateTime 값과 해당 문자열 표현](#datetime-values-and-their-string-representations)
- [문자열에서 날짜/시간 값을 구문 분석](#parsing-datetime-values-from-strings)
- [날짜/시간 값](#datetime-values)
- [날짜/시간 작업](#datetime-operations)
- [날짜/시간 확인](#datetime-resolution)
- [날짜/시간 값 및 달력](#datetime-values-and-calendars)
- [날짜/시간 값 유지](#persisting-datetime-values)
- [DateTime vs입니다. timeSpan](#datetime-vs-timespan)
- [허용 오차 내에서 동일한 지 비교](#comparing-for-equality-within-tolerance)
- [COM interop 고려 사항](#com-interop-considerations)
   
<xref:System.DateTime> 값 형식을 날짜를 나타내고 서 기 9999 년 12 월 31 일 까지의 값을 가진 00시: 00 (자정)에서 1 월 1 일에서 0001 서 기 (Common Era) 오후 11시 59분: 59를 통해 시간 (C.E.) 에 해당 합니다.  
  
시간 값은 틱을 호출 하는 100 나노초 단위로 측정 됩니다. 특정 날짜 자정 12:00 서 기 0001 년 1 월 1 일 이후 틱 수는 (C.E.) 에 <xref:System.Globalization.GregorianCalendar> 달력입니다. 윤 초에 의해 추가 된 틱 수에서 제외 됩니다. 예를 들어 31241376000000000l 틱 값 12시: 00 자정 0100 월 01, 금요일 날짜를 나타냅니다. <xref:System.DateTime> 값은 항상 명시적의 컨텍스트 또는 기본 달력으로 표현 됩니다.  
  
> [!NOTE]
>  작업 하는 경우 틱 값을 사용 하 여 일부 다른 시간 간격을 분 또는 초 등 변환할을 사용 해야 합니다 <xref:System.TimeSpan.TicksPerDay?displayProperty=nameWithType>, <xref:System.TimeSpan.TicksPerHour?displayProperty=nameWithType>, <xref:System.TimeSpan.TicksPerMinute?displayProperty=nameWithType>, <xref:System.TimeSpan.TicksPerSecond?displayProperty=nameWithType>, 또는 <xref:System.TimeSpan.TicksPerMillisecond?displayProperty=nameWithType> 변환을 수행 하는 상수입니다. 예를 들어 시간 (초) 수를 추가 하려면 틱의 지정 된 번호로 표시 합니다 <xref:System.DateTime.Second%2A> 구성 요소를 <xref:System.DateTime> 값 식을 사용할 수 있습니다 `dateValue.Second + nTicks/Timespan.TicksPerSecond`합니다.  

이 문서에서 예제의 전체 집합에 대 한 소스에서 볼 수 있습니다 [Visual Basic](https://github.com/dotnet/samples/tree/master/snippets/visualbasic/System.DateTime/) 또는 [C#](https://github.com/dotnet/samples/tree/master/snippets/csharp/System.DateTime/) GitHub의 docs 리포지토리에서 합니다.

> [!NOTE]
>  대안을를 <xref:System.DateTime> 는 특히 표준 시간대 날짜 및 시간 값을 사용 하 여 작업에 대 한 구조는 <xref:System.DateTimeOffset> 구조입니다. 합니다 <xref:System.DateTimeOffset> 개인의 날짜 및 시간 정보를 저장 하는 구조 <xref:System.DateTime> 필드와는 해당 날짜와 시간 (분) 개인에서 UTC 다릅니다 <xref:System.Int16> 필드입니다. 이 수 있도록를 <xref:System.DateTimeOffset> 반면 특정 표준 시간대의 시간을 반영 하도록 값을 <xref:System.DateTime> 값은만 UTC 및 현지 표준 시간대의 시간에 명확 하 게 반영할 수 있습니다. 사용 하는 경우에 대 한 설명은 합니다 <xref:System.DateTime> 구조 또는 <xref:System.DateTimeOffset> 날짜 및 시간 값을 사용 하 여 작업 하는 경우 구조체를 참조 하십시오 [Choosing Between DateTime, DateTimeOffset, TimeSpan 및 timezoneinfo 중](~/docs/standard/datetime/choosing-between-datetime.md)합니다.  
  
### <a name="initializing-a-datetime-object"></a>DateTime 개체를 초기화합니다.  

새 초기 값을 할당할 수 있습니다 `DateTime` 다양 한 값:

- 값에 대 한 인수를 지정할 하나는 생성자를 호출 하거나 암시적 기본 생성자를 사용 합니다.
- 할당을 `DateTime` 속성 또는 메서드의 반환 값입니다.
- 구문 분석을 `DateTime` 값을 해당 문자열 표현입니다.
- Visual Basic 관련 언어 기능을 사용 하 여 인스턴스화하는 `DateTime`합니다. 

다음 코드 조각은 각 사례를 보여 줍니다.

#### <a name="invoke-constructors"></a>생성자를 호출 합니다.

호출의 오버 로드 중 하나는 <xref:System.DateTime> 날짜 및 시간 값 (예: 연도, 월 및 일 또는 틱 수)의 요소를 지정 하는 생성자입니다. 다음 코드에서는 사용 하 여 특정 날짜를 <xref:System.DateTime> 연도, 월, 일, 시간, 분 및 초를 지정 하는 생성자입니다.  

<a name="initialization-01"></a>  
[!code-vb[System.DateTime.Instantiation#1](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#1)]  
[!code-csharp-interactive[System.DateTime.Instantiation#1](~/samples/snippets/csharp/System.DateTime/Instantiation.cs#1)]

호출 하는 `DateTime` 하려는 경우 구조체의 암시적 기본 생성자는 `DateTime` 기본값으로 초기화 합니다. (값 형식의 암시적 기본 생성자에 대 한 내용은 참조 하세요 [값 형식](~/docs/csharp/language-reference/keywords/value-types.md).) 일부 컴파일러에서는 선언도 지원는 <xref:System.DateTime> 명시적으로 값을 할당 하지 않고 값입니다. 기본 값도는 명시적 초기화 하지 않고 값을 만들면 발생 합니다. 다음 예제는 <xref:System.DateTime> C# 및 Visual Basic의 경우 암시적 기본 생성자와 <xref:System.DateTime> Visual Basic의 할당 되지 않은 선언 합니다.  

<a name="initialization-02"></a>  
[!code-vb[System.DateTime.Instantiation#5](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#5)]  
[!code-csharp-interactive[System.DateTime.Instantiation#5](~/samples/snippets/csharp/System.DateTime/Instantiation.cs#5)]
    
#### <a name="assigning-a-computed-value"></a>계산 된 값을 할당합니다.

할당할 수는 <xref:System.DateTime> 속성 또는 메서드에서 반환 된 날짜 및 시간 값 개체입니다. 다음 예에서는 현재 날짜 및 시간을 현재 utc (협정 세계시) 날짜 및 시간과 현재 날짜를 할당 세 개의 새 <xref:System.DateTime> 변수입니다.  

<a name="initialization-03"></a>  
[!code-vb[System.DateTime.Instantiation#3](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#3)]  
[!code-csharp[System.DateTime.Instantiation#3](~/samples/snippets/csharp/System.DateTime/Instantiation.cs#3)]

#### <a name="parsing-a-string-that-represents-a-datetime"></a>날짜/시간을 나타내는 문자열을 구문 분석

합니다 <xref:System.DateTime.Parse%2A>, <xref:System.DateTime.ParseExact%2A>를 <xref:System.DateTime.TryParse%2A>, 및 <xref:System.DateTime.TryParseExact%2A> 메서드는 모두 해당 날짜 및 시간 값을 문자열로 변환 합니다. 다음 예에서는 합니다 <xref:System.DateTime.Parse%2A> 및 <xref:System.DateTime.ParseExact%2A> 문자열을 구문 분석 하 고 변환 하는 메서드를 <xref:System.DateTime> 값입니다. 두 번째 형식에서 지원 되는 형태를 사용 합니다 [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) 나타내는 날짜 및 시간 문자열 형식에 대 한 표준입니다. 웹 서비스에서 날짜 정보를 전송 하려면이 표준 표현은 자주 사용 됩니다.

<a name="initialization-04"></a>  
[!code-vb[System.DateTime.Instantiation#4](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#4)]  
[!code-csharp[System.DateTime.Instantiation#4](~/samples/snippets/csharp/System.DateTime/Instantiation.cs#4)]

<xref:System.DateTime.TryParse%2A> 하 고 <xref:System.DateTime.TryParseExact%2A> 메서드는 문자열에 대 한 유효한 표현 인지 여부를 나타내는 <xref:System.DateTime> 값 및 경우에 변환을 수행 합니다.  

#### <a name="language-specific-syntax-for-visual-basic"></a>Visual Basic에 대 한 언어별 구문

다음 Visual Basic 문은 초기화 새 <xref:System.DateTime> 값입니다.  

<a name="initialization-05"></a>  
[!code-vb[System.DateTime.Instantiation#2](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#2)]  

### <a name="datetime-values-and-their-string-representations"></a>DateTime 값과 해당 문자열 표현  

내부적으로 모든 <xref:System.DateTime> 값 (100 나노초 간격의 수) 0001 년 1 월 1 일 12시: 00 자정 이후 경과 된 틱 수로 표현 됩니다. 실제 <xref:System.DateTime> 값은 해당 값이 표시 될 때 나타나는 방법과 무관 합니다. 모양의 <xref:System.DateTime> 값을 해당 문자열 표현으로 변환 하는 서식 지정 작업의 결과 값입니다.  
  
날짜 및 시간 값의 모양을 문화권, 국제 표준, 응용 프로그램 요구 사항 및 개인 기본 설정에 따라 달라 집니다. 합니다 <xref:System.DateTime> 오버 로드를 통해 날짜 및 시간 값 서식 지정에 대 한 유연성을 제공 하는 구조 <xref:System.DateTime.ToString%2A>합니다. 기본 <xref:System.DateTime.ToString?displayProperty=nameWithType> 메서드가 현재 문화권의 간단한 날짜 및 긴 시간 패턴을 사용 하 여 날짜 및 시간 값의 문자열 표현을 반환 합니다. 다음 예제에서는 기본 <xref:System.DateTime.ToString?displayProperty=nameWithType> 메서드. 날짜 및 시간을 현재 문화권의 짧은 날짜 및 긴 시간 패턴을 사용 하 여 표시 됩니다. EN-US 문화권은 예제를 실행 하는 컴퓨터의 현재 문화권입니다.  
  
<a name="formatting-01"></a>  
[!code-csharp-interactive[System.DateTime.Formatting#1](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#1)]
[!code-vb[System.DateTime.Formatting#1](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#1)]  

클라이언트에서 서로 다른 문화권의 서버 수 있는 웹 시나리오를 지원 하도록 특정 문화권에서 날짜 형식을 지정 해야 합니다. 사용 하 여 문화권을 지정 합니다 <xref:System.DateTime.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> 메서드를 특정 문화권의 간단한 날짜 및 긴 시간 표현을 만듭니다. 다음 예제에서는 <xref:System.DateTime.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> 메서드 및 간단한 날짜 및 긴 시간 패턴을 사용 하 여 FR-FR 문화권에 대 한 시간을 날짜를 표시 합니다.  
  
<a name="formatting-02"></a>  
[!code-csharp-interactive[System.DateTime.Formatting#2](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#2)]
[!code-vb[System.DateTime.Formatting#2](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#2)]  

 다른 응용 프로그램에는 다양 한 문자열 표현의 날짜 필요할 수 있습니다. <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> 메서드는 현재 문화권의 서식 규칙을 사용 하 여 표준 또는 사용자 지정 형식 지정자에 의해 정의 된 문자열 표현을 반환 합니다. 다음 예제에서는 <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> 문화권의 전체 날짜 및 시간 패턴을 EN-US를 표시 하는 메서드를 사용 하면 예제를 실행 하는 컴퓨터의 현재 문화권입니다.  
  
<a name="formatting-03"></a>  
[!code-csharp-interactive[System.DateTime.Formatting#3](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#3)]
[!code-vb[System.DateTime.Formatting#3](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#3)]  

 마지막으로, 문화권 및 사용 하 여 형식을 모두를 지정할 수 있습니다는 <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> 메서드. 다음 예제에서는 <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> 전체 날짜 및 시간 패턴 FR-FR 문화권을 표시 하는 방법입니다.  

<a name="formatting-04"></a>  
[!code-csharp-interactive[System.DateTime.Formatting#4](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#4)]
[!code-vb[System.DateTime.Formatting#4](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#4)]  

<xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> 오버 로드 사용할 수도 있습니다는 사용자 지정 형식 문자열을 사용 하 여 다른 형식을 지정 합니다. 다음 예제에서는 사용 하 여 문자열 서식 지정 방법을 합니다 [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) 종종 웹 서비스에 사용 되는 표준 형식입니다. Iso 8601 형식에 해당 하는 표준 형식 문자열을 없습니다.

<a name="formatting-05"></a> [!code-csharp-interactive[System.DateTime.Formatting#5](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#5)]
[!code-vb[System.DateTime.Formatting#5](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#5)]  

형식에 대 한 자세한 내용은 <xref:System.DateTime> 값을 참조 하세요 [표준 날짜 및 시간 형식 문자열](~/docs/standard/base-types/standard-date-and-time-format-strings.md) 하 고 [사용자 지정 날짜 및 시간 형식 문자열](~/docs/standard/base-types/custom-date-and-time-format-strings.md)합니다.  

### <a name="parsing-datetime-values-from-strings"></a>문자열에서 날짜/시간 값을 구문 분석

날짜 및 시간의 문자열 표현을 변환 구문 분석을 <xref:System.DateTime> 값입니다. 일반적으로 날짜 및 시간 문자열 응용 프로그램에 두 개의 서로 다른 사용:  
  
-   날짜 및 시간을 다양 한 형태를 사용 하 고 현재 문화권 이나 특정 문화권의 규칙을 반영 합니다. 예를 들어, 응용 프로그램 사용자에 해당 현재 문화권이 EN-US "2013 년 12 월 15" 또는 "2013 년 12 월 15 년"로 날짜 값을 입력 허용 사용자가 현재 문화권이 인 en-gb "2013/12/15" 또는 "15 2013 년 12 월."로 날짜 값을 입력 하려면  
  
-   날짜 및 시간을 미리 정의 된 형식으로 표시 됩니다. 예를 들어, 응용 프로그램으로 "20130103" 앱이 실행 되는 culture와 독립적으로 날짜를 serialize 합니다. 응용 프로그램에 필요한 날짜는 현재 문화권의 간단한 날짜 형식으로 입력 합니다.
  
사용 된 <xref:System.DateTime.Parse%2A> 또는 <xref:System.DateTime.TryParse%2A> 문화권을 사용한 일반적인 날짜 및 시간 형식 중 하나에서 문자열을 변환 하는 메서드를 <xref:System.DateTime> 값. 다음 예제에서는 사용 하는 방법을 보여 줍니다 <xref:System.DateTime.TryParse%2A> 날짜 문자열에서 다른 culture 별 형식으로 변환 하는 <xref:System.DateTime> 값입니다. 영어 (영국) 및 호출 현재 문화권을 변경 하 여 <xref:System.DateTime.GetDateTimeFormats> 날짜 및 시간 문자열의 배열을 생성 하는 방법입니다. 그런 다음 배열의 각 요소에 전달 된 <xref:System.DateTime.TryParse%2A> 메서드. 예의 출력을 구문 분석 메서드에서 각 culture 별 날짜 및 시간 문자열을 변환할 수를 보여 줍니다.  
  
<a name="parsing-01"></a>  
[!code-csharp-interactive[System.DateTime.Parsing#1](~/samples/snippets/csharp/System.DateTime/Parsing.cs#1)]
[!code-vb[System.DateTime.Parsing#1](~/samples/snippets/visualbasic/System.DateTime/Parsing.vb#1)]  

사용 된 <xref:System.DateTime.ParseExact%2A> 및 <xref:System.DateTime.TryParseExact%2A> 특정 형식 또는 형식으로 일치 해야 하는 문자열로 변환 하는 메서드를 <xref:System.DateTime> 값. 구문 분석 메서드에서 매개 변수로 하나 이상의 날짜 및 시간 서식 문자열을 지정합니다. 다음 예제에서는 합니다 <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> 메서드는 "yyyyMMdd" 형식 또는 "HHmmss" 형식으로 해야 하는 문자열을 변환할 <xref:System.DateTime> 값입니다.  
  
<a name="parsing-02"></a>  
[!code-csharp-interactive[System.DateTime.Parsing#2](~/samples/snippets/csharp/System.DateTime/Parsing.cs#2)]
[!code-vb[System.DateTime.Parsing#2](~/samples/snippets/visualbasic/System.DateTime/Parsing.vb#2)]  

에 대 한 한 가지 일반적인 용도 <xref:System.DateTime.ParseExact%2A> 에서 일반적으로 웹 서비스에서 문자열 표현으로 변환 하는 것 [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) 표준 형식입니다. 다음 코드를 사용 하는 올바른 형식으로 문자열을 보여 줍니다.

<a name="parsing-03"></a>  
[!code-csharp-interactive[System.DateTime.Parsing#3](~/samples/snippets/csharp/System.DateTime/Parsing.cs#3)]
[!code-vb[System.DateTime.Parsing#3](~/samples/snippets/visualbasic/System.DateTime/Parsing.vb#3)]  

문자열을 구문 분석할 수 없으면, 합니다 <xref:System.DateTime.Parse%2A> 및 <xref:System.DateTime.ParseExact%2A> 메서드 예외를 throw 합니다. <xref:System.DateTime.TryParse%2A> 및 <xref:System.DateTime.TryParseExact%2A> 메서드는 반환을 <xref:System.Boolean> 변환이 성공 또는 실패 여부를 나타내는 값입니다. 사용 해야 합니다 <xref:System.DateTime.TryParse%2A> 또는 <xref:System.DateTime.TryParseExact%2A> 성능은 매우 중요 한 시나리오에서 메서드. 높은 실패율을 포함 하려는 경향이 있습니다 날짜 및 시간 문자열 구문 분석 작업 및 예외 처리 비용이 많이 듭니다. 문자열은 사용자가 입력 하는 경우 이러한 메서드를 사용 또는 알 수 없는 소스에서 제공 될 예정입니다. 
  
날짜 및 시간 값을 구문 분석 하는 방법에 대 한 자세한 내용은 참조 하세요. [구문 분석 하는 날짜 및 시간 문자열](~/docs/standard/base-types/parsing-datetime.md)합니다.  

### <a name="datetime-values"></a>날짜/시간 값

시간 값에 대 한 설명은 <xref:System.DateTime> 형식을 utc (협정 세계시) 표준을 사용 하 여를 종종 표현 됩니다. Coordinated Universal Time은 저명한 이름을 그리니치 표준시 (GMT). Coordinated Universal Time은 UTC 원점 경도 0도에서 측정 되는 시간입니다. 일광 절약 시간 UTC에 해당 되지 않습니다.  
  
현지 시간을 특정 표준 시간대에 상대적입니다. 표준 시간대의 표준 시간대 오프셋 연관 됩니다. 표준 시간대 오프셋이 UTC 시작 지점에서 시간 단위로 측정 된 표준 시간대의 치환 있습니다. 또한 현지 시간을 더하거나 뺍니다 시간 간격 조정을 일광 절약 시간을 필요에 따라 달라 집니다. 현지 시간 UTC와 필요한 경우 일광 절약 시간 조정에 표준 시간대 오프셋을 추가 하 여 계산 됩니다. UTC 시작 지점에서 표준 시간대 오프셋은 0입니다.  
  
파일의 UTC 시간 계산, 비교 및 저장 날짜 및 시간에 적합합니다. 현지 시간 데스크톱 응용 프로그램의 사용자 인터페이스에 표시 하기에 적합합니다. 표준 시간대 인식 응용 프로그램 (예: 여러 웹 응용 프로그램)는 또한 다양 한 다른 표준 시간대를 사용 하 여 작업 해야 합니다.  
  
경우는 <xref:System.DateTime.Kind%2A> 의 속성을 <xref:System.DateTime> 개체가 <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>, 표시 된 시간이 현지 시간 또는 UTC 시간, 일부 다른 표준 시간대의 시간 인지 지정 되지 않습니다.  

### <a name="datetime-resolution"></a>날짜/시간 확인
  
> [!NOTE]
>  날짜 및 시간 산술 연산을 수행 하는 대신 <xref:System.DateTime> 값 경과 시간 측정을 사용할 수는 <xref:System.Diagnostics.Stopwatch> 클래스입니다.  
  
<xref:System.DateTime.Ticks%2A> 속성이 하나 천만 분의 초 단위로 날짜 및 시간 값 표현 합니다. <xref:System.DateTime.Millisecond%2A> 속성 날짜 및 시간 값에서 1/1000 초를 반환 합니다. 반복 된 호출을 사용 하 여 <xref:System.DateTime.Now%2A?displayProperty=nameWithType> 경과 된 시간을 측정 하는 속성은 시스템 클록에 따라 달라 집니다. Windows 7 및 Windows 8 시스템에서 시스템 클록에 약 15 시간 (밀리초)을 확인 합니다. 이 해결 방법은 짧은 시간 간격 100 밀리초를 보다 적은 영향을 줍니다. 
  
다음 예에서는 현재 날짜 및 시간 값의 시스템 클록의 해상도에 대 한 종속성을 보여 줍니다. 예제에서는 외부 루프를 20 회 반복 및 외부 루프를 지연 하는 데 사용 되는 내부 루프입니다. 외부 루프 카운터의 값은 10에 대 한 호출을 <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> 메서드 5 밀리초 지연을 소개 합니다. 다음 예제에서는에서 반환 하는 시간 (밀리초)의 수를 `DateTime.Now.Milliseconds` 를 호출한 후에 속성 변경 내용을 <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType>합니다.  

<a name="resolution-01"></a>  
[!code-csharp-interactive[System.DateTime.Resolution#1](~/samples/snippets/csharp/System.DateTime/Resolution.cs#1)]
[!code-vb[System.DateTime.Resolution#1](~/samples/snippets/visualbasic/System.DateTime/Resolution.vb#1)]  

### <a name="datetime-operations"></a>날짜/시간 작업  

사용 하 여 계산을 <xref:System.DateTime> 구조체와 같은 <xref:System.DateTime.Add%2A> 또는 <xref:System.DateTime.Subtract%2A>, 구조체의 값을 수정 하지는 않습니다. 대신 계산 반환 새 <xref:System.DateTime> 계산의 결과 값을 갖는 구조체입니다.  
  
변환 작업 (예:: UTC와 현지 시간 또는 시간대 사이)의 표준 시간대 간에 일광 절약 시간을 계정으로 걸리지만 산술 및 비교 작업 하지 않습니다.  
  
<xref:System.DateTime> 구조 자체는 다른 시간대에서 변환에 대 한 제한 된 지원을 제공 합니다. 사용할 수는 <xref:System.DateTime.ToLocalTime%2A> 현지 시간을 UTC로 변환 하는 방법에 사용할 수는 <xref:System.DateTime.ToUniversalTime%2A> 현지 시간에서 UTC로 변환 하는 방법입니다. 그러나 표준 시간대 변환 메서드의 전체 집합은에서 사용할 수 있는는 <xref:System.TimeZoneInfo> 클래스입니다. 이러한 메서드를 사용 하 여 다른 표준 시간대의 시간에 전 세계의 표준 시간대 중 하나로 변환할 수 있습니다.  
  
계산 및 비교 <xref:System.DateTime> 개체는 개체가 동일한 표준 시간대의 시간을 나타내는 경우에 의미가 있습니다. 사용할 수는 <xref:System.TimeZoneInfo> 를 나타내는 개체를 <xref:System.DateTime> 값의 시간 영역을 두는 느슨하게 결합 되어 있지만. <xref:System.DateTime> 개체에 해당 날짜 및 시간 값의 표준 시간대를 나타내는 개체를 반환 하는 속성이 없습니다. 합니다 <xref:System.DateTime.Kind%2A> 속성 표시 하는 경우는 `DateTime` UTC를 현지 시간을 나타내거나 지정 되지 않았습니다. 표준 시간대 인식 응용 프로그램에서 사용 해야 합니다는 표준 시간대를 확인 하는 일부 외부 메커니즘을 <xref:System.DateTime> 개체가 만들어진 합니다. 둘 다를 래핑하는 구조체를 사용할 수 있습니다 합니다 <xref:System.DateTime> 값 및 <xref:System.TimeZoneInfo> 나타내는 개체를 <xref:System.DateTime> 값의 표준 시간대입니다. UTC를 사용 하 여 계산 및 비교에 대 한 자세한 내용은 <xref:System.DateTime> 값을 참조 하세요 [날짜 및 시간 산술 연산 수행](~/docs/standard/datetime/performing-arithmetic-operations.md)합니다.  
  
각 <xref:System.DateTime> 멤버 암시적으로 해당 작업을 수행 하려면 일반 달력을 사용 합니다. 예외는 암시적으로 일정을 지정 하는 방법입니다. 파생 된 매개 변수를 사용 하 여 메서드 및 달력을 지정 하는 생성자를 포함 하는 이러한 <xref:System.IFormatProvider>와 같은 <xref:System.Globalization.DateTimeFormatInfo?displayProperty=nameWithType>합니다.  
  
작업의 멤버는 <xref:System.DateTime> 형식 윤년 및 월의 일 수와 같은 정보를 고려 합니다.  

## <a name="datetime-values-and-calendars"></a>날짜/시간 값 및 달력  

.NET Framework 클래스 라이브러리는 다양 한 달력 클래스에서 파생 되는 모든 포함 된 <xref:System.Globalization.Calendar> 클래스입니다.  다음 창이 여기에 포함됩니다.  
  
-   <xref:System.Globalization.ChineseLunisolarCalendar> 클래스  
-   <xref:System.Globalization.EastAsianLunisolarCalendar> 클래스  
-   <xref:System.Globalization.GregorianCalendar> 클래스  
-   <xref:System.Globalization.HebrewCalendar> 클래스  
-   <xref:System.Globalization.HijriCalendar> 클래스  
-   <xref:System.Globalization.JapaneseCalendar> 클래스  
-   <xref:System.Globalization.JapaneseLunisolarCalendar> 클래스  
-   <xref:System.Globalization.JulianCalendar> 클래스  
-   <xref:System.Globalization.KoreanCalendar> 클래스  
-   <xref:System.Globalization.KoreanLunisolarCalendar> 클래스  
-   <xref:System.Globalization.PersianCalendar> 클래스  
-   <xref:System.Globalization.TaiwanCalendar> 클래스  
-   <xref:System.Globalization.TaiwanLunisolarCalendar> 클래스  
-   <xref:System.Globalization.ThaiBuddhistCalendar> 클래스  
-   <xref:System.Globalization.UmAlQuraCalendar> 클래스  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

각 문화권에 해당 읽기 전용으로 정의 된 기본 달력을 사용 하 여 <xref:System.Globalization.CultureInfo.Calendar%2A?displayProperty=nameWithType> 속성입니다. 각 문화권의 읽기 전용으로 정의 하는 하나 이상의 달력을 지원할 수 있습니다 <xref:System.Globalization.CultureInfo.OptionalCalendars%2A?displayProperty=nameWithType> 속성입니다. 현재 사용 하는 특정 달력 <xref:System.Globalization.CultureInfo> 하 여 개체가 정의 된 해당 <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType> 속성입니다. 있는 달력 중 하나 여야 합니다 <xref:System.Globalization.CultureInfo.OptionalCalendars%2A?displayProperty=nameWithType> 배열입니다.  
  
문화권의 현재 달력은 해당 문화권에 대 한 모든 서식 지정 작업에 사용 됩니다. 예를 들어, 태국 불교식 문화권의 기본 달력은 요소로 표시 되는 태국 불교식 달력을 <xref:System.Globalization.ThaiBuddhistCalendar> 클래스입니다.  경우는 <xref:System.Globalization.CultureInfo> 태국 불교식 문화권을 나타내는 개체를 날짜 및 시간 형식 지정 작업 사용, 태국 불교식 달력 기본적으로 사용 됩니다. 경우에 양력을 사용 되는 문화권의 <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType> 속성이 변경 되 면 다음 예제와 같이:  

<a name="calendars-01"></a>  
[!code-csharp-interactive[System.DateTime.Calendar#1](~/samples/snippets/csharp/System.DateTime/Calendar.cs#1)]
[!code-vb[System.DateTime.Calendar#1](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#1)]  

문화권의 현재 달력 다음 예와 같이 해당 문화권에 대 한 모든 구문 분석 작업에도 사용 됩니다.  
  
<a name="calendars-02"></a>  
[!code-csharp-interactive[System.DateTime.Calendar#2](~/samples/snippets/csharp/System.DateTime/Calendar.cs#2)]
[!code-vb[System.DateTime.Calendar#2](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#2)]  

인스턴스화할를 <xref:System.DateTime> 를 호출 하 여 특정 달력의 날짜 및 시간 요소 (연도, 월 및 일 수)를 사용 하 여 값을 [DateTime 생성자](xref:System.DateTime.%23ctor%2A) 포함 하는 `calendar` 매개 변수 및 전달 된 <xref:System.Globalization.CultureInfo.Calendar%2A>해당 달력을 나타내는 개체입니다. 다음 예에서는 날짜 및 시간 요소를 <xref:System.Globalization.ThaiBuddhistCalendar> 달력입니다.  
  
<a name="calendars-03"></a>  
[!code-csharp-interactive[System.DateTime.Calendar#3](~/samples/snippets/csharp/System.DateTime/Calendar.cs#3)]
[!code-vb[System.DateTime.Calendar#3](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#3)]  

<xref:System.DateTime> 포함 하지 않는 생성자를 `calendar` 매개 변수는 날짜 및 시간 요소 그레고리오력의 단위로 표현 됩니다 하는 것으로 가정 합니다.  
  
다른 모든 <xref:System.DateTime> 속성 및 메서드 양력을 사용 합니다. 예를 들어 합니다 <xref:System.DateTime.Year%2A?displayProperty=nameWithType> 일반 달력의 연도 반환 하는 속성 및 <xref:System.DateTime.IsLeapYear%28System.Int32%29?displayProperty=nameWithType> 가정 메서드를 `year` 매개 변수는 일반 달력의 연간 합니다.  각 <xref:System.DateTime> 양력을 사용 하는 멤버의 해당 멤버가 <xref:System.Globalization.CultureInfo.Calendar%2A> 특정 달력을 사용 하는 클래스입니다. 예를 들어 합니다 <xref:System.Globalization.Calendar.GetYear%2A?displayProperty=nameWithType> 메서드는 특정 달력의 연도 반환 합니다. 및 <xref:System.Globalization.Calendar.IsLeapYear%2A?displayProperty=nameWithType> 해석 하는 메서드를 `year` 특정 달력의 연도 숫자 매개 변수. 다음 예제에서는 둘 다를 <xref:System.DateTime> 및 해당 멤버는 <xref:System.Globalization.ThaiBuddhistCalendar> 클래스입니다.  
  
<a name="calendars-04"></a>  
[!code-csharp-interactive[System.DateTime.Calendar#4](~/samples/snippets/csharp/System.DateTime/Calendar.cs#4)]
[!code-vb[System.DateTime.Calendar#4](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#4)]  

합니다 <xref:System.DateTime> 구조에 포함 됩니다는 <xref:System.DateTime.DayOfWeek%2A> 양력에서 일 주를 반환 하는 속성입니다. 해당 연도의 주 번호를 검색할 수 있는 멤버는 포함 되지 않습니다. 해당 연도의 주를 검색 하려면 개별 달력의 호출 <xref:System.Globalization.Calendar.GetWeekOfYear%2A?displayProperty=nameWithType> 메서드. 다음 예제에서 이에 대해 설명합니다.  
  
<a name="calendars-05"></a>  
[!code-csharp-interactive[System.DateTime.Calendar#5](~/samples/snippets/csharp/System.DateTime/Calendar.cs#5)]
[!code-vb[System.DateTime.Calendar#5](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#5)]  

날짜 및 달력에 대 한 자세한 내용은 참조 하세요. [달력을 사용 하 여 작업](~/docs/standard/datetime/working-with-calendars.md)합니다.  
  
### <a name="persisting-datetime-values"></a>날짜/시간 값 유지  

유지할 수 있습니다 <xref:System.DateTime> 네 가지 방법으로 값:  
  
-   있습니다 [문자열로 변환한](#persisting-values-as-strings) 하 고 문자열을 유지 합니다.  
-   있습니다 [64 비트 정수 값으로 변환한](#persisting-values-as-integers) (값은 <xref:System.DateTime.Ticks%2A> 속성) 정수를 유지 합니다.  
-   있습니다 [날짜/시간 값을 serialize](#serializing-datetime-values)합니다.  
-   있습니다 [표준 시간대 정보와 함께 날짜/시간 값을 serialize](#serializing-datetime-and-time-zone-data)합니다.  
  
복원 하는 루틴 확인 해야 합니다 <xref:System.DateTime> 값 데이터가 손실 되거나 또는 선택 하는 방법에 관계 없이 예외를 throw 하지 않습니다. <xref:System.DateTime> 값은 왕복 해야합니다. 즉, 원래 값과 복원 동일 해야 합니다. 경우에 원래 <xref:System.DateTime> 값 나타내는 단일 시간 인스턴스에, 복원 된 경우 시간의 동일한 순간을 식별 해야 합니다.  
  
#### <a name="persisting-values-as-strings"></a>값을 문자열로 유지  

성공적으로 복원 하려면 <xref:System.DateTime> 유지 되는 값을 문자열로 같은이 규칙을 따릅니다.  
  
-   동일한 가정을 유지 한 경우 문자열을 복원 하면 culture 별 서식 지정 하는 방법에 대 한 합니다. 현재 문화권이에 저장 된 시스템의 문화권에서 다른 시스템에서 문자열을 복원할 수 있도록 되도록 호출을 <xref:System.DateTime.ToString%2A> 고정 문화권의 규칙을 사용 하 여 문자열을 저장 하는 오버 로드 합니다. 호출 된 <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> 또는 <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> 고정 문화권의 규칙을 사용 하 여 문자열을 복원 하는 오버 로드 합니다. 사용 하지 마십시오 합니다 <xref:System.DateTime.ToString>, <xref:System.DateTime.Parse%28System.String%29>, 또는 <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29> 현재 스레드 문화권의 규칙을 사용 하는 오버 로드 합니다.  
  
-   날짜 시간의 단일 순간을 나타내는 경우 시간 경우 복원 된 다른 표준 시간대에도 동일한 순간을 나타내는 것을 확인 합니다. 변환 된 <xref:System.DateTime> 저장 하기 전에 값을 Utc (협정 세계시). 표준 시간대 정보와 함께 값을 serialize 할 수 있습니다. 이 방법에 대 한 자세한 내용은 참조 하세요. [직렬화 날짜/시간 및 표준 시간대 데이터](#serializing-datetime-and-time-zone-data)입니다.  
  
 유지 하는 경우 가장 일반적인 오류 <xref:System.DateTime> 값을 문자열로 기본 또는 현재 문화권의 서식 규칙을 사용 하는 것입니다. 문제가 현재 문화권 저장 및 문자열을 복원 하는 경우와 다른 경우 발생 합니다. 다음 예제에서는 이러한 문제를 보여 줍니다. 이 경우에 영어 (미국)는 현재 문화권의 서식 규칙을 사용 하는 5 날짜를 저장 합니다. 이 경우에 영어 (영국)는 다른 문화권의 서식 규칙을 사용 하 여 날짜를 복원 합니다. 다른 두 문화권의 서식 규칙 이기 때문에 두 날짜를 복원할 수 없는 하 고 나머지 세 개의 날짜를 올바르게 해석 됩니다. 또한 원래 날짜 및 시간 값을 나타내는 단일 분 시간으로 복원 된 경우 표준 시간대 정보가 손실 되므로 시간이 올바르지 않습니다.  
  
<a name="persistence-01"></a>  
[!code-csharp[System.DateTime.Persistence#1](~/samples/snippets/csharp/System.DateTime/Persistence.cs#1)]
[!code-vb[System.DateTime.Persistence#1](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#1)]  

왕복 <xref:System.DateTime> 다음이 단계를 성공적으로 수행 하는 값:  
  
1.  값은 시간의 단일 시점을 나타내는 경우 변환 현지 시간에서 UTC로 호출 하 여는 <xref:System.DateTime.ToUniversalTime%2A> 메서드.  
1.  날짜를 호출 하 여 해당 문자열 표현으로 변환할 합니다 <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29> 또는 <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> 오버 로드 합니다. 고정 문화권의 서식 규칙을 사용 하 여 지정 하 여 <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> 으로 `provider` 인수입니다. "O" 또는 "R" 표준 서식 문자열을 사용 하 여 값을 왕복 해야 하는 것을 지정 합니다.  
  
복원 된 지속형 <xref:System.DateTime> 값 데이터 손실 없이 다음이 단계를 수행 합니다.  
  
1.  호출 하 여 데이터를 구문 분석 합니다 <xref:System.DateTime.ParseExact%2A> 또는 <xref:System.DateTime.TryParseExact%2A> 오버 로드 합니다. 지정 <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> 으로 `provider` 인수와 동일한 표준 서식 문자열 사용에 대 한 사용을 `format` 변환 하는 동안 인수입니다. 포함 된 <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> 값을 `styles` 인수입니다.  
1.  경우는 <xref:System.DateTime> 값 호출 시간 내에 단일 순간을 나타내는 <xref:System.DateTime.ToLocalTime%2A> UTC에서 현지 시간으로 구문 분석 된 날짜를 변환 하는 방법입니다.  
  
다음 예제에서는 고정 문화권 및 "O" 표준 서식 문자열을 사용 하 여 되도록 <xref:System.DateTime> 값 저장 및 복원 시간 시스템, 문화권 또는 원본 및 대상 시스템의 표준 시간대에 관계 없이 동일한 순간을 나타냅니다.  
  
<a name="persistence-02"></a>  
[!code-csharp[System.DateTime.Persistence#2](~/samples/snippets/csharp/System.DateTime/Persistence.cs#2)]
[!code-vb[System.DateTime.Persistence#2](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#2)]  

#### <a name="persisting-values-as-integers"></a>보존 값을 정수로  

날짜 및 시간을 유지할 수 있습니다는 <xref:System.Int64> 틱 수를 나타내는 값입니다. 이 경우 시스템의 문화권을 고려해 야 할 없는 <xref:System.DateTime> 값이 유지 및 복원 합니다.  
  
유지 하는 <xref:System.DateTime> 정수는 값:  
  
-   경우는 <xref:System.DateTime> 값이 시간에 단일 순간을 나타내는 호출 하 여 UTC로 변환 합니다 <xref:System.DateTime.ToUniversalTime%2A> 메서드.  
-   가 나타내는 틱 수를 검색 합니다 <xref:System.DateTime> 값에서 해당 <xref:System.DateTime.Ticks%2A> 속성입니다.  
  
복원 하는 <xref:System.DateTime> 정수로 유지 된 값:  
  
1.  새 <xref:System.DateTime> 전달 하 여 개체를 <xref:System.Int64> 값을 <xref:System.DateTime.%23ctor%28System.Int64%29> 생성자입니다.  
1.  경우는 <xref:System.DateTime> 값을 단일 시점을 나타내며, 변환 UTC에서 현지 시간으로 호출 하 여는 <xref:System.DateTime.ToLocalTime%2A> 메서드.  
  
다음 예제에서는 배열을 계속 되 면 <xref:System.DateTime> 미국의 시스템에는 정수 값 표시합니다. UTC 표준 시간대의 시스템에 복원 합니다. 정수를 포함 하는 파일에 포함 되어는 <xref:System.Int32> 총 수를 나타내는 값 <xref:System.Int64> 바로 뒤에 해당 하는 값입니다.  
  
<a name="persistence-03"></a>  
[!code-csharp[System.DateTime.Persistence#3](~/samples/snippets/csharp/System.DateTime/Persistence.cs#3)]
[!code-vb[System.DateTime.Persistence#3](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#3)]  

<a name="serializing-datetime-values"></a>
#### <a name="serializing-datetime-values"></a>날짜/시간 값을 직렬화합니다.  

유지할 수 있습니다 <xref:System.DateTime> 값 스트림 또는 파일 및 다음 복원 하는 serialization을 통해 해당 deserialization을 통해. <xref:System.DateTime> 데이터가 일부 지정 된 개체 형식으로 직렬화 됩니다. 개체가 deserialize 될 때 복원 됩니다. 포맷터 또는 직렬 변환기와 같은 <xref:System.Xml.Serialization.XmlSerializer> 또는 <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter>, serialization 및 deserialization 프로세스를 처리 합니다. Serialization 및.NET Framework에서 지원 되는 serialization 형식에 대 한 자세한 내용은 참조 하세요. [Serialization](~/docs/standard/serialization/index.md)합니다.
  
다음 예제에서는 합니다 <xref:System.Xml.Serialization.XmlSerializer> serialize 및 deserialize 하는 클래스 <xref:System.DateTime> 값입니다. 값은 21 세기의 모든 윤년 일을 나타냅니다. 이 예제에서는 현재 문화권이 영어 (영국) 인 시스템에서 실행 되는 경우 출력 결과를 나타냅니다. 역직렬화 한 때문에 <xref:System.DateTime> 개체 자체 코드를 날짜 및 시간 형식의 문화적 차이 처리할 필요가 없습니다.  
  
<a name="persistence-04"></a>  
[!code-csharp[System.DateTime.Persistence#4](~/samples/snippets/csharp/System.DateTime/Persistence.cs#4)]
[!code-vb[System.DateTime.Persistence#4](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#4)]  

이전 예제에서는 시간 정보를 포함 하지 않습니다. 경우는 <xref:System.DateTime> 현지 시간에서 UTC로 변환 호출 하 여 직렬화 하기 전에, 값 잠시 시간에서을 나타내고 현지 시간으로 표현 됩니다는 <xref:System.DateTime.ToUniversalTime%2A> 메서드. 후이 deserialize 할 변환할 UTC에서 현지 시간으로 호출 하 여는 <xref:System.DateTime.ToLocalTime%2A> 메서드. 다음 예제에서는 합니다 <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter> serialize 할 클래스 <xref:System.DateTime> 미국에 있는 시스템의 데이터 태평양 표준 시간대 및 미국에 있는 시스템에서 deserialize 하는 데 중앙 표준 시간대입니다.  
  
<a name="persistence-05"></a>  
[!code-csharp[System.DateTime.Persistence#5](~/samples/snippets/csharp/System.DateTime/Persistence.cs#5)]
[!code-vb[System.DateTime.Persistence#5](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#5)]  

<a name="serializing-datetime-and-time-zone-data"></a>
#### <a name="serializing-datetime-and-time-zone-data"></a>날짜/시간 및 표준 시간대 데이터를 직렬화 하는 작업  

이전 예제는 모두 있다고 가정 <xref:System.DateTime> 값은 현지 시간으로 표현 됩니다. 원본 시스템과 대상 시스템에서 시간의 동일한 순간을 반영 하므로 UTC와 현지 시간 사이의 값을 변환 하는 코드. <xref:System.DateTime> 값에 local 이외의 표준 시간대와 UTC 시간에 또한 반영할 수 있습니다. 때문에 합니다 <xref:System.DateTime> 구조체가 표준 시간대 인식, 모두 serialize 해야 합니다 <xref:System.DateTime> 값 및 <xref:System.TimeZoneInfo> 해당 표준 시간대를 나타내는 개체입니다. 해당 필드를 모두 포함 하는 형식 만들기는 <xref:System.DateTime> 값 및 해당 표준 시간대입니다. 다음 예제에서는 정의 `DateWithTimeZone` 구조입니다.  
  
<a name="persistence-06"></a>  
[!code-csharp[System.DateTime.Persistence#6](~/samples/snippets/csharp/System.DateTime/DateWithTimeZone.cs#6)]
[!code-vb[System.DateTime.Persistence#6](~/samples/snippets/visualbasic/System.DateTime/DateWithTimeZone.vb#6)]  

> [!IMPORTANT]
>  합니다 `DateWithTimeZone` 구조를 직렬화 및 역직렬화 배열을 다음 두 예제에서 사용 하는 `DateWithTimeZone` 개체입니다. 이 문서에서 예제의 전체 집합에 대 한 소스에서 볼 수 있습니다 [Visual Basic](https://github.com/dotnet/samples/tree/master/snippets/visualbasic/System.DateTime/) 또는 [C#](https://github.com/dotnet/samples/tree/master/snippets/csharp/System.DateTime/) GitHub의 docs 리포지토리에서 합니다.
  
사용 하 여는 `DateWithTimeZone` 구조, 날짜 및 시간 표준 시간대 정보와 함께 저장할 수 있습니다. 다음 예제에서는 합니다 <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter> 배열을 serialize 하는 클래스 `DateWithTimeZone` 개체입니다.  
  
[!code-csharp[System.DateTime.Persistence#7](~/samples/snippets/csharp/System.DateTime/Persistence.cs#7)]
[!code-vb[System.DateTime.Persistence#7](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#7)]  

다음 예제에서는 호출 된 <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize%2A?displayProperty=nameWithType> deserialize 하는 방법입니다.  
  
[!code-csharp[System.DateTime.Persistence#8](~/samples/snippets/csharp/System.DateTime/Persistence.cs#8)]
[!code-vb[System.DateTime.Persistence#8](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#8)]  

### <a name="datetime-vs-timespan"></a>DateTime vs입니다. TimeSpan  

<xref:System.DateTime> 및 <xref:System.TimeSpan> 하는 값 형식이 다를 <xref:System.DateTime> 시점의 시간을 나타내는 반면를 <xref:System.TimeSpan> 시간 간격을 나타냅니다. 인스턴스 하나를 뺄 수 있습니다 <xref:System.DateTime> 가져오려고 간에 <xref:System.TimeSpan> 사이의 시간 간격을 나타내는 개체입니다. 또는 양수를 추가할 수 있습니다 <xref:System.TimeSpan> 현재 <xref:System.DateTime> 가져오려고를 <xref:System.DateTime> 이후 날짜를 나타내는 값입니다.  
  
에 더하거나에서 시간 간격을 뺄 수는 <xref:System.DateTime> 개체입니다. 음수 또는 양수 시간 간격 수와 같은 틱을 단위로 표시할 수 있습니다 (초), 또는 <xref:System.TimeSpan> 개체입니다.  

### <a name="comparing-for-equality-within-tolerance"></a>허용 오차 내에서 동일한 지 비교

에 대 한 같음 비교 <xref:System.DateTime> 값은 정확 하 게 합니다. 즉, 두 값 수가 같은 것으로 간주 되어야 하는 틱으로 표현 해야 합니다. 해당 정밀도 불필요 하거나 더 많은 응용 프로그램에 대 한 잘못 된 경우가 많습니다. 테스트 하려는 경우가 많습니다 <xref:System.DateTime> 개체가 **길쭉한**합니다. 

다음 예제에서는 대략적으로 비교 하는 방법을 해당 <xref:System.DateTime> 값입니다. 같은 선언 하는 경우에 차이의 약간의 여백의 허용 합니다.  
  
<a name="comparison-01"></a> [!code-csharp[System.DateTime.Comparisons#1](~/samples/snippets/csharp/System.DateTime/DateTimeComparisons.cs#1)]
[!code-vb[System.DateTime.Comparisons#1](~/samples/snippets/visualbasic/System.DateTime/DateTimeComparisons.vb#1)]  

### <a name="com-interop-considerations"></a>COM interop 고려 사항  

<xref:System.DateTime> 관리 되는 응용 프로그램을 다시 전송한 다음 COM 응용 프로그램에 전송 되는 값을 왕복 이라고 합니다. 그러나를 <xref:System.DateTime> 한 번만 지정 하는 값 않습니다 예상할 수 있듯이 라운드트립 합니다.  
  
라운드트립 오후 3 시, 마지막 날짜 및 시간과 같은 시간만 서 기 1899 년 12 월 30 일 경우 오후 3, 1 월 1 일 대신 서 기 0001 오후 3 시에 .NET Framework 및 COM 기본 날짜 시간 동안에 지정 된 경우를 가정 합니다. .NET Framework에는 서 기 0001 년 1 월 1 일을 기준 날짜로 가정 하는 동안 COM 시스템 기, 1899 년 12 월 30 일의 기본 날짜를 가정 하는 반면  
  
특수 한 처리에 사용 하는 com 형식으로 변환 하는 수행 시간 동안에.NET Framework에서 COM에 전달 되 면 .NET Framework에 COM에서 한 번만 전달 되 면 올바른 날짜와 시간 이거나 그 이전인 1899 년 12 월 30 일 손상 될 수 있으므로 없습니다 특별 한 처리가 수행 됩니다. 해당 왕복 COM에서 시작 하는 날짜,.NET Framework 및 COM 날짜를 유지 합니다.  
  
.NET Framework 및 COM의 동작 버전임을 응용 프로그램에 대 한 왕복 작업에는 <xref:System.DateTime> 만 지정 하는 한 번, 응용 프로그램을 수정 하거나 마지막에서 잘못 된 날짜를 무시 해야 합니다. <xref:System.DateTime> 개체입니다.  
     
 ]]></format>
    </remarks>
    <threadsafe>이 유형의 모든 멤버는 스레드로부터 안전 합니다. 인스턴스 상태를 수정 하려면 표시 되는 멤버는 실제로 새 값을 사용 하 여 초기화 된 새 인스턴스를 반환 합니다. 으로 다른 형식을 사용 하 여이 형식의 인스턴스를 포함 하는 공유 변수를 읽고 쓰는로 보호 되어야 스레드로부터 안전을 보장 하려면 잠금.</threadsafe>
    <altmember cref="T:System.DateTimeOffset" />
    <altmember cref="T:System.TimeSpan" />
    <altmember cref="T:System.Globalization.Calendar" />
    <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
    <altmember cref="T:System.TimeZoneInfo" />
    <related type="Article" href="~/docs/standard/datetime/choosing-between-datetime.md">DateTime, DateTimeOffset, TimeSpan 및 TimeZoneInfo 중 선택</related>
    <related type="Article" href="~/docs/standard/datetime/working-with-calendars.md">달력 작업</related>
    <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/NET-Framework-4-Formatting-9c4dae8d">샘플: .NET Framework 4 서식 유틸리티</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.DateTime" /> 구조체의 새 인스턴스를 초기화합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (long ticks);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 ticks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ticks As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(long ticks);" />
      <MemberSignature Language="F#" Value="new DateTime : int64 -&gt; DateTime" Usage="new System.DateTime ticks" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="ticks">그레고리오력에서 0001년 1월 1일 00:00:00.000부터 경과한 100나노초 간격의 수로 표현한 날짜와 시간입니다.</param>
        <summary><see cref="T:System.DateTime" /> 구조체의 새 인스턴스를 지정된 틱 수로 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.Kind%2A> 속성이 <xref:System.DateTimeKind.Unspecified>으로 초기화됩니다.  
  
 날짜 및 시간 데이터 또는 제한 된 수준의 표준 시간대는 이식성 인식의 중요 한 응용 프로그램을 사용할 수 있습니다 해당 <xref:System.DateTimeOffset> 생성자입니다.  
  
   
  
## Examples  
 다음 예제에서는 중 하나는 <xref:System.DateTime> 생성자입니다.  
  
 [!code-cpp[datetime.ctor_Int64#1](~/samples/snippets/cpp/VS_Snippets_CLR/datetime.ctor_Int64/CPP/ticks.cpp#1)]
 [!code-csharp[datetime.ctor_Int64#1](~/samples/snippets/csharp/VS_Snippets_CLR/datetime.ctor_Int64/CS/ticks.cs#1)]
 [!code-vb[datetime.ctor_Int64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/datetime.ctor_Int64/VB/ticks.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ticks" />가 <see cref="F:System.DateTime.MinValue" />보다 작거나 <see cref="F:System.DateTime.MaxValue" />보다 큽니다.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (long ticks, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 ticks, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int64,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ticks As Long, kind As DateTimeKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(long ticks, DateTimeKind kind);" />
      <MemberSignature Language="F#" Value="new DateTime : int64 * DateTimeKind -&gt; DateTime" Usage="new System.DateTime (ticks, kind)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="kind" Type="System.DateTimeKind" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="ticks">그레고리오력에서 0001년 1월 1일 00:00:00.000부터 경과한 100나노초 간격의 수로 표현한 날짜와 시간입니다.</param>
        <param name="kind"><paramref name="ticks" />가 현지 시간 또는 UTC(협정 세계시)를 지정하는지, 아니면 둘 다 지정하지 않는지를 나타내는 열거형 값 중 하나입니다.</param>
        <summary><see cref="T:System.DateTime" /> 구조체의 새 인스턴스를 지정된 틱 수 및 UTC(협정 세계시) 또는 현지 시간으로 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 날짜 및 시간 데이터 또는 제한 된 수준의 표준 시간대는 이식성 인식의 중요 한 응용 프로그램을 사용할 수 있습니다 해당 <xref:System.DateTimeOffset> 생성자입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ticks" />가 <see cref="F:System.DateTime.MinValue" />보다 작거나 <see cref="F:System.DateTime.MaxValue" />보다 큽니다.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="kind" />가 <see cref="T:System.DateTimeKind" /> 값 중 하나가 아닙니다.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int -&gt; DateTime" Usage="new System.DateTime (year, month, day)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">연도(1부터 9999까지)</param>
        <param name="month">월(1부터 12까지)</param>
        <param name="day">일(1부터 <paramref name="month" />에 있는 일수까지)</param>
        <summary><see cref="T:System.DateTime" /> 구조체의 새 인스턴스를 특정 연도, 월 및 날짜로 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 생성자는 해석 `year`, `month`, 및 `day` 연도, 월 및 그레고리오 력으로 날짜를 합니다. 인스턴스화하는 <xref:System.DateTime> 호출 다른 일정에서 연도, 월 및 일을 사용 하 여 값을 <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> 생성자입니다.  
  
 결과 대 한 하루 중 시간 <xref:System.DateTime> 은 자정 (00: 00:00). <xref:System.DateTime.Kind%2A> 속성이 <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>으로 초기화됩니다.  
  
   
  
## Examples  
 다음 예제에서는 합니다 <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%29> 인스턴스화하는 생성자를 <xref:System.DateTime> 값입니다. 또한 예제에이 오버 로드를 만듭니다를 <xref:System.DateTime> 인 시간 구성 요소가 자정 값 (또는 0:00).  
  
 [!code-csharp[System.DateTime.Constructor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#1)]
 [!code-vb[System.DateTime.Constructor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" />가 1보다 작거나 9999보다 큽니다.  
  
또는 
 <paramref name="month" />가 1보다 작거나 12보다 큽니다.  
  
또는 
 <paramref name="day" />가 1보다 작거나 <paramref name="month" />의 일 수보다 큽니다.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, System.Globalization.Calendar calendar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, class System.Globalization.Calendar calendar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, System::Globalization::Calendar ^ calendar);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * System.Globalization.Calendar -&gt; DateTime" Usage="new System.DateTime (year, month, day, calendar)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="month" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="day" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="year">연도(1부터 <paramref name="calendar" />에 있는 연수까지)</param>
        <param name="month">월(1부터 <paramref name="calendar" />에 있는 월수까지)</param>
        <param name="day">일(1부터 <paramref name="month" />에 있는 일수까지)</param>
        <param name="calendar"><paramref name="year" />, <paramref name="month" /> 및 <paramref name="day" />를 해석하는 데 사용되는 달력입니다.</param>
        <summary><see cref="T:System.DateTime" /> 구조체의 새 인스턴스를 지정된 달력의 지정된 연도, 월 및 날짜로 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 결과 대 한 하루 중 시간 <xref:System.DateTime> 은 자정 (00: 00:00). <xref:System.DateTime.Kind%2A> 속성이 <xref:System.DateTimeKind.Unspecified>으로 초기화됩니다.  
  
 허용 되는 값 `year`, `month`, 및 `day` 종속 `calendar`합니다. 지정 된 날짜 및 시간 사용 하 여 표시할 수 없으면 예외가 throw 됩니다 `calendar`합니다.  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

 합니다 <xref:System.Globalization> 비롯 한 여러 일정을 제공 하는 네임 스페이스 <xref:System.Globalization.GregorianCalendar> 및 <xref:System.Globalization.JulianCalendar>합니다.  
  
   
  
## Examples  
 다음 예제에서는 합니다 <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> 인스턴스화하는 생성자 두 번 두 <xref:System.DateTime> 값입니다. 첫 번째 호출 인스턴스화하는 <xref:System.DateTime> 사용 하 여 값을 <xref:System.Globalization.PersianCalendar> 개체입니다. 페르시아력을 문화권의 기본 달력으로 지정할 수 없습니다, 하므로 페르시아 력의 날짜를 표시를 개별적으로 호출을 해야 하는 해당 <xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType>, <xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType>, 및 <xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType> 메서드. 인스턴스화하는 두 번째 생성자를 호출 하는 <xref:System.DateTime> 사용 하 여 값을 <xref:System.Globalization.HijriCalendar> 개체입니다. 이 예제에서는 현재 문화권을 아랍어 (시리아) 변경 하 고 회교식 달력에 현재 문화권의 기본 달력을 변경 합니다. 현재 문화권의 기본 달력을 회교식 이므로 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 메서드 날짜 서식을 지정 하는 데 사용 합니다. 이전 현재 문화권 (여기서는 영어 (미국)이 경우)를 복원할 때의 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 메서드는 현재 문화권의 기본 양력을 사용 하 여 날짜 서식 지정 합니다.  
  
 [!code-csharp[System.DateTime.Constructor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample2.cs#2)]
 [!code-vb[System.DateTime.Constructor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="calendar" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" />가 <paramref name="calendar" />에서 지원되는 범위에 없습니다.  
  
또는 
 <paramref name="month" />가 1보다 작거나 <paramref name="calendar" />의 개월 수보다 큽니다.  
  
또는 
 <paramref name="day" />가 1보다 작거나 <paramref name="month" />의 일 수보다 큽니다.</exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">연도(1부터 9999까지)</param>
        <param name="month">월(1부터 12까지)</param>
        <param name="day">일(1부터 <paramref name="month" />에 있는 일수까지)</param>
        <param name="hour">시(0부터 23까지)</param>
        <param name="minute">분(0부터 59까지)</param>
        <param name="second">초(0부터 59까지)</param>
        <summary><see cref="T:System.DateTime" /> 구조체의 새 인스턴스를 지정된 연도, 월, 날짜, 시, 분 및 초로 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.Kind%2A> 속성이 <xref:System.DateTimeKind.Unspecified>으로 초기화됩니다.  
  
 이 생성자는 해석`year`, `month`, 및 `day` 연도, 월 및 그레고리오 력으로 날짜를 합니다. 인스턴스화하는 <xref:System.DateTime> 호출 다른 일정에서 연도, 월 및 일을 사용 하 여 값을 <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> 생성자입니다.  
  
 날짜 및 시간 데이터 또는 제한 된 수준의 표준 시간대는 이식성 인식의 중요 한 응용 프로그램을 사용할 수 있습니다 해당 <xref:System.DateTimeOffset> 생성자입니다.  
  
   
  
## Examples  
 다음 예제에서는 합니다 <xref:System.DateTime.%23ctor%2A> 인스턴스화하는 생성자를 <xref:System.DateTime> 값입니다.  
  
 [!code-csharp[System.DateTime.Constructor#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#3)]
 [!code-vb[System.DateTime.Constructor#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" />가 1보다 작거나 9999보다 큽니다.  
  
또는 
 <paramref name="month" />가 1보다 작거나 12보다 큽니다.  
  
또는 
 <paramref name="day" />가 1보다 작거나 <paramref name="month" />의 일 수보다 큽니다.  
  
또는 
 <paramref name="hour" />가 0보다 작거나 23보다 큽니다.  
  
또는 
 <paramref name="minute" />가 0보다 작거나 59보다 큽니다.  
  
또는 
 <paramref name="second" />가 0보다 작거나 59보다 큽니다.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, kind As DateTimeKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, DateTimeKind kind);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * DateTimeKind -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, kind)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="month" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="day" Type="System.Int32" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="hour" Type="System.Int32" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="minute" Type="System.Int32" Index="4" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="second" Type="System.Int32" Index="5" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="kind" Type="System.DateTimeKind" Index="6" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="year">연도(1부터 9999까지)</param>
        <param name="month">월(1부터 12까지)</param>
        <param name="day">일(1부터 <paramref name="month" />에 있는 일수까지)</param>
        <param name="hour">시(0부터 23까지)</param>
        <param name="minute">분(0부터 59까지)</param>
        <param name="second">초(0부터 59까지)</param>
        <param name="kind"><paramref name="year" />, <paramref name="month" />, <paramref name="day" />, <paramref name="hour" />, <paramref name="minute" /> 및 <paramref name="second" />가 현지 시간 또는 UTC(협정 세계시)를 지정하는지, 아니면 둘 다 지정하지 않는지를 나타내는 열거형 값 중 하나입니다.</param>
        <summary><see cref="T:System.DateTime" /> 구조체의 새 인스턴스를 지정된 연도, 월, 일, 시, 분, 초 및 UTC(협정 세계시) 또는 현지 시간으로 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 생성자는 해석`year`, `month`, 및 `day` 연도, 월 및 그레고리오 력으로 날짜를 합니다. 인스턴스화하는 <xref:System.DateTime> 호출 다른 일정에서 연도, 월 및 일을 사용 하 여 값을 <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.DateTimeKind%29> 생성자입니다.  
  
 날짜 및 시간 데이터 또는 제한 된 수준의 표준 시간대는 이식성 인식의 중요 한 응용 프로그램을 사용할 수 있습니다 해당 <xref:System.DateTimeOffset> 생성자입니다.  
  
   
  
## Examples  
 다음 예제에서는 합니다 <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.DateTimeKind%29> 인스턴스화하는 생성자를 <xref:System.DateTime> 값입니다.  
  
 [!code-csharp[System.DateTime.Constructor#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#7)]
 [!code-vb[System.DateTime.Constructor#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" />가 1보다 작거나 9999보다 큽니다.  
  
또는 
 <paramref name="month" />가 1보다 작거나 12보다 큽니다.  
  
또는 
 <paramref name="day" />가 1보다 작거나 <paramref name="month" />의 일 수보다 큽니다.  
  
또는 
 <paramref name="hour" />가 0보다 작거나 23보다 큽니다.  
  
또는 
 <paramref name="minute" />가 0보다 작거나 59보다 큽니다.  
  
또는 
 <paramref name="second" />가 0보다 작거나 59보다 큽니다.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="kind" />가 <see cref="T:System.DateTimeKind" /> 값 중 하나가 아닙니다.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, System.Globalization.Calendar calendar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, class System.Globalization.Calendar calendar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, System::Globalization::Calendar ^ calendar);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * System.Globalization.Calendar -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, calendar)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="month" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="day" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="hour" Type="System.Int32" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="minute" Type="System.Int32" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="second" Type="System.Int32" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" Index="6" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="year">연도(1부터 <paramref name="calendar" />에 있는 연수까지)</param>
        <param name="month">월(1부터 <paramref name="calendar" />에 있는 월수까지)</param>
        <param name="day">일(1부터 <paramref name="month" />에 있는 일수까지)</param>
        <param name="hour">시(0부터 23까지)</param>
        <param name="minute">분(0부터 59까지)</param>
        <param name="second">초(0부터 59까지)</param>
        <param name="calendar"><paramref name="year" />, <paramref name="month" /> 및 <paramref name="day" />를 해석하는 데 사용되는 달력입니다.</param>
        <summary><see cref="T:System.DateTime" /> 구조체의 새 인스턴스를 지정된 달력에서 지정된 연도, 월, 일, 시, 분 및 초로 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.Kind%2A> 속성이 <xref:System.DateTimeKind.Unspecified>으로 초기화됩니다.  
  
 허용 되는 값 `year`, `month`, 및 `day` 종속 `calendar`합니다. 지정 된 날짜 및 시간 사용 하 여 표시할 수 없으면 예외가 throw 됩니다 `calendar`합니다.  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

 합니다 <xref:System.Globalization> 비롯 한 여러 일정을 제공 하는 네임 스페이스 <xref:System.Globalization.GregorianCalendar> 및 <xref:System.Globalization.JulianCalendar>합니다.  
  
   
  
## Examples  
 다음 예제에서는 합니다 <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> 인스턴스화하는 생성자 두 번 두 <xref:System.DateTime> 값입니다. 첫 번째 호출 인스턴스화하는 <xref:System.DateTime> 사용 하 여 값을 <xref:System.Globalization.PersianCalendar> 개체입니다. 페르시아력을 문화권의 기본 달력으로 지정할 수 없습니다, 하므로 페르시아 력의 날짜를 표시를 개별적으로 호출을 해야 하는 해당 <xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType>, <xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType>, 및 <xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType> 메서드. 인스턴스화하는 두 번째 생성자를 호출 하는 <xref:System.DateTime> 사용 하 여 값을 <xref:System.Globalization.HijriCalendar> 개체입니다. 이 예제에서는 현재 문화권을 아랍어 (시리아) 변경 하 고 회교식 달력에 현재 문화권의 기본 달력을 변경 합니다. 현재 문화권의 기본 달력을 회교식 이므로 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 메서드 날짜 서식을 지정 하는 데 사용 합니다. 이전 현재 문화권 (여기서는 영어 (미국)이 경우)를 복원할 때의 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 메서드는 현재 문화권의 기본 양력을 사용 하 여 날짜 서식 지정 합니다.  
  
 [!code-csharp[System.DateTime.Constructor#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample4.cs#4)]
 [!code-vb[System.DateTime.Constructor#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="calendar" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" />가 <paramref name="calendar" />에서 지원되는 범위에 없습니다.  
  
또는 
 <paramref name="month" />가 1보다 작거나 <paramref name="calendar" />의 개월 수보다 큽니다.  
  
또는 
 <paramref name="day" />가 1보다 작거나 <paramref name="month" />의 일 수보다 큽니다.  
  
또는 
 <paramref name="hour" />가 0보다 작거나 23보다 큽니다. 
또는 
 <paramref name="minute" />가 0보다 작거나 59보다 큽니다.  
  
또는 
 <paramref name="second" />가 0보다 작거나 59보다 큽니다.</exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * int -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, millisecond)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">연도(1부터 9999까지)</param>
        <param name="month">월(1부터 12까지)</param>
        <param name="day">일(1부터 <paramref name="month" />에 있는 일수까지)</param>
        <param name="hour">시(0부터 23까지)</param>
        <param name="minute">분(0부터 59까지)</param>
        <param name="second">초(0부터 59까지)</param>
        <param name="millisecond">밀리초(0부터 999까지)</param>
        <summary><see cref="T:System.DateTime" /> 구조체의 새 인스턴스를 지정된 연도, 월, 일, 시, 분, 초 및 밀리초로 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 생성자는 해석`year`, `month`, 및 `day` 연도, 월 및 그레고리오 력으로 날짜를 합니다. 인스턴스화하는 <xref:System.DateTime> 호출 다른 일정에서 연도, 월 및 일을 사용 하 여 값을 <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> 생성자입니다.  
  
 <xref:System.DateTime.Kind%2A> 속성이 <xref:System.DateTimeKind.Unspecified>으로 초기화됩니다.  
  
 날짜 및 시간 데이터 또는 제한 된 수준의 표준 시간대는 이식성 인식의 중요 한 응용 프로그램을 사용할 수 있습니다 해당 <xref:System.DateTimeOffset> 생성자입니다.  
  
   
  
## Examples  
 다음 예제에서는 합니다 <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%29> 인스턴스화하는 생성자를 <xref:System.DateTime> 값입니다.  
  
 [!code-csharp[System.DateTime.Constructor#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#5)]
 [!code-vb[System.DateTime.Constructor#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" />가 1보다 작거나 9999보다 큽니다.  
  
또는 
 <paramref name="month" />가 1보다 작거나 12보다 큽니다.  
  
또는 
 <paramref name="day" />가 1보다 작거나 <paramref name="month" />의 일 수보다 큽니다.  
  
또는 
 <paramref name="hour" />가 0보다 작거나 23보다 큽니다.  
  
또는 
 <paramref name="minute" />가 0보다 작거나 59보다 큽니다.  
  
또는 
 <paramref name="second" />가 0보다 작거나 59보다 큽니다.  
  
또는 
 <paramref name="millisecond" />가 0보다 작거나 999보다 큽니다.</exception>
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer, kind As DateTimeKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, DateTimeKind kind);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * int * DateTimeKind -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, millisecond, kind)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="month" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="day" Type="System.Int32" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="hour" Type="System.Int32" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="minute" Type="System.Int32" Index="4" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="second" Type="System.Int32" Index="5" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="millisecond" Type="System.Int32" Index="6" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="kind" Type="System.DateTimeKind" Index="7" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="year">연도(1부터 9999까지)</param>
        <param name="month">월(1부터 12까지)</param>
        <param name="day">일(1부터 <paramref name="month" />에 있는 일수까지)</param>
        <param name="hour">시(0부터 23까지)</param>
        <param name="minute">분(0부터 59까지)</param>
        <param name="second">초(0부터 59까지)</param>
        <param name="millisecond">밀리초(0부터 999까지)</param>
        <param name="kind"><paramref name="year" />, <paramref name="month" />, <paramref name="day" />, <paramref name="hour" />, <paramref name="minute" />, <paramref name="second" /> 및 <paramref name="millisecond" />가 현지 시간 또는 UTC(협정 세계시)를 지정하는지, 아니면 둘 다 지정하지 않는지를 나타내는 열거형 값 중 하나입니다.</param>
        <summary><see cref="T:System.DateTime" /> 구조체의 새 인스턴스를 지정된 연도, 월, 일, 시, 분, 초, 밀리초 및 UTC(협정 세계시) 또는 현지 시간으로 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 생성자는 해석`year`, `month`, 및 `day` 연도, 월 및 그레고리오 력으로 날짜를 합니다. 인스턴스화하는 <xref:System.DateTime> 호출 다른 일정에서 연도, 월 및 일을 사용 하 여 값을 <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.DateTimeKind%29> 생성자입니다.  
  
 날짜 및 시간 데이터 또는 제한 된 수준의 표준 시간대는 이식성 인식의 중요 한 응용 프로그램을 사용할 수 있습니다 해당 <xref:System.DateTimeOffset> 생성자입니다.  
  
   
  
## Examples  
 다음 예제에서는 합니다 <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.DateTimeKind%29> 인스턴스화하는 생성자를 <xref:System.DateTime> 값입니다.  
  
 [!code-csharp[System.DateTime.Constructor#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#8)]
 [!code-vb[System.DateTime.Constructor#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" />가 1보다 작거나 9999보다 큽니다.  
  
또는 
 <paramref name="month" />가 1보다 작거나 12보다 큽니다.  
  
또는 
 <paramref name="day" />가 1보다 작거나 <paramref name="month" />의 일 수보다 큽니다.  
  
또는 
 <paramref name="hour" />가 0보다 작거나 23보다 큽니다.  
  
또는 
 <paramref name="minute" />가 0보다 작거나 59보다 큽니다.  
  
또는 
 <paramref name="second" />가 0보다 작거나 59보다 큽니다.  
  
또는 
 <paramref name="millisecond" />가 0보다 작거나 999보다 큽니다.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="kind" />가 <see cref="T:System.DateTimeKind" /> 값 중 하나가 아닙니다.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, System.Globalization.Calendar calendar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, class System.Globalization.Calendar calendar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, System::Globalization::Calendar ^ calendar);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * int * System.Globalization.Calendar -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, millisecond, calendar)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="month" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="day" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="hour" Type="System.Int32" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="minute" Type="System.Int32" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="second" Type="System.Int32" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="millisecond" Type="System.Int32" Index="6" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" Index="7" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="year">연도(1부터 <paramref name="calendar" />에 있는 연수까지)</param>
        <param name="month">월(1부터 <paramref name="calendar" />에 있는 월수까지)</param>
        <param name="day">일(1부터 <paramref name="month" />에 있는 일수까지)</param>
        <param name="hour">시(0부터 23까지)</param>
        <param name="minute">분(0부터 59까지)</param>
        <param name="second">초(0부터 59까지)</param>
        <param name="millisecond">밀리초(0부터 999까지)</param>
        <param name="calendar"><paramref name="year" />, <paramref name="month" /> 및 <paramref name="day" />를 해석하는 데 사용되는 달력입니다.</param>
        <summary><see cref="T:System.DateTime" /> 구조체의 새 인스턴스를 지정된 달력에서 지정된 연도, 월, 일, 시, 분, 초 및 밀리초로 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.Kind%2A> 속성이 <xref:System.DateTimeKind.Unspecified>으로 초기화됩니다.  
  
 허용 되는 값 `year`, `month`, 및 `day` 종속 `calendar`합니다. 지정 된 날짜 및 시간 사용 하 여 표시할 수 없으면 예외가 throw 됩니다 `calendar`합니다.  
  
 날짜 및 시간 데이터 또는 제한 된 수준의 표준 시간대는 이식성 인식의 중요 한 응용 프로그램을 사용할 수 있습니다 해당 <xref:System.DateTimeOffset> 생성자입니다.  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

 합니다 <xref:System.Globalization> 비롯 한 여러 일정을 제공 하는 네임 스페이스 <xref:System.Globalization.GregorianCalendar> 및 <xref:System.Globalization.JulianCalendar>합니다.  
  
   
  
## Examples  
 다음 예제에서는 합니다 <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> 인스턴스화하는 생성자 두 번 두 <xref:System.DateTime> 값입니다. 첫 번째 호출 인스턴스화하는 <xref:System.DateTime> 사용 하 여 값을 <xref:System.Globalization.PersianCalendar> 개체입니다. 페르시아력을 문화권의 기본 달력으로 지정할 수 없습니다, 하므로 페르시아 력의 날짜를 표시를 개별적으로 호출을 해야 하는 해당 <xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType>, <xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType>, 및 <xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType> 메서드. 인스턴스화하는 두 번째 생성자를 호출 하는 <xref:System.DateTime> 사용 하 여 값을 <xref:System.Globalization.HijriCalendar> 개체입니다. 이 예제에서는 현재 문화권을 아랍어 (시리아) 변경 하 고 회교식 달력에 현재 문화권의 기본 달력을 변경 합니다. 현재 문화권의 기본 달력을 회교식 이므로 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 메서드 날짜 서식을 지정 하는 데 사용 합니다. 이전 현재 문화권 (여기서는 영어 (미국)이 경우)를 복원할 때의 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 메서드는 현재 문화권의 기본 양력을 사용 하 여 날짜 서식 지정 합니다.  
  
 [!code-csharp[System.DateTime.Constructor#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample6.cs#6)]
 [!code-vb[System.DateTime.Constructor#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample6.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="calendar" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" />가 <paramref name="calendar" />에서 지원되는 범위에 없습니다.  
  
또는 
 <paramref name="month" />가 1보다 작거나 <paramref name="calendar" />의 개월 수보다 큽니다.  
  
또는 
 <paramref name="day" />가 1보다 작거나 <paramref name="month" />의 일 수보다 큽니다.  
  
또는 
 <paramref name="hour" />가 0보다 작거나 23보다 큽니다.  
  
또는 
 <paramref name="minute" />가 0보다 작거나 59보다 큽니다.  
  
또는 
 <paramref name="second" />가 0보다 작거나 59보다 큽니다.  
  
또는 
 <paramref name="millisecond" />가 0보다 작거나 999보다 큽니다.</exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, System.Globalization.Calendar calendar, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, class System.Globalization.Calendar calendar, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar,System.DateTimeKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, System::Globalization::Calendar ^ calendar, DateTimeKind kind);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * int * System.Globalization.Calendar * DateTimeKind -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, millisecond, calendar, kind)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="month" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="day" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="hour" Type="System.Int32" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="minute" Type="System.Int32" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="second" Type="System.Int32" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="millisecond" Type="System.Int32" Index="6" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" Index="7" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="kind" Type="System.DateTimeKind" Index="8" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="year">연도(1부터 <paramref name="calendar" />에 있는 연수까지)</param>
        <param name="month">월(1부터 <paramref name="calendar" />에 있는 월수까지)</param>
        <param name="day">일(1부터 <paramref name="month" />에 있는 일수까지)</param>
        <param name="hour">시(0부터 23까지)</param>
        <param name="minute">분(0부터 59까지)</param>
        <param name="second">초(0부터 59까지)</param>
        <param name="millisecond">밀리초(0부터 999까지)</param>
        <param name="calendar"><paramref name="year" />, <paramref name="month" /> 및 <paramref name="day" />를 해석하는 데 사용되는 달력입니다.</param>
        <param name="kind"><paramref name="year" />, <paramref name="month" />, <paramref name="day" />, <paramref name="hour" />, <paramref name="minute" />, <paramref name="second" /> 및 <paramref name="millisecond" />가 현지 시간 또는 UTC(협정 세계시)를 지정하는지, 아니면 둘 다 지정하지 않는지를 나타내는 열거형 값 중 하나입니다.</param>
        <summary><see cref="T:System.DateTime" /> 구조체의 새 인스턴스를 지정된 달력의 지정된 연도, 월, 일, 시, 분, 초, 밀리초 및 UTC(협정 세계시) 또는 현지 시간으로 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 허용 되는 값 `year`, `month`, 및 `day` 종속 된 매개 변수는 `calendar` 매개 변수입니다. 지정 된 날짜 및 시간 사용 하 여 표시할 수 없으면 예외가 throw 됩니다 `calendar`합니다.  
  
 날짜 및 시간 데이터 또는 제한 된 수준의 표준 시간대는 이식성 인식의 중요 한 응용 프로그램을 사용할 수 있습니다 해당 <xref:System.DateTimeOffset> 생성자입니다.  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

 합니다 <xref:System.Globalization> 비롯 한 여러 일정을 제공 하는 네임 스페이스 <xref:System.Globalization.GregorianCalendar> 및 <xref:System.Globalization.JulianCalendar>합니다.  
  
   
  
## Examples  
 다음 예제에서는 합니다 <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.DateTimeKind%29> 인스턴스화하는 생성자 두 번 두 <xref:System.DateTime> 값입니다. 첫 번째 호출 인스턴스화하는 <xref:System.DateTime> 사용 하 여 값을 <xref:System.Globalization.PersianCalendar> 개체입니다. 페르시아력을 문화권의 기본 달력으로 지정할 수 없습니다, 하므로 페르시아 력의 날짜를 표시를 개별적으로 호출을 해야 하는 해당 <xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType>, <xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType>, 및 <xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType> 메서드. 인스턴스화하는 두 번째 생성자를 호출 하는 <xref:System.DateTime> 사용 하 여 값을 <xref:System.Globalization.HijriCalendar> 개체입니다. 이 예제에서는 현재 문화권을 아랍어 (시리아) 변경 하 고 회교식 달력에 현재 문화권의 기본 달력을 변경 합니다. 현재 문화권의 기본 달력을 회교식 이므로 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 메서드 날짜 서식을 지정 하는 데 사용 합니다. 이전 현재 문화권 (여기서는 영어 (미국)이 경우)를 복원할 때의 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 메서드는 현재 문화권의 기본 양력을 사용 하 여 날짜 서식 지정 합니다.  
  
 [!code-csharp[System.DateTime.Constructor#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample9.cs#9)]
 [!code-vb[System.DateTime.Constructor#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample9.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="calendar" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" />가 <paramref name="calendar" />에서 지원되는 범위에 없습니다.  
  
또는 
 <paramref name="month" />가 1보다 작거나 <paramref name="calendar" />의 개월 수보다 큽니다.  
  
또는 
 <paramref name="day" />가 1보다 작거나 <paramref name="month" />의 일 수보다 큽니다.  
  
또는 
 <paramref name="hour" />가 0보다 작거나 23보다 큽니다.  
  
또는 
 <paramref name="minute" />가 0보다 작거나 59보다 큽니다.  
  
또는 
 <paramref name="second" />가 0보다 작거나 59보다 큽니다.  
  
또는 
 <paramref name="millisecond" />가 0보다 작거나 999보다 큽니다.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="kind" />가 <see cref="T:System.DateTimeKind" /> 값 중 하나가 아닙니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public DateTime Add (TimeSpan value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime Add(valuetype System.TimeSpan value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Add(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (value As TimeSpan) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime Add(TimeSpan value);" />
      <MemberSignature Language="F#" Value="member this.Add : TimeSpan -&gt; DateTime" Usage="dateTime.Add value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="value">양수 또는 음수의 시간 간격입니다.</param>
        <summary>지정된 <see cref="T:System.DateTime" />의 값을 이 인스턴스의 값에 더하는 새 <see cref="T:System.TimeSpan" />을 반환합니다.</summary>
        <returns>이 인스턴스가 나타내는 날짜 및 시간과 <paramref name="value" />가 나타내는 시간 간격의 합이 값인 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용할 수는 <xref:System.DateTime.Add%2A> 단일 작업에서 여러 종류의 시간 간격 (일, 시, 분, 초 또는 밀리초)을 추가 하는 방법입니다. 이 메서드의 동작은 더하기 연산자는 동일 합니다. <xref:System.DateTime> 구조에는 특수 한 더하기 메서드도 지원 (같은 <xref:System.DateTime.AddDays%2A>, <xref:System.DateTime.AddHours%2A>, 및 <xref:System.DateTime.AddMinutes%2A>) 각 시간 간격에 대 한 합니다.  
  
 <xref:System.DateTime.Add%2A> 메서드 윤년 계정 및 날짜를 계산 하는 월의 일 수를 고려 합니다.  
  
 이 메서드는이 값을 변경 하지 않습니다 <xref:System.DateTime>합니다. 대신에 새 반환 <xref:System.DateTime> 값인이 연산의 결과입니다. 합니다 <xref:System.DateTime.Kind%2A> 새 속성 <xref:System.DateTime> 인스턴스가 현재 인스턴스의 것과 동일 합니다.  
  
   
  
## Examples  
 다음 예제는 <xref:System.DateTime.Add%2A> 메서드. 이 순간부터 36 일 (864 시간)는 요일을 계산 합니다.  
  
 [!code-cpp[DateTime.Add#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Add/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Add#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Add/CS/class1.cs#1)]
 [!code-vb[DateTime.Add#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Add/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">결과는 <see cref="T:System.DateTime" />이 <see cref="F:System.DateTime.MinValue" />보다 작거나 <see cref="F:System.DateTime.MaxValue" />보다 큽니다.</exception>
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="M:System.TimeSpan.Add(System.TimeSpan)" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">날짜 및 시간에 대한 산술 연산 수행</related>
      </Docs>
    </Member>
    <Member MemberName="AddDays">
      <MemberSignature Language="C#" Value="public DateTime AddDays (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddDays(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddDays(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddDays (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddDays(double value);" />
      <MemberSignature Language="F#" Value="member this.AddDays : double -&gt; DateTime" Usage="dateTime.AddDays value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">정수 및 소수로 계산된 날 수입니다. <paramref name="value" /> 매개 변수는 음수일 수도 있고 양수일 수도 있습니다.</param>
        <summary>지정된 날짜 수를 이 인스턴스의 값에 더하는 새 <see cref="T:System.DateTime" />을 반환합니다.</summary>
        <returns>이 인스턴스가 나타내는 날짜 및 시간과 <paramref name="value" />가 나타내는 날 수의 합이 값인 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는이 값을 변경 하지 않습니다 <xref:System.DateTime>합니다. 대신에 새 반환 <xref:System.DateTime> 값인이 연산의 결과입니다.  
  
 소수 부분 `value` 하루의 소수 부분입니다. 예를 들어 4.5는 4 일에 12 시간, 0 분, 0 초, 0 밀리초와, 틱 수가 0에 해당 합니다.  
  
 `value` 매개 변수는 밀리초 단위로 반올림 반올림 됩니다.  
  
 <xref:System.DateTime.AddDays%2A> 메서드 윤년 계정 및 날짜를 계산 하는 월의 일 수를 고려 합니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.DateTime.AddDays%2A> 요일 36 일수가 현재 날짜를 확인 하는 방법입니다.  
  
 [!code-cpp[DateTime.AddDays#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.AddDays/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.AddDays#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.AddDays/CS/class1.cs#1)]
 [!code-vb[DateTime.AddDays#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.AddDays/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">결과는 <see cref="T:System.DateTime" />이 <see cref="F:System.DateTime.MinValue" />보다 작거나 <see cref="F:System.DateTime.MaxValue" />보다 큽니다.</exception>
        <altmember cref="T:System.Double" />
      </Docs>
    </Member>
    <Member MemberName="AddHours">
      <MemberSignature Language="C#" Value="public DateTime AddHours (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddHours(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddHours(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddHours (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddHours(double value);" />
      <MemberSignature Language="F#" Value="member this.AddHours : double -&gt; DateTime" Usage="dateTime.AddHours value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">정수 및 소수로 계산된 시간 수입니다. <paramref name="value" /> 매개 변수는 음수일 수도 있고 양수일 수도 있습니다.</param>
        <summary>지정된 시간 수를 이 인스턴스의 값에 더하는 새 <see cref="T:System.DateTime" />을 반환합니다.</summary>
        <returns>이 인스턴스가 나타내는 날짜 및 시간과 <paramref name="value" />가 나타내는 시간 수의 합이 값인 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는이 값을 변경 하지 않습니다 <xref:System.DateTime>합니다. 대신에 새 반환 <xref:System.DateTime> 값인이 연산의 결과입니다. 합니다 <xref:System.DateTime.Kind%2A> 반환 된 속성 <xref:System.DateTime> 개체와 동일 `value`합니다.  
  
 소수 부분 `value` 시간의 소수 부분입니다. 예를 들어 4.5는 4 시간, 30 분을 0 초, 0 밀리초와, 틱 수가 0에 해당 합니다.  
  
 `value` 매개 변수는 밀리초 단위로 반올림 반올림 됩니다.  
  
 결과 종료 되지 않는 반복 10 진수 이면 일부분으로 1 시간 미만 동안 시간 간격을 변환 하면 정밀도 손실이 될 수 있습니다. 예를 들어, 1 분 이어서 0.016667 시간에 해당 합니다. 문제가 있는 경우 사용할 수는 <xref:System.DateTime.Add%2A> 메서드를 단일 메서드 호출에서 여러 종류의 시간 간격을 지정할 수 있으며 시간 간격을 시간의 소수 부분을 변환할 필요가 없습니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.DateTime.AddHours%2A> 날짜 및 시간으로 된 수의 정수 부분과 소수 부분 값을 추가 하는 방법입니다. 또한 메서드 소수 부분을 포함 하는 값을 전달 하 여 발생 한 전체 자릿수 손실을 보여 줍니다.  
  
 [!code-csharp[System.DateTime.AddHours#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.AddHours/cs/AddHours1.cs#1)]
 [!code-vb[System.DateTime.AddHours#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.AddHours/vb/AddHours1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">결과는 <see cref="T:System.DateTime" />이 <see cref="F:System.DateTime.MinValue" />보다 작거나 <see cref="F:System.DateTime.MaxValue" />보다 큽니다.</exception>
        <altmember cref="M:System.DateTime.Add(System.TimeSpan)" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">날짜 및 시간에 대한 산술 연산 수행</related>
      </Docs>
    </Member>
    <Member MemberName="AddMilliseconds">
      <MemberSignature Language="C#" Value="public DateTime AddMilliseconds (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddMilliseconds(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddMilliseconds(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMilliseconds (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddMilliseconds(double value);" />
      <MemberSignature Language="F#" Value="member this.AddMilliseconds : double -&gt; DateTime" Usage="dateTime.AddMilliseconds value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">정수 및 소수로 계산된 밀리초 수입니다. <paramref name="value" /> 매개 변수는 음수일 수도 있고 양수일 수도 있습니다. 이 값은 가장 가까운 정수로 반올림됩니다.</param>
        <summary>지정된 밀리초 수를 이 인스턴스의 값에 더하는 새 <see cref="T:System.DateTime" />을 반환합니다.</summary>
        <returns>이 인스턴스가 나타내는 날짜 및 시간과 <paramref name="value" />가 나타내는 밀리초 수의 합이 값인 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는이 값을 변경 하지 않습니다 <xref:System.DateTime>합니다. 대신에 새 반환 <xref:System.DateTime> 값인이 연산의 결과입니다.  
  
 소수 부분 `value` 밀리초의 소수 부분입니다. 예를 들어 4.5는 4 시간 (밀리초) 5000 틱을 밀리초 단위로 나타냅니다.  
  
 `value` 매개 변수는 가장 가까운 정수로 반올림 됩니다.  
  
   
  
## Examples  
 다음 예제에서는 합니다 <xref:System.DateTime.AddMilliseconds%2A> 1 밀리초 및 1.5 시간 (밀리초)을 추가 하는 메서드를 <xref:System.DateTime> 값입니다. 그런 다음 각각의 새 값을 표시 하 고 원래 값 사이 해당 차이가 표시 됩니다. 차이 시간 범위와 틱 수가 표시 됩니다. 예제에서는 밀리초 equals 10, 000 틱 하나 명확 하 게 합니다. 또한; 추가 수행 하기 전에 반올림 되는 소수 자릿수 밀리초 표시 <xref:System.DateTime> 원래 날짜에 1.5 시간 (밀리초)을 더한 결과로 생성 되는 값은 2 밀리초 원래 날짜 보다 큽니다.  
  
 [!code-csharp[System.DateTime.AddMilliseconds#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addmilliseconds/cs/addmilliseconds2.cs#1)]
 [!code-vb[System.DateTime.AddMilliseconds#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addmilliseconds/vb/addmilliseconds2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">결과는 <see cref="T:System.DateTime" />이 <see cref="F:System.DateTime.MinValue" />보다 작거나 <see cref="F:System.DateTime.MaxValue" />보다 큽니다.</exception>
        <altmember cref="T:System.Double" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">날짜 및 시간에 대한 산술 연산 수행</related>
      </Docs>
    </Member>
    <Member MemberName="AddMinutes">
      <MemberSignature Language="C#" Value="public DateTime AddMinutes (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddMinutes(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddMinutes(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMinutes (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddMinutes(double value);" />
      <MemberSignature Language="F#" Value="member this.AddMinutes : double -&gt; DateTime" Usage="dateTime.AddMinutes value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">정수 및 소수로 계산된 분 수입니다. <paramref name="value" /> 매개 변수는 음수일 수도 있고 양수일 수도 있습니다.</param>
        <summary>지정된 분 수를 이 인스턴스의 값에 더하는 새 <see cref="T:System.DateTime" />을 반환합니다.</summary>
        <returns>이 인스턴스가 나타내는 날짜 및 시간과 <paramref name="value" />가 나타내는 분 수의 합이 값인 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는이 값을 변경 하지 않습니다 <xref:System.DateTime>합니다. 대신에 새 반환 <xref:System.DateTime> 값인이 연산의 결과입니다.  
  
 소수 부분 `value` 분의 소수 부분입니다. 예를 들어 4.5는 4 분 30 초, 0 밀리초와, 틱 수가 0에 해당 합니다.  
  
 `value` 매개 변수는 밀리초 단위로 반올림 반올림 됩니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.DateTime.AddMinutes%2A> 날짜 및 시간으로 된 수의 정수 부분과 소수 부분 값을 추가 하는 방법입니다.  
  
 [!code-cpp[System.DateTime.AddMinutes#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.datetime.addminutes/cpp/addminutes1.cpp#1)]
 [!code-csharp[System.DateTime.AddMinutes#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addminutes/cs/addminutes1.cs#1)]
 [!code-vb[System.DateTime.AddMinutes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addminutes/vb/addminutes1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">결과는 <see cref="T:System.DateTime" />이 <see cref="F:System.DateTime.MinValue" />보다 작거나 <see cref="F:System.DateTime.MaxValue" />보다 큽니다.</exception>
        <altmember cref="T:System.Double" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">날짜 및 시간에 대한 산술 연산 수행</related>
      </Docs>
    </Member>
    <Member MemberName="AddMonths">
      <MemberSignature Language="C#" Value="public DateTime AddMonths (int months);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddMonths(int32 months) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddMonths(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMonths (months As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddMonths(int months);" />
      <MemberSignature Language="F#" Value="member this.AddMonths : int -&gt; DateTime" Usage="dateTime.AddMonths months" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="months" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="months">월 수입니다. <paramref name="months" /> 매개 변수는 음수일 수도 있고 양수일 수도 있습니다.</param>
        <summary>지정된 월 수를 이 인스턴스의 값에 더하는 새 <see cref="T:System.DateTime" />을 반환합니다.</summary>
        <returns>이 인스턴스가 나타내는 날짜 및 시간과 <paramref name="months" />가 나타내는 월 수의 합이 값인 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는이 값을 변경 하지 않습니다 <xref:System.DateTime> 개체입니다. 대신에 새 반환 <xref:System.DateTime> 값인이 작업의 결과 개체입니다.  
  
 합니다 <xref:System.DateTime.AddMonths%2A> 메서드는 결과 월을 계산 하 고 계정 윤년 및 월의 일 수를 고려 하는 연도, 그런 다음 결과의 일 부분을 조정 <xref:System.DateTime> 개체입니다. 결과 일 월에 유효한 날짜가 없으면 결과 월의 마지막 유효 날짜가 사용 됩니다. 예제에서는 3 월 31 + 1 개월 = 4 월 30 일 및 3 월 31-1 월 = 2 월 28 일에 대 한 비-윤년 및 윤년에 대 한 2 월 29입니다.  
  
 결과 시간 부분은 <xref:System.DateTime> 개체가이 인스턴스와 동일 하 게 유지 합니다.  
  
   
  
## Examples  
 다음 예제에서는 2015 년 12 월의 마지막 날에 사이 및 15 개월을 추가합니다. 이 경우 AddMonths 메서드는 각 월의 마지막 날의 날짜를 반환 하 고 성공적으로 윤년을 처리 합니다.  
  
 [!code-csharp[System.DateTime.AddMonths#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addmonths/cs/addmonths1.cs#1)]
 [!code-vb[System.DateTime.AddMonths#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addmonths/vb/addmonths1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">결과는 <see cref="T:System.DateTime" />이 <see cref="F:System.DateTime.MinValue" />보다 작거나 <see cref="F:System.DateTime.MaxValue" />보다 큽니다.  
  
또는 
 <paramref name="months" />가 -120,000보다 작거나 120,000보다 큽니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddSeconds">
      <MemberSignature Language="C#" Value="public DateTime AddSeconds (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddSeconds(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddSeconds(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddSeconds (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddSeconds(double value);" />
      <MemberSignature Language="F#" Value="member this.AddSeconds : double -&gt; DateTime" Usage="dateTime.AddSeconds value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">정수 및 소수로 계산된 초 수입니다. <paramref name="value" /> 매개 변수는 음수일 수도 있고 양수일 수도 있습니다.</param>
        <summary>지정된 초 수를 이 인스턴스의 값에 더하는 새 <see cref="T:System.DateTime" />을 반환합니다.</summary>
        <returns>이 인스턴스가 나타내는 날짜 및 시간과 <paramref name="value" />가 나타내는 초 수의 합이 값인 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는이 값을 변경 하지 않습니다 <xref:System.DateTime>합니다. 대신에 새 반환 <xref:System.DateTime> 값인이 연산의 결과입니다.  
  
 소수 부분 `value` 초의 소수 부분입니다. 예를 들어 4.5는 틱 수가 0, 4 초 및 500 밀리초를 합니다.  
  
 `value` 매개 변수는 밀리초 단위로 반올림 반올림 됩니다.  
  
   
  
## Examples  
 다음 예제에서는 합니다 <xref:System.DateTime.AddSeconds%2A> 하루에 30 초 및 초의 번호를 추가 하는 방법을 <xref:System.DateTime> 값입니다. 그런 다음 각각의 새 값을 표시 하 고 원래 값 사이 해당 차이가 표시 됩니다. 차이 시간 범위와 틱 수가 표시 됩니다.  
  
 [!code-csharp[System.DateTime.AddSeconds#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addseconds/cs/addseconds1.cs#1)]
 [!code-vb[System.DateTime.AddSeconds#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addseconds/vb/addseconds1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">결과는 <see cref="T:System.DateTime" />이 <see cref="F:System.DateTime.MinValue" />보다 작거나 <see cref="F:System.DateTime.MaxValue" />보다 큽니다.</exception>
        <altmember cref="T:System.Double" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">날짜 및 시간에 대한 산술 연산 수행</related>
      </Docs>
    </Member>
    <Member MemberName="AddTicks">
      <MemberSignature Language="C#" Value="public DateTime AddTicks (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddTicks(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddTicks(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddTicks (value As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddTicks(long value);" />
      <MemberSignature Language="F#" Value="member this.AddTicks : int64 -&gt; DateTime" Usage="dateTime.AddTicks value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">천만 분의 1초 틱의 수입니다. <paramref name="value" /> 매개 변수는 양수일 수도 있고 음수일 수도 있습니다.</param>
        <summary>지정된 틱 수를 이 인스턴스의 값에 더하는 새 <see cref="T:System.DateTime" />을 반환합니다.</summary>
        <returns>이 인스턴스가 나타내는 날짜 및 시간과 <paramref name="value" />가 나타내는 시간의 합이 값인 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는이 값을 변경 하지 않습니다 <xref:System.DateTime>합니다. 대신에 새 반환 <xref:System.DateTime> 값인이 연산의 결과입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">결과는 <see cref="T:System.DateTime" />이 <see cref="F:System.DateTime.MinValue" />보다 작거나 <see cref="F:System.DateTime.MaxValue" />보다 큽니다.</exception>
        <altmember cref="T:System.Int64" />
        <altmember cref="P:System.DateTime.Ticks" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">날짜 및 시간에 대한 산술 연산 수행</related>
      </Docs>
    </Member>
    <Member MemberName="AddYears">
      <MemberSignature Language="C#" Value="public DateTime AddYears (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddYears(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddYears(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddYears (value As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddYears(int value);" />
      <MemberSignature Language="F#" Value="member this.AddYears : int -&gt; DateTime" Usage="dateTime.AddYears value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">연도 수입니다. <paramref name="value" /> 매개 변수는 음수일 수도 있고 양수일 수도 있습니다.</param>
        <summary>지정된 연도 수를 이 인스턴스의 값에 더하는 새 <see cref="T:System.DateTime" />을 반환합니다.</summary>
        <returns>이 인스턴스가 나타내는 날짜 및 시간과 <paramref name="value" />가 나타내는 연도 수의 합이 값인 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는이 값을 변경 하지 않습니다 <xref:System.DateTime> 개체입니다. 대신에 새 반환 <xref:System.DateTime> 값인이 작업의 결과 개체입니다.  
  
 <xref:System.DateTime.AddYears%2A> 메서드 계산 결과 연도가 윤년을 고려 합니다. 월 및 일의 시간 부분 결과 <xref:System.DateTime> 개체가이 인스턴스와 동일 하 게 유지 합니다.  
  
 현재 인스턴스가 나타내는 윤년 윤 일 경우 반환 값은 대상 날짜에 따라 달라 집니다.  
  
-   하는 경우 `value`  +  <xref:System.DateTime.Year%2A?displayProperty=nameWithType> 윤년 반환 값 나타내는 해당 연도의 윤 일 이기도 합니다. 예를 들어, 4 년 2012 년 2 월 29 일에 추가 되 면 반환 된 날짜는 2016 년 2 월 29 일입니다.  
  
-   하는 경우 `value`  +  <xref:System.DateTime.Year%2A?displayProperty=nameWithType> 윤년 반환 값 나타내는 해당 연도의 윤 일 이전 아닙니다. 예를 들어, 2012 년 2 월 29 일, 1 년 동안 추가 된 경우 반환 되는 날짜 2013 년 2 월 28입니다.  
  
 다음 예제를 사용 하 여 합니다 <xref:System.DateTime.AddYears%2A> 메서드는 <xref:System.DateTime> 윤년 하루를 나타내는 값입니다. 15 년 이전 및 다음에 나오는 15 년에 대 한 날짜가 표시 2000 년 2 월 29 일입니다.  
  
 [!code-csharp[System.DateTime.AddYears#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addyears/cs/addyears1.cs#1)]
 [!code-vb[System.DateTime.AddYears#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addyears/vb/addyears1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value" /> 또는 결과 <see cref="T:System.DateTime" />이 <see cref="F:System.DateTime.MinValue" />보다 작거나 <see cref="F:System.DateTime.MaxValue" />보다 큽니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (t1 As DateTime, t2 As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member Compare : DateTime * DateTime -&gt; int" Usage="System.DateTime.Compare (t1, t2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">비교할 첫 번째 개체입니다.</param>
        <param name="t2">비교할 두 번째 개체입니다.</param>
        <summary><see cref="T:System.DateTime" />의 두 인스턴스를 비교하고 첫 번째 인스턴스가 두 번째 인스턴스보다 빠른지, 같은지, 늦은지를 나타내는 정수를 반환합니다.</summary>
        <returns><paramref name="t1" />과 <paramref name="t2" />의 상대 값을 나타내는 부호 있는 숫자입니다.  
  
 <list type="table"><listheader><term> 값 형식 
 </term><description> 조건 
 </description></listheader><item><term> 0보다 작음 
 </term><description><paramref name="t1" />가 <paramref name="t2" />보다 이전인 경우  
  
 </description></item><item><term> 0 
 </term><description><paramref name="t1" />이 <paramref name="t2" />와 같은 경우  
  
 </description></item><item><term> 0보다 큼 
 </term><description><paramref name="t1" />이 <paramref name="t2" />보다 나중인 경우  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 관계를 확인 하려면 `t1` 에 `t2`, <xref:System.DateTime.Compare%2A> 메서드 비교를 <xref:System.DateTime.Ticks%2A> 속성을 `t1` 및 `t2` 무시 하지만 해당 <xref:System.DateTime.Kind%2A> 속성. 비교 하기 전에 <xref:System.DateTime> 개체를 개체 동일한 표준 시간대의 시간을 나타내는 것을 확인 합니다.  
  
   
  
## Examples  
 다음 예제는 <xref:System.DateTime.Compare%2A> 메서드.  
  
 [!code-csharp[System.DateTime.Compare#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.compare/cs/compare1.cs#1)]
 [!code-vb[System.DateTime.Compare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.compare/vb/compare1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.Object)" />
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CompareTo">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>이 인스턴스의 값을 지정된 <see cref="T:System.DateTime" /> 값과 비교하고 이 인스턴스가 지정된 <see cref="T:System.DateTime" /> 값보다 이전인지, 같은지 또는 이후인지를 나타냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 두 오버 로드는 <xref:System.DateTime.CompareTo%2A> 메서드가이 인스턴스의 상대 값을 나타내는 부호 있는 숫자를 반환 하며 `value` 인수에는 다음 표에 나와 있는 것 처럼 합니다.  
  
|값|설명|  
|-----------|-----------------|  
|0보다 작음|이 인스턴스는 `value` 보다 이전입니다.|  
|0|이 인스턴스는 `value`와 같습니다.|  
|0보다 큼|이 인스턴스는 `value`보다 이후입니다.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.CompareTo(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(DateTime value);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : DateTime -&gt; int&#xA;override this.CompareTo : DateTime -&gt; int" Usage="dateTime.CompareTo value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable`1.CompareTo(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value">현재 인스턴스와 비교할 개체입니다.</param>
        <summary>이 인스턴스의 값을 지정된 <see cref="T:System.DateTime" /> 값과 비교하고 이 인스턴스가 지정된 <see cref="T:System.DateTime" /> 값보다 이전인지, 같은지 또는 이후인지를 나타내는 정수를 반환합니다.</summary>
        <returns>이 인스턴스와 <paramref name="value" /> 매개 변수의 상대 값을 나타내는 부호 있는 숫자입니다.  
  
 <list type="table"><listheader><term> 값 
 </term><description> 설명 
 </description></listheader><item><term> 0보다 작음 
 </term><description> 이 인스턴스는 <paramref name="value" /> 보다 이전입니다.  
  
 </description></item><item><term> 0 
 </term><description> 이 인스턴스는 <paramref name="value" />와 같습니다.  
  
 </description></item><item><term> 0보다 큼 
 </term><description> 이 인스턴스는 <paramref name="value" />보다 이후입니다.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 현재 인스턴스의 관계를 확인 하려면 `value`, <xref:System.DateTime.CompareTo%2A> 메서드 비교 합니다 <xref:System.DateTime.Ticks%2A> 현재 인스턴스의 속성 및 `value` 무시 하지만 해당 <xref:System.DateTime.Kind%2A> 속성입니다.  비교 하기 전에 <xref:System.DateTime> 개체를 동일한 표준 시간대의 시간을 나타내는 개체를 확인 합니다. 값을 비교 하면 해당 <xref:System.DateTime.Kind%2A> 속성입니다.  
  
 이 메서드를 구현 하는 <xref:System.IComparable%601?displayProperty=nameWithType> 인터페이스 및 수행 보다 조금 더 나은 <xref:System.DateTime.CompareTo%28System.Object%29?displayProperty=nameWithType> 변환할 필요가 없기 때문에 메서드 오버 로드는 `value` 매개 변수 개체를 합니다.  
  
   
  
## Examples  
 다음 예제에서는 세 가지 인스턴스화합니다 <xref:System.DateTime> 하나는 현재 날짜를 1 년 동안 나중에 날짜를 나타내는 세 번째 및 1 년 이전에 날짜를 나타내는 다른 개체입니다. 그런 다음 호출을 <xref:System.DateTime.CompareTo%28System.DateTime%29> 메서드 비교의 결과 표시 합니다.  
  
 [!code-csharp[DateTime.CompareTo.2#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.CompareTo.2/CS/CompareTo_CS1_24564.cs#1)]
 [!code-vb[DateTime.CompareTo.2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.CompareTo.2/VB/CompareTo_VB1_24564.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : obj -&gt; int&#xA;override this.CompareTo : obj -&gt; int" Usage="dateTime.CompareTo value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="value">비교할 boxing된 개체이거나 <see langword="null" />입니다.</param>
        <summary>이 인스턴스의 값을 지정된 <see cref="T:System.DateTime" /> 값이 포함된 지정된 개체와 비교하고, 이 인스턴스가 지정된 <see cref="T:System.DateTime" /> 값보다 이전인지, 같은지 또는 이후인지를 나타내는 정수를 반환합니다.</summary>
        <returns>이 인스턴스와 <paramref name="value" />의 상대 값을 나타내는 부호 있는 숫자입니다.  
  
 <list type="table"><listheader><term> 값 
 </term><description> 설명 
 </description></listheader><item><term> 0보다 작음 
 </term><description> 이 인스턴스는 <paramref name="value" /> 보다 이전입니다.  
  
 </description></item><item><term> 0 
 </term><description> 이 인스턴스는 <paramref name="value" />와 같습니다.  
  
 </description></item><item><term> 0보다 큼 
 </term><description> 이 인스턴스는 <paramref name="value" />보다 이후이거나 <paramref name="value" />가 <see langword="null" />입니다.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 현재 인스턴스의 관계를 확인 하려면 `value`, <xref:System.DateTime.CompareTo%2A> 메서드 비교 합니다 <xref:System.DateTime.Ticks%2A> 현재 인스턴스의 속성 및 `value` 무시 하지만 해당 <xref:System.DateTime.Kind%2A> 속성입니다. 비교 하기 전에 <xref:System.DateTime> 개체를 동일한 표준 시간대의 시간을 나타내는 개체를 확인 합니다. 값을 비교 하면 해당 <xref:System.DateTime.Kind%2A> 속성입니다.  
  
 인스턴스에도 <xref:System.DateTime>, 해당 값에 관계 없이 보다 큰 것으로 간주 됩니다 `null`합니다.  
  
   
  
## Examples  
 다음 예제는 <xref:System.DateTime.CompareTo%2A> 메서드.  
  
 [!code-cpp[DateTime.CompareTo#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.CompareTo/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.CompareTo/CS/class1.cs#1)]
 [!code-vb[DateTime.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.CompareTo/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="value" />가 <see cref="T:System.DateTime" />가 아닌 경우</exception>
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Date">
      <MemberSignature Language="C#" Value="public DateTime Date { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime Date" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Date" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Date As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime Date { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.Date : DateTime" Usage="System.DateTime.Date" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 인스턴스의 날짜 구성 요소를 가져옵니다.</summary>
        <value>이 인스턴스와 동일한 날짜를 갖고 시간 값이 12:00:00 자정(00:00:00)으로 설정된 새 개체입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 값을 <xref:System.DateTime.Kind%2A> 반환 된 속성 <xref:System.DateTime> 값이 현재 인스턴스의 것과 동일 합니다.  
  
 때문에 합니다 <xref:System.DateTime> 형식 날짜 및 시간 단일 형식에서는에서 반환 된 날짜를 잘못 해석 되지 않도록 해야 합니다 <xref:System.DateTime.Date%2A> 날짜와 시간으로 속성입니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.DateTime.Date%2A> 속성의 날짜 구성 요소를 추출 하는 <xref:System.DateTime> 값 0으로 설정 하 고 시간 구성 요소를 사용 하 여 (또는 0: 00시 또는 자정). 이 표시할 때 사용할 형식 문자열에 따라 보여 줍니다는 <xref:System.DateTime> 값 형식이 지정 된 출력에 표시할 시간 구성 요소를 계속할 수 있습니다.  
  
 [!code-cpp[System.DateTime.Date#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Date/cpp/date1.cpp#1)]
 [!code-csharp[System.DateTime.Date#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Date/cs/Date1.cs#1)]
 [!code-vb[System.DateTime.Date#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Date/vb/Date1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Day">
      <MemberSignature Language="C#" Value="public int Day { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Day" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Day" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Day As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Day { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Day : int" Usage="System.DateTime.Day" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 인스턴스가 나타내는 월의 일 수를 가져옵니다.</summary>
        <value>1부터 31 사이의 값으로 표시되는 일 구성 요소입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.DateTime.Day%2A> 속성 일반 달력에서 월의 일은 항상 반환 경우에 현재 <xref:System.DateTime> 값 다른 달력을 사용 하 여 인스턴스화된 또는 현재 스레드 문화권의 기본 달력이 그레고리오 력 아닙니다. 다른 달력을 사용 하 여 특정 날짜의 일자를 검색 하려면 해당 달력의 호출 <xref:System.Globalization.Calendar.GetDayOfMonth%2A?displayProperty=nameWithType> 메서드. 다음 예제에서는 둘 다를 <xref:System.DateTime.Day%2A> 속성 및 <xref:System.Globalization.HijriCalendar.GetDayOfMonth%2A?displayProperty=nameWithType> 에 대 한 월의 일을 검색 하는 메서드를 <xref:System.DateTime> 회교식 달력을 사용 하 여 인스턴스화된 값입니다.  
  
 [!code-csharp[System.DateTime.Day#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Day/cs/Day1.cs#1)]
 [!code-vb[System.DateTime.Day#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Day/vb/Day1.vb#1)]  
  
 마찬가지로, 다음 예제에서는 두 가지 모두를 <xref:System.DateTime.Day%2A> 속성 및 <xref:System.Globalization.HijriCalendar.GetDayOfMonth%2A?displayProperty=nameWithType> 현재 스레드 문화권의 기본 달력으로 회교식 달력을 사용 하는 AR-SA 경우 월의 일을 검색 하는 방법입니다.  
  
 [!code-csharp[System.DateTime.Day#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Day/cs/Day2.cs#2)]
 [!code-vb[System.DateTime.Day#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Day/vb/Day2.vb#2)]  
  
   
  
## Examples  
 다음 예제는 <xref:System.DateTime.Day%2A> 속성입니다.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DayOfWeek">
      <MemberSignature Language="C#" Value="public DayOfWeek DayOfWeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DayOfWeek DayOfWeek" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.DayOfWeek" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DayOfWeek As DayOfWeek" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DayOfWeek DayOfWeek { DayOfWeek get(); };" />
      <MemberSignature Language="F#" Value="member this.DayOfWeek : DayOfWeek" Usage="System.DateTime.DayOfWeek" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DayOfWeek</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 인스턴스가 나타내는 주의 일 수를 가져옵니다.</summary>
        <value>이 <see cref="T:System.DateTime" /> 값의 요일을 나타내는 열거형 상수입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 상수 값을 <xref:System.DayOfWeek> 열거형에서 범위 <xref:System.DayOfWeek.Sunday?displayProperty=nameWithType> 에 <xref:System.DayOfWeek.Saturday?displayProperty=nameWithType>입니다. 경우 정수로 캐스팅, 해당 값 범위는 0에서 (나타냅니다 <xref:System.DayOfWeek.Sunday?displayProperty=nameWithType>)를 6 (나타내는 <xref:System.DayOfWeek.Saturday?displayProperty=nameWithType>).  
  
 <xref:System.DateTime.DayOfWeek%2A> 열거 상수를 반환 하는 속성, 시스템의 국가 및 언어 설정을 반영 하지 않습니다. 특정 날짜의 지역화 된 요일 이름을 나타내는 문자열을 검색 하려면 오버 로드 중 하나를 호출 합니다 <xref:System.DateTime.ToString%2A> 메서드를 포함 하는 `format` 매개 변수 전달 중 하나는 `ddd` 또는 `dddd` 사용자 지정 서식 문자열입니다. 자세한 내용은 [방법: 특정 날짜에서의 요일을 추출](~/docs/standard/base-types/how-to-extract-the-day-of-the-week-from-a-specific-date.md)합니다.  
  
   
  
## Examples  
 다음 예제는 <xref:System.DateTime.DayOfWeek%2A> 속성 및 <xref:System.DayOfWeek?displayProperty=nameWithType> 열거형입니다.  
  
 [!code-cpp[DateTime.DayOfWeek#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.DayOfWeek/CPP/dow.cpp#1)]
 [!code-csharp[DateTime.DayOfWeek#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.DayOfWeek/CS/dow.cs#1)]
 [!code-vb[DateTime.DayOfWeek#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.DayOfWeek/VB/dow.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTime.Ticks" />
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <Member MemberName="DayOfYear">
      <MemberSignature Language="C#" Value="public int DayOfYear { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DayOfYear" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.DayOfYear" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DayOfYear As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int DayOfYear { int get(); };" />
      <MemberSignature Language="F#" Value="member this.DayOfYear : int" Usage="System.DateTime.DayOfYear" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 인스턴스가 나타내는 일 수를 정수로 가져옵니다.</summary>
        <value>1부터 366 사이의 값으로 표시되는 한 해의 날짜 순서입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.DayOfYear%2A> 속성 고려 윤년 연간 일자를 계산 하는 경우. 속성 값을 현재 스레드 문화권의 현재 달력에 관계 없이 그레고리오 력 달력의 연간 일자를 항상 반영합니다. 다양 한 달력의 연간 일자를 검색 하려면 호출을 <xref:System.Globalization.Calendar.GetDayOfYear%2A?displayProperty=nameWithType> 해당 달력의 메서드.  
  
   
  
## Examples  
 다음 예제에서는 그레고리오력의 2010 2020 년 12 월 31 일의 연간 일자를 표시합니다. 예제에서는 12 월 31 일 윤년에서 해당 연도의 366 번째 날 인지 표시 되는지 note 합니다.  
  
 [!code-csharp[System.DateTime.DayOfYear#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.dayofyear/cs/dayofyear2.cs#1)]
 [!code-vb[System.DateTime.DayOfYear#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.dayofyear/vb/dayofyear2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Globalization.Calendar.GetDayOfYear(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="DaysInMonth">
      <MemberSignature Language="C#" Value="public static int DaysInMonth (int year, int month);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 DaysInMonth(int32 year, int32 month) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.DaysInMonth(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DaysInMonth (year As Integer, month As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int DaysInMonth(int year, int month);" />
      <MemberSignature Language="F#" Value="static member DaysInMonth : int * int -&gt; int" Usage="System.DateTime.DaysInMonth (year, month)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">연도</param>
        <param name="month">월(1부터 12까지)</param>
        <summary>지정된 월과 연도의 날짜 수를 반환합니다.</summary>
        <returns>지정된 <paramref name="month" />에 속한 <paramref name="year" />의 날 수입니다.  
  
예를 들어, 2월의 <paramref name="month" />가 2이면, 반환 값은 <paramref name="year" />가 윤년인지 여부에 따라 28이나 29가 됩니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.DateTime.DaysInMonth%2A> 메서드를 항상 해석 `month` 및 `year` 그레고리오 력 현재 문화권의 현재 달력이 아닌 경우에 월 및 연도의 그레고리오 력 달력으로 합니다. 특정 달력의 지정된 된 월의 일 수를 가져오려면 해당 달력의 호출 <xref:System.Globalization.Calendar.GetDaysInMonth%2A> 메서드.  
  
   
  
## Examples  
 다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.DateTime.DaysInMonth%2A> 2001 년 2 월 7 월의에서 일 수를 결정 하는 방법 (비-윤년), 1998 및 1996 년 2 월 (윤년).  
  
 [!code-cpp[DateTime.DaysInMonth#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.DaysInMonth/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.DaysInMonth#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.DaysInMonth/CS/class1.cs#1)]
 [!code-vb[DateTime.DaysInMonth#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.DaysInMonth/VB/class1.vb#1)]  
  
 다음 예제에서는 정수 배열에 지정 된 연도의 각 월의 일 수를 표시 합니다.  
  
 [!code-csharp[System.DateTime.DaysInMonth#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.daysinmonth/cs/daysinmonth3.cs#1)]
 [!code-vb[System.DateTime.DaysInMonth#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.daysinmonth/vb/daysinmonth3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="month" />가 1보다 작거나 12보다 큽니다.  
  
또는 
 <paramref name="year" />가 1보다 작거나 9999보다 큽니다.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>두 <see cref="T:System.DateTime" /> 개체가 같은지 여부 또는 <see cref="T:System.DateTime" /> 인스턴스와 또 다른 개체 또는 <see cref="T:System.DateTime" />의 값이 같은지를 나타내는 값을 반환합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Equals(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (value As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(DateTime value);" />
      <MemberSignature Language="F#" Value="override this.Equals : DateTime -&gt; bool" Usage="dateTime.Equals value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value">이 인스턴스와 비교할 개체입니다.</param>
        <summary>이 인스턴스의 값이 지정된 <see cref="T:System.DateTime" /> 인스턴스의 값과 같은지를 나타내는 값을 반환합니다.</summary>
        <returns><see langword="true" /> 매개 변수가 이 인스턴스의 값과 같으면 <paramref name="value" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 현재 인스턴스 및 `value` 같은지 경우 해당 <xref:System.DateTime.Ticks%2A> 속성 값이 동일 합니다. 해당 <xref:System.DateTime.Kind%2A> 속성 값 같음 테스트에서 고려 되지 않습니다.  
  
 이 메서드를 구현 하는 <xref:System.IEquatable%601?displayProperty=nameWithType> 인터페이스 및 수행 보다 조금 더 나은 합니다 <xref:System.DateTime.Equals%2A> 메서드 때문에 `value` 매개 변수를 개체로 변환할 필요가 없습니다.  
  
   
  
## Examples  
 다음 예제는 <xref:System.DateTime.Equals%2A> 메서드.  
  
 [!code-csharp[System.DateTime.Equals-Instance#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/cs/sample.cs#1)]
 [!code-vb[System.DateTime.Equals-Instance#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="dateTime.Equals value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">이 인스턴스와 비교할 개체입니다.</param>
        <summary>이 인스턴스가 지정된 개체와 같은지를 나타내는 값을 반환합니다.</summary>
        <returns><see langword="true" />가 <paramref name="value" />의 인스턴스이고 이 인스턴스의 값과 같으면 <see cref="T:System.DateTime" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 현재 인스턴스 및 `value` 같은지 경우 해당 <xref:System.DateTime.Ticks%2A> 속성 값이 동일 합니다. 해당 <xref:System.DateTime.Kind%2A> 속성 값 같음 테스트에서 고려 되지 않습니다.  
  
   
  
## Examples  
 다음 예제는 <xref:System.DateTime.Equals%2A> 메서드.  
  
 [!code-csharp[System.DateTime.Equals-Instance#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/cs/sample.cs#1)]
 [!code-vb[System.DateTime.Equals-Instance#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Equals(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Equals(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member Equals : DateTime * DateTime -&gt; bool" Usage="System.DateTime.Equals (t1, t2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">비교할 첫 번째 개체입니다.</param>
        <param name="t2">비교할 두 번째 개체입니다.</param>
        <summary>두 <see cref="T:System.DateTime" /> 인스턴스의 날짜 및 시간 값이 같은지를 나타내는 값을 반환합니다.</summary>
        <returns>두 값이 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `t1` 및 `t2` 같은지 경우 해당 <xref:System.DateTime.Ticks%2A> 속성 값이 동일 합니다. 해당 <xref:System.DateTime.Kind%2A> 속성 값 같음 테스트에서 고려 되지 않습니다.  
  
   
  
## Examples  
 다음 예제는 <xref:System.DateTime.Equals%2A> 메서드.  
  
 [!code-cpp[DateTime.Equals#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Equals/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Equals/CS/class1.cs#1)]
 [!code-vb[DateTime.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Equals/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="FromBinary">
      <MemberSignature Language="C#" Value="public static DateTime FromBinary (long dateData);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromBinary(int64 dateData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromBinary(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromBinary (dateData As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FromBinary(long dateData);" />
      <MemberSignature Language="F#" Value="static member FromBinary : int64 -&gt; DateTime" Usage="System.DateTime.FromBinary dateData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateData" Type="System.Int64" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateData"><see cref="P:System.DateTime.Kind" /> 속성을 2비트 필드에서 인코딩하고 <see cref="P:System.DateTime.Ticks" /> 속성을 62비트 필드에서 인코딩하는 64비트 부호 있는 정수입니다.</param>
        <summary>64비트 이진 값을 deserialize하고 serialize된 원본 <see cref="T:System.DateTime" /> 개체를 다시 만듭니다.</summary>
        <returns><see cref="T:System.DateTime" /> 메서드로 serialize된 <see cref="M:System.DateTime.ToBinary" /> 개체에 해당하는 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 된 <xref:System.DateTime.ToBinary%2A> 현재 값으로 변환 하는 방법 <xref:System.DateTime> 개체를 이진 값입니다. 이후에 이진 값을 사용 하며 <xref:System.DateTime.FromBinary%2A> 메서드를 다시 원래 <xref:System.DateTime> 개체입니다.  
  
> [!IMPORTANT]
>  일부 경우에는 <xref:System.DateTime> 에서 반환 된 값을 <xref:System.DateTime.FromBinary%2A> 방법은 원본과 동일 <xref:System.DateTime> 에 제공 된 값은 <xref:System.DateTime.ToBinary%2A> 메서드. 자세한 내용은 다음 섹션에서는 "현지 시간 조정"을 참조 하세요.  
  
## <a name="local-time-adjustment"></a>현지 시간 조정  
 현지 표준 시간대를 조정 하는 협정 세계시가 현지 시간으로 표시 됩니다는 <xref:System.DateTime> 갖는 <xref:System.DateTime.Kind%2A> 속성 값은 <xref:System.DateTimeKind.Local>합니다. 로컬 복원 하는 경우 <xref:System.DateTime> 에 의해 생성 된 이진 표현에서 값을 <xref:System.DateTime.ToBinary%2A> 메서드를는 <xref:System.DateTime.FromBinary%2A> 메서드는 원래 값과 같으면 되지 않도록 다시 만든된 값을 조정할 수. 이 비동기화는 다음과 같은 경우에 발생할 수 있습니다.  
  
-   경우 로컬 <xref:System.DateTime> 개체에서 한 표준 시간대에서 serialize 되는 <xref:System.DateTime.ToBinary%2A> 메서드를에서 다른 표준 시간대에서 deserialize 될를 <xref:System.DateTime.FromBinary%2A> 메서드를 나타내는 결과 현지 시간 <xref:System.DateTime> 개체 자동으로 조정 됩니다 두 번째 표준 시간대로 합니다.  
  
     예를 들어 한 <xref:System.DateTime> 오후 3 시 현지 시간을 나타내는 개체 미국에서 실행 되는 응용 프로그램 태평양 표준 시간대를 사용 하는 <xref:System.DateTime.ToBinary%2A> 메서드는 변환할 <xref:System.DateTime> 개체를 이진 값입니다. 미국에서 실행 되는 다른 응용 프로그램 동부 표준 시간대를 사용 하 여는 <xref:System.DateTime.FromBinary%2A> 새 이진 값으로 변환할 방법이 <xref:System.DateTime> 개체입니다. 새 변수의 <xref:System.DateTime> 오후 6 시, 원래 오후 3으로에서 동일한 시점을 나타내는 개체가 그러나 값 동부 표준 시간대의 현지 시간으로 조정 됩니다.  
  
-   경우 로컬의 이진 표현 <xref:System.DateTime> 값 되는 시스템의 현지 표준 시간대에서 잘못 된 시간을 나타내는 <xref:System.DateTime.FromBinary%2A> 은 호출 시간이 조정 됩니다 유효한 되도록 합니다.  
  
     예를 들어, 표준 시간에서 일광 절약 시간에 전환이 발생 미국 태평양 표준 시간대에서 2010 년 3 월 14 일 오전 2 시, 오전 3 시에 한 시간 전진할 때 이 시간 간격은이 표준 시간대에 존재 하지 않는 시간 간격, 잘못 된 시간입니다. 다음 예제에서는 내에 포함 되는 시간이이 범위를 이진 값으로 변환 됩니다는 <xref:System.DateTime.ToBinary%2A> 메서드에 의해 복원 되 고는 <xref:System.DateTime.FromBinary%2A> 메서드를 원래 값은 시간으로 조정 되는 유효 합니다. 여부를 특정 날짜 및 시간 값에 적용 될 수 있습니다 수정 전달 하 여 확인할 수 있습니다는 <xref:System.TimeZoneInfo.IsInvalidTime%2A?displayProperty=nameWithType> 메서드를 예로 보여 줍니다.  
  
     [!code-csharp[System.DateTime.FromBinary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.frombinary/cs/frombinary1.cs#1)]
     [!code-vb[System.DateTime.FromBinary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.frombinary/vb/frombinary1.vb#1)]  
  
## <a name="version-considerations"></a>버전 고려 사항  
 .NET Framework 버전 2.0부터는 <xref:System.DateTime> 구조 나타내는 여부 지정된 된 시간이 현지 시간을 utc (협정 세계시) 또는 둘 다 연결 전용 틱 필드에, 개인 종류 필드를 구성 하는 날짜 및 시간을 지정 하는 100 나노초 틱 수를 포함 합니다. 틱 수를 사용 하 여 액세스할 수 있습니다 합니다 <xref:System.DateTime.Ticks%2A> 속성과 theKind 필드를 사용 하 여 액세스할 수 있습니다는 <xref:System.DateTime.Kind%2A> 속성입니다.  
  
 직렬화 하는 경우.NET Framework 2.0 이전을 <xref:System.DateTime> 개체와 같은 serialization 인터페이스를 사용 하는 대신 수동으로 <xref:System.Runtime.Serialization.ISerializable?displayProperty=nameWithType>의 틱 데이터만 serialize 하는 데 필요한는 <xref:System.DateTime>합니다. .NET Framework 2.0부터 종류 데이터도 serialize 해야 있습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateData" />가 <see cref="F:System.DateTime.MinValue" />보다 작거나 <see cref="F:System.DateTime.MaxValue" />보다 큽니다.</exception>
        <altmember cref="M:System.DateTime.ToBinary" />
      </Docs>
    </Member>
    <Member MemberName="FromFileTime">
      <MemberSignature Language="C#" Value="public static DateTime FromFileTime (long fileTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromFileTime(int64 fileTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromFileTime(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromFileTime (fileTime As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FromFileTime(long fileTime);" />
      <MemberSignature Language="F#" Value="static member FromFileTime : int64 -&gt; DateTime" Usage="System.DateTime.FromFileTime fileTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileTime" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="fileTime">틱으로 표현된 Windows 파일 시간입니다.</param>
        <summary>지정한 Windows 파일 시간을 해당 현지 시간으로 변환합니다.</summary>
        <returns><paramref name="fileTime" /> 매개 변수가 나타내는 날짜와 시간에 해당하는 현지 시간을 나타내는 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Windows 파일 시간은 서 기 1601 년 1 월 1 일 자정 12 시 이후 경과한 100 나노초 간격의 수를 나타내는 64 비트 값 (C.E.) UTC (Coordinated Universal Time)입니다. Windows 파일 시간을 사용 하 여 응용 프로그램 액세스를 만들거나 파일을 쓸 때 기록.  
  
 `fileTime` 매개 변수는 100 나노초 틱으로 표현 된 파일 시간을 지정 합니다.  
  
 반환 값은.NET Framework 버전 2.0부터는 <xref:System.DateTime> 해당 <xref:System.DateTime.Kind%2A> 속성은 <xref:System.DateTimeKind.Local?displayProperty=nameWithType>합니다.  
  
   
  
## Examples  
 다음 예제는 <xref:System.DateTime.FromFileTime%2A> 메서드.  
  
 [!code-cpp[DateTime.FromFileTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.FromFileTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.FromFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.FromFileTime/CS/class1.cs#1)]
 [!code-vb[DateTime.FromFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.FromFileTime/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="fileTime" />이 0보다 작거나 <see cref="F:System.DateTime.MaxValue" />보다 큰 시간을 나타냅니다.</exception>
        <block subset="none" type="usage"><para>일반적으로 <see cref="M:System.DateTime.FromFileTime(System.Int64)" /> 메서드 복원을 <see cref="T:System.DateTime" /> 하 여 저장 된 값을 <see cref="M:System.DateTime.ToFileTime" /> 메서드. 그러나 두 값 다음 조건에서 다를 수 있습니다. 
-Serialization 및 deserialization을 <see cref="T:System.DateTime" /> 값이 서로 다른 시간대에 발생 합니다. 예를 들어 경우는 <see cref="T:System.DateTime" /> 오후 12 시 30 분의 시간 값 미국 동부 표준 시간대 serialize 되며 미국에서 deserialize 될 태평양 표준시, 오후 12 시 30 분의 원래 값 오전 9 시 30 분에 맞게 조정 됩니다. 에 두 표준 시간대 간의 차이 반영 합니다.  
  
-는 <see cref="T:System.DateTime" /> 값 serialize 되는 현지 표준 시간대에서 잘못 된 시간을 나타냅니다. 이 경우에 <see cref="M:System.DateTime.ToFileTime" /> 메서드를 복원 된 조정 <see cref="T:System.DateTime" /> 현지 표준 시간대에 유효한 시간을 나타낼 수 있도록 값.  
  
표준 시간에서 일광 절약 시간 전환 미국에서 발생 하는 예를 들어, 오전 2 시, 오전 3 시에 한 시간 전진할 때 2010 년 3 월 14 일 태평양 표준 시간대 이 시간 간격은이 표준 시간대에 존재 하지 않는 시간 간격, 잘못 된 시간입니다. 다음 예제에서는 내에 포함 되는 시간이이 범위를 정수 (long) 값으로 변환 됩니다는 <see cref="M:System.DateTime.ToFileTime" /> 메서드에 의해 복원 되 고는 <see cref="M:System.DateTime.FromFileTime(System.Int64)" /> 메서드를 원래 값은 시간으로 조정 되는 유효 합니다. 여부를 특정 날짜 및 시간 값에 적용 될 수 있습니다 수정 전달 하 여 확인할 수 있습니다는 <see cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" /> 메서드를 예로 보여 줍니다.  
  
[! 코드 csharp[System.DateTime.FromFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.fromfiletime/cs/fromfiletime1.cs#1)] [! 코드 vb[System.DateTime.FromFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.fromfiletime/vb/fromfiletime1.vb#1)]</para></block>
        <altmember cref="M:System.DateTime.ToUniversalTime" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="FromFileTimeUtc">
      <MemberSignature Language="C#" Value="public static DateTime FromFileTimeUtc (long fileTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromFileTimeUtc(int64 fileTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromFileTimeUtc(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromFileTimeUtc (fileTime As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FromFileTimeUtc(long fileTime);" />
      <MemberSignature Language="F#" Value="static member FromFileTimeUtc : int64 -&gt; DateTime" Usage="System.DateTime.FromFileTimeUtc fileTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileTime" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="fileTime">틱으로 표현된 Windows 파일 시간입니다.</param>
        <summary>지정한 Windows 파일 시간을 해당 UTC 시간으로 변환합니다.</summary>
        <returns><paramref name="fileTime" /> 매개 변수가 나타내는 날짜와 시간에 해당하는 UTC 시간을 나타내는 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Windows 파일 시간은 서 기 1601 년 1 월 1 일 자정 12 시 이후 경과한 100 나노초 간격의 수를 나타내는 64 비트 값 (C.E.) UTC (Coordinated Universal Time)입니다. Windows 파일 시간을 사용 하 여 응용 프로그램 액세스를 만들거나 파일을 쓸 때 기록.  
  
 `fileTime` 매개 변수는 100 나노초 틱으로 표현 된 파일 시간을 지정 합니다.  
  
 반환 값은.NET Framework 버전 2.0부터는 <xref:System.DateTime> 해당 <xref:System.DateTime.Kind%2A> 속성은 <xref:System.DateTimeKind.Utc>합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="fileTime" />이 0보다 작거나 <see cref="F:System.DateTime.MaxValue" />보다 큰 시간을 나타냅니다.</exception>
        <altmember cref="M:System.DateTime.ToUniversalTime" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
        <altmember cref="M:System.DateTime.FromFileTime(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FromOADate">
      <MemberSignature Language="C#" Value="public static DateTime FromOADate (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromOADate(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromOADate(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromOADate (d As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FromOADate(double d);" />
      <MemberSignature Language="F#" Value="static member FromOADate : double -&gt; DateTime" Usage="System.DateTime.FromOADate d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="d">OLE 자동화 날짜 값입니다.</param>
        <summary>지정된 OLE 자동화 날짜에 해당하는 <see cref="T:System.DateTime" />을 반환합니다.</summary>
        <returns><paramref name="d" />와 동일한 날짜 및 시간을 나타내는 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `d` 매개 변수는 기본 날짜 1899 년 12 월 30 일 자정 이전 또는 이후의 일 수로 날짜를 나타내는 배정밀도 부동 소수점 숫자입니다. 기호와 정수 부분 `d` 1899 년 12 월 30에서 긍정 또는 부정 일 변위를 소수 부분의 절대값으로 날짜를 인코딩하고 `d` 일 변위를 자정에서에 대 한 분수로 하루 중 시간을 인코딩합니다. `d` 음수 657435.0 양의 2958465.99999999 사이의 값 이어야 합니다.  
  
 날짜 인코딩 방식으로 인해 모든 시간을 1899 년 12 월 30 일을 나타내는 두 가지는 note 합니다. 예를 들어-0.5와 0.5 정오를 의미 1899 년 12 월 30 일 변위를 더하거나 기본 날짜 로부터 0 일은 여전히 기본 날짜 이며 반나절 변위 자정부터 정오 때문입니다.  
  
 참조 <xref:System.DateTime.ToOADate%2A> OLE Automation에 대 한 자세한 내용은 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">날짜가 유효한 OLE 자동화 날짜 값이 아닙니다.</exception>
        <altmember cref="M:System.DateTime.ToOADate" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDateTimeFormats">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>이 인스턴스의 값을 표준 날짜 및 시간 서식 지정자에서 지원하는 모든 문자열 표현으로 변환합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  여러 호출을 가정 하지 않아야 합니다 <xref:System.DateTime.GetDateTimeFormats%2A> 오버 로드는 동일한 데이터를 반환 합니다. 특정 오버 로드에 따라 현재 문화권이 변경, 사용자는 개별 문화권 설정을 재정의 또는 시스템의 문화권 데이터 업데이트가 발생 하는 경우이 메서드에서 반환 되는 데이터 변경할 수 있습니다.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">표준 날짜 및 시간 형식 문자열</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeFormats () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetDateTimeFormats();" />
      <MemberSignature Language="F#" Value="member this.GetDateTimeFormats : unit -&gt; string[]" Usage="dateTime.GetDateTimeFormats " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 인스턴스의 값을 표준 날짜 및 시간 서식 지정자에서 지원하는 모든 문자열 표현으로 변환합니다.</summary>
        <returns>표준 날짜 및 시간 서식 지정자 중 하나를 사용하여 이 인스턴스의 값을 서식 지정한 표현이 각 요소인 문자열 배열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 반환한 문자열 배열이 합니다 <xref:System.DateTime.GetDateTimeFormats?displayProperty=nameWithType> 에 대 한 별도 호출에서 반환 된 문자열 배열을 결합 하는 것과 같습니다는 <xref:System.DateTime.GetDateTimeFormats%28System.Char%29?displayProperty=nameWithType> "d", "D", "f", "F", "g", "G", "m", "o", "r", "s", "t", "T", "u", "U" 및 "y" 표준 서식 문자열을 사용 하 여 메서드. 표준 서식 지정자에 대 한 자세한 내용은 참조 하세요. [표준 날짜 및 시간 형식 문자열](~/docs/standard/base-types/standard-date-and-time-format-strings.md)합니다.  
  
 반환 값의 각 요소는 현재 문화권에서 정보를 사용 하 여 하는 형식이 지정 됩니다. 현재 문화권에 대 한 문화권별 서식 지정 정보에 대 한 자세한 내용은 참조 하세요. <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>합니다.  
  
> [!IMPORTANT]
>  이 메서드는 문화권 구분 데이터를 사용 하므로 여러 메서드를 호출 하는 동일한 데이터를 반환 하 가정 하지 않아야 합니다. 이 메서드에서 반환 되는 데이터는 현재 문화권이 변경, 사용자는 개별 문화권 설정을 재정의 또는 시스템의 문화권 데이터 업데이트가 발생 하는 경우 변경할 수 있습니다.  
  
   
  
## Examples  
 다음 예제는 <xref:System.DateTime.GetDateTimeFormats?displayProperty=nameWithType> 메서드. 이 예제의 경우 EN-US는 컴퓨터의 현재 문화권의 모든 가능한 표준 날짜 및 시간 형식을 사용 하 여 날짜의 문자열 표현을 표시 합니다.  
  
 [!code-cpp[DateTime.GetDateTimeFormats#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.GetDateTimeFormats#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#1)]
 [!code-vb[DateTime.GetDateTimeFormats#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#1)]  
  
 이 예제에서는 다음과 같은 출력이 표시 됩니다.  
  
```  
7/28/2009  
7/28/09  
07/28/09  
07/28/2009  
09/07/28  
2009-07-28  
28-Jul-09  
Tuesday, July 28, 2009  
July 28, 2009  
Tuesday, 28 July, 2009  
28 July, 2009  
Tuesday, July 28, 2009 5:23 AM  
Tuesday, July 28, 2009 05:23 AM  
Tuesday, July 28, 2009 5:23  
Tuesday, July 28, 2009 05:23  
July 28, 2009 5:23 AM  
July 28, 2009 05:23 AM  
July 28, 2009 5:23  
July 28, 2009 05:23  
Tuesday, 28 July, 2009 5:23 AM  
Tuesday, 28 July, 2009 05:23 AM  
Tuesday, 28 July, 2009 5:23  
Tuesday, 28 July, 2009 05:23  
28 July, 2009 5:23 AM  
28 July, 2009 05:23 AM  
28 July, 2009 5:23  
28 July, 2009 05:23  
Tuesday, July 28, 2009 5:23:15 AM  
Tuesday, July 28, 2009 05:23:15 AM  
Tuesday, July 28, 2009 5:23:15  
Tuesday, July 28, 2009 05:23:15  
July 28, 2009 5:23:15 AM  
July 28, 2009 05:23:15 AM  
July 28, 2009 5:23:15  
July 28, 2009 05:23:15  
Tuesday, 28 July, 2009 5:23:15 AM  
Tuesday, 28 July, 2009 05:23:15 AM  
Tuesday, 28 July, 2009 5:23:15  
Tuesday, 28 July, 2009 05:23:15  
28 July, 2009 5:23:15 AM  
28 July, 2009 05:23:15 AM  
28 July, 2009 5:23:15  
28 July, 2009 05:23:15  
7/28/2009 5:23 AM  
7/28/2009 05:23 AM  
7/28/2009 5:23  
7/28/2009 05:23  
7/28/09 5:23 AM  
7/28/09 05:23 AM  
7/28/09 5:23  
7/28/09 05:23  
07/28/09 5:23 AM  
07/28/09 05:23 AM  
07/28/09 5:23  
07/28/09 05:23  
07/28/2009 5:23 AM  
07/28/2009 05:23 AM  
07/28/2009 5:23  
07/28/2009 05:23  
09/07/28 5:23 AM  
09/07/28 05:23 AM  
09/07/28 5:23  
09/07/28 05:23  
2009-07-28 5:23 AM  
2009-07-28 05:23 AM  
2009-07-28 5:23  
2009-07-28 05:23  
28-Jul-09 5:23 AM  
28-Jul-09 05:23 AM  
28-Jul-09 5:23  
28-Jul-09 05:23  
7/28/2009 5:23:15 AM  
7/28/2009 05:23:15 AM  
7/28/2009 5:23:15  
7/28/2009 05:23:15  
7/28/09 5:23:15 AM  
7/28/09 05:23:15 AM  
7/28/09 5:23:15  
7/28/09 05:23:15  
07/28/09 5:23:15 AM  
07/28/09 05:23:15 AM  
07/28/09 5:23:15  
07/28/09 05:23:15  
07/28/2009 5:23:15 AM  
07/28/2009 05:23:15 AM  
07/28/2009 5:23:15  
07/28/2009 05:23:15  
09/07/28 5:23:15 AM  
09/07/28 05:23:15 AM  
09/07/28 5:23:15  
09/07/28 05:23:15  
2009-07-28 5:23:15 AM  
2009-07-28 05:23:15 AM  
2009-07-28 5:23:15  
2009-07-28 05:23:15  
28-Jul-09 5:23:15 AM  
28-Jul-09 05:23:15 AM  
28-Jul-09 5:23:15  
28-Jul-09 05:23:15  
July 28  
July 28  
2009-07-28T05:23:15.0160000  
2009-07-28T05:23:15.0160000  
Tue, 28 Jul 2009 05:23:15 GMT  
Tue, 28 Jul 2009 05:23:15 GMT  
2009-07-28T05:23:15  
5:23 AM  
05:23 AM  
5:23  
05:23  
5:23:15 AM  
05:23:15 AM  
5:23:15  
05:23:15  
2009-07-28 05:23:15Z  
Tuesday, July 28, 2009 12:23:15 PM  
Tuesday, July 28, 2009 12:23:15 PM  
Tuesday, July 28, 2009 12:23:15  
Tuesday, July 28, 2009 12:23:15  
July 28, 2009 12:23:15 PM  
July 28, 2009 12:23:15 PM  
July 28, 2009 12:23:15  
July 28, 2009 12:23:15  
Tuesday, 28 July, 2009 12:23:15 PM  
Tuesday, 28 July, 2009 12:23:15 PM  
Tuesday, 28 July, 2009 12:23:15  
Tuesday, 28 July, 2009 12:23:15  
28 July, 2009 12:23:15 PM  
28 July, 2009 12:23:15 PM  
28 July, 2009 12:23:15  
28 July, 2009 12:23:15  
July, 2009  
July, 2009  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">표준 날짜 및 시간 형식 문자열</related>
      </Docs>
    </Member>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats (char format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats(char format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeFormats (format As Char) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetDateTimeFormats(char format);" />
      <MemberSignature Language="F#" Value="member this.GetDateTimeFormats : char -&gt; string[]" Usage="dateTime.GetDateTimeFormats format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="format">표준 날짜 및 시간 형식 문자열.</param>
        <summary>이 인스턴스의 값을 지정된 표준 날짜 및 시간 서식 지정자에서 지원하는 모든 문자열 표현으로 변환합니다.</summary>
        <returns><paramref name="format" /> 표준 날짜 및 시간 서식 지정자를 사용하여 이 인스턴스 값의 서식으로 각 요소가 표현된 문자열 배열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `format` 매개 변수는 표준 날짜 및 시간 형식 지정자 중 하나일 수 있습니다. 여기에 d, D, f, F, g, G, M, m O (또는 o) R (또는 r) s, t, T, u, U 및 Y (또는 y)이 포함 됩니다. 자세한 내용은 [표준 날짜 및 시간 형식 문자열](~/docs/standard/base-types/standard-date-and-time-format-strings.md)합니다.  
  
 반환 값의 각 요소는 현재 문화권에서 정보를 사용 하 여 하는 형식이 지정 됩니다. 현재 문화권에 대 한 문화권별 서식 지정 정보에 대 한 자세한 내용은 참조 하세요. <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>합니다.  
  
> [!IMPORTANT]
>  이 메서드는 문화권 구분 데이터를 사용 하므로 여러 메서드를 호출 하는 동일한 데이터를 반환 하 가정 하지 않아야 합니다. 이 메서드에서 반환 되는 데이터는 현재 문화권이 변경, 사용자는 개별 문화권 설정을 재정의 또는 시스템의 문화권 데이터 업데이트가 발생 하는 경우 변경할 수 있습니다.  
  
   
  
## Examples  
 다음 예제는 <xref:System.DateTime.GetDateTimeFormats%28System.Char%29> 메서드. 현재 문화권의 긴 날짜 형식 지정자 ("D")를 사용 하 여 날짜의 문자열 표현을 표시 합니다.  
  
 [!code-csharp[DateTime.GetDateTimeFormats#3](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#3)]
 [!code-vb[DateTime.GetDateTimeFormats#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><paramref name="format" />은 올바른 표준 날짜 및 시간 형식 지정자 문자가 아닙니다.</exception>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">표준 날짜 및 시간 형식 문자열</related>
      </Docs>
    </Member>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeFormats (provider As IFormatProvider) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetDateTimeFormats(IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="member this.GetDateTimeFormats : IFormatProvider -&gt; string[]" Usage="dateTime.GetDateTimeFormats provider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">이 인스턴스에 대한 문화권별 서식 지정 정보를 제공하는 개체입니다.</param>
        <summary>이 인스턴스의 값을 표준 날짜 및 시간 서식 지정자와 지정된 문화권별 서식 지정 정보에서 지원하는 모든 문자열 표현으로 변환합니다.</summary>
        <returns>표준 날짜 및 시간 서식 지정자 중 하나를 사용하여 이 인스턴스의 값을 서식 지정한 표현이 각 요소인 문자열 배열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 반환한 문자열 배열이 합니다 <xref:System.DateTime.GetDateTimeFormats%28System.IFormatProvider%29?displayProperty=nameWithType> 에 대 한 별도 호출에서 반환 된 문자열 배열을 결합 하는 것과 같습니다는 <xref:System.DateTime.GetDateTimeFormats%28System.Char%2CSystem.IFormatProvider%29?displayProperty=nameWithType> "d", "D", "f", "F", "g", "G", "m", "o", "r", "s", "t", "T", "u", "U" 및 "y" 표준 서식 문자열을 사용 하 여 메서드. 표준 서식 지정자에 대 한 자세한 내용은 참조 하세요. [표준 날짜 및 시간 형식 문자열](~/docs/standard/base-types/standard-date-and-time-format-strings.md)합니다.  
  
 반환 값의 각 요소에서 제공 하는 문화권별 정보를 사용 하 여 형식이 `provider`합니다.  
  
> [!IMPORTANT]
>  이 메서드는 문화권 구분 데이터를 사용 하므로 가정 하지 않아야 여러 메서드를 호출 하는 경우가 아니면 동일한 데이터를 반환 `provider` 되는 <xref:System.Globalization.CultureInfo> 고정 문화권을 나타내는 개체입니다. 사용자의 개별 문화권 설정을 재정의 하는 경우이 메서드에서 반환 되는 데이터를 변경할 수 있습니다 `provider` 업데이트에 대 한 시스템의 문화권 데이터가 발생 하는 경우 또는 `provider`합니다.  
  
   
  
## Examples  
 다음 예제는 <xref:System.DateTime.GetDateTimeFormats%28System.IFormatProvider%29?displayProperty=nameWithType> 메서드. FR-FR 문화권에 대 한 모든 가능한 표준 날짜 및 시간 형식을 사용 하 여 날짜의 문자열 표현을 표시 합니다.  
  
 [!code-cpp[DateTime.GetDateTimeFormats#2](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CPP/class1.cpp#2)]
 [!code-csharp[DateTime.GetDateTimeFormats#2](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#2)]
 [!code-vb[DateTime.GetDateTimeFormats#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#2)]  
  
 이 예제에서는 다음과 같은 출력이 표시 됩니다.  
  
```  
28/07/2009  
28/07/09  
28.07.09  
28-07-09  
2009-07-28  
mardi 28 juillet 2009  
28 juil. 09  
28 juillet 2009  
mardi 28 juillet 2009 05:23  
mardi 28 juillet 2009 5:23  
mardi 28 juillet 2009 05.23  
mardi 28 juillet 2009 05 h 23  
28 juil. 09 05:23  
28 juil. 09 5:23  
28 juil. 09 05.23  
28 juil. 09 05 h 23  
28 juillet 2009 05:23  
28 juillet 2009 5:23  
28 juillet 2009 05.23  
28 juillet 2009 05 h 23  
mardi 28 juillet 2009 05:23:15  
mardi 28 juillet 2009 5:23:15  
mardi 28 juillet 2009 05.23  
mardi 28 juillet 2009 05 h 23  
28 juil. 09 05:23:15  
28 juil. 09 5:23:15  
28 juil. 09 05.23  
28 juil. 09 05 h 23  
28 juillet 2009 05:23:15  
28 juillet 2009 5:23:15  
28 juillet 2009 05.23  
28 juillet 2009 05 h 23  
28/07/2009 05:23  
28/07/2009 5:23  
28/07/2009 05.23  
28/07/2009 05 h 23  
28/07/09 05:23  
28/07/09 5:23  
28/07/09 05.23  
28/07/09 05 h 23  
28.07.09 05:23  
28.07.09 5:23  
28.07.09 05.23  
28.07.09 05 h 23  
28-07-09 05:23  
28-07-09 5:23  
28-07-09 05.23  
28-07-09 05 h 23  
2009-07-28 05:23  
2009-07-28 5:23  
2009-07-28 05.23  
2009-07-28 05 h 23  
28/07/2009 05:23:15  
28/07/2009 5:23:15  
28/07/2009 05.23  
28/07/2009 05 h 23  
28/07/09 05:23:15  
28/07/09 5:23:15  
28/07/09 05.23  
28/07/09 05 h 23  
28.07.09 05:23:15  
28.07.09 5:23:15  
28.07.09 05.23  
28.07.09 05 h 23  
28-07-09 05:23:15  
28-07-09 5:23:15  
28-07-09 05.23  
28-07-09 05 h 23  
2009-07-28 05:23:15  
2009-07-28 5:23:15  
2009-07-28 05.23  
2009-07-28 05 h 23  
28 juillet  
28 juillet  
2009-07-28T05:23:15.0160000  
2009-07-28T05:23:15.0160000  
Tue, 28 Jul 2009 05:23:15 GMT  
Tue, 28 Jul 2009 05:23:15 GMT  
2009-07-28T05:23:15  
05:23  
5:23  
05.23  
05 h 23  
05:23:15  
5:23:15  
05.23  
05 h 23  
2009-07-28 05:23:15Z  
mardi 28 juillet 2009 12:23:15  
mardi 28 juillet 2009 12:23:15  
mardi 28 juillet 2009 12.23  
mardi 28 juillet 2009 12 h 23  
28 juil. 09 12:23:15  
28 juil. 09 12:23:15  
28 juil. 09 12.23  
28 juil. 09 12 h 23  
28 juillet 2009 12:23:15  
28 juillet 2009 12:23:15  
28 juillet 2009 12.23  
28 juillet 2009 12 h 23  
juillet 2009  
juillet 2009  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">표준 날짜 및 시간 형식 문자열</related>
      </Docs>
    </Member>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats (char format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats(char format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats(System.Char,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeFormats (format As Char, provider As IFormatProvider) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetDateTimeFormats(char format, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="member this.GetDateTimeFormats : char * IFormatProvider -&gt; string[]" Usage="dateTime.GetDateTimeFormats (format, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Char" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">날짜 및 시간 서식 문자열.</param>
        <param name="provider">이 인스턴스에 대한 문화권별 서식 지정 정보를 제공하는 개체입니다.</param>
        <summary>이 인스턴스의 값을 지정된 표준 날짜 및 시간 서식 지정자와 문화권별 서식 지정 정보에서 지원하는 모든 문자열 표현으로 변환합니다.</summary>
        <returns>표준 날짜 및 시간 서식 지정자 중 하나를 사용하여 이 인스턴스의 값을 서식 지정한 표현이 각 요소인 문자열 배열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 형식 매개 변수는 표준 날짜 및 시간 형식 지정자의 하나일 수 있습니다. 여기에 d, D, f, F, g, G, M, m O (또는 o) R (또는 r) s, t, T, u, U 및 Y (또는 y)이 포함 됩니다. 자세한 내용은 [표준 날짜 및 시간 형식 문자열](~/docs/standard/base-types/standard-date-and-time-format-strings.md)합니다.  
  
 반환 값의 각 요소에서 제공 하는 문화권별 정보를 사용 하 여 형식이 `provider`합니다.  
  
> [!IMPORTANT]
>  이 메서드는 문화권 구분 데이터를 사용 하므로 가정 하지 않아야 여러 메서드를 호출 하는 경우가 아니면 동일한 데이터를 반환 `provider` 되는 <xref:System.Globalization.CultureInfo> 고정 문화권을 나타내는 개체입니다. 사용자의 개별 문화권 설정을 재정의 하는 경우이 메서드에서 반환 되는 데이터를 변경할 수 있습니다 `provider` 업데이트에 대 한 시스템의 문화권 데이터가 발생 하는 경우 또는 `provider`합니다.  
  
   
  
## Examples  
 다음 예제는 <xref:System.DateTime.GetDateTimeFormats%28System.Char%2CSystem.IFormatProvider%29> 메서드. FR-FR 문화권에 대 한 간단한 날짜 형식 지정자 ("d")를 사용 하 여 날짜의 문자열 표현을 표시 합니다.  
  
 [!code-csharp[DateTime.GetDateTimeFormats#4](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#4)]
 [!code-vb[DateTime.GetDateTimeFormats#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><paramref name="format" />은 올바른 표준 날짜 및 시간 형식 지정자 문자가 아닙니다.</exception>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">표준 날짜 및 시간 형식 문자열</related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="dateTime.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 인스턴스의 해시 코드를 반환합니다.</summary>
        <returns>부호 있는 32비트 정수 해시 코드입니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public TypeCode GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.TypeCode GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTypeCode () As TypeCode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual TypeCode GetTypeCode();" />
      <MemberSignature Language="F#" Value="abstract member GetTypeCode : unit -&gt; TypeCode&#xA;override this.GetTypeCode : unit -&gt; TypeCode" Usage="dateTime.GetTypeCode " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.TypeCode" /> 값 형식에 대한 <see cref="T:System.DateTime" />를 반환합니다.</summary>
        <returns>열거형 상수인 <see cref="F:System.TypeCode.DateTime" />입니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Hour">
      <MemberSignature Language="C#" Value="public int Hour { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Hour" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Hour" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Hour As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Hour { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Hour : int" Usage="System.DateTime.Hour" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 인스턴스가 나타내는 날짜의 시간 구성 요소를 가져옵니다.</summary>
        <value>0부터 23 사이의 값으로 표시되는 시간 구성 요소입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 값을 <xref:System.DateTime.Hour%2A> 속성은 항상 24 시간제를 사용 하 여 표현 합니다. 날짜 및 시간을 12 시간제 시계를 사용 하 여 시간을 나타내는 문자열을 검색 하려면 호출을 <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> 또는 <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> "h" 사용자 지정 형식 지정자를 사용 하 여 메서드. 예:  
  
 [!code-csharp[System.DateTime.Hour#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Hour/cs/Hour1.cs#1)]
 [!code-vb[System.DateTime.Hour#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Hour/vb/Hour1.vb#1)]  
  
   
  
## Examples  
 다음 예제는 <xref:System.DateTime.Hour%2A> 속성입니다.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool IsDaylightSavingTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsDaylightSavingTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.IsDaylightSavingTime" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDaylightSavingTime () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsDaylightSavingTime();" />
      <MemberSignature Language="F#" Value="member this.IsDaylightSavingTime : unit -&gt; bool" Usage="dateTime.IsDaylightSavingTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.DateTime" />의 이 인스턴스가 현재 시간대의 일광 절약 시간 범위 내에 있는지를 나타냅니다.</summary>
        <returns><see langword="true" /> 속성의 값이 <see cref="P:System.DateTime.Kind" /> 또는 <see cref="F:System.DateTimeKind.Local" />이며 <see cref="F:System.DateTimeKind.Unspecified" />의 이 인스턴스 값이 현지 표준 시간대의 일광 절약 시간 범위 내에 있으면 <see cref="T:System.DateTime" />이고, <see langword="false" />가 <see cref="P:System.DateTime.Kind" />이면 <see cref="F:System.DateTimeKind.Utc" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 확인 여부를 현재 <xref:System.DateTime> 에서 반환 하는 현지 표준 시간대의 일광 절약 시간 범위 내 값 대체를 <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> 속성입니다. 값을 검색 하 여 표준 시간대 일광 절약 시간을 지원 하는지 여부를 확인할 수 있습니다 해당 <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A?displayProperty=nameWithType> 속성입니다. 일광 절약 시간제가 시간대를 확인할 수 있습니다와 일광 절약 시간제에서 전환을 검색 하 여 발생 하는 경우는 <xref:System.TimeZoneInfo.AdjustmentRule?displayProperty=nameWithType> 표준 시간대에서 반환 된 배열 <xref:System.TimeZoneInfo.GetAdjustmentRules%2A?displayProperty=nameWithType> 속성입니다.  
  
 하는 경우 현재 <xref:System.DateTime> 메서드는 반환 값 현지 표준 시간대에서 모호한 또는 잘못 된 시간을 나타내는 경우 `false`합니다.  
  
 [!INCLUDE[winxp](~/includes/winxp-md.md)] 시스템은 <xref:System.DateTime.IsDaylightSavingTime%2A> 메서드 현재 인스턴스는 일광 절약 시간 인지 여부를 결정할 때만 현재 조정 규칙을 인식 합니다. 결과적으로, 메서드가 될 수 있습니다 정확 하 게 보고 하지 현재 인스턴스의 현재 조정 규칙이 적용 되기 기간에 대 한 일광 절약 시간 적용 되는지 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="IsLeapYear">
      <MemberSignature Language="C#" Value="public static bool IsLeapYear (int year);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLeapYear(int32 year) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.IsLeapYear(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLeapYear (year As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLeapYear(int year);" />
      <MemberSignature Language="F#" Value="static member IsLeapYear : int -&gt; bool" Usage="System.DateTime.IsLeapYear year" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">4자리 연도입니다.</param>
        <summary>지정된 연도가 윤년인지를 나타내는 표시를 반환합니다.</summary>
        <returns><see langword="true" />가 윤년이면 <paramref name="year" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `year` 4 자리 10 진수로;으로 지정 됩니다. 예를 들어, 1996 합니다.  
  
 `year` 항상 일반 달력의 연간으로 해석 됩니다. 다른 달력에서 특정 연도가 윤년 했는지를 확인 하려면 해당 달력 개체의 호출 `IsLeapYear` 메서드.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.DateTime.IsLeapYear%2A> 윤년 1994 년에서 2014 사이의 연도 확인 하는 방법입니다. 이 예제에서는 결과 보여 줍니다 때는 <xref:System.DateTime.AddYears%2A> 메서드 윤 일을 1 년을 추가할 때 사용 됩니다.  
  
 [!code-csharp[System.DateTime.IsLeapYear#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.IsLeapYear/cs/IsLeapYear1.cs#1)]
 [!code-vb[System.DateTime.IsLeapYear#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.IsLeapYear/vb/IsLeapYear1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" />가 1보다 작거나 9999보다 큽니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="Kind">
      <MemberSignature Language="C#" Value="public DateTimeKind Kind { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTimeKind Kind" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Kind" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Kind As DateTimeKind" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTimeKind Kind { DateTimeKind get(); };" />
      <MemberSignature Language="F#" Value="member this.Kind : DateTimeKind" Usage="System.DateTime.Kind" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTimeKind</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 인스턴스에 표시된 시간이 현지 시간 또는 UTC(협정 세계시)를 기준으로 하는지 아니면 둘 중 어느 것도 기준으로 하지 않는지를 나타내는 값을 가져옵니다.</summary>
        <value>현재 시간이 나타내는 시간이 어떤 시간인지 나타내는 열거형 값 중 하나입니다. 기본값은 <see cref="F:System.DateTimeKind.Unspecified" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 명시적으로 설정할 수 있습니다 합니다 <xref:System.DateTime.Kind%2A> 새 속성 <xref:System.DateTime> 특정 값 <xref:System.DateTimeKind> 호출 하 여 값을 <xref:System.DateTime.SpecifyKind%2A> 메서드.  
  
 <xref:System.DateTime.Kind%2A> 속성을 사용 하면 한 <xref:System.DateTime> utc (협정 세계시) 또는 현지 시간을 명확 하 게 반영 하도록 값입니다. 반면,는 <xref:System.DateTimeOffset> 구조 명확 하 게 반영할 수 특정 표준 시간대에서 언제 든 지 단일 시점으로 시간에서입니다.  
  
   
  
## Examples  
 다음 예제에서는 합니다 <xref:System.DateTime.SpecifyKind%2A> 메서드를 보여 줍니다 하는 방법을 <xref:System.DateTime.Kind%2A> 속성이 영향을 줍니다 합니다 <xref:System.DateTime.ToLocalTime%2A> 및 <xref:System.DateTime.ToUniversalTime%2A> 변환 메서드.  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.SpecifyKind(System.DateTime,System.DateTimeKind)" />
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="C#" Value="public static readonly DateTime MaxValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTime MaxValue" />
      <MemberSignature Language="DocId" Value="F:System.DateTime.MaxValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MaxValue As DateTime " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTime MaxValue;" />
      <MemberSignature Language="F#" Value=" staticval mutable MaxValue : DateTime" Usage="System.DateTime.MaxValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.DateTime" />의 가능한 최대값을 나타냅니다. 이 필드는 읽기 전용입니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 상수의 값은 23:59:59.9999999 UTC 년 12 월 31 일 9999 양력 10000 년 1 월 1 일 00시: 00 UTC 전에 하나만 100 나노초 눈금.  
  
 와 같은 일부 달력은 <xref:System.Globalization.ThaiBuddhistCalendar>, 이전의 위 날짜 범위를 지원 <xref:System.DateTime.MaxValue>. 이러한 경우에 액세스 하려고 <xref:System.DateTime.MaxValue> 변수 할당 또는 서식 지정 및 구문 분석 작업에서 throw 할 수는 <xref:System.ArgumentOutOfRangeException>합니다. 값을 검색 하는 대신 <xref:System.DateTime.MaxValue?displayProperty=nameWithType>에서 지정된 된 문화권의 최신 유효한 날짜 값의 값을 검색할 수는 <xref:System.Globalization.Calendar.MaxSupportedDateTime?displayProperty=nameWithType> 속성입니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.DateTime> 생성자에 전달 하 여 개체를 <xref:System.Int64> 틱 수를 나타내는 값입니다. 이 예제에서는 생성자를 호출 하기 전에이 값 보다 크거나 같은 경우 인지을 보장 `DateTime.MinValue.Ticks` 보다 작거나 같음 `DateTime.MaxValue.Ticks`합니다. 그렇지 않은 throw 되는 경우는 <xref:System.ArgumentOutOfRangeException>합니다.  
  
 [!code-csharp[System.DateTime.MinValue#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.MinValue/cs/MinValue.cs#2)]
 [!code-vb[System.DateTime.MinValue#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.MinValue/vb/MinValue.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.DateTime.MinValue" />
      </Docs>
    </Member>
    <Member MemberName="Millisecond">
      <MemberSignature Language="C#" Value="public int Millisecond { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Millisecond" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Millisecond" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Millisecond As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Millisecond { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Millisecond : int" Usage="System.DateTime.Millisecond" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 인스턴스가 나타내는 날짜의 밀리초 구성 요소를 가져옵니다.</summary>
        <value>0부터 999 사이의 값으로 표시되는 밀리초 구성 요소입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 문자열 표현에 표시할 수 있습니다는 <xref:System.DateTime.Millisecond%2A> "fff" 형식 지정자를 사용 하 여 속성입니다. 예를 들어, 다음 코드는 콘솔로 시간과 날짜의 차이인 밀리초를 포함 하는 문자열을 표시 합니다.  
  
 [!code-csharp[System.DateTime.Millisecond#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Millisecond/cs/Millisecond.cs#1)]
 [!code-vb[System.DateTime.Millisecond#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Millisecond/vb/Millisecond.vb#1)]  
  
 또한 "o" 표준 서식 지정자를 사용 하 여 날짜 및 시간 값의 다른 구성 요소와 함께 밀리초 구성 요소를 표시할 수 있습니다. 예:  
  
 [!code-csharp[System.DateTime.Millisecond#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Millisecond/cs/Millisecond.cs#2)]
 [!code-vb[System.DateTime.Millisecond#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Millisecond/vb/Millisecond.vb#2)]  
  
 그러나이 "o" 서식 지정자는 사용할 라운드트립 또는 저장에 대 한 표시 보다는 <xref:System.DateTime> 값입니다. 또한 다음 예제와 같이 사용자 지정 서식 문자열을 사용 하 여 다른 날짜 및 시간 구성 요소와 함께 시간 (밀리초)을 표시할 수 있습니다.  
  
 [!code-csharp[System.DateTime.Millisecond#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Millisecond/cs/Millisecond.cs#3)]
 [!code-vb[System.DateTime.Millisecond#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Millisecond/vb/Millisecond.vb#3)]  
  
   
  
## Examples  
 다음 예제는 <xref:System.DateTime.Millisecond%2A> 속성입니다.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Minute">
      <MemberSignature Language="C#" Value="public int Minute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Minute" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Minute" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Minute As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Minute { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Minute : int" Usage="System.DateTime.Minute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 인스턴스가 나타내는 날짜의 분 구성 요소를 가져옵니다.</summary>
        <value>0부터 59 사이의 값으로 표시되는 분 구성 요소입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제는 <xref:System.DateTime.Minute%2A> 속성입니다.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="C#" Value="public static readonly DateTime MinValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTime MinValue" />
      <MemberSignature Language="DocId" Value="F:System.DateTime.MinValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MinValue As DateTime " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTime MinValue;" />
      <MemberSignature Language="F#" Value=" staticval mutable MinValue : DateTime" Usage="System.DateTime.MinValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.DateTime" />의 가능한 최소값을 나타냅니다. 이 필드는 읽기 전용입니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 상수의 값은 그레고리오력에서 0001 00:00:00.0000000 UTC에 1 월 1 일에 해당 합니다.  
  
 <xref:System.DateTime.MinValue> 할당 된 시간과 날짜를 정의 합니다. 초기화 되지 않은 <xref:System.DateTime> 변수입니다. 다음은 이에 대한 예입니다.  
  
 [!code-csharp[System.DateTime.MinValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.MinValue/cs/MinValue.cs#1)]
 [!code-vb[System.DateTime.MinValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.MinValue/vb/MinValue.vb#1)]  
  
 <xref:System.DateTime.MinValue> 하 고 <xref:System.DateTime.MaxValue> 전달 하기 전에 값이 지원 되는 범위 내에 있는지 확인 하려면 속성을 사용할 수는 <xref:System.DateTime> 생성자. 예제 섹션의 코드는이 사용법을 보여 줍니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.DateTime> 생성자에 전달 하 여 개체를 <xref:System.Int64> 틱 수를 나타내는 값입니다. 이 예제에서는 생성자를 호출 하기 전에이 값 보다 크거나 같은 경우 인지을 보장 `DateTime.MinValue.Ticks` 보다 작거나 같음 `DateTime.MaxValue.Ticks`합니다. 그렇지 않은 throw 되는 경우는 <xref:System.ArgumentOutOfRangeException>합니다.  
  
 [!code-csharp[System.DateTime.MinValue#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.MinValue/cs/MinValue.cs#2)]
 [!code-vb[System.DateTime.MinValue#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.MinValue/vb/MinValue.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Month">
      <MemberSignature Language="C#" Value="public int Month { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Month" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Month" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Month As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Month { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Month : int" Usage="System.DateTime.Month" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 인스턴스가 나타내는 날짜의 월 구성 요소를 가져옵니다.</summary>
        <value>1부터 12 사이의 값으로 표시되는 월 구성 요소입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제는 <xref:System.DateTime.Month%2A> 속성입니다.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Now">
      <MemberSignature Language="C#" Value="public static DateTime Now { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime Now" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Now" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Now As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime Now { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.Now : DateTime" Usage="System.DateTime.Now" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 컴퓨터의 현재 날짜와 시간으로 설정되고 현지 시간으로 표시되는 <see cref="T:System.DateTime" /> 개체를 가져옵니다.</summary>
        <value>현재 현지 날짜와 시간이 값인 개체입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.DateTime.Now%2A> 속성이 반환을 <xref:System.DateTime> 로컬 컴퓨터의 시간과 현재 날짜를 나타내는 값입니다. 간의 차이를 <xref:System.DateTime> 0001 년 1 월 1 일 자정 이후 경과 된 틱 수를 나타내는 값의 문자열 표현이 <xref:System.DateTime> 에서 날짜 및 시간 값을 나타내는 값을 특정 문화권별 형식입니다. 날짜 및 시간 값 서식 지정에 대 한 내용은 참조는 <xref:System.DateTime.ToString%2A> 메서드. 다음 예제에서는 여러 가지 문화권별 형식에서에서의 간단한 날짜 및 시간 문자열을 표시합니다.  
  
 [!code-cpp[System.DateTime.Now#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.datetime.now/cpp/now1.cpp#2)]
 [!code-csharp[System.DateTime.Now#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.now/cs/now1.cs#2)]
 [!code-vb[System.DateTime.Now#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.now/vb/now1.vb#2)]  
  
 이 속성의 해결 방법을 기본 운영 체제에 따라 시스템 타이머에 따라 달라 집니다. 이 0.5 15 밀리초 사이 여야 하는 경향이 있습니다. 결과적으로,에 대 한 호출을 반복 합니다 <xref:System.DateTime.Now%2A> 루프와 같이 짧은 시간 간격 속성에는 동일한 값을 반환할 수도 있습니다.  
  
 <xref:System.DateTime.Now%2A> 속성은 성능을 측정 하는 데 자주 사용 됩니다. 그러나 낮은 해상도 인해 적합 하지 벤치마킹 도구를 사용 합니다. 더 나은 방법은 사용 하 여 <xref:System.Diagnostics.Stopwatch> 클래스입니다.  
  
 반환 값은.NET Framework 버전 2.0부터는 <xref:System.DateTime> 해당 <xref:System.DateTime.Kind%2A> 속성이 반환 <xref:System.DateTimeKind.Local?displayProperty=nameWithType>합니다.  
  
> [!NOTE]
>  사용할 수도 있습니다는 <xref:System.DateTimeOffset.Now%2A?displayProperty=nameWithType> 현재 현지 날짜와 시간을 검색할 속성입니다. 현지 시간 따라서 시간 값을 휴대용 컴퓨터 시간 내에 단일 시점으로 명확 하 게 표현 될 수 있습니다.  
  
   
  
## Examples  
 다음 예제에서는 합니다 <xref:System.DateTime.Now%2A> 및 <xref:System.DateTime.UtcNow%2A> 속성을 현재 현지 날짜와 시간 및 현재 범용 검색 (UTC) 날짜 및 시간을 조정 합니다. 그런 다음 다양 한 문화권의 서식 규칙의 값을 사용 하 여 문자열을 함께 표시 하는 해당 <xref:System.DateTime.Kind%2A> 속성입니다.  
  
 [!code-cpp[System.DateTime.Now#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.datetime.now/cpp/now2.cpp#3)]
 [!code-csharp[System.DateTime.Now#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.now/cs/now2.cs#3)]
 [!code-vb[System.DateTime.Now#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.now/vb/now2.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.Now" />
        <altmember cref="P:System.DateTime.UtcNow" />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static DateTime operator + (DateTime d, TimeSpan t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTime op_Addition(valuetype System.DateTime d, valuetype System.TimeSpan t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Addition(System.DateTime,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (d As DateTime, t As TimeSpan) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime operator +(DateTime d, TimeSpan t);" />
      <MemberSignature Language="F#" Value="static member ( + ) : DateTime * TimeSpan -&gt; DateTime" Usage="d + t" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.DateTime" />
        <Parameter Name="t" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="d">더할 날짜 및 시간 값입니다.</param>
        <param name="t">더할 시간 간격입니다.</param>
        <summary>지정된 시간 간격을 지정된 날짜 및 시간에 더하여 새로운 날짜와 시간을 얻습니다.</summary>
        <returns><paramref name="d" /> 값과 <paramref name="t" /> 값의 합인 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[이 연산자에 대 한 해당 메서드는 <xref:System.DateTime.Add%28System.TimeSpan%29?displayProperty=nameWithType>  
  
## Examples  
 다음 예제에서는 더하기 연산자를 보여 줍니다.  
  
 [!code-cpp[DateTime Operators#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime Operators/CPP/class1.cpp#1)]
 [!code-csharp[DateTime Operators#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime Operators/CS/class1.cs#1)]
 [!code-vb[DateTime Operators#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime Operators/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">결과는 <see cref="T:System.DateTime" />이 <see cref="F:System.DateTime.MinValue" />보다 작거나 <see cref="F:System.DateTime.MaxValue" />보다 큽니다.</exception>
        <altmember cref="M:System.DateTime.Add(System.TimeSpan)" />
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="P:System.DateTime.Ticks" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">날짜 및 시간에 대한 산술 연산 수행</related>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (DateTime d1, DateTime d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.DateTime d1, valuetype System.DateTime d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Equality(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (d1 As DateTime, d2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(DateTime d1, DateTime d2);" />
      <MemberSignature Language="F#" Value="static member ( = ) : DateTime * DateTime -&gt; bool" Usage="d1 = d2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.DateTime" />
        <Parameter Name="d2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="d1">비교할 첫 번째 개체입니다.</param>
        <param name="d2">비교할 두 번째 개체입니다.</param>
        <summary><see cref="T:System.DateTime" />의 지정된 두 인스턴스가 같은지를 확인합니다.</summary>
        <returns><see langword="true" /> 및 <paramref name="d1" />가 동일한 날짜를 나타내면 <paramref name="d2" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.DateTime.op_Equality%2A> 두 연산자에서 결정 <xref:System.DateTime> 값이 같으면 해당 틱 수를 비교 하 여 합니다. 비교 하기 전에 <xref:System.DateTime> 개체를 동일한 표준 시간대의 시간을 나타내는 개체를 확인 합니다. 이렇게 하려면 <xref:System.DateTime.Kind%2A> 속성의 값을 비교합니다.  
  
 이 연산자에 대 한 해당 메서드는 <xref:System.DateTime.Equals%28System.Object%29?displayProperty=nameWithType>  
  
## Examples  
 다음 예제에서는 같음 연산자를 보여 줍니다.  
  
 [!code-cpp[DateTime Operators#2](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime Operators/CPP/class1.cpp#2)]
 [!code-csharp[DateTime Operators#2](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime Operators/CS/class1.cs#2)]
 [!code-vb[DateTime Operators#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime Operators/VB/class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Equals(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_GreaterThan(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member ( &gt; ) : DateTime * DateTime -&gt; bool" Usage="t1 &gt; t2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">비교할 첫 번째 개체입니다.</param>
        <param name="t2">비교할 두 번째 개체입니다.</param>
        <summary>지정된 <see cref="T:System.DateTime" />이 지정된 다른 <see cref="T:System.DateTime" />보다 나중인지를 판단합니다.</summary>
        <returns><see langword="true" />이 <paramref name="t1" />보다 이후이면 <paramref name="t2" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.DateTime.op_GreaterThan%2A> 간 관계를 결정 하는 연산자 <xref:System.DateTime> 틱의 수를 비교 하 여 값입니다. 비교 하기 전에 <xref:System.DateTime> 개체를 동일한 표준 시간대의 시간을 나타내는 개체를 확인 합니다. 이렇게 하려면 <xref:System.DateTime.Kind%2A> 속성의 값을 비교합니다.  
  
 이 연산자에 대 한 해당 메서드는 <xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_GreaterThanOrEqual(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member ( &gt;= ) : DateTime * DateTime -&gt; bool" Usage="t1 &gt;= t2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">비교할 첫 번째 개체입니다.</param>
        <param name="t2">비교할 두 번째 개체입니다.</param>
        <summary>지정된 <see cref="T:System.DateTime" />이 다른 지정된 <see cref="T:System.DateTime" />과 같거나 나중인 날짜와 시간을 나타내는지를 결정합니다.</summary>
        <returns><see langword="true" />이 <paramref name="t1" />보다 이후이거나 동일하면 <paramref name="t2" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.DateTime.op_GreaterThanOrEqual%2A> 간 관계를 결정 하는 연산자 <xref:System.DateTime> 틱의 수를 비교 하 여 값입니다. 비교 하기 전에 <xref:System.DateTime> 개체를 동일한 표준 시간대의 시간을 나타내는 개체를 확인 합니다. 이렇게 하려면 <xref:System.DateTime.Kind%2A> 속성의 값을 비교합니다.  
  
 이 연산자에 대 한 해당 메서드는 <xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (DateTime d1, DateTime d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.DateTime d1, valuetype System.DateTime d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Inequality(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (d1 As DateTime, d2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(DateTime d1, DateTime d2);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : DateTime * DateTime -&gt; bool" Usage="System.DateTime.op_Inequality (d1, d2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.DateTime" />
        <Parameter Name="d2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="d1">비교할 첫 번째 개체입니다.</param>
        <param name="d2">비교할 두 번째 개체입니다.</param>
        <summary><see cref="T:System.DateTime" />의 지정된 두 인스턴스가 다른지를 확인합니다.</summary>
        <returns><see langword="true" /> 및 <paramref name="d1" />가 동일한 날짜와 시간을 나타내지 않으면 <paramref name="d2" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.DateTime.op_Inequality%2A> 연산자는 두 개의 결정 <xref:System.DateTime> 값을 해당 틱 수를 비교 하 여 두 개체가 다릅니다. 비교 하기 전에 <xref:System.DateTime> 개체를 동일한 표준 시간대의 시간을 나타내는 개체를 확인 합니다. 이렇게 하려면 <xref:System.DateTime.Kind%2A> 속성의 값을 비교합니다.  
  
 이 연산자에 대 한 해당 메서드는 <xref:System.DateTime.Equals%28System.Object%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_LessThan(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member ( &lt; ) : DateTime * DateTime -&gt; bool" Usage="t1 &lt; t2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">비교할 첫 번째 개체입니다.</param>
        <param name="t2">비교할 두 번째 개체입니다.</param>
        <summary>지정된 <see cref="T:System.DateTime" />이 지정된 다른 <see cref="T:System.DateTime" />보다 이전인지를 판단합니다.</summary>
        <returns><see langword="true" />이 <paramref name="t1" />보다 이전이면 <paramref name="t2" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.DateTime.op_LessThan%2A> 간 관계를 결정 하는 연산자 <xref:System.DateTime> 틱의 수를 비교 하 여 값입니다. 비교 하기 전에 <xref:System.DateTime> 개체를 동일한 표준 시간대의 시간을 나타내는 개체를 확인 합니다. 이렇게 하려면 <xref:System.DateTime.Kind%2A> 속성의 값을 비교합니다.  
  
 이 연산자에 대 한 해당 메서드는 <xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_LessThanOrEqual(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member ( &lt;= ) : DateTime * DateTime -&gt; bool" Usage="t1 &lt;= t2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">비교할 첫 번째 개체입니다.</param>
        <param name="t2">비교할 두 번째 개체입니다.</param>
        <summary>지정된 <see cref="T:System.DateTime" />이 다른 지정된 <see cref="T:System.DateTime" />과 같거나 이전인 날짜와 시간을 나타내는지를 결정합니다.</summary>
        <returns><paramref name="t1" />이 <paramref name="t2" />보다 이전이거나 동일하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.DateTime.op_LessThanOrEqual%2A> 간 관계를 결정 하는 연산자 <xref:System.DateTime> 틱의 수를 비교 하 여 값입니다. 비교 하기 전에 <xref:System.DateTime> 개체를 동일한 표준 시간대의 시간을 나타내는 개체를 확인 합니다. 이렇게 하려면 <xref:System.DateTime.Kind%2A> 속성의 값을 비교합니다.  
  
 이 연산자에 대 한 해당 메서드는 <xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Subtraction">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>지정된 <see cref="T:System.DateTime" />에서 지정된 <see cref="T:System.DateTime" /> 또는 <see cref="T:System.TimeSpan" />을 뺍니다.</summary>
        <altmember cref="M:System.DateTime.Subtract(System.DateTime)" />
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static TimeSpan operator - (DateTime d1, DateTime d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_Subtraction(valuetype System.DateTime d1, valuetype System.DateTime d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Subtraction(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (d1 As DateTime, d2 As DateTime) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan operator -(DateTime d1, DateTime d2);" />
      <MemberSignature Language="F#" Value="static member ( - ) : DateTime * DateTime -&gt; TimeSpan" Usage="d1 - d2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.DateTime" />
        <Parameter Name="d2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="d1">빼기에서 날짜 및 시간 피감수 값입니다.</param>
        <param name="d2">빼기에서 날짜 및 시간 감수 값입니다.</param>
        <summary>지정된 날짜와 시간을 지정된 다른 날짜와 시간에서 빼고 시간 간격을 반환합니다.</summary>
        <returns><paramref name="d1" />과 <paramref name="d2" /> 사이의 시간 간격, 즉 <paramref name="d1" />에서 <paramref name="d2" />를 뺀 값입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.op_Subtraction%28System.DateTime%2CSystem.DateTime%29> 메서드 값을 고려 하지 않습니다는 <xref:System.DateTime.Kind%2A> 의 두 속성 <xref:System.DateTime> 값 빼기를 수행 하는 경우. 빼기 전에 <xref:System.DateTime> 개체를 개체 동일한 표준 시간대의 시간을 나타내는 것을 확인 합니다. 그렇지 않으면 결과 표준 시간대 간의 차이 포함 됩니다.  
  
> [!NOTE]
>  <xref:System.DateTimeOffset.op_Subtraction%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType> 메서드는 빼기를 수행 하는 경우 표준 시간대 간의 차이 고려 합니다.  
  
 이 연산자에 대 한 해당 메서드는 <xref:System.DateTime.Subtract%28System.DateTime%29?displayProperty=nameWithType>  
  
## Examples  
 다음 예제는 <xref:System.DateTime.Subtract%2A> 메서드 및 빼기 연산자입니다.  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Subtract(System.DateTime)" />
        <altmember cref="P:System.DateTime.Ticks" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">날짜 및 시간에 대한 산술 연산 수행</related>
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static DateTime operator - (DateTime d, TimeSpan t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTime op_Subtraction(valuetype System.DateTime d, valuetype System.TimeSpan t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Subtraction(System.DateTime,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (d As DateTime, t As TimeSpan) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime operator -(DateTime d, TimeSpan t);" />
      <MemberSignature Language="F#" Value="static member ( - ) : DateTime * TimeSpan -&gt; DateTime" Usage="d - t" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.DateTime" />
        <Parameter Name="t" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="d">뺄 대상 날짜 및 시간 값입니다.</param>
        <param name="t">뺄 시간 간격입니다.</param>
        <summary>지정된 날짜와 시간에서 지정된 시간 간격을 빼고 새 날짜와 시간을 반환합니다.</summary>
        <returns><paramref name="d" /> 값에서 <paramref name="t" /> 값을 뺀 값인 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 틱 값을 뺍니다 `t` 틱 값에서 `d`합니다.  
  
 이 연산자에 대 한 해당 메서드는 <xref:System.DateTime.Subtract%28System.DateTime%29?displayProperty=nameWithType>  
  
## Examples  
 다음 예제는 <xref:System.DateTime.Subtract%2A> 메서드 및 빼기 연산자입니다.  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">결과는 <see cref="T:System.DateTime" />이 <see cref="F:System.DateTime.MinValue" />보다 작거나 <see cref="F:System.DateTime.MaxValue" />보다 큽니다.</exception>
        <altmember cref="M:System.DateTime.Subtract(System.TimeSpan)" />
        <altmember cref="P:System.DateTime.Ticks" />
        <altmember cref="T:System.TimeSpan" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">날짜 및 시간에 대한 산술 연산 수행</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>날짜 및 시간에 대한 문자열 표현을 해당 <see cref="T:System.DateTime" />으로 변환합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 섹션 내용  
  
- [메서드 호출 합니까?](#Tasks)
- [구문 분석할 문자열](#StringToParse)
- [구문 분석 및 문화적 규칙](#Culture)
- [구문 분석 하 고 style 요소](#Styles)
- [반환 값과 DateTime.Kind](#kind)
 
<a name="Tasks"></a>   
### <a name="which-method-do-i-call"></a>메서드 호출 합니까?  
  
|대상|Call|  
|--------|----------|  
|현재 문화권의 규칙을 사용 하 여 날짜 및 시간 문자열 구문 분석 합니다.|<xref:System.DateTime.Parse%28System.String%29> 오버로드|  
|특정 문화권의 규칙을 사용 하 여 날짜 및 시간 문자열 구문 분석 합니다.|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> 오버 로드 (참조 [구문 분석 및 문화권별 표기법](#Culture))|  
|특별 한 스타일 요소 (예: 공백 문자 또는 공백이 없음)를 사용 하 여 날짜 및 시간 문자열 구문 분석 합니다.|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> 오버로드|  
|특정 형식 이어야 하는 날짜 및 시간 문자열 구문 분석 합니다.|<xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType> 또는 <xref:System.DateTime.TryParseExact%2A?displayProperty=nameWithType>|
|날짜 및 시간 문자열 구문 분석 하 고 UTC 또는 현지 시간으로의 변환을 수행 합니다.|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> 오버로드|  
|예외를 처리 하지 않고 날짜 및 시간 문자열 구문 분석 합니다.|<xref:System.DateTime.TryParse%2A?displayProperty=nameWithType> 메서드|  
|서식 지정 작업에서 만든 날짜 및 시간 값 (라운드트립)을 복원 합니다.|"O" 또는 "r" 표준 서식 문자열을 전달 하는 <xref:System.DateTime.ToString%28System.String%29> 메서드를 호출 합니다 <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> 오버 로드 <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType>|  
|컴퓨터 (및 가능한 경우 문화권) 경계를 넘어 고정 형식으로 날짜 및 시간 문자열 구문 분석 합니다.|<xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType> 또는 <xref:System.DateTime.TryParseExact%2A?displayProperty=nameWithType> 메서드|  
  
<a name="StringToParse"></a>   
### <a name="the-string-to-parse"></a>구문 분석할 문자열  
 합니다 <xref:System.DateTime.Parse%2A> 메서드는 날짜 및 시간 값의 문자열 표현으로 변환 하려고 합니다. 해당 <xref:System.DateTime> 동일 합니다. throw 하지 않고 완전히 입력된 문자열을 구문 분석을 <xref:System.FormatException> 예외입니다.  
  
> [!IMPORTANT]
>  구문 분석 작업을 인식할 수 없는 문자열 형식으로 인해 실패 하면를 <xref:System.DateTime.Parse%2A> 메서드가 throw를 <xref:System.FormatException>반면 합니다 <xref:System.DateTime.TryParse%2A> 메서드가 반환 되는 `false`합니다. 예외 처리 비용이 많이 들 수, 있으므로 사용 해야 <xref:System.DateTime.Parse%2A> 구문 분석 작업이 입력된 소스는 신뢰할 수 있는 때문에 성공 하려면 예상 되는 경우. <xref:System.DateTime.TryParse%2A> 구문 분석 오류 가능성이 되 면 입력된 원본을 신뢰할 수 없거나 성공적으로 구문 분석 하지 않습니다 하는 문자열에 대 한 대체 값이 적절 한 기본값 때문에 특히 것이 좋습니다.   

 구문 분석 될 문자열이 다음 형식 중 하나를 사용할 수 있습니다.  
  
-   날짜 및 시간 구성 요소에 있는 string입니다.  
  
-   날짜 시간 구성 요소가 없는 같지만 문자열입니다. 시간 구성 요소가 없으면 메서드는 자정 12 시를 가정 합니다. 날짜 구성 요소에는 두 자리 연도를 기준으로 변환 됩니다 합니다 <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> 현재 문화권의 현재 달력의 지정된 된 문화권의 현재 달력 (null이 아닌을 사용 하 여 오버 로드를 사용 하는 경우 `provider` 인수).  
  
- 월 및 연도 포함 하는 날짜 구성 요소가 있지만 없습니다 일 구성 요소는 문자열입니다. 메서드는 해당 월의 첫 번째 날을 가정합니다.

- 월과 일을 포함 하는 날짜 구성 요소가 있지만 없습니다 연도 구성 요소는 문자열입니다. 메서드는 현재 연도 가정합니다.

-   시간만 없는 날짜 구성 요소가 있는 string입니다. 메서드를 호출 하지 않으면 현재 날짜를 가정 합니다 <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> 오버 로드 하 고 포함 <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> 에 `styles` 인수에 있는 경우 메서드가 가정 년 1 월 1 일 날짜를 0001 합니다.  

- 시간만 및 날짜 구성 요소가 없는 AM/PM 지정자를 포함 하는 시간 구성 요소는 문자열입니다. 메서드는 현재 날짜와 없는 분 및 초가 없는 시간을 가정합니다. 호출 하 여이 동작을 변경할 수는 <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> 오버 로드 하 고 포함 <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> 에 `styles` 인수에 있는 경우 메서드가 가정 년 1 월 1 일 날짜를 0001.

-   표준 시간대 정보를 포함 하 고 ISO 8601을 준수 하는 문자열입니다. 다음 예제에서는 첫 번째 문자열 utc (협정 세계시)를 지정 하 고는 7 시간 표준 시간대의 시간을 지정 하는 두 번째 UTC 보다 이전 버전:  
  
    "2008-11-01T19:35:00.0000000Z"   
    "2008-11-01T19:35:00.0000000-07:00"  
  
-   RFC 1123 시간 형식을; 및 GMT 지정자를 포함 하는 문자열 예를 들어:  
  
     "2008 년 11 월 01, 토요일 19시 35분: 00 GMT"  
  
-   날짜 및 시간과 표준 시간대 오프셋된 정보를 포함 하는 문자열 예를 들어:  
  
     "2009-03-01 05시 42분: 00-5:00"  

다음 예제에서는 EN-US 문화권에이 경우에 현재 문화권의 서식 규칙을 사용 하 여 각 형식의 문자열을 구문 분석:

[!code-csharp-interactive[Default parsing](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse6.cs)]
[!code-vb[Default parsing](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse6.vb)]  
  
 입력된 문자열 구문 분석 메서드에서 사용 되는 달력 윤년에서 윤 일을 나타내는 경우 (참조 [규칙을 구문 분석 및 문화적](#Culture)), <xref:System.DateTime.Parse%2A> 메서드 문자열을 성공적으로 구문 분석 합니다. 입력된 문자열에서 비-윤년 윤 일을 나타내는 경우 메서드에서 throw 한 <xref:System.FormatException>합니다.  
  
 때문에 <xref:System.DateTime.Parse%2A> 메서드는 날짜의 문자열 표현을 구문 분석 하려고 시도 하 고 현재 또는 서로 다른 문화권에서 문자열을 구문 분석 하는 동안 지정된 된 문화권의 서식 규칙을 사용 하 여 실패할 수 있습니다. 여러 로캘에서 특정 날짜 및 시간 서식을 구문 분석, 오버 로드 중 하나를 사용 합니다 <xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType> 메서드 형식 지정자를 제공 합니다.  
  
<a name="Culture"></a>   
### <a name="parsing-and-cultural-conventions"></a>구문 분석 및 문화적 규칙  
 모든 오버 로드는 <xref:System.DateTime.Parse%2A> 메서드는 문화권을 구분 하지 않는 한 구문 분석 될 문자열 (으로 나타나는 `s` 표에) ISO 8601 패턴을 따르는. 구문 분석 작업에서 서식 지정 정보를 사용 하는 <xref:System.Globalization.DateTimeFormatInfo> 다음과 같이 파생 되는 개체:  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

|호출 하는 경우|및 `provider` 됩니다|서식 지정 정보에서 파생 됩니다.|  
|-----------------|-----------------------|--------------------------------------------|  
|<xref:System.DateTime.Parse%28System.String%29>|-|현재 스레드 문화권 (<xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A?displayProperty=nameWithType> 속성)|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> 또는 <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|<xref:System.Globalization.DateTimeFormatInfo> 개체|지정 된 <xref:System.Globalization.DateTimeFormatInfo> 개체|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> 또는 <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|`null`|현재 스레드 문화권 (<xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A?displayProperty=nameWithType> 속성)|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> 또는 <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|<xref:System.Globalization.CultureInfo> 개체|<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> 속성|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> 또는 <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|사용자 지정 <xref:System.IFormatProvider> 구현|<xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> 메서드|  
  
 면에서 파생 된 형식 지정 정보를 <xref:System.Globalization.DateTimeFormatInfo> 개체는 <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType> 속성은 구문 분석 작업에 사용 되는 일정을 정의 합니다.  
  
 사용 하 여 날짜 및 시간 문자열을 구문 분석 하는 경우는 <xref:System.Globalization.DateTimeFormatInfo> 사용자 지정 표준 문화권을 다른 설정을 사용 하 여 개체를 사용 합니다 <xref:System.DateTime.ParseExact%2A> 메서드 대신는 <xref:System.DateTime.Parse%2A> 성공적인 변환에 대 한 가능성을 개선 하는 방법. 비표준 날짜 및 시간 문자열에는 복잡 하 고 구문 분석 하기 어려울 수 있습니다. <xref:System.DateTime.Parse%2A> 메서드는 실패할 수 있습니다는 모두 여러 암시적 구문 분석 패턴을 사용 하 여 문자열 구문 분석 하려고 합니다. 반면,는 <xref:System.DateTime.ParseExact%2A> 메서드를 사용 하면 성공 가능성이 있는 정확한 구문 분석 패턴을 하나 이상의 명시적으로 지정 해야 합니다. 자세한 내용은 "DateTimeFormatInfo 및 동적 데이터" 섹션을 참조 하세요.를 <xref:System.Globalization.DateTimeFormatInfo> 항목입니다.  
  
> [!IMPORTANT]
>  에 불과하며 특정 문화권의 서식 규칙은 동적 변경 될 수 있습니다. 이 즉, 또는 기본값 (현재) 문화권의 서식 규칙에 종속 된 구문 분석 작업을 지정 하는 <xref:System.IFormatProvider> 고정 문화권이 아닌 문화권을 나타내는 개체는 다음 중 하나라도 발생 하는 경우에 예기치 않게 실패할 수 있습니다.  
>   
> -   Culture 별 데이터의.NET Framework 또는.NET Framework의 기존 버전에 대 한 업데이트의 결과로 또는 부 버전 간에 변경 되었습니다.  
> -   Culture 별 데이터를 컴퓨터에서 컴퓨터 또는 세션 달라질 수 있는 사용자 기본 설정을 반영 합니다.  
> -   Culture 별 데이터는 표준 문화권 또는 사용자 지정 문화권의 설정을 재정의 하는 대체 문화권을 나타냅니다.  
>   
>  문화권 데이터의 변경 내용과 연결 된 데이터 및 시간 문자열 구문 분석 문제를 방지 하려면 고정 문화권을 사용 하 여 날짜 및 시간 문자열을 구문 분석할 수 있습니다 하거나 호출할 수 있습니다 합니다 <xref:System.DateTime.ParseExact%2A> 또는 <xref:System.DateTime.TryParseExact%2A> 메서드 정확한 형식을 지정 합니다. 구문 분석 될 문자열입니다. 직렬화 되 고 날짜 및 시간 데이터를 역직렬화 하는 동안, 사용 하거나 고정 문화권의 서식 규칙 또는 serialize 및 deserialize 할 수 있습니다 하는 경우는 <xref:System.DateTime> 이진 형식에서 값입니다.  
>   
>  자세한 내용은 "동적 culture 데이터" 섹션을 참조 하세요. 합니다 <xref:System.Globalization.CultureInfo> 항목과 "유지 DateTime 값" 섹션을 <xref:System.DateTime> 항목입니다.  
  
<a name="Styles"></a>   
### <a name="parsing-and-style-elements"></a>구문 분석 하 고 style 요소  
 모든 <xref:System.DateTime.Parse%2A> 오버 로드는 입력된 문자열에서 선행, 내부 또는 후행 공백 문자 무시 (으로 나타나는 `s` 표에). 날짜 및 시간을 선행 및 후행 숫자 기호 문자 ("#", U + 00-23), 쌍을 사용 하 여 대괄호로 묶어야 하 고 하나를 사용 하 여 올 수 있습니다 또는 이상의 NULL 문자 (U + 0000)입니다.  
  
 또한 합니다 <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> 오버 로드에는 `styles` 의 하나 이상의 멤버로 구성 된 매개 변수는 <xref:System.Globalization.DateTimeStyles> 열거형입니다. 이 매개 변수를 정의 하는 방법을 `s` 해석 되어야 하 고 구문 분석 작업으로 변환 해야 하는 방법을 `s` 날짜 및 시간입니다. 다음 표에서 각 미치는 <xref:System.Globalization.DateTimeStyles> 구문 분석 작업에는 멤버입니다.  
  
|DateTimeStyles 멤버|변환에 미치는 영향|  
|---------------------------|--------------------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|구문 분석 `s` 필요한 UTC로 변환, 다음과 같은 경우:<br /><br /> - `s` 표준 시간대 오프셋을 포함 이거나 `s` 시간대 정보가 없습니다 있지만 `styles` 포함 합니다 <xref:System.Globalization.DateTimeStyles.AssumeLocal> 플래그를 메서드 호출 문자열 구문 분석 <xref:System.DateTime.ToUniversalTime%2A> 반환 된 변환할 <xref:System.DateTime> 값을 UTC 및 집합은 <xref:System.DateTime.Kind%2A> 속성을 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>입니다.<br />- `s` UTC를 나타냅니다 이거나 `s` 표준 시간대 정보를 포함 하지 있지만 `styles` 포함 합니다 <xref:System.Globalization.DateTimeStyles.AssumeUniversal> 플래그를 메서드 문자열을 구문 분석, 반환 된 표준 시간대 변환 작업 없이 수행 <xref:System.DateTime> 값 집합과 합니다 <xref:System.DateTime.Kind%2A> 속성을 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>입니다.<br />-다른 모든 경우 플래그에 영향을 주지 않습니다.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|이 값은 무시됩니다. 날짜 및 시간 요소에 내부 공백을 허용 항상 `s`합니다.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|이 값은 무시됩니다. 날짜 및 시간 요소에서 선행 공백을 허용 항상 `s`합니다.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|이 값은 무시됩니다. 날짜 및 시간 요소에 항상 허용 됩니다 후행 공백을 `s`합니다.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|지정 `s` 선행, 내부 및 후행 공백을 포함할 수 있습니다. 이것은 기본적인 동작입니다. 더 제한적인 제공 하 여 재정의할 수 없습니다 <xref:System.Globalization.DateTimeStyles> 와 같은 열거형 값 <xref:System.Globalization.DateTimeStyles.None>합니다.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|지정 합니다 `s` 에 현지 시간을 표준 시간대 정보를 사용 하는 것으로 간주 합니다. 경우가 아니면 합니다 <xref:System.Globalization.DateTimeStyles.AdjustToUniversal> 플래그가 없으면 합니다 <xref:System.DateTime.Kind%2A> 반환 된 속성 <xref:System.DateTime> 값으로 설정 됩니다 <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|지정 합니다 `s` 없는 UTC 표준 시간대 정보가 있는 것으로 간주 됩니다. 경우가 아니면 합니다 <xref:System.Globalization.DateTimeStyles.AdjustToUniversal> 플래그가, 메서드가 반환 된 변환 하는 <xref:System.DateTime> 값을 UTC에서 현지 시간 및 집합 해당 <xref:System.DateTime.Kind%2A> 속성을 <xref:System.DateTimeKind.Local?displayProperty=nameWithType>입니다.|  
|<xref:System.Globalization.DateTimeStyles.None>|유효 하더라도이 값은 무시 됩니다.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|표준 시간대 정보가 포함 된 문자열의 경우 날짜 및 시간 문자열을 변환 하지 않으려면 시도 <xref:System.DateTime> 와 현지 시간을 나타내는 해당 <xref:System.DateTime.Kind%2A> 속성이로 설정 <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. 호출 하 여 이러한 문자열은 생성 하는 일반적으로 <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> 메서드 "o", "r" 또는 "u" 표준 서식 지정자를 사용 하 여 합니다.|  

<a name="kind"></a>   
### <a name="the-return-value-and-datetimekind"></a>반환 값과 DateTime.Kind

합니다 `DateTime.Parse` 반환 오버 로드를 <xref:System.DateTime> 값 <xref:System.DateTime.Kind> 속성에는 표준 시간대 정보가 포함 됩니다. 이 시간을 나타낼 수 있습니다.

- 협정 세계시 (<xref:System.DateTimeKind.Utc?displayProperty=fullName>).
- 현지 표준 시간대의 시간 (<xref:System.DateTimeKind.Local?displayProperty=fullName>).
- 알 수 없는 표준 시간대의 시간 (xref:System.DateTimeKind.Unspecified?displayProperty=fullName >).
 
 일반적으로 <xref:System.DateTime.Parse%2A> 메서드가 반환 되는 <xref:System.DateTime> 개체입니다 <xref:System.DateTime.Kind%2A> 속성은 <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>합니다. 그러나 합니다 <xref:System.DateTime.Parse%2A> 도 표준 시간대 변환을 수행 하 고의 값을 설정할 수 있습니다 메서드는 <xref:System.DateTime.Kind%2A> 속성 값에 따라 다르게 합니다 `s` 및 `styles` 매개 변수:  
  
|조건|표준 시간대 변환|Kind 속성|  
|--------|--------------------------|-------------------|  
|`s` 표준 시간대 정보를 포함합니다.|날짜 및 시간을 현지 표준 시간대의 시간으로 변환 됩니다.|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|  
|`s` 표준 시간대 정보를 포함 하 고 `styles` 포함을 <xref:System.Globalization.DateTimeStyles.AdjustToUniversal> 플래그 합니다.|날짜 및 시간을 utc (협정 세계시)로 변환 됩니다.|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|`s` Z 또는 GMT 표준 시간대 지정자를 포함 하 고 `styles` 포함을 <xref:System.Globalization.DateTimeStyles.RoundtripKind> 플래그입니다.|날짜 및 시간을 UTC로 해석 됩니다.|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
  
 다음 예제에서는 현지 표준 시간대의 시간 표준 시간대 정보를 포함 하는 날짜 문자열을 변환 합니다.  
  
 [!code-csharp-interactive[System.DateTime.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse2.cs#2)]
 [!code-vb[System.DateTime.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse2.vb#2)]  

  날짜 및 시간 값을 유지할 수 있습니다 <xref:System.DateTime.Kind%2A> 서식 및 사용 하 여 작업을 구문 분석 중에 속성을 <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> 플래그입니다. 다음 예제는 방법을 <xref:System.Globalization.DateTimeStyles.RoundtripKind> 플래그에 구문 분석 작업에 영향을 줍니다 <xref:System.DateTime> "o", "r" 또는 "u" 서식 지정자를 사용 하 여 문자열로 변환 되는 값입니다.  
  
 [!code-csharp-interactive[System.DateTime.Parse#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse5.cs#5)]
 [!code-vb[System.DateTime.Parse#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse5.vb#5)]  
  
### Examples

호출 하는 다양 한 예제는 `DateTime.Parse` 메서드는 재생 중에 삽입 합니다 [주의](#remarks) 개인에 대 한 설명서 및이 문서의 섹션 `DateTime.Parse` 오버 로드 합니다.

[!INCLUDE[interactive-note](~/includes/csharp-interactive-with-utc-note.md)]

전체 집합을 다운로드할 수도 있습니다 `DateTime.Parse` 에 포함 된 예는 [C#에 대 한.NET Core 2.0 프로젝트](https://github.com/dotnet/samples/raw/master/snippets/csharp/downloads/api/System/DateTime.Parse.zip) 와 [Visual Basic.NET Core 2.0 프로젝트](https://github.com/dotnet/samples/raw/master/snippets/visualbasic/downloads/api/System/DateTime.Parse.zip)에서 [dotnet / 샘플 GitHub 리포지토리](https://github.com/dotnet/samples)합니다.

 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)" />
        <altmember cref="Overload:System.DateTime.TryParse" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime Parse(System::String ^ s);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; DateTime" Usage="System.DateTime.Parse s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">변환할 날짜 및 시간이 포함된 문자열입니다. 자세한 내용은 [구문 분석할 문자열](#StringToParse)을 참조하세요.</param>
        <summary>현재 스레드 문화권의 규칙을 사용하여 날짜 및 시간의 문자열 표현을 해당 <see cref="T:System.DateTime" />으로 변환합니다.</summary>
        <returns><paramref name="s" />에 포함된 날짜 및 시간에 해당하는 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
경우 `s` 이 메서드는 반환 표준 시간대 정보를 포함를 <xref:System.DateTime> 값 <xref:System.DateTime.Kind%2A> 속성이 <xref:System.DateTimeKind.Local?displayProperty=nameWithType> 날짜 및 시간을 변환 하 고 `s` 를 현지 시간입니다. 그렇지 않은 경우 표준 시간대 변환 작업 없이 수행 하 고 반환을 <xref:System.DateTime> 값 <xref:System.DateTime.Kind%2A> 속성은 <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>합니다.

이 오버 로드를 구문 분석 하려고 `s` 현재 문화권의 서식 규칙을 사용 하 여 합니다. 현재 문화권으로 표시 됩니다는 <xref:System.Globalization.CultureInfo.CurrentCulture> 속성입니다. 특정 문화권의 서식 규칙을 사용 하 여 문자열 구문 분석을 호출 합니다 <xref:System.DateTime.Parse(System.String,System.IFormatProvider)> 또는 <xref:System.DateTime.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)> 오버 로드 합니다.

이 오버 로드를 구문 분석 하려고 `s` 를 사용 하 여 <xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWithType> 스타일입니다.

## <a name="example"></a>예제

다음 예제에서는 여러 날짜 및 시간 값의 문자열 표현을 구문 분석:

- 예제 출력을 생성 하는 데 사용 하는 컴퓨터의 현재 스레드 문화권의 서식 규칙을 제공 하는 기본 형식 공급자를 사용 합니다. 이 예제의 출력은 EN-US 문화권의 서식 규칙을 반영합니다.

- 인 기본 스타일 값을 사용 하 여 <xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWIthType>입니다. 

처리는 <xref:System.FormatException> 메서드를 다른 문화권을 사용 하 여 날짜 및 시간의 문자열 표현을 구문 분석 하려고 할 때 throw 되는 예외 규칙의 서식 지정 합니다. 또한 현재 스레드 문화권의 서식 규칙을 사용 하지 않는 날짜 및 시간 값을 구문 분석 하는 방법을 보여 줍니다.  
  
 [!code-csharp-interactive[System.DateTime.Parse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse1.cs#1)]
 [!code-vb[System.DateTime.Parse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse1.vb#1)]  

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="s" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.FormatException"><paramref name="s" />에 날짜 및 시간의 유효한 문자열 표현이 없습니다.</exception>
        <altmember cref="Overload:System.DateTime.TryParse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">.NET Framework의 날짜 및 시간 문자열 구문 분석</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">표준 날짜 및 시간 형식 문자열</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">사용자 지정 날짜 및 시간 형식 문자열</related>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (string s, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(string s, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, provider As IFormatProvider) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime Parse(System::String ^ s, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider -&gt; DateTime" Usage="System.DateTime.Parse (s, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s">변환할 날짜 및 시간이 포함된 문자열입니다. 자세한 내용은 [구문 분석할 문자열](#StringToParse)을 참조하세요.</param>
        <param name="provider"><paramref name="s" />에 대한 문화권별 서식 지정 정보를 제공하는 개체입니다.  [구문 분석 및 문화적 규칙](#Culture)을 참조하세요.</param>
        <summary>문화권별 형식 정보를 사용하여 날짜 및 시간의 문자열 표현을 해당 <see cref="T:System.DateTime" />으로 변환합니다.</summary>
        <returns><paramref name="s" />에 지정된 내용에 따라 <paramref name="provider" />에 포함된 날짜 및 시간에 해당하는 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
경우 `s` 이 메서드는 반환 표준 시간대 정보를 포함를 <xref:System.DateTime> 값 <xref:System.DateTime.Kind%2A> 속성이 <xref:System.DateTimeKind.Local?displayProperty=nameWithType> 날짜 및 시간을 변환 하 고 `s` 를 현지 시간입니다. 그렇지 않은 경우 표준 시간대 변환 작업 없이 수행 하 고 반환을 <xref:System.DateTime> 값 <xref:System.DateTime.Kind%2A> 속성은 <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>합니다.

이 오버 로드를 구문 분석 하려고 `s` 를 사용 하 여는 <xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWithType> 스타일입니다.

## <a name="example"></a>예제

다음 예에서는 고 EN-US, FR-FR, DE-DE 문화권의 규칙을 사용 하 여 날짜 문자열의 배열 구문 분석 합니다. 다른 문화권에 걸쳐 단일 날짜의 문자열 표현을 다르게 해석 될 수 있는지를 보여 줍니다.  
  
[!code-csharp-interactive[System.DateTime.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse3.cs#3)]
[!code-vb[System.DateTime.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="s" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.FormatException"><paramref name="s" />에 날짜 및 시간의 유효한 문자열 표현이 없습니다.</exception>
        <altmember cref="Overload:System.DateTime.TryParse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">.NET Framework의 날짜 및 시간 문자열 구문 분석</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">표준 날짜 및 시간 형식 문자열</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">사용자 지정 날짜 및 시간 형식 문자열</related>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (ReadOnlySpan&lt;char&gt; s, IFormatProvider provider = null, System.Globalization.DateTimeStyles styles = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As ReadOnlySpan(Of Char), Optional provider As IFormatProvider = null, Optional styles As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTime" />
      <MemberSignature Language="F#" Value="static member Parse : ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.Parse (s, provider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="s">구문 분석할 문자열을 포함하는 메모리 범위입니다. 자세한 내용은 [구문 분석할 문자열](#StringToParse)을 참조하세요.</param>
        <param name="provider"><paramref name="s" />에 대한 문화권별 서식 지정 정보를 제공하는 개체입니다.  [구문 분석 및 문화적 규칙](#Culture)을 참조하세요.</param>
        <param name="styles">구문 분석 작업이 성공하기 위해 <paramref name="s" />에 있을 수 있는 스타일 요소를 나타내는 열거형 값의 비트 조합으로, 현재 시간대 또는 현재 날짜와 비교하여 구문 분석된 날짜를 해석할 방법을 정의합니다. 지정할 일반적인 값은 <see cref="F:System.Globalization.DateTimeStyles.None" />입니다.</param>
        <summary>문화권별 형식 정보 및 서식 지정 스타일을 사용하여 날짜 및 시간의 문자열 표현을 포함하는 메모리 범위를 동등한 해당 <see cref="T:System.DateTime" />으로 변환합니다.</summary>
        <returns><paramref name="s" /> 및 <paramref name="provider" />에 지정된 내용에 따라 <paramref name="styles" />에 포함된 날짜 및 시간에 해당하는 개체입니다.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.FormatException"><paramref name="s" />에 날짜 및 시간의 유효한 문자열 표현이 없습니다.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="styles" />에 <see cref="T:System.Globalization.DateTimeStyles" /> 값의 잘못된 조합이 포함되어 있습니다. 예를 들어 <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> 및 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />이 포함되어 있습니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (string s, IFormatProvider provider, System.Globalization.DateTimeStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(string s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, provider As IFormatProvider, styles As DateTimeStyles) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime Parse(System::String ^ s, IFormatProvider ^ provider, System::Globalization::DateTimeStyles styles);" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.Parse (s, provider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">변환할 날짜 및 시간이 포함된 문자열입니다. 자세한 내용은 [구문 분석할 문자열](#StringToParse)을 참조하세요.</param>
        <param name="provider"><paramref name="s" />에 대한 문화권별 형식 지정 정보를 제공하는 개체입니다.  [구문 분석 및 문화적 규칙](#Culture)을 참조하세요.</param>
        <param name="styles">구문 분석 작업이 성공하기 위해 <paramref name="s" />에 있을 수 있는 스타일 요소를 나타내는 열거형 값의 비트 조합으로, 현재 시간대 또는 현재 날짜와 비교하여 구문 분석된 날짜를 해석할 방법을 정의합니다. 지정할 일반적인 값은 <see cref="F:System.Globalization.DateTimeStyles.None" />입니다.</param>
        <summary>문화권별 형식 정보 및 서식 지정 스타일을 사용하여 날짜 및 시간의 문자열 표현을 해당 <see cref="T:System.DateTime" />으로 변환합니다.</summary>
        <returns><paramref name="s" /> 및 <paramref name="provider" />에 지정된 내용에 따라 <paramref name="styles" />에 포함된 날짜 및 시간에 해당하는 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

이 메서드 오버 로드 된 날짜와 시간으로 변환 `s` 가져오거나 설정 합니다 <xref:System.DateTime.Kind%2A> 반환 된 속성 <xref:System.DateTime> 다음과 같이 값:

|조건 |표준 시간대 변환|Kind 속성|   
|-----|-----|-----|  
|`s` 표준 시간대 정보가 없습니다.|없음|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|
|`s` 표준 시간대 정보를 포함합니다.|현지 표준 시간대의 시간|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|
|`s` 표준 시간대 정보를 포함 하 고 ' 스타일 포함는 <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> 플래그입니다. | UTC (Coordinated Universal Time)에 |<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|
|`s` Z 또는 GMT 표준 시간대 지정자를 포함 하 고 `styles` 포함을 <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType>입니다.|없음|<xref:System.DateTimeKind.Utc>| 

## <a name="example"></a>예제

다음 예제는 <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> 메서드 값을 표시 하 고는 <xref:System.DateTime.Kind%2A> 결과 속성 <xref:System.DateTime> 값입니다.  
  
[!code-csharp-interactive[System.DateTime.Parse#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse4.cs#4)]
[!code-vb[System.DateTime.Parse#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="s" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.FormatException"><paramref name="s" />에 날짜 및 시간의 유효한 문자열 표현이 없습니다.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="styles" />에 <see cref="T:System.Globalization.DateTimeStyles" /> 값의 잘못된 조합이 포함되어 있습니다. 예를 들어 <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> 및 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />이 포함되어 있습니다.</exception>
        <altmember cref="Overload:System.DateTime.TryParse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">.NET Framework의 날짜 및 시간 문자열 구문 분석</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">표준 날짜 및 시간 형식 문자열</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">사용자 지정 날짜 및 시간 형식 문자열</related>
        <related type="Article" href="~/docs/standard/base-types/how-to-round-trip-date-and-time-values.md">방법: 날짜 및 시간 값 라운드트립</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>날짜 및 시간에 대한 지정된 문자열 표현을 해당 <see cref="T:System.DateTime" />으로 변환합니다. 문자열 표현의 형식은 지정된 형식과 정확하게 일치해야 합니다. 그렇지 않으면 예외가 throw됩니다.</summary>
        <altmember cref="Overload:System.DateTime.TryParseExact" />
        <remarks>
          <format type="text/markdown"><![CDATA[  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

         ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (string s, string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(string s, string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As String, format As String, provider As IFormatProvider) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ParseExact(System::String ^ s, System::String ^ format, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string * IFormatProvider -&gt; DateTime" Usage="System.DateTime.ParseExact (s, format, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s">변환할 날짜 및 시간이 포함된 문자열입니다.</param>
        <param name="format"><paramref name="s" />의 필수 형식을 정의하는 서식 지정자입니다. 자세한 내용은 설명 섹션을 참조하세요.</param>
        <param name="provider"><paramref name="s" />에 대한 문화권별 서식 지정 정보를 제공하는 개체입니다.</param>
        <summary>지정된 형식 및 문화권별 형식 정보를 사용하여 날짜 및 시간의 지정된 문자열 표현을 해당 <see cref="T:System.DateTime" />으로 변환합니다. 문자열 표현의 형식이 지정된 형식과 정확하게 일치해야 합니다.</summary>
        <returns><paramref name="s" /> 및 <paramref name="format" />에 지정된 내용에 따라 <paramref name="provider" />에 포함된 날짜 및 시간에 해당하는 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> 하 여 정의 된 형식에서 이어야 하는 날짜의 문자열 표현을 구문 분석 하는 메서드는 `format` 매개 변수입니다. 또한 해야 하는 합니다 \<날짜 > 및 \<시간 > 날짜 및 시간의 문자열 표현의 요소에 지정 된 순서에 표시 `format`, 및 `s` 에서허용되지않는흰색공간이없습니다`format`. 하는 경우 `format` 날짜 정의 없습니다 시간 요소와 구문 분석 작업이 성공 하면 결과 <xref:System.DateTime> 값에는 시간을 자정 (00: 00:00). 하는 경우 `format` 한 번 정의 요소가 없는 날짜와 구문 분석 작업이 성공 하면 결과 <xref:System.DateTime> 값의 날짜에 `DateTime.Now.Date`입니다.  
  
 하는 경우 `s` 는 시간을 특정 표준 시간대 및 구문 분석 작업이 성공 하면 나타내지 않습니다. 합니다 <xref:System.DateTime.Kind%2A> 반환 된 속성 <xref:System.DateTime> 값은 <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>합니다. 하는 경우 `s` 특정 표준 시간대의 시간을 나타내지 않습니다 하 고 `format` 시간대 정보가 있을 수 있습니다 (경우에 예를 들어 `format` 가 "o", "r" 또는 "u" 표준 서식 지정자는 "z", "zz" 또는 "zzz"이 포함 된 경우 또는 사용자 지정 형식 지정자)를 <xref:System.DateTime.Kind%2A> 반환 된 속성 <xref:System.DateTime> 값은 <xref:System.DateTimeKind.Local?displayProperty=nameWithType>합니다.  

 합니다 `format` 매개 변수는 단일 표준 형식 지정자, 또는의 필수 형식을 정의 하는 하나 이상의 사용자 지정 형식 지정자를 포함 하는 문자열로 `s`합니다. 유효한 서식 코드에 대 한 자세한 내용은 참조 하세요 [표준 날짜 및 시간 서식 문자열](~/docs/standard/base-types/standard-date-and-time-format-strings.md) 하거나 [사용자 지정 날짜 및 시간 형식 문자열](~/docs/standard/base-types/custom-date-and-time-format-strings.md)합니다.  
  
> [!NOTE]
>  하는 경우 `format` 는 하지 않는 날짜 또는 시간 구분 기호 (예: "yyyyMMddHHmm")를 포함할에 대 한 고정 문화권을 사용 하 여 사용자 지정 형식 패턴의 `provider` 매개 변수와 가장 넓은 형식으로 각 사용자 지정 형식 지정자입니다. 예를 들어 형식 패턴에 시간을 지정 하려는 경우 "H" 형식 대신 더 광범위 한 형식, "HH"를 지정 합니다.  
  
 특정 날짜 및 시간 기호 및 문자열 (예: 특정 언어로 요일 이름)에 사용 되는 `s` 가 정의한 합니다 `provider` 매개 변수를 그대로의 정확한 형식을 `s` 경우 `format` 표준 형식입니다 지정자 문자열입니다. `provider` 매개 변수는 다음 중 하나일 수 있습니다.  
  
-   A <xref:System.Globalization.CultureInfo> 해석에 사용 된 문화권을 나타내는 개체 `s`합니다. <xref:System.Globalization.DateTimeFormatInfo> 반환한 개체가 해당 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> 속성 정의 기호 및 서식을 `s`합니다.  
  
-   <xref:System.Globalization.DateTimeFormatInfo> 날짜 및 시간 데이터 형식을 정의 하는 개체입니다.  
  
-   사용자 지정 <xref:System.IFormatProvider> 구현입니다 <xref:System.IFormatProvider.GetFormat%2A> 메서드 중 하나를 반환 합니다 <xref:System.Globalization.CultureInfo> 개체 또는 <xref:System.Globalization.DateTimeFormatInfo> 서식 지정 정보를 제공 하는 개체입니다.  
  
 하는 경우 `provider` 됩니다 `null`, <xref:System.Globalization.CultureInfo> 현재 문화권에 해당 하는 개체를 사용 합니다.  
  
   
  
## Examples  
 다음 예제는 <xref:System.DateTime.ParseExact%2A> 메서드.  
  
 [!code-csharp[System.DateTime.ParseExact#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ParseExact/cs/ParseExact1.cs#1)]
 [!code-vb[System.DateTime.ParseExact#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ParseExact/vb/ParseExact1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="s" /> 또는 <paramref name="format" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.FormatException"><paramref name="s" /> 또는 <paramref name="format" />가 빈 문자열입니다.  
  
또는 
 <paramref name="s" />에 <paramref name="format" />에 지정된 패턴과 일치하는 날짜 및 시간이 포함되어 있지 않습니다.  
  
또는 
<paramref name="s" />의 시간 구성 요소와 AM/PM 지정자가 일치하지 않습니다.</exception>
        <block subset="none" type="usage"><para>에 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], <see cref="Overload:System.DateTime.ParseExact" /> 메서드가 throw를 <see cref="T:System.FormatException" /> 구문 분석 될 문자열 경우 시간 구성 요소 및 계약에 없는 AM/PM 지정자를 포함 합니다. 에 [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] 이전 버전에서는 AM/PM 지정자는 무시 됩니다.</para></block>
        <altmember cref="Overload:System.DateTime.TryParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">.NET Framework의 날짜 및 시간 문자열 구문 분석</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">표준 날짜 및 시간 형식 문자열</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">사용자 지정 날짜 및 시간 형식 문자열</related>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (ReadOnlySpan&lt;char&gt; s, ReadOnlySpan&lt;char&gt; format, IFormatProvider provider, System.Globalization.DateTimeStyles style = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; s, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), provider As IFormatProvider, Optional style As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTime" />
      <MemberSignature Language="F#" Value="static member ParseExact : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.ParseExact (s, format, provider, style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="format">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="style">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (ReadOnlySpan&lt;char&gt; s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As ReadOnlySpan(Of Char), formats As String(), provider As IFormatProvider, Optional style As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTime" />
      <MemberSignature Language="F#" Value="static member ParseExact : ReadOnlySpan&lt;char&gt; * string[] * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.ParseExact (s, formats, provider, style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="formats" Type="System.String[]" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="formats">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="style">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (string s, string format, IFormatProvider provider, System.Globalization.DateTimeStyles style);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(string s, string format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As String, format As String, provider As IFormatProvider, style As DateTimeStyles) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ParseExact(System::String ^ s, System::String ^ format, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.ParseExact (s, format, provider, style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">날짜와 시간이 포함된 변환할 문자열입니다.</param>
        <param name="format"><paramref name="s" />의 필수 형식을 정의하는 서식 지정자입니다. 자세한 내용은 설명 섹션을 참조하세요.</param>
        <param name="provider"><paramref name="s" />에 대한 문화권별 형식 지정 정보를 제공하는 개체입니다.</param>
        <param name="style"><paramref name="s" />, <paramref name="s" />에 나타날 수 있는 스타일 요소 또는 <paramref name="s" />에서 <see cref="T:System.DateTime" /> 값으로 변환하는 방법에 대한 추가 정보를 제공하는 열거형 값의 비트 조합입니다. 지정할 일반적인 값은 <see cref="F:System.Globalization.DateTimeStyles.None" />입니다.</param>
        <summary>지정된 형식, 문화권별 형식 정보 및 스타일을 사용하여 날짜 및 시간의 지정된 문자열 표현을 해당 <see cref="T:System.DateTime" />으로 변환합니다. 문자열 표현의 서식은 지정된 서식과 정확하게 일치해야 합니다. 그렇지 않으면 예외가 throw됩니다.</summary>
        <returns><paramref name="s" />, <paramref name="format" /> 및 <paramref name="provider" />에 지정된 내용에 따라 <paramref name="style" />에 포함된 날짜 및 시간에 해당하는 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> 하 여 정의 된 형식에서 이어야 하는 날짜의 문자열 표현을 구문 분석 하는 메서드는 `format` 매개 변수입니다. 또한 해야 하는 날짜 및 시간 요소 `s` 하 여 지정 된 순서로 표시 `format`합니다. 경우 `s` 의 패턴과 일치 하지 않는 합니다 `format` 매개 변수를 정의한 변화를 `style` 매개 변수는 메서드가 throw를 <xref:System.FormatException>. 반면에 <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> 메서드 형식 공급자가 인식 하는 형식 중 하나는 날짜의 문자열 표현을 구문 분석 <xref:System.Globalization.DateTimeFormatInfo> 개체입니다. 합니다 <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> 메서드는 또한의 날짜 및 시간 요소를 사용 하면 `s` 순서에 관계 없이 표시 합니다.  
  
 경우는 `s` 매개 변수 시간만 있고 날짜가 하지 않으면 현재 날짜가 사용 됩니다는 `style` 매개 변수를 포함 합니다 <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> 기본 날짜는 경우에 플래그 (`DateTime.Date.MinValue`) 사용 됩니다. 경우는 `s` 매개 변수에 포함만 날짜 및 시간, 자정 (00: 00:00) 사용 됩니다. 합니다 `style` 매개 변수를 결정 하는지 여부를 `s` 매개 변수 앞, 내부 또는 후행 공백 문자를 포함할 수 있습니다.  
  
 하는 경우 `s` 없는 표준 시간대 정보를 포함 합니다 <xref:System.DateTime.Kind%2A> 반환 된 속성 <xref:System.DateTime> 개체가 <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>합니다. 사용 하 여이 동작을 변경할 수 있습니다 합니다 <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> 플래그를 반환 하는 <xref:System.DateTime> 값 <xref:System.DateTime.Kind%2A> 속성이 <xref:System.DateTimeKind.Local?displayProperty=nameWithType>, 또는 사용 하 여를 <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> 및 <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> 플래그를 반환 하는 <xref:System.DateTime> 값 <xref:System.DateTime.Kind%2A> 속성은 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>합니다. 하는 경우 `s` 표준 시간대 정보를 포함 필요에 따라 시간이 현지 시간으로 변환 됩니다 및 <xref:System.DateTime.Kind%2A> 반환 된 속성 <xref:System.DateTime> 개체를로 <xref:System.DateTimeKind.Local?displayProperty=nameWithType>합니다. 사용 하 여이 동작을 변경할 수 있습니다 합니다 <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> 현지 시간을 변환할 utc (협정 세계시)를 설정 하는 플래그를 <xref:System.DateTime.Kind%2A> 속성을 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>입니다.  
  
 합니다 `format` 의 필요한 패턴을 정의 하는 매개 변수는 `s` 매개 변수입니다. 하나 이상의 사용자 지정 형식 지정자를 구성할 수 있습니다 합니다 [사용자 지정 날짜 및 시간 서식 문자열](~/docs/standard/base-types/custom-date-and-time-format-strings.md) 테이블 또는에서 미리 정의 된 패턴을 식별 하는 단일 표준 형식 지정자는 [표준 날짜 및 시간 형식 문자열](~/docs/standard/base-types/standard-date-and-time-format-strings.md) 테이블입니다.  
  
 사용자 지정 형식 패턴에 날짜 또는 시간 구분 기호를 사용 하지 않는 경우에 대 한 고정 문화권을 사용 합니다 `provider` 매개 변수와 가장 넓은 형식으로 각 사용자 지정 형식 지정자입니다. 예를 들어 패턴에 시간을 지정 하려는 경우 "H" 형식 대신 더 광범위 한 형식, "HH"를 지정 합니다.  
  
> [!NOTE]
>  요구 하는 대신 `s` 구문 분석 작업이 성공 하기 위해 단일 형식을 준수, 호출할 수 있습니다는 <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> 메서드 여러 허용 된 형식을 지정 합니다. 이렇게 하면 구문 분석 작업이 성공 가능성이 있습니다.  
  
 합니다 `styles` 하나 이상의 멤버를 포함 하는 매개 변수를 <xref:System.Globalization.DateTimeStyles> 공백에 정의 되지 않은 여부와 위치를 결정 하는 열거형 `format` 에 나타날 수 있습니다 `s` 구문 분석 작업의 정확한 동작을 제어 하 합니다. 다음 표에서 각 방법의 멤버를 <xref:System.Globalization.DateTimeStyles> 열거형의 작업에 영향을 줍니다는 <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> 메서드.  
  
|DateTimeStyles 멤버|설명|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|구문 분석 `s` 필요한 UTC로 변환 하는 경우. 경우 `s` 표준 시간대 오프셋을 포함 이거나 `s` 시간대 정보가 없습니다 있지만 `styles` 포함 합니다 <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> 플래그를 메서드 호출 문자열 구문 분석 <xref:System.DateTime.ToUniversalTime%2A> 반환 된 변환할 <xref:System.DateTime> 값을 UTC 를 가져오거나 설정 합니다 <xref:System.DateTime.Kind%2A> 속성을 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>입니다. 경우 `s` UTC를 나타냅니다 이거나 `s` 표준 시간대 정보를 포함 하지 있지만 `styles` 포함 합니다 <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> 플래그를 메서드 문자열을 구문 분석, 반환 된 표준 시간대 변환 작업 없이 수행 <xref:System.DateTime> 값 집합과 합니다 <xref:System.DateTime.Kind%2A> 속성을 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>입니다. 다른 모든 경우 플래그에는 영향을 주지 않습니다.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|에 정의 되지 않은 공백이 지정 `format` 모든 개별 날짜 또는 시간 요소 사이 나타날 수 있습니다.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|지정 하 여 정의 되지 않은 공백이 `format` 부분에 나타날 수 있습니다 `s`합니다.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|지정 하 여 정의 되지 않은 공백이 `format` 끝에 표시 될 수 있습니다 `s`합니다.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|형식임 `s` 선행, 내부 및 후행에 정의 되지 않은 공백을 포함할 수 있습니다 `format`합니다.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|지정 합니다 `s` 표준 시간대 정보가 없으면 로컬 시간을 나타내는 것으로 가정 합니다. 경우가 아니면 합니다 <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> 플래그가 없으면 합니다 <xref:System.DateTime.Kind%2A> 반환 된 속성 <xref:System.DateTime> 값으로 설정 됩니다 <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|지정 합니다 `s` 표준 시간대 정보가 없으면 UTC를 나타내는 것으로 가정 합니다. 경우가 아니면 합니다 <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> 플래그가, 메서드가 반환 된 변환 하는 <xref:System.DateTime> 값을 UTC에서 현지 시간 및 집합 해당 <xref:System.DateTime.Kind%2A> 속성을 <xref:System.DateTimeKind.Local?displayProperty=nameWithType>입니다.|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|하는 경우 `s` 시간 포함 날짜 정보 없이 반환 값의 날짜 설정 됩니다 `DateTime.MinValue.Date`합니다.|  
|<xref:System.Globalization.DateTimeStyles.None>|`s` 매개 변수는 기본값을 사용 하 여 구문 분석 됩니다. 에 있는 이외의 공백이 없습니다 `format` 허용 됩니다. 하는 경우 `s` 날짜 구성 요소를 반환 된 날짜에 <xref:System.DateTime> 값 1/1/0001로 설정 됩니다. 경우 `s` 표준 시간대 정보가 없습니다 합니다 <xref:System.DateTime.Kind%2A> 반환 된 속성 <xref:System.DateTime> 개체를로 <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>합니다. 표준 시간대 정보에 있는 경우 `s`, 시간이 현지 시간으로 변환 됩니다 및 <xref:System.DateTime.Kind%2A> 반환 된 속성 <xref:System.DateTime> 개체를로 <xref:System.DateTimeKind.Local?displayProperty=nameWithType>합니다.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|표준 시간대 정보가 포함 된 문자열에 대 한 방지 하려고로 변환을 <xref:System.DateTime> 사용 하 여 시간 및 날짜 값 해당 <xref:System.DateTime.Kind%2A> 속성으로 설정 <xref:System.DateTimeKind.Local?displayProperty=nameWithType>합니다. 이 플래그는 주로 현지 시간을 UTC 시간으로 변환을 방지합니다.|  
  
 특정 날짜 및 시간 기호 및 문자열 (예: 특정 언어로 요일 이름)에 사용 되는 `s` 가 정의한 합니다 `provider` 매개 변수를 그대로의 정확한 형식을 `s` 경우 `format` 표준 형식입니다 지정자 문자열입니다. `provider` 매개 변수는 다음 중 하나일 수 있습니다.  
  
-   A <xref:System.Globalization.CultureInfo> 해석에 사용 된 문화권을 나타내는 개체 `s`합니다. <xref:System.Globalization.DateTimeFormatInfo> 반환한 개체가 해당 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> 속성 정의 기호 및 서식을 `s`합니다.  
  
-   <xref:System.Globalization.DateTimeFormatInfo> 날짜 및 시간 데이터 형식을 정의 하는 개체입니다.  
  
-   사용자 지정 <xref:System.IFormatProvider> 구현입니다 <xref:System.IFormatProvider.GetFormat%2A> 메서드 중 하나를 반환 합니다 <xref:System.Globalization.CultureInfo> 개체 또는 <xref:System.Globalization.DateTimeFormatInfo> 서식 지정 정보를 제공 하는 개체입니다.  
  
 하는 경우 `provider` 됩니다 `null`, <xref:System.Globalization.CultureInfo> 현재 문화권에 해당 하는 개체를 사용 합니다.  
  
   
  
## Examples  
 다음 예제는 <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29> 메서드. 문자열 "2009 년 5 월 01 8:30 AM" 분석할 수 없습니다 경우 합니다 `styles` 매개 변수가 같으면 <xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType> 선행 공백을 허용 하지 않는 있으므로 `format`합니다. 또한 문자열 "2009 년 5 월 01 09시"으로 분석할 수 없습니다는 `format` 의 "MM/dd/yyyyhh:mm" 날짜 문자열으로 앞에 0 사용 하 여 월 수를 붙이지 않습니다 때문에 `format` 필요 합니다.  
  
 [!code-csharp[System.DateTime.ParseExact#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ParseExact/cs/parseexact2.cs#2)]
 [!code-vb[System.DateTime.ParseExact#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ParseExact/vb/parseexact2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="s" /> 또는 <paramref name="format" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.FormatException"><paramref name="s" /> 또는 <paramref name="format" />가 빈 문자열입니다.  
  
또는 
 <paramref name="s" />에 <paramref name="format" />에 지정된 패턴과 일치하는 날짜 및 시간이 포함되어 있지 않습니다.  
  
또는 
<paramref name="s" />의 시간 구성 요소와 AM/PM 지정자가 일치하지 않습니다.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="style" />에 <see cref="T:System.Globalization.DateTimeStyles" /> 값의 잘못된 조합이 포함되어 있습니다. 예를 들어 <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> 및 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />이 포함되어 있습니다.</exception>
        <block subset="none" type="usage"><para>에 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], <see cref="Overload:System.DateTime.ParseExact" /> 메서드가 throw를 <see cref="T:System.FormatException" /> 구문 분석 될 문자열 경우 시간 구성 요소 및 계약에 없는 AM/PM 지정자를 포함 합니다. 에 [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] 이전 버전에서는 AM/PM 지정자는 무시 됩니다.</para></block>
        <altmember cref="Overload:System.DateTime.TryParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">.NET Framework의 날짜 및 시간 문자열 구문 분석</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">표준 날짜 및 시간 형식 문자열</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">사용자 지정 날짜 및 시간 형식 문자열</related>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (string s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(string s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As String, formats As String(), provider As IFormatProvider, style As DateTimeStyles) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ParseExact(System::String ^ s, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string[] * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.ParseExact (s, formats, provider, style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">변환할 날짜 및 시간이 포함된 문자열입니다.</param>
        <param name="formats"><paramref name="s" />에 허용되는 형식의 배열입니다. 자세한 내용은 설명 섹션을 참조하세요.</param>
        <param name="provider"><paramref name="s" />에 대한 문화권별 서식 지정 정보를 제공하는 개체입니다.</param>
        <param name="style"><paramref name="s" />에 사용할 수 있는 형식을 나타내는 열거형 값의 비트 조합입니다. 지정할 일반적인 값은 <see cref="F:System.Globalization.DateTimeStyles.None" />입니다.</param>
        <summary>지정된 형식 배열, 문화권별 형식 정보 및 스타일을 사용하여 지정된 날짜와 시간의 문자열 표현을 해당 <see cref="T:System.DateTime" /> 표현으로 변환합니다. 문자열 표현의 서식은 지정된 형식 중 최소한 하나와 정확하게 일치해야 합니다. 그렇지 않으면 예외가 throw됩니다.</summary>
        <returns><paramref name="s" />, <paramref name="formats" /> 및 <paramref name="provider" />에 지정된 내용에 따라 <paramref name="style" />에 포함된 날짜 및 시간에 해당하는 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> 에 할당 된 패턴 중 하 나와 일치 하는 날짜의 문자열 표현을 구문 분석 하는 메서드는 `formats` 매개 변수입니다. 경우 문자열 `s` 정의한 변형 중 하나를 사용 하 여 이러한 패턴 중 하 나와 일치 하지 않습니다 합니다 `styles` 매개 변수는 메서드가 throw를 <xref:System.FormatException>입니다. 비교 하는 것 외 `s` 여러 서식 지정 패턴을 대신 단일 서식 패턴을이 오버 로드 동일 하 게 동작 합니다 <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> 메서드.  
  
 `s` 매개 변수는 날짜 및 시간 구문 분석을 포함 합니다. 경우는 `s` 매개 변수 시간만 있고 날짜가 하지 않으면 현재 날짜가 사용 됩니다는 `style` 매개 변수를 포함 합니다 <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> 기본 날짜는 경우에 플래그 (`DateTime.Date.MinValue`) 사용 됩니다. 경우는 `s` 매개 변수에 포함만 날짜 및 시간, 자정 (00: 00:00) 사용 됩니다. `style` 매개 변수를 결정 하는지 여부를 합니다 `s` 매개 변수는 최고의 포함 될 수 있습니다, 중간 또는 후행 공백 문자에서 형식 문자열 중 하나에서 허용 하는 것 보다 다른 `formats`.  
  
 하는 경우 `s` 없는 표준 시간대 정보를 포함 합니다 <xref:System.DateTime.Kind%2A> 반환 된 속성 <xref:System.DateTime> 개체가 <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>합니다. 사용 하 여이 동작을 변경할 수 있습니다 합니다 <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> 플래그를 반환 하는 <xref:System.DateTime> 값 <xref:System.DateTime.Kind%2A> 속성이 <xref:System.DateTimeKind.Local?displayProperty=nameWithType>, 또는 사용 하 여를 <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> 및 <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> 플래그를 반환 하는 <xref:System.DateTime> 값 <xref:System.DateTime.Kind%2A> 속성은 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>합니다. 하는 경우 `s` 표준 시간대 정보를 포함 필요에 따라 시간이 현지 시간으로 변환 됩니다 및 <xref:System.DateTime.Kind%2A> 반환 된 속성 <xref:System.DateTime> 개체를로 <xref:System.DateTimeKind.Local?displayProperty=nameWithType>합니다. 사용 하 여이 동작을 변경할 수 있습니다 합니다 <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> 하지 현지 시간을 utc (협정 세계시)를 변환 하 고 설정 하는 플래그를 <xref:System.DateTime.Kind%2A> 속성을 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>입니다.  
  
 합니다 `formats` 매개 변수 패턴의 배열을 포함 하는 중 `s` 구문 분석 작업이 성공 하는 경우에 정확히 일치 해야 합니다. 패턴을 `formats` 매개 변수에서 하나 이상의 사용자 지정 형식 지정자로 구성 됩니다 합니다 [사용자 지정 날짜 및 시간 형식 문자열](~/docs/standard/base-types/custom-date-and-time-format-strings.md) 테이블 또는에서 미리 정의 된 패턴을 식별 하는 단일 표준 형식 지정자를는 [표준 날짜 및 시간 형식 문자열](~/docs/standard/base-types/standard-date-and-time-format-strings.md) 테이블입니다.  
  
 사용자 지정 형식 패턴에 날짜 또는 시간 구분 기호를 사용 하지 않는 경우에 대 한 고정 문화권을 사용 합니다 `provider` 매개 변수와 가장 넓은 형식으로 각 사용자 지정 형식 지정자입니다. 예를 들어 패턴에 시간을 지정 하려는 경우 "H" 형식 대신 더 광범위 한 형식, "HH"를 지정 합니다.  
  
 합니다 `styles` 하나 이상의 멤버를 포함 하는 매개 변수를 <xref:System.Globalization.DateTimeStyles> 공백에 정의 되지 않은 여부와 위치를 결정 하는 열거형 `format` 에 나타날 수 있습니다 `s` 구문 분석 작업의 정확한 동작을 제어 하 합니다. 다음 표에서 각 방법의 멤버를 <xref:System.Globalization.DateTimeStyles> 열거형의 작업에 영향을 줍니다는 <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> 메서드.  
  
|DateTimeStyles 멤버|설명|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|구문 분석 `s` 필요한 UTC로 변환 하는 경우. 경우 `s` 표준 시간대 오프셋을 포함 이거나 `s` 시간대 정보가 없습니다 있지만 `styles` 포함 합니다 <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> 플래그를 메서드 호출 문자열 구문 분석 <xref:System.DateTime.ToUniversalTime%2A> 반환 된 변환할 <xref:System.DateTime> 값을 UTC 를 가져오거나 설정 합니다 <xref:System.DateTime.Kind%2A> 속성을 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>입니다. 경우 `s` UTC를 나타냅니다 이거나 `s` 표준 시간대 정보를 포함 하지 있지만 `styles` 포함 합니다 <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> 플래그를 메서드 문자열을 구문 분석, 반환 된 표준 시간대 변환 작업 없이 수행 <xref:System.DateTime> 값 집합과 합니다 <xref:System.DateTime.Kind%2A> 속성을 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>입니다. 다른 모든 경우 플래그에는 영향을 주지 않습니다.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|에 정의 되지 않은 공백이 지정 `format` 모든 개별 날짜 또는 시간 요소 사이 나타날 수 있습니다.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|지정 하 여 정의 되지 않은 공백이 `format` 부분에 나타날 수 있습니다 `s`합니다.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|지정 하 여 정의 되지 않은 공백이 `format` 끝에 표시 될 수 있습니다 `s`합니다.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|형식임 `s` 선행, 내부 및 후행에 정의 되지 않은 공백을 포함할 수 있습니다 `format`합니다.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|지정 합니다 `s` 표준 시간대 정보가 없으면 로컬 시간을 나타내는 것으로 가정 합니다. 경우가 아니면 합니다 <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> 플래그가 없으면 합니다 <xref:System.DateTime.Kind%2A> 반환 된 속성 <xref:System.DateTime> 값으로 설정 됩니다 <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|지정 합니다 `s` 표준 시간대 정보가 없으면 UTC를 나타내는 것으로 가정 합니다. 경우가 아니면 합니다 <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> 플래그가, 메서드가 반환 된 변환 하는 <xref:System.DateTime> 값을 UTC에서 현지 시간 및 집합 해당 <xref:System.DateTime.Kind%2A> 속성을 <xref:System.DateTimeKind.Local?displayProperty=nameWithType>입니다.|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|하는 경우 `s` 시간 포함 날짜 정보 없이 반환 값의 날짜 설정 됩니다 `DateTime.MinValue.Date`합니다.|  
|<xref:System.Globalization.DateTimeStyles.None>|`s` 매개 변수는 기본값을 사용 하 여 구문 분석 됩니다. 에 있는 이외의 공백이 없습니다 `format` 허용 됩니다. 하는 경우 `s` 날짜 구성 요소를 반환 된 날짜에 <xref:System.DateTime> 값 1/1/0001로 설정 됩니다. 경우 `s` 표준 시간대 정보가 없습니다 합니다 <xref:System.DateTime.Kind%2A> 반환 된 속성 <xref:System.DateTime> 개체를로 <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>합니다. 표준 시간대 정보에 있는 경우 `s`, 시간이 현지 시간으로 변환 됩니다 및 <xref:System.DateTime.Kind%2A> 반환 된 속성 <xref:System.DateTime> 개체를로 <xref:System.DateTimeKind.Local?displayProperty=nameWithType>합니다.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|표준 시간대 정보가 포함 된 문자열의 경우 하려고 사용 하 여 시간 및 날짜로 변환 되지 않도록 해당 <xref:System.DateTime.Kind%2A> 속성이 설정 <xref:System.DateTimeKind.Local?displayProperty=nameWithType>합니다. 이 플래그는 주로 현지 시간을 UTC 시간으로 변환을 방지합니다.|  
  
 특정 날짜 및 시간 기호 및 문자열 (예: 특정 언어로 요일 이름)에 사용 되는 `s` 가 정의한 합니다 `provider` 매개 변수를 그대로의 정확한 형식을 `s` 경우 `format` 표준 형식입니다 지정자 문자열입니다. `provider` 매개 변수는 다음 중 하나일 수 있습니다.  
  
-   A <xref:System.Globalization.CultureInfo> 해석에 사용 된 문화권을 나타내는 개체 `s`합니다. <xref:System.Globalization.DateTimeFormatInfo> 반환한 개체가 해당 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> 속성 정의 기호 및 서식을 `s`합니다.  
  
-   <xref:System.Globalization.DateTimeFormatInfo> 날짜 및 시간 데이터 형식을 정의 하는 개체입니다.  
  
-   사용자 지정 <xref:System.IFormatProvider> 구현입니다 <xref:System.IFormatProvider.GetFormat%2A> 메서드 중 하나를 반환 합니다 <xref:System.Globalization.CultureInfo> 개체 또는 <xref:System.Globalization.DateTimeFormatInfo> 서식 지정 정보를 제공 하는 개체입니다.  
  
 하는 경우 `provider` 됩니다 `null`, <xref:System.Globalization.CultureInfo> 현재 문화권에 해당 하는 개체를 사용 합니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> 메서드는 여러 가지 가능한 형식에서에서 문자열로 구문 분석할 수 있도록 합니다.  
  
 [!code-csharp[System.Datetime.ParseExact#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ParseExact/cs/parseexact3.cs#3)]
 [!code-vb[System.Datetime.ParseExact#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ParseExact/vb/parseexact3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="s" /> 또는 <paramref name="formats" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.FormatException"><paramref name="s" />이 빈 문자열인 경우  
  
또는 
<paramref name="formats" />의 요소가 빈 문자열입니다.  
  
또는 
 <paramref name="s" />에 <paramref name="formats" /> 요소에 해당하는 날짜 및 시간이 포함되어 있지 않습니다.  
  
또는 
<paramref name="s" />의 시간 구성 요소와 AM/PM 지정자가 일치하지 않습니다.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="style" />에 <see cref="T:System.Globalization.DateTimeStyles" /> 값의 잘못된 조합이 포함되어 있습니다. 예를 들어 <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> 및 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />이 포함되어 있습니다.</exception>
        <block subset="none" type="usage"><para>에 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], <see cref="Overload:System.DateTime.ParseExact" /> 메서드가 throw를 <see cref="T:System.FormatException" /> 구문 분석 될 문자열 경우 시간 구성 요소 및 계약에 없는 AM/PM 지정자를 포함 합니다. 에 [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] 이전 버전에서는 AM/PM 지정자는 무시 됩니다.</para></block>
        <altmember cref="Overload:System.DateTime.TryParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">.NET Framework의 날짜 및 시간 문자열 구문 분석</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">표준 날짜 및 시간 형식 문자열</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">사용자 지정 날짜 및 시간 형식 문자열</related>
      </Docs>
    </Member>
    <Member MemberName="Second">
      <MemberSignature Language="C#" Value="public int Second { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Second" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Second" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Second As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Second { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Second : int" Usage="System.DateTime.Second" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 인스턴스가 나타내는 날짜의 초 구성 요소를 가져옵니다.</summary>
        <value>0부터 59 사이의 값으로 표시되는 초 구성 요소입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제는 <xref:System.DateTime.Second%2A> 속성입니다.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpecifyKind">
      <MemberSignature Language="C#" Value="public static DateTime SpecifyKind (DateTime value, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime SpecifyKind(valuetype System.DateTime value, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.SpecifyKind(System.DateTime,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SpecifyKind (value As DateTime, kind As DateTimeKind) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime SpecifyKind(DateTime value, DateTimeKind kind);" />
      <MemberSignature Language="F#" Value="static member SpecifyKind : DateTime * DateTimeKind -&gt; DateTime" Usage="System.DateTime.SpecifyKind (value, kind)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="kind" Type="System.DateTimeKind" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value">날짜와 시간입니다.</param>
        <param name="kind">새 개체가 현지 시간 또는 UTC(협정 세계시)를 나타내는지 아니면 둘 다 나타내지 않는지를 나타내는 열거형 값 중 하나입니다.</param>
        <summary>지정된 <see cref="T:System.DateTime" />과 틱 수가 같지만 지정된 <see cref="T:System.DateTime" /> 값이 나타내듯이 현지 시간 또는 UTC(협정 세계시)로 지정되거나 둘 중 어느 것으로도 지정되지 않은 새 <see cref="T:System.DateTimeKind" /> 개체를 만듭니다.</summary>
        <returns><paramref name="value" /> 매개 변수로 표시되는 개체와 틱 수가 같고 <see cref="T:System.DateTimeKind" /> 매개 변수로 지정된 <paramref name="kind" /> 값이 있는 새 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime> 개체가 있는지 여부를 나타내는 시간 값은 현지 시간을 utc (협정 세계시) 또는 둘 다를 기반으로 하며 시간 값을 포함 하는 틱 필드 100 나노초 단위로 측정 종류 필드 구성 됩니다. 합니다 <xref:System.DateTime.SpecifyKind%2A> 메서드를 만듭니다 <xref:System.DateTime> 사용 하 여 지정 된 개체 `kind` 매개 변수 및 원래 시간 값입니다.  
  
> [!IMPORTANT]
>  반환 된 <xref:System.DateTime> 값 나타내지 않는 경우 동일한 인스턴트으로 `value` 매개 변수 및 <xref:System.DateTime.SpecifyKind%2A> 표준 시간대 변환 메서드가 아닙니다. 그래서 지정 된 시간을 `value` 집합과 변경 하지 않고 매개 변수를 <xref:System.DateTime.Kind%2A> 속성을 `kind`입니다. 표준 시간대 변환에 대 한 자세한 내용은 [표준 시간대 간에 시간 변환](~/docs/standard/datetime/converting-between-time-zones.md)합니다.  
  
 <xref:System.DateTime.SpecifyKind%2A> 메서드는 수신 되는 상호 운용성 시나리오에서 유용를 <xref:System.DateTime> 여 있지만 알 수 없는 종류 필드를 사용 하 여 개체를 결정할 수 독립 틱 필드 현지 시간 또는 UTC를 나타낸다고 의미 합니다.  
  
   
  
## Examples  
 다음 예제에서는 합니다 <xref:System.DateTime.SpecifyKind%2A> 메서드를 보여 줍니다 하는 방법을 <xref:System.DateTime.Kind%2A> 속성이 영향을 줍니다 합니다 <xref:System.DateTime.ToLocalTime%2A> 및 <xref:System.DateTime.ToUniversalTime%2A> 변환 메서드.  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/visual-basic/programming-guide/com-interop/com-interoperability-in-net-framework-applications.md">.NET Framework 응용 프로그램의 COM 상호 운용성(Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Subtract">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>이 인스턴스에서 지정된 시간이나 기간을 뺍니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public TimeSpan Subtract (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan Subtract(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Subtract(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtract (value As DateTime) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan Subtract(DateTime value);" />
      <MemberSignature Language="F#" Value="member this.Subtract : DateTime -&gt; TimeSpan" Usage="dateTime.Subtract value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">뺄 날짜 및 시간 값입니다.</param>
        <summary>이 인스턴스에서 지정된 날짜와 시간을 뺍니다.</summary>
        <returns>이 인스턴스가 나타내는 날짜와 시간에서 <paramref name="value" />가 나타내는 날짜와 시간을 뺀 값에 해당하는 시간 간격입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.Subtract%28System.DateTime%29> 메서드 두 날짜 사이의 차이 확인 합니다. 현재 인스턴스에서 시간 간격을 뺄 호출을 <xref:System.DateTime.Subtract%28System.TimeSpan%29> 메서드. 현재 인스턴스에서 특정 시간 간격을 뺄 현재 날짜에 해당 시간 간격을 추가 하는 메서드를 호출 하 고 메서드 인수로 음수 값을 제공 합니다. 예를 들어 현재 날짜 로부터 2 개월 뺄 호출을 <xref:System.DateTime.AddMonths%28System.Int32%29> -2의 값을 사용 하 여 메서드.  
  
 현재 인스턴스의 시간과 날짜 보다 이전 인지 `value`, 메서드가 반환을 <xref:System.TimeSpan> 음수 시간 범위를 나타내는 개체입니다. 즉, 모든 0이 아닌 속성의 값 (같은 <xref:System.TimeSpan.Days%2A> 또는 <xref:System.TimeSpan.Ticks%2A>) 음수입니다.  
  
 <xref:System.DateTime.Subtract%28System.DateTime%29> 메서드 값을 고려 하지 않습니다는 <xref:System.DateTime.Kind%2A> 의 두 속성 <xref:System.DateTime> 값 빼기를 수행 하는 경우. 빼기 전에 <xref:System.DateTime> 개체를 개체 동일한 표준 시간대의 시간을 나타내는 것을 확인 합니다. 그렇지 않으면 결과 표준 시간대 간의 차이 포함 됩니다.  
  
> [!NOTE]
>  <xref:System.DateTimeOffset.Subtract%28System.DateTimeOffset%29?displayProperty=nameWithType> 메서드는 빼기를 수행 하는 경우 표준 시간대 간의 차이 고려 합니다.  
  
   
  
## Examples  
 다음 예제는 <xref:System.DateTime.Subtract%2A> 메서드 및 빼기 연산자입니다.  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">결과가 <see cref="F:System.DateTime.MinValue" />보다 작거나 <see cref="F:System.DateTime.MaxValue" />보다 큽니다.</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">날짜 및 시간에 대한 산술 연산 수행</related>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public DateTime Subtract (TimeSpan value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime Subtract(valuetype System.TimeSpan value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Subtract(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtract (value As TimeSpan) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime Subtract(TimeSpan value);" />
      <MemberSignature Language="F#" Value="member this.Subtract : TimeSpan -&gt; DateTime" Usage="dateTime.Subtract value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="value">뺄 시간 간격입니다.</param>
        <summary>지정된 기간을 이 인스턴스에서 뺍니다.</summary>
        <returns>이 인스턴스가 나타내는 날짜와 시간에서 <paramref name="value" />가 나타내는 시간 간격을 뺀 값에 해당하는 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.Subtract%28System.TimeSpan%29> 메서드는 현재 인스턴스에서 지정 된 시간 간격에 차이가 날짜를 반환 합니다. 두 날짜 사이의 시간 간격을 확인 하려면 호출을 <xref:System.DateTime.Subtract%28System.DateTime%29> 메서드. 현재 인스턴스에서 특정 시간 간격을 뺄 현재 날짜에 해당 시간 간격을 추가 하는 메서드를 호출 하 고 메서드 인수로 음수 값을 제공 합니다. 예를 들어 현재 날짜 로부터 2 개월 뺄 호출을 <xref:System.DateTime.AddMonths%28System.Int32%29> -2의 값을 사용 하 여 메서드.  
  
 이 메서드는이 값을 변경 하지 않습니다 <xref:System.DateTime>합니다. 대신에 새 반환 <xref:System.DateTime> 값인이 연산의 결과입니다.  
  
 일반적으로 <xref:System.DateTime.Subtract%28System.TimeSpan%29?displayProperty=nameWithType> 뺍니다를 <xref:System.TimeSpan> 양수 시간 범위를 나타내는 반환 하는 개체를 <xref:System.DateTime> 날짜와 현재 인스턴스의 시간 보다 이전 값입니다. 그러나 경우는 <xref:System.TimeSpan> 개체는 음수 시간 범위를 나타냅니다는 <xref:System.DateTime.Subtract%28System.TimeSpan%29?displayProperty=nameWithType> 메서드가 반환 되는 <xref:System.DateTime> 날짜와 현재 인스턴스의 시간 보다 나중에 값입니다.  
  
 <xref:System.DateTime.Subtract%28System.TimeSpan%29?displayProperty=nameWithType> 메서드를 사용 하면 하나 이상의 장치 (지정 된 시간 수) 및 지정된 된 분 수 등의 기간으로 구성 된 시간 간격을 뺄 수 있습니다. 뺄 시간 (예: 년, 월 또는 일)의 단일 단위를 <xref:System.DateTime> 인스턴스를 전달할 수 있습니다에 음수 값을 매개 변수로 다음 메서드 중 하나:  
  
-   <xref:System.DateTime.AddYears%2A>을 현재 날짜 및 시간 인스턴스의 특정 연수를 뺄 합니다.  
  
-   <xref:System.DateTime.AddMonths%2A>에 특정 월 현재 날짜 및 시간 인스턴스의 수를 뺄 합니다.  
  
-   <xref:System.DateTime.AddDays%2A>에 특정 일 현재 날짜 및 시간 인스턴스의 수를 뺄 합니다.  
  
-   <xref:System.DateTime.AddHours%2A>에서 특정 시간이 현재 날짜 및 시간 인스턴스의 수를 뺄 합니다.  
  
-   <xref:System.DateTime.AddMinutes%2A>을 현재 날짜 및 시간 인스턴스의 시간 (분) 특정 수를 뺄 합니다.  
  
-   <xref:System.DateTime.AddSeconds%2A>을 특정 수의 현재 날짜 및 시간 인스턴스의 시간 (초) 빼기 위한 합니다.  
  
-   <xref:System.DateTime.AddMilliseconds%2A>을 특정 수의 현재 날짜 및 시간 인스턴스의 시간 (밀리초) 빼기 위한 합니다.  
  
-   <xref:System.DateTime.AddTicks%2A>에 특정 현재 날짜 및 시간 인스턴스의 틱 수를 뺄 합니다.  
  
   
  
## Examples  
 다음 예제는 <xref:System.DateTime.Subtract%2A> 메서드 및 빼기 연산자입니다.  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">결과가 <see cref="F:System.DateTime.MinValue" />보다 작거나 <see cref="F:System.DateTime.MaxValue" />보다 큽니다.</exception>
        <altmember cref="T:System.TimeSpan" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">날짜 및 시간에 대한 산술 연산 수행</related>
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (value As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ value) = IComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.GetTypeCode">
      <MemberSignature Language="C#" Value="TypeCode IConvertible.GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.TypeCode System.IConvertible.GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Function GetTypeCode () As TypeCode Implements IConvertible.GetTypeCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual TypeCode System.IConvertible.GetTypeCode() = IConvertible::GetTypeCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToBoolean">
      <MemberSignature Language="C#" Value="bool IConvertible.ToBoolean (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToBoolean(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToBoolean (provider As IFormatProvider) As Boolean Implements IConvertible.ToBoolean" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.IConvertible.ToBoolean(IFormatProvider ^ provider) = IConvertible::ToBoolean;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToBoolean(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><see cref="T:System.IFormatProvider" /> 인터페이스를 구현하는 개체 이 매개 변수는 사용되지 않으므로 <see langword="null" />을 지정하세요.</param>
        <summary>이 변환은 지원되지 않습니다. 이 메서드를 사용하려고 하면 <see cref="T:System.InvalidCastException" />이 throw됩니다.</summary>
        <returns>이 멤버의 반환 값은 사용되지 않습니다.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">모든 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToByte">
      <MemberSignature Language="C#" Value="byte IConvertible.ToByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int8 System.IConvertible.ToByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToByte (provider As IFormatProvider) As Byte Implements IConvertible.ToByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Byte System.IConvertible.ToByte(IFormatProvider ^ provider) = IConvertible::ToByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><see cref="T:System.IFormatProvider" /> 인터페이스를 구현하는 개체 이 매개 변수는 사용되지 않으므로 <see langword="null" />을 지정하세요.</param>
        <summary>이 변환은 지원되지 않습니다. 이 메서드를 사용하려고 하면 <see cref="T:System.InvalidCastException" />이 throw됩니다.</summary>
        <returns>이 멤버의 반환 값은 사용되지 않습니다.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">모든 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToChar">
      <MemberSignature Language="C#" Value="char IConvertible.ToChar (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance char System.IConvertible.ToChar(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToChar(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToChar (provider As IFormatProvider) As Char Implements IConvertible.ToChar" />
      <MemberSignature Language="C++ CLI" Value=" virtual char System.IConvertible.ToChar(IFormatProvider ^ provider) = IConvertible::ToChar;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToChar(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><see cref="T:System.IFormatProvider" /> 인터페이스를 구현하는 개체 이 매개 변수는 사용되지 않으므로 <see langword="null" />을 지정하세요.</param>
        <summary>이 변환은 지원되지 않습니다. 이 메서드를 사용하려고 하면 <see cref="T:System.InvalidCastException" />이 throw됩니다.</summary>
        <returns>이 멤버의 반환 값은 사용되지 않습니다.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">모든 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDateTime">
      <MemberSignature Language="C#" Value="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToDateTime(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDateTime (provider As IFormatProvider) As DateTime Implements IConvertible.ToDateTime" />
      <MemberSignature Language="C++ CLI" Value=" virtual DateTime System.IConvertible.ToDateTime(IFormatProvider ^ provider) = IConvertible::ToDateTime;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDateTime(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><see cref="T:System.IFormatProvider" /> 인터페이스를 구현하는 개체 이 매개 변수는 사용되지 않으므로 <see langword="null" />을 지정하세요.</param>
        <summary>현재 <see cref="T:System.DateTime" /> 개체를 반환합니다.</summary>
        <returns>현재 개체입니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDecimal">
      <MemberSignature Language="C#" Value="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToDecimal(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDecimal (provider As IFormatProvider) As Decimal Implements IConvertible.ToDecimal" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Decimal System.IConvertible.ToDecimal(IFormatProvider ^ provider) = IConvertible::ToDecimal;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDecimal(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><see cref="T:System.IFormatProvider" /> 인터페이스를 구현하는 개체 이 매개 변수는 사용되지 않으므로 <see langword="null" />을 지정하세요.</param>
        <summary>이 변환은 지원되지 않습니다. 이 메서드를 사용하려고 하면 <see cref="T:System.InvalidCastException" />이 throw됩니다.</summary>
        <returns>이 멤버의 반환 값은 사용되지 않습니다.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">모든 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDouble">
      <MemberSignature Language="C#" Value="double IConvertible.ToDouble (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToDouble(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDouble (provider As IFormatProvider) As Double Implements IConvertible.ToDouble" />
      <MemberSignature Language="C++ CLI" Value=" virtual double System.IConvertible.ToDouble(IFormatProvider ^ provider) = IConvertible::ToDouble;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDouble(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><see cref="T:System.IFormatProvider" /> 인터페이스를 구현하는 개체 이 매개 변수는 사용되지 않으므로 <see langword="null" />을 지정하세요.</param>
        <summary>이 변환은 지원되지 않습니다. 이 메서드를 사용하려고 하면 <see cref="T:System.InvalidCastException" />이 throw됩니다.</summary>
        <returns>이 멤버의 반환 값은 사용되지 않습니다.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">모든 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt16">
      <MemberSignature Language="C#" Value="short IConvertible.ToInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt16 (provider As IFormatProvider) As Short Implements IConvertible.ToInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual short System.IConvertible.ToInt16(IFormatProvider ^ provider) = IConvertible::ToInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><see cref="T:System.IFormatProvider" /> 인터페이스를 구현하는 개체 이 매개 변수는 사용되지 않으므로 <see langword="null" />을 지정하세요.</param>
        <summary>이 변환은 지원되지 않습니다. 이 메서드를 사용하려고 하면 <see cref="T:System.InvalidCastException" />이 throw됩니다.</summary>
        <returns>이 멤버의 반환 값은 사용되지 않습니다.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">모든 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt32">
      <MemberSignature Language="C#" Value="int IConvertible.ToInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt32 (provider As IFormatProvider) As Integer Implements IConvertible.ToInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IConvertible.ToInt32(IFormatProvider ^ provider) = IConvertible::ToInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><see cref="T:System.IFormatProvider" /> 인터페이스를 구현하는 개체 이 매개 변수는 사용되지 않으므로 <see langword="null" />을 지정하세요.</param>
        <summary>이 변환은 지원되지 않습니다. 이 메서드를 사용하려고 하면 <see cref="T:System.InvalidCastException" />이 throw됩니다.</summary>
        <returns>이 멤버의 반환 값은 사용되지 않습니다.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">모든 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt64">
      <MemberSignature Language="C#" Value="long IConvertible.ToInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt64 (provider As IFormatProvider) As Long Implements IConvertible.ToInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual long System.IConvertible.ToInt64(IFormatProvider ^ provider) = IConvertible::ToInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><see cref="T:System.IFormatProvider" /> 인터페이스를 구현하는 개체 이 매개 변수는 사용되지 않으므로 <see langword="null" />을 지정하세요.</param>
        <summary>이 변환은 지원되지 않습니다. 이 메서드를 사용하려고 하면 <see cref="T:System.InvalidCastException" />이 throw됩니다.</summary>
        <returns>이 멤버의 반환 값은 사용되지 않습니다.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">모든 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSByte">
      <MemberSignature Language="C#" Value="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToSByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSByte (provider As IFormatProvider) As SByte Implements IConvertible.ToSByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::SByte System.IConvertible.ToSByte(IFormatProvider ^ provider) = IConvertible::ToSByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><see cref="T:System.IFormatProvider" /> 인터페이스를 구현하는 개체 이 매개 변수는 사용되지 않으므로 <see langword="null" />을 지정하세요.</param>
        <summary>이 변환은 지원되지 않습니다. 이 메서드를 사용하려고 하면 <see cref="T:System.InvalidCastException" />이 throw됩니다.</summary>
        <returns>이 멤버의 반환 값은 사용되지 않습니다.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">모든 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSingle">
      <MemberSignature Language="C#" Value="float IConvertible.ToSingle (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToSingle(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSingle (provider As IFormatProvider) As Single Implements IConvertible.ToSingle" />
      <MemberSignature Language="C++ CLI" Value=" virtual float System.IConvertible.ToSingle(IFormatProvider ^ provider) = IConvertible::ToSingle;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSingle(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><see cref="T:System.IFormatProvider" /> 인터페이스를 구현하는 개체 이 매개 변수는 사용되지 않으므로 <see langword="null" />을 지정하세요.</param>
        <summary>이 변환은 지원되지 않습니다. 이 메서드를 사용하려고 하면 <see cref="T:System.InvalidCastException" />이 throw됩니다.</summary>
        <returns>이 멤버의 반환 값은 사용되지 않습니다.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">모든 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToType">
      <MemberSignature Language="C#" Value="object IConvertible.ToType (Type type, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.IConvertible.ToType(class System.Type type, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToType(System.Type,System.IFormatProvider)" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.IConvertible.ToType(Type ^ type, IFormatProvider ^ provider) = IConvertible::ToType;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToType(System.Type,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="type">필요한 형식입니다.</param>
        <param name="provider"><see cref="T:System.IFormatProvider" /> 인터페이스를 구현하는 개체 이 매개 변수는 사용되지 않으므로 <see langword="null" />을 지정하세요.</param>
        <summary>현재 <see cref="T:System.DateTime" /> 개체를 지정된 형식의 개체로 변환합니다.</summary>
        <returns>현재 <paramref name="type" /> 개체 값과 같은 값인 <see cref="T:System.DateTime" /> 매개 변수로 지정된 형식의 개체입니다.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="type" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.InvalidCastException">이 변환은 <see cref="T:System.DateTime" /> 형식에 대해 지원되지 않습니다.</exception>
        <altmember cref="T:System.Convert" />
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt16">
      <MemberSignature Language="C#" Value="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int16 System.IConvertible.ToUInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToUInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt16 (provider As IFormatProvider) As UShort Implements IConvertible.ToUInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt16 System.IConvertible.ToUInt16(IFormatProvider ^ provider) = IConvertible::ToUInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><see cref="T:System.IFormatProvider" /> 인터페이스를 구현하는 개체 이 매개 변수는 사용되지 않으므로 <see langword="null" />을 지정하세요.</param>
        <summary>이 변환은 지원되지 않습니다. 이 메서드를 사용하려고 하면 <see cref="T:System.InvalidCastException" />이 throw됩니다.</summary>
        <returns>이 멤버의 반환 값은 사용되지 않습니다.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">모든 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt32">
      <MemberSignature Language="C#" Value="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int32 System.IConvertible.ToUInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToUInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt32 (provider As IFormatProvider) As UInteger Implements IConvertible.ToUInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt32 System.IConvertible.ToUInt32(IFormatProvider ^ provider) = IConvertible::ToUInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><see cref="T:System.IFormatProvider" /> 인터페이스를 구현하는 개체 이 매개 변수는 사용되지 않으므로 <see langword="null" />을 지정하세요.</param>
        <summary>이 변환은 지원되지 않습니다. 이 메서드를 사용하려고 하면 <see cref="T:System.InvalidCastException" />이 throw됩니다.</summary>
        <returns>이 멤버의 반환 값은 사용되지 않습니다.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">모든 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt64">
      <MemberSignature Language="C#" Value="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int64 System.IConvertible.ToUInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToUInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt64 (provider As IFormatProvider) As ULong Implements IConvertible.ToUInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt64 System.IConvertible.ToUInt64(IFormatProvider ^ provider) = IConvertible::ToUInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><see cref="T:System.IFormatProvider" /> 인터페이스를 구현하는 개체 이 매개 변수는 사용되지 않으므로 <see langword="null" />을 지정하세요.</param>
        <summary>이 변환은 지원되지 않습니다. 이 메서드를 사용하려고 하면 <see cref="T:System.InvalidCastException" />이 throw됩니다.</summary>
        <returns>이 멤버의 반환 값은 사용되지 않습니다.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">모든 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="info">데이터로 채울 개체입니다.</param>
        <param name="context">이 serialization의 대상입니다. 이 매개 변수는 사용되지 않으므로 <see langword="null" />을 지정하세요.</param>
        <summary>현재 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 개체를 serialize하는 데 필요한 데이터로 <see cref="T:System.DateTime" /> 개체를 채웁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 `info` 매개 변수를 <xref:System.DateTime.Ticks%2A> 및 <xref:System.DateTime.Kind%2A> 속성 값입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="info" />가 <see langword="null" />입니다.</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다. 이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</permission>
      </Docs>
    </Member>
    <Member MemberName="Ticks">
      <MemberSignature Language="C#" Value="public long Ticks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Ticks" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Ticks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Ticks As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long Ticks { long get(); };" />
      <MemberSignature Language="F#" Value="member this.Ticks : int64" Usage="System.DateTime.Ticks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 인스턴스의 날짜와 시간을 나타내는 틱 수를 가져옵니다.</summary>
        <value>이 인스턴스의 날짜와 시간을 나타내는 틱 수입니다. 값은 <see langword="DateTime.MinValue.Ticks" />와 <see langword="DateTime.MaxValue.Ticks" /> 사이입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 단일 틱 하나 백 나노초 또는 하나의 천만 분의 초를 나타냅니다. 1 밀리초, 10, 000 틱 또는 초당에서 10 백만 틱 있습니다.  
  
 이 속성은 0001 년 1 월 1 일 자정 12시: 00부터 경과한 100 나노초 간격의 수를 나타냅니다 (0: 00:00 년 1 월 1 일 UTC 0001 그레고리오력의)을 나타내는 <xref:System.DateTime.MinValue?displayProperty=nameWithType>합니다. 윤 초로 간주 되는 틱 수는 포함 되지 않습니다.  
  
   
  
## Examples  
 다음 예제에서는 합니다 <xref:System.DateTime.Ticks%2A> 21 세기 시작 된 이후에 경과 된 틱 수를 표시 하 고 인스턴스화할 수 속성을 <xref:System.TimeSpan> 개체입니다. <xref:System.TimeSpan> 개체는 다음 몇 가지 다른 시간 간격을 사용 하 여 경과 된 시간을 표시 하는 데 사용 됩니다.  
  
 [!code-csharp[System.DateTime.Ticks#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Ticks/cs/Ticks.cs#1)]
 [!code-vb[System.DateTime.Ticks#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Ticks/vb/Ticks.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TimeOfDay">
      <MemberSignature Language="C#" Value="public TimeSpan TimeOfDay { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan TimeOfDay" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.TimeOfDay" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TimeOfDay As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan TimeOfDay { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.TimeOfDay : TimeSpan" Usage="System.DateTime.TimeOfDay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 인스턴스에 대한 하루 중 시간을 가져옵니다.</summary>
        <value>하루 중 자정부터 경과한 시간을 나타내는 시간 간격입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 달리는 <xref:System.DateTime.Date%2A> 속성입니다. 반환 하는 <xref:System.DateTime> 해당 시간 구성 요소가 없는 날짜를 나타내는 값을 <xref:System.DateTime.TimeOfDay%2A> 속성에서 반환을 <xref:System.TimeSpan> 를 나타내는 값입니다를 <xref:System.DateTime> 값의 시간 구성 요소.  
  
 하루 중 시간을 표시 하거나 일자 시간의 문자열 표현을 검색 하려는 경우를 <xref:System.DateTime> 값을 호출할 수 있습니다 대신 오버 로드를 <xref:System.DateTime.ToString%2A> 있는 메서드를 `format` 매개 변수 또는 사용 하 여를 [복합 서식 지정 ](~/docs/standard/base-types/composite-formatting.md) "t" 또는 "T" 표준 서식 문자열을 사용 하 여 기능 합니다.  
  
   
  
## Examples  
 다음 예제에서는 값을 표시 합니다 <xref:System.DateTime.TimeOfDay%2A> 배열에 대해 속성 <xref:System.DateTime> 값입니다. 또한 복합 서식 지정 작업에서 "t" 표준 서식 문자열에서 반환한 문자열을 사용 하 여 반환 값을 대조 됩니다.  
  
 [!code-csharp[System.DateTime.TimeOfDay#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.timeofday/cs/timeofday1.cs#1)]
 [!code-vb[System.DateTime.TimeOfDay#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.timeofday/vb/timeofday1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.TimeSpan" />
      </Docs>
    </Member>
    <Member MemberName="ToBinary">
      <MemberSignature Language="C#" Value="public long ToBinary ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToBinary() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToBinary" />
      <MemberSignature Language="VB.NET" Value="Public Function ToBinary () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToBinary();" />
      <MemberSignature Language="F#" Value="member this.ToBinary : unit -&gt; int64" Usage="dateTime.ToBinary " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>현재 <see cref="T:System.DateTime" /> 개체를 나중에 <see cref="T:System.DateTime" /> 개체를 다시 만드는 데 사용할 수 있는 64비트 이진 값으로 serialize합니다.</summary>
        <returns><see cref="P:System.DateTime.Kind" /> 및 <see cref="P:System.DateTime.Ticks" /> 속성을 인코딩하는 64비트 부호 있는 정수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 된 <xref:System.DateTime.ToBinary%2A> 현재 값으로 변환 하는 방법 <xref:System.DateTime> 개체를 이진 값입니다. 이후에 이진 값을 사용 하며 <xref:System.DateTime.FromBinary%2A> 메서드를 다시 원래 <xref:System.DateTime> 개체입니다.  
  
> [!IMPORTANT]
>  일부 경우에는 <xref:System.DateTime> 에서 반환 된 값을 <xref:System.DateTime.FromBinary%2A> 방법은 원본과 동일 <xref:System.DateTime> 에 제공 된 값은 <xref:System.DateTime.ToBinary%2A> 메서드. 자세한 내용은 다음 섹션에서는 "현지 시간 조정"을 참조 하세요.  
  
## <a name="local-time-adjustment"></a>현지 시간 조정  
 현지 표준 시간대를 조정 하는 협정 세계시가 현지 시간으로 표시 됩니다는 <xref:System.DateTime> 갖는 <xref:System.DateTime.Kind%2A> 속성 값은 <xref:System.DateTimeKind.Local>합니다. 로컬 복원 하는 경우 <xref:System.DateTime> 에 의해 생성 된 이진 표현에서 값을 <xref:System.DateTime.ToBinary%2A> 메서드를는 <xref:System.DateTime.FromBinary%2A> 메서드는 원래 값과 같으면 되지 않도록 다시 만든된 값을 조정할 수. 이 비동기화는 다음과 같은 경우에 발생할 수 있습니다.  
  
-   경우 로컬 <xref:System.DateTime> 개체에서 한 표준 시간대에서 serialize 되는 <xref:System.DateTime.ToBinary%2A> 메서드를에서 다른 표준 시간대에서 deserialize 될를 <xref:System.DateTime.FromBinary%2A> 메서드를 나타내는 결과 현지 시간 <xref:System.DateTime> 개체 자동으로 조정 됩니다 두 번째 표준 시간대로 합니다.  
  
     예를 들어 한 <xref:System.DateTime> 오후 3 시 현지 시간을 나타내는 개체 미국에서 실행 되는 응용 프로그램 태평양 표준 시간대를 사용 하는 <xref:System.DateTime.ToBinary%2A> 메서드는 변환할 <xref:System.DateTime> 개체를 이진 값입니다. 미국에서 실행 되는 다른 응용 프로그램 동부 표준 시간대를 사용 합니다 <xref:System.DateTime.FromBinary%2A> 새 이진 값으로 변환할 방법이 <xref:System.DateTime> 개체입니다. 새 변수의 <xref:System.DateTime> 오후 6 시, 원래 오후 3으로에서 동일한 시점을 나타내는 개체가 그러나 값 동부 표준 시간대의 현지 시간으로 조정 됩니다.  
  
-   경우 로컬의 이진 표현 <xref:System.DateTime> 값 되는 시스템의 현지 표준 시간대에서 잘못 된 시간을 나타내는 <xref:System.DateTime.FromBinary%2A> 은 호출 시간이 조정 됩니다 유효한 되도록 합니다.  
  
     표준 시간에서 일광 절약 시간 전환 미국에서 발생 하는 예를 들어, 오전 2 시, 오전 3 시에 한 시간 전진할 때 2010 년 3 월 14 일 태평양 표준 시간대 이 시간 간격은이 표준 시간대에 존재 하지 않는 시간 간격, 잘못 된 시간입니다. 다음 예제에서는 내에 포함 되는 시간이이 범위를 이진 값으로 변환 됩니다는 <xref:System.DateTime.ToBinary%2A> 메서드에 의해 복원 되 고는 <xref:System.DateTime.FromBinary%2A> 메서드를 원래 값은 시간으로 조정 되는 유효 합니다. 여부를 특정 날짜 및 시간 값에 적용 될 수 있습니다 수정 전달 하 여 확인할 수 있습니다는 <xref:System.TimeZoneInfo.IsInvalidTime%2A?displayProperty=nameWithType> 메서드를 예로 보여 줍니다.  
  
     [!code-csharp[System.DateTime.FromBinary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.frombinary/cs/frombinary1.cs#1)]
     [!code-vb[System.DateTime.FromBinary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.frombinary/vb/frombinary1.vb#1)]  
  
## <a name="version-considerations"></a>버전 고려 사항  
 .NET Framework 버전 2.0부터는 <xref:System.DateTime> 개인 종류 필드를 지정 된 시간 값을 현지 시간, utc (협정 세계시) 또는 모두를 기반으로 하는지 여부를 나타냅니다와 개인 틱 필드가 이루어져 있습니다 구조는 날짜 및 시간을 지정 하는 100 나노초 틱 수를 포함 합니다. 틱 필드를 사용 하 여 액세스할 수 있습니다 합니다 <xref:System.DateTime.Ticks%2A> 속성 및 종류 필드를 사용 하 여 액세스할 수 있습니다는 <xref:System.DateTime.Kind%2A> 속성입니다.  
  
 직렬화 하는 경우.NET Framework 2.0 이전을 <xref:System.DateTime> 개체와 같은 serialization 인터페이스를 사용 하는 대신 수동으로 <xref:System.Runtime.Serialization.ISerializable?displayProperty=nameWithType>의 틱 데이터 직렬화에 필요 합니다 <xref:System.DateTime> 구조입니다. 버전 2.0 이상에서는 종류 데이터도 serialize 해야 있습니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.FromBinary(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="Today">
      <MemberSignature Language="C#" Value="public static DateTime Today { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime Today" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Today" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Today As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime Today { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.Today : DateTime" Usage="System.DateTime.Today" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 날짜를 가져옵니다.</summary>
        <value>시간 구성 요소가 00:00:00으로 설정되고 오늘 날짜로 설정되는 개체입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 반환 값은.NET Framework 버전 2.0부터는 <xref:System.DateTime> 해당 <xref:System.DateTime.Kind%2A> 속성이 반환 <xref:System.DateTimeKind.Local>합니다.  
  
 현재 시간을 제외한 현재 날짜를 반환 하기 때문에 <xref:System.DateTime.Today%2A> 속성이 날짜에만 사용 하는 응용 프로그램에 적합 합니다. 자세한 내용은 참조 하세요 [Choosing Between DateTime, DateTimeOffset, TimeSpan 및 TimeZoneInfo](~/docs/standard/datetime/choosing-between-datetime.md)합니다. 반면를 <xref:System.DateTime.TimeOfDay%2A> 속성은 현재 날짜 없이 현재 시간을 반환 하며 <xref:System.DateTime.Now%2A> 속성에는 현재 날짜와 현재 시간을 모두 반환 합니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.DateTime.Date%2A> 현재 날짜를 검색할 속성입니다. 기능도 보여 줍니다 어떻게는 <xref:System.DateTime> 일부 표준 날짜 및 시간 형식 문자열을 사용 하 여 값 형식을 지정할 수 있습니다. 세 번째 호출에서 생성 한 출력을 확인 합니다 <xref:System.DateTime.ToString%28System.String%29> 메서드 g 형식 지정자를 사용 하 여 값이 0 인 시간 구성 요소를 포함 합니다.  
  
 [!code-csharp[System.DateTime.Today#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Today/cs/Today1.cs#1)]
 [!code-vb[System.DateTime.Today#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Today/vb/Today1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTime.Now" />
        <altmember cref="P:System.DateTime.TimeOfDay" />
      </Docs>
    </Member>
    <Member MemberName="ToFileTime">
      <MemberSignature Language="C#" Value="public long ToFileTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToFileTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToFileTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToFileTime () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToFileTime();" />
      <MemberSignature Language="F#" Value="member this.ToFileTime : unit -&gt; int64" Usage="dateTime.ToFileTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>현재 <see cref="T:System.DateTime" /> 개체의 값을 Windows 파일 시간으로 변환합니다.</summary>
        <returns>Windows 파일 시간으로 표시되는 현재 <see cref="T:System.DateTime" /> 개체의 값입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Windows 파일 시간은 서 기 1601 년 1 월 1 일 자정 12 시 이후 경과한 100 나노초 간격의 수를 나타내는 64 비트 값 (C.E.) UTC (Coordinated Universal Time)입니다. Windows 파일 시간을 사용 하 여 응용 프로그램 액세스를 만들거나 파일을 쓸 때 기록.  
  
 <xref:System.DateTime.ToFileTime%2A> 메서드를 <xref:System.DateTime.Kind%2A> 속성을 확인 하는지 여부를 현재 <xref:System.DateTime> 개체가 현지 시간을 UTC 시간, 또는 알 수 없는 종류의 현지 시간으로 간주 되는 시간.  
  
   
  
## Examples  
 다음 예제는 <xref:System.DateTime.ToFileTime%2A> 메서드.  
  
 [!code-cpp[DateTime.ToFileTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.ToFileTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.ToFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToFileTime/CS/class1.cs#1)]
 [!code-vb[DateTime.ToFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToFileTime/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">결과 파일 시간이 서기 1601년 1월 1일 12시 자정(UTC) 이전의 날짜 및 시간을 나타냅니다.</exception>
        <block subset="none" type="usage"><para>일반적으로 <see cref="M:System.DateTime.FromFileTime(System.Int64)" /> 메서드 복원을 <see cref="T:System.DateTime" /> 하 여 저장 된 값을 <see cref="M:System.DateTime.ToFileTime" /> 메서드. 그러나 두 값 다음 조건에서 다를 수 있습니다. 
-Serialization 및 deserialization을 <see cref="T:System.DateTime" /> 값이 서로 다른 시간대에 발생 합니다. 예를 들어 경우는 <see cref="T:System.DateTime" /> 오후 12 시 30 분의 시간 값 미국 동부 표준 시간대 serialize 되며 미국에서 deserialize 될 태평양 표준시, 오후 12 시 30 분의 원래 값 오전 9 시 30 분에 맞게 조정 됩니다. 에 두 표준 시간대 간의 차이 반영 합니다.  
  
-는 <see cref="T:System.DateTime" /> 값 serialize 되는 현지 표준 시간대에서 잘못 된 시간을 나타냅니다. 이 경우에 <see cref="M:System.DateTime.ToFileTime" /> 메서드를 복원 된 조정 <see cref="T:System.DateTime" /> 현지 표준 시간대에 유효한 시간을 나타낼 수 있도록 값.  
  
표준 시간에서 일광 절약 시간 전환 미국에서 발생 하는 예를 들어, 오전 2 시, 오전 3 시에 한 시간 전진할 때 2010 년 3 월 14 일 태평양 표준 시간대 이 시간 간격은이 표준 시간대에 존재 하지 않는 시간 간격, 잘못 된 시간입니다. 다음 예제에서는 내에 포함 되는 시간이이 범위를 정수 (long) 값으로 변환 됩니다는 <see cref="M:System.DateTime.ToFileTime" /> 메서드에 의해 복원 되 고는 <see cref="M:System.DateTime.FromFileTime(System.Int64)" /> 메서드를 원래 값은 시간으로 조정 되는 유효 합니다. 여부를 특정 날짜 및 시간 값에 적용 될 수 있습니다 수정 전달 하 여 확인할 수 있습니다는 <see cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" /> 메서드를 예로 보여 줍니다.  
  
[! 코드 csharp[System.DateTime.FromFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.fromfiletime/cs/fromfiletime1.cs#1)] [! 코드 vb[System.DateTime.FromFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.fromfiletime/vb/fromfiletime1.vb#1)]</para></block>
        <altmember cref="M:System.DateTime.ToFileTimeUtc" />
        <altmember cref="T:System.Int64" />
        <altmember cref="M:System.DateTime.ToUniversalTime" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="ToFileTimeUtc">
      <MemberSignature Language="C#" Value="public long ToFileTimeUtc ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToFileTimeUtc() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToFileTimeUtc" />
      <MemberSignature Language="VB.NET" Value="Public Function ToFileTimeUtc () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToFileTimeUtc();" />
      <MemberSignature Language="F#" Value="member this.ToFileTimeUtc : unit -&gt; int64" Usage="dateTime.ToFileTimeUtc " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>현재 <see cref="T:System.DateTime" /> 개체의 값을 Windows 파일 시간으로 변환합니다.</summary>
        <returns>Windows 파일 시간으로 표시되는 현재 <see cref="T:System.DateTime" /> 개체의 값입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Windows 파일 시간은 서 기 1601 년 1 월 1 일 자정 12 시 이후 경과한 100 나노초 간격의 수를 나타내는 64 비트 값 (C.E.) UTC (Coordinated Universal Time)입니다. Windows 파일 시간을 사용 하 여 응용 프로그램 액세스를 만들거나 파일을 쓸 때 기록.  
  
 <xref:System.DateTime.ToFileTimeUtc%2A> 메서드를 <xref:System.DateTime.Kind%2A> 속성을 확인 하는지 여부를 현재 <xref:System.DateTime> 개체가 현지 시간을 UTC 시간을 또는 알 수 없는 종류의 UTC 시간으로 간주 되는 시간. 현지 시간 인 경우 변환 시간 UTC로 Windows 파일 시간으로 변환을 수행 하기 전에 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">결과 파일 시간이 서기 1601년 1월 1일 12시 자정(UTC) 이전의 날짜 및 시간을 나타냅니다.</exception>
        <block subset="none" type="usage"><para>합니다 <see cref="M:System.DateTime.ToFileTimeUtc" /> 현지 시간을 UTC로 변환 하 고 호출 하 여 복원 이후에 메서드 사용 되기도 합니다 <see cref="M:System.DateTime.FromFileTimeUtc(System.Int64)" /> 메서드를 호출한는 <see cref="M:System.DateTime.ToLocalTime" /> 메서드. 그러나 원래 시간이 현지 표준 시간대에서 잘못 된 시간을 나타내는 경우 두 현지 시간 값 같음 되지 않습니다. 자세한 내용은 참조는 <see cref="M:System.DateTime.ToLocalTime" /> 메서드.</para></block>
        <altmember cref="M:System.DateTime.ToFileTime" />
        <altmember cref="T:System.Int64" />
        <altmember cref="M:System.DateTime.ToUniversalTime" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="ToLocalTime">
      <MemberSignature Language="C#" Value="public DateTime ToLocalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime ToLocalTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToLocalTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLocalTime () As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime ToLocalTime();" />
      <MemberSignature Language="F#" Value="member this.ToLocalTime : unit -&gt; DateTime" Usage="dateTime.ToLocalTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>현재 <see cref="T:System.DateTime" /> 개체의 값을 현지 시간으로 변환합니다.</summary>
        <returns><see cref="P:System.DateTime.Kind" /> 속성이 <see cref="F:System.DateTimeKind.Local" />이고, 현재 <see cref="T:System.DateTime" /> 개체의 값에 해당하는 현지 시간이 값인 개체입니다. 변환된 값이 너무 커서 <see cref="F:System.DateTime.MaxValue" /> 개체로 표현할 수 없는 경우 <see cref="T:System.DateTime" />이고, 변환된 값이 너무 작아서 <see cref="F:System.DateTime.MinValue" /> 개체로 표현할 수 없는 경우 <see cref="T:System.DateTime" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 현지 시간 utc (협정 세계시) 시간 및 UTC 오프셋 하는 것과 같습니다. UTC 오프셋에 대 한 자세한 내용은 참조 하세요. <xref:System.TimeZone.GetUtcOffset%2A?displayProperty=nameWithType>합니다. 변환도 고려 현재 표시 된 시간이 적용 되는 일광 절약 시간 규칙 <xref:System.DateTime> 개체입니다.  
  
> [!IMPORTANT]
>  [!INCLUDE[winxp](~/includes/winxp-md.md)] 체제는 <xref:System.DateTime.ToLocalTime%2A> 메서드 UTC에서 현지 시간으로 변환 하는 경우에 현재 조정 규칙을 인식 합니다. 결과적으로, 현재 조정 규칙이 적용 되기 기간에 대 한 변환 UTC와 현지 시간 사이의 차이 정확 하 게 반영 되지 않을 수 있습니다.  
  
 .NET Framework 버전 2.0에서 반환한 값을 사용 하 여 시작 합니다 <xref:System.DateTime.ToLocalTime%2A> 메서드에 의해 결정 됩니다 합니다 <xref:System.DateTime.Kind%2A> 속성이 현재 <xref:System.DateTime> 개체입니다. 다음 표에서 가능한 결과 설명 합니다.  
  
|종류|결과|  
|----------|-------------|  
|<xref:System.DateTimeKind.Utc>|이 인스턴스의 <xref:System.DateTime> 현지 시간으로 변환 됩니다.|  
|<xref:System.DateTimeKind.Local>|변환이 수행 되지 않습니다.|  
|<xref:System.DateTimeKind.Unspecified>|이 인스턴스의 <xref:System.DateTime> UTC 시간으로 간주 됩니다 및 변환이 수행 되며 처럼 <xref:System.DateTime.Kind%2A> 된 <xref:System.DateTimeKind.Utc>합니다.|  
  
> [!NOTE]
>  <xref:System.DateTime.ToLocalTime%2A> 변환 메서드를 <xref:System.DateTime> UTC에서 현지 시간 사이의 값입니다. 지정 된 표준 시간대의 시간을 현지 시간으로 변환 하려면 사용 된 <xref:System.TimeZoneInfo.ConvertTime%2A?displayProperty=nameWithType> 메서드.  
  
 변환에 의해 반환 되는 값을 <xref:System.DateTime> 해당 <xref:System.DateTime.Kind%2A> 속성은 항상 반환 <xref:System.DateTimeKind.Local>합니다. 유효한 결과 반환 하는 결과적으로 경우에 <xref:System.DateTime.ToLocalTime%2A> 동일 하 게 반복적으로 적용 됩니다 <xref:System.DateTime>합니다.  
  
   
  
## Examples  
 다음 예제는 <xref:System.DateTime.ToLocalTime%2A> 메서드. Note 정확한 출력 현재 문화권 및 실행 되는 시스템의 현지 표준 시간대에 따라 달라 집니다.  
  
 [!code-cpp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CS/class1.cs#1)]
 [!code-vb[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/VB/class1.vb#1)]  
  
 다음 예제에서는 합니다 <xref:System.DateTime.SpecifyKind%2A> 메서드를 보여 줍니다 하는 방법을 <xref:System.DateTime.Kind%2A> 속성이 영향을 줍니다 합니다 <xref:System.DateTime.ToLocalTime%2A> 및 <xref:System.DateTime.ToUniversalTime%2A> 변환 메서드.  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para>사용할 수는 <see cref="M:System.DateTime.ToLocalTime" /> 로컬 날짜 및 시간 값으로 UTC로 변환 된 복원 방법 합니다 <see cref="M:System.DateTime.ToUniversalTime" /> 또는 <see cref="M:System.DateTime.FromFileTimeUtc(System.Int64)" /> 메서드. 그러나 원래 시간이 현지 표준 시간대에서 잘못 된 시간을 나타내는, 복원 된 값을 일치 하지 않습니다. 경우는 <see cref="M:System.DateTime.ToLocalTime" /> 메서드 시간으로 변환 된 UTC에서 현지 표준 시간대, 현지 표준 시간대에서 한 유효 하도록 시간을 조정 합니다.  
  
표준 시간에서 일광 절약 시간 전환 미국에서 발생 하는 예를 들어, 오전 2 시, 오전 3 시에 한 시간 전진할 때 2010 년 3 월 14 일 태평양 표준 시간대 이 시간 간격은이 표준 시간대에 존재 하지 않는 시간 간격, 잘못 된 시간입니다. 다음 예제에서는 내에 포함 되는 시간이이 범위에서 UTC로 변환 하는 <see cref="M:System.DateTime.ToUniversalTime" /> 메서드에서 복원 되는 <see cref="M:System.DateTime.ToLocalTime" /> 메서드를 원래 값은 시간으로 조정 되는 유효한. 여부를 특정 날짜 및 시간 값에 적용 될 수 있습니다 수정 전달 하 여 확인할 수 있습니다는 <see cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" /> 메서드를 예로 보여 줍니다.  
  
[! 코드 csharp[System.DateTime.ToLocalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tolocaltime/cs/tolocaltime1.cs#1)] [! 코드 vb[System.DateTime.ToLocalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tolocaltime/vb/tolocaltime1.vb#1)]</para></block>
        <altmember cref="T:System.TimeZone" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
        <altmember cref="M:System.TimeZone.GetDaylightChanges(System.Int32)" />
        <altmember cref="M:System.DateTime.ToUniversalTime" />
      </Docs>
    </Member>
    <Member MemberName="ToLongDateString">
      <MemberSignature Language="C#" Value="public string ToLongDateString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToLongDateString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToLongDateString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLongDateString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToLongDateString();" />
      <MemberSignature Language="F#" Value="member this.ToLongDateString : unit -&gt; string" Usage="dateTime.ToLongDateString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>현재 <see cref="T:System.DateTime" /> 개체의 값을 해당하는 긴 날짜 문자열 표현으로 변환합니다.</summary>
        <returns>현재 <see cref="T:System.DateTime" /> 개체의 긴 날짜 문자열 표현을 포함하는 문자열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 현재 값 <xref:System.DateTime> 개체를 정의 하는 패턴을 사용 하 여 형식이 <xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A> 현재 스레드 문화권과 연결 된 속성입니다. 반환 값이 "D"를 지정 하 여 반환 값과 동일한 [표준 DateTime 형식 문자열](~/docs/standard/base-types/standard-date-and-time-format-strings.md) 사용 하 여는 <xref:System.DateTime.ToString%28System.String%29> 메서드.  
  
> [!IMPORTANT]
>  반환한 문자열을 <xref:System.DateTime.ToLongDateString%2A> 메서드는 문화권을 구분 합니다. 현재 문화권에 의해 정의 된 패턴과 반영 <xref:System.Globalization.DateTimeFormatInfo> 개체입니다. 예를 들어 EN-US 문화권에 대 한 표준 자세한 날짜 패턴은 "dddd, MMMMdd, yyyy"; DE-DE 문화권에 대 한 것은 "dddd, d입니다. MMMMyyyy "; JA-JP 문화권 경우 "yyyy'? ' M'? ' d'? ' "입니다. 특정 컴퓨터에 대 한 구체적인 형식 문자열을 표준 긴 날짜 형식 문자열에서 다른 사용자 지정할 수도 있습니다.  
  
 현재 스레드 문화권에 대 한 자세한 내용은 참조는 <xref:System.Threading.Thread.CurrentCulture%2A> 속성입니다. 생성 형식 문자와 형식 패턴을 출력 하는 방법에 대 한 자세한 내용은 참조는 [형식](~/docs/standard/base-types/formatting-types.md) 항목입니다. 형식 문자를 사용 하 여 연결 된 형식 패턴을 변경 하는 방법에 대 한 자세한 내용은 참조는 <xref:System.Globalization.DateTimeFormatInfo> 클래스입니다.  
  
   
  
## Examples  
 다음 예제는 <xref:System.DateTime.ToLongDateString%2A> 메서드.  
  
 [!code-csharp[DateTime.ToShortLongString#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToShortLongString/cs/sls.cs#1)]
 [!code-vb[DateTime.ToShortLongString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToShortLongString/vb/sls.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.DateTime.ToString" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">.NET의 서식 지정 형식</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">사용자 지정 날짜 및 시간 형식 문자열</related>
      </Docs>
    </Member>
    <Member MemberName="ToLongTimeString">
      <MemberSignature Language="C#" Value="public string ToLongTimeString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToLongTimeString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToLongTimeString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLongTimeString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToLongTimeString();" />
      <MemberSignature Language="F#" Value="member this.ToLongTimeString : unit -&gt; string" Usage="dateTime.ToLongTimeString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>현재 <see cref="T:System.DateTime" /> 개체의 값을 해당하는 긴 시간 문자열 표현으로 변환합니다.</summary>
        <returns>현재 <see cref="T:System.DateTime" /> 개체의 긴 시간 문자열 표현을 포함하는 문자열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 현재 값 <xref:System.DateTime> 개체를 정의 하는 패턴을 사용 하 여 형식이 <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A?displayProperty=nameWithType> 현재 스레드 문화권과 연결 된 속성입니다. 반환 값은 "T"를 지정 하 여 반환 값과 동일한 [표준 날짜 및 시간 서식 문자열](~/docs/standard/base-types/standard-date-and-time-format-strings.md) 사용 하 여는 <xref:System.DateTime.ToString%28System.String%29> 메서드.  
  
> [!IMPORTANT]
>  반환한 문자열을 <xref:System.DateTime.ToLongTimeString%2A> 메서드는 문화권을 구분 합니다. 정의한 패턴을 반영 합니다 <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A> 속성의 현재 문화권의 <xref:System.Globalization.DateTimeFormatInfo> 개체입니다. 예를 들어 EN-US 문화권에 대 한 표준 긴 시간 패턴은 "h:mm: ss tt"; DE-DE 문화권에 대 한 것이 "hh: mm:"; JA-JP 문화권 "h:mm: ss"입니다. 특정 컴퓨터에 대 한 구체적인 형식 문자열을 표준 긴 시간 형식 문자열에서 다른 사용자 지정할 수도 있습니다.  
  
 현재 스레드 문화권에 대 한 자세한 내용은 참조는 <xref:System.Threading.Thread.CurrentCulture%2A> 속성입니다. 생성 형식 문자와 형식 패턴을 출력 하는 방법에 대 한 자세한 내용은 참조는 [형식](~/docs/standard/base-types/formatting-types.md) 항목입니다. 형식 문자를 사용 하 여 연결 된 형식 패턴을 변경 하는 방법에 대 한 자세한 내용은 참조는 <xref:System.Globalization.DateTimeFormatInfo> 클래스입니다.  
  
   
  
## Examples  
 다음 예제는 <xref:System.DateTime.ToLongTimeString%2A> 메서드.  
  
 [!code-csharp[System.DateTime.ToLongTimeString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tolongtimestring/cs/sls.cs#1)]
 [!code-vb[System.DateTime.ToLongTimeString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tolongtimestring/vb/sls.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.DateTime.ToString" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">.NET의 서식 지정 형식</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">사용자 지정 날짜 및 시간 형식 문자열</related>
      </Docs>
    </Member>
    <Member MemberName="ToOADate">
      <MemberSignature Language="C#" Value="public double ToOADate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 ToOADate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToOADate" />
      <MemberSignature Language="VB.NET" Value="Public Function ToOADate () As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ToOADate();" />
      <MemberSignature Language="F#" Value="member this.ToOADate : unit -&gt; double" Usage="dateTime.ToOADate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 인스턴스의 값을 해당 OLE 자동화 날짜로 변환합니다.</summary>
        <returns>이 인스턴스의 값에 해당하는 OLE 자동화 날짜를 포함하는 소수점 아래 두 자리 부동 소수점 수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 OLE 자동화 날짜는 해당 필수 구성 요소는 이전 또는 1899 년 12 월 30 일 자정 이후의 일 수 및 소수 부분이 24로 나눈 해당 날짜에 시간을 나타내는 부동 소수점 숫자로 구현 됩니다. 예를 들어 자정 1899 년 12 월 31가 나타내는 1.0; 오전 6 시, 1900 년 1 월 1은 표현 2.25; 자정 1899 년 12 월 29-1.0;으로 표시 됩니다. 고 오전 6 1899 년 12 월 29-1.25로 표시 됩니다.  
  
 기본 OLE 자동화 날짜는 1899 년 12 월 30 일 자정입니다. 최소 OLE 자동화 날짜는 1 년 1 월 0100 일 자정입니다. 최대 OLE 자동화 날짜와 동일 <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, 31 년 12 월의 마지막 순간 9999입니다.  
  
 합니다 <xref:System.DateTime.ToOADate%2A> 메서드가 throw를 <xref:System.OverflowException> 현재 인스턴스가 나타내는 날짜 보다 이후인 경우 <xref:System.DateTime.MinValue> January1, 자정 0100 보다 이전 버전입니다. 그러나 현재 인스턴스의 값이 <xref:System.DateTime.MinValue>, 메서드에서 0을 반환 합니다.  
  
 OLE Automation에 대 한 자세한 내용은 참조는 [MSDN Library](https://go.microsoft.com/fwlink/?linkid=37118)합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">이 인스턴스의 값은 OLE 자동화 날짜로 표현할 수 없습니다.</exception>
        <altmember cref="T:System.Double" />
        <altmember cref="M:System.DateTime.FromOADate(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="ToShortDateString">
      <MemberSignature Language="C#" Value="public string ToShortDateString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToShortDateString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToShortDateString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToShortDateString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToShortDateString();" />
      <MemberSignature Language="F#" Value="member this.ToShortDateString : unit -&gt; string" Usage="dateTime.ToShortDateString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>현재 <see cref="T:System.DateTime" /> 개체의 값을 해당하는 짧은 날짜 문자열 표현으로 변환합니다.</summary>
        <returns>현재 <see cref="T:System.DateTime" /> 개체의 짧은 날짜 문자열 표현을 포함하는 문자열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 현재 값 <xref:System.DateTime> 개체를 정의 하는 패턴을 사용 하 여 형식이 <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A?displayProperty=nameWithType> 현재 스레드 문화권과 연결 된 속성입니다. 반환 값이 "d"를 지정 하 여 반환 값과 동일한 [표준 DateTime 형식 문자열](~/docs/standard/base-types/standard-date-and-time-format-strings.md) 사용 하 여는 <xref:System.DateTime.ToString%28System.String%29> 메서드.  
  
> [!IMPORTANT]
>  반환한 문자열을 <xref:System.DateTime.ToShortDateString%2A> 메서드는 문화권을 구분 합니다. 현재 문화권에 의해 정의 된 패턴과 반영 <xref:System.Globalization.DateTimeFormatInfo> 개체입니다. 예를 들어 EN-US 문화권에 대 한 표준 짧은 날짜 패턴은 "M/d/yyyy"; DE-DE 문화권에 대 한 것이 "있습니다. MM.yyyy "; JA-JP 문화권의 경우 "yyyy/M/d"는 것입니다. 특정 컴퓨터에 대 한 구체적인 형식 문자열을 표준 짧은 날짜 형식 문자열에서 다른 사용자 지정할 수도 있습니다.  
  
 현재 스레드 문화권에 대 한 자세한 내용은 참조는 <xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType> 속성입니다. 생성 형식 문자와 형식 패턴을 출력 하는 방법에 대 한 자세한 내용은 참조는 [형식](~/docs/standard/base-types/formatting-types.md) 항목입니다. 형식 문자를 사용 하 여 연결 된 형식 패턴을 변경 하는 방법에 대 한 자세한 내용은 참조는 <xref:System.Globalization.DateTimeFormatInfo> 클래스입니다.  
  
   
  
## Examples  
 다음 예제는 <xref:System.DateTime.ToShortDateString%2A> 메서드. 또한 표시 하는 호출의 결과 <xref:System.DateTime.ToShortDateString%2A> 호출 하는 것과 동일 합니다 <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> "d" 형식 매개 변수로 사용 하 여 메서드.  
  
 [!code-csharp[System.DateTime.ToShortDateString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToShortDateString/cs/ToShortDateString.cs#1)]
 [!code-vb[System.DateTime.ToShortDateString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToShortDateString/vb/ToShortDateString.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.DateTime.ToString" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">.NET의 서식 지정 형식</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">사용자 지정 날짜 및 시간 형식 문자열</related>
      </Docs>
    </Member>
    <Member MemberName="ToShortTimeString">
      <MemberSignature Language="C#" Value="public string ToShortTimeString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToShortTimeString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToShortTimeString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToShortTimeString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToShortTimeString();" />
      <MemberSignature Language="F#" Value="member this.ToShortTimeString : unit -&gt; string" Usage="dateTime.ToShortTimeString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>현재 <see cref="T:System.DateTime" /> 개체의 값을 해당하는 짧은 시간 문자열 표현으로 변환합니다.</summary>
        <returns>현재 <see cref="T:System.DateTime" /> 개체의 짧은 시간 문자열 표현을 포함하는 문자열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 현재 값 <xref:System.DateTime> 개체를 정의 하는 패턴을 사용 하 여 형식이 <xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern%2A?displayProperty=nameWithType> 현재 스레드 문화권과 연결 된 속성입니다. 반환 값은 "t"를 지정 하 여 반환 값과 동일한 [표준 DateTime 형식 문자열](~/docs/standard/base-types/standard-date-and-time-format-strings.md) 사용 하 여는 <xref:System.DateTime.ToString%28System.String%29> 메서드.  
  
> [!IMPORTANT]
>  반환한 문자열을 <xref:System.DateTime.ToShortTimeString%2A> 메서드는 문화권을 구분 합니다. 현재 문화권에 의해 정의 된 패턴과 반영 <xref:System.Globalization.DateTimeFormatInfo> 개체입니다. 예를 들어 EN-US 문화권에 대 한 표준 짧은 시간 패턴은 "h:mm tt"; DE-DE 문화권에 대 한 것은 "hh: mm"; JA-JP 문화권 "H:mm"입니다. 특정 컴퓨터에 대 한 구체적인 형식 문자열을 표준 짧은 시간 형식 문자열에서 다른 사용자 지정할 수도 있습니다.  
  
 현재 스레드 문화권에 대 한 자세한 내용은 참조는 <xref:System.Threading.Thread.CurrentCulture%2A> 속성입니다. 생성 형식 문자와 형식 패턴을 출력 하는 방법에 대 한 자세한 내용은 참조는 [형식](~/docs/standard/base-types/formatting-types.md) 항목입니다. 형식 문자를 사용 하 여 연결 된 형식 패턴을 변경 하는 방법에 대 한 자세한 내용은 참조는 <xref:System.Globalization.DateTimeFormatInfo> 클래스입니다.  
  
   
  
## Examples  
 다음 예제는 <xref:System.DateTime.ToShortTimeString%2A> 메서드.  
  
 [!code-csharp[DateTime.ToShortLongString#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToShortLongString/cs/sls.cs#1)]
 [!code-vb[DateTime.ToShortLongString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToShortLongString/vb/sls.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.DateTime.ToString" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">.NET의 서식 지정 형식</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">사용자 지정 날짜 및 시간 형식 문자열</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>현재 <see cref="T:System.DateTime" /> 개체의 값을 해당하는 문자열 표현으로 변환합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="dateTime.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>현재 문화권의 형식 규칙을 사용하여 현재 <see cref="T:System.DateTime" /> 개체의 값을 해당하는 문자열 표현으로 변환합니다.</summary>
        <returns>현재 <see cref="T:System.DateTime" /> 개체 값의 문자열 표현입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 현재 값 <xref:System.DateTime> 일반 날짜 및 시간 형식 지정자 ('G')를 사용 하 여 개체 형식이 있습니다. 특정 날짜 및 시간 형식 지정자를 사용 하 여 서식 지정, 호출 된 <xref:System.DateTime.ToString%28System.String%29> 메서드. 일반 날짜 및 시간 형식 지정자 ('G')를 사용 하 여 특정 문화권의 서식 지정, 호출 된 <xref:System.DateTime.ToString%28System.IFormatProvider%29> 메서드. 특정 날짜 및 시간 형식 지정자는 특정 문화권의 규칙을 사용 하 여 서식 지정, 호출 된 <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29> 메서드.  
  
 이 메서드가 현재 문화권에서 파생 된 형식 지정 정보를 사용 합니다. 특히에서 반환 된 사용자 지정 형식 문자열을 결합 합니다는 <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A> 및 <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A> 의 속성을 <xref:System.Globalization.DateTimeFormatInfo> 에서 반환 된 개체는 `Thread.CurrentThread.CurrentCulture.DateTimeFormat` 속성입니다. 자세한 내용은 <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>를 참조하십시오. 다른 오버 로드 된 <xref:System.DateTime.ToString%2A> 방법을 사용 하면 문화권을 지정 하려면 서식 지정을 사용 하 고 출력 패턴을 정의 하는 <xref:System.DateTime> 값입니다.  
  
   
  
## Examples  
 다음 예제에서는 어떻게의 문자열 표현을 <xref:System.DateTime> 에서 반환 된 값을 <xref:System.DateTime.ToString> 메서드가 현재 스레드 문화권에 따라 달라 집니다. 현재 스레드 문화권과 JA-JP FR-FR EN-US에서 변경 됩니다. 그리고 각 호출의 경우는 <xref:System.DateTime.ToString> 해당 문화권을 사용 하 여 날짜 및 시간 값의 문자열 표현을 반환 하는 방법.  
  
 [!code-csharp[System.DateTime.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/ToString1.cs#1)]
 [!code-vb[System.DateTime.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/ToString1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">날짜 및 시간이 현재 문화권에서 사용되는 달력에서 지원하는 날짜 범위를 벗어납니다.</exception>
        <block subset="none" type="usage"><para><see cref="M:System.DateTime.ToString" /> 메서드는 현재 문화권에서 사용 된 달력에서 날짜 및 시간의 문자열 표현을 반환 합니다. 경우 현재 값 <see cref="T:System.DateTime" /> 인스턴스가 이전의 <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> 보다 이후 이거나 <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, 메서드가 throw는 <see cref="T:System.ArgumentOutOfRangeException" />합니다. 다음 예제에서 이에 대해 설명합니다. 범위 밖에 있는 날짜 서식 지정 하려고 합니다 <see cref="T:System.Globalization.HijriCalendar" /> 현재 문화권은 아랍어 (시리아) 클래스입니다.  
  
[! 코드 csharp[System.DateTime.ToString.ArgumentOutOfRangeException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception2.cs#2)] [! 코드 vb[System.DateTime.ToString.ArgumentOutOfRangeException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/datetime.tostring.argumentoutofrangeexception2.vb#2)]</para></block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : IFormatProvider -&gt; string" Usage="dateTime.ToString provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToString(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">문화권별 서식 지정 정보를 제공하는 개체입니다.</param>
        <summary>지정된 문화권별 형식 정보를 사용하여 현재 <see cref="T:System.DateTime" /> 개체의 값을 해당하는 문자열 표현으로 변환합니다.</summary>
        <returns>현재 <see cref="T:System.DateTime" /> 개체의 값을 <paramref name="provider" />에 지정된 내용에 따라 나타낸 문자열 표현입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 현재 값 <xref:System.DateTime> 일반 날짜 및 시간 형식 지정자 ('G')는 짧은 날짜 패턴과 긴 시간 패턴을 사용 하 여 출력을 사용 하 여 개체 형식이 있습니다.  
  
 짧은 날짜 및 긴 시간 패턴의 형식을 정의한는 `provider` 매개 변수입니다. `provider` 매개 변수는 다음 중 하나일 수 있습니다.  
  
-   <xref:System.Globalization.CultureInfo> 반환된 된 문자열에 적용 하는 데 형식 규칙이 포함 된 문화권을 나타내는 개체입니다. 합니다 <xref:System.Globalization.DateTimeFormatInfo> 에서 반환 된 개체는 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> 속성은 반환된 된 문자열의 서식을 정의 합니다.  
  
-   <xref:System.Globalization.DateTimeFormatInfo> 날짜 및 시간 데이터 형식을 정의 하는 개체입니다.  
  
-   구현 하는 사용자 지정 개체를 <xref:System.IFormatProvider> 인터페이스입니다. 해당 <xref:System.IFormatProvider.GetFormat%2A> 메서드가 반환 되는 <xref:System.Globalization.DateTimeFormatInfo> 서식 지정 정보를 제공 하는 개체입니다.  
  
 하는 경우 `provider` 됩니다 `null`, <xref:System.Globalization.DateTimeFormatInfo> 현재 문화권과 연결 된 개체를 사용 합니다. 자세한 내용은 <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>를 참조하십시오.  
  
   
  
## Examples  
 다음 예제에서는 날짜 및 시간 사용 하 여 문자열 표현을 표시 <xref:System.Globalization.CultureInfo> 5 개의 서로 다른 문화권을 나타내는 개체입니다.  
  
 [!code-csharp[System.DateTime.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/ToString4.cs#3)]
 [!code-vb[System.DateTime.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/ToString4.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">날짜 및 시간이 <paramref name="provider" />에서 사용되는 달력에서 지원하는 날짜 범위를 벗어납니다.</exception>
        <block subset="none" type="usage"><para>합니다 <see cref="M:System.DateTime.ToString(System.IFormatProvider)" /> 메서드가 나타내는 문화권에서 사용 된 달력에서 날짜 및 시간의 문자열 표현을 반환 합니다 <paramref name="provider" /> 매개 변수입니다. 해당 일정에 의해 정의 됩니다는 <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> 속성입니다. 경우 현재 값 <see cref="T:System.DateTime" /> 인스턴스가 이전의 <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> 보다 이후 이거나 <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, 메서드가 throw는 <see cref="T:System.ArgumentOutOfRangeException" />합니다. 다음 예제에서 이에 대해 설명합니다. 범위 밖에 있는 날짜 서식 지정 하려고 합니다 <see cref="T:System.Globalization.JapaneseCalendar" /> 클래스입니다.  
  
[! 코드 csharp[System.DateTime.ToString.ArgumentOutOfRangeException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception1.cs#1)] [! 코드 vb[System.DateTime.ToString.ArgumentOutOfRangeException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/datetime.tostring.argumentoutofrangeexception1.vb#1)]</para></block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format);" />
      <MemberSignature Language="F#" Value="override this.ToString : string -&gt; string" Usage="dateTime.ToString format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">표준 또는 사용자 지정 날짜 및 시간 서식 문자열입니다.</param>
        <summary>현재 문화권의 형식 규칙과 지정된 형식을 사용하여 현재 <see cref="T:System.DateTime" /> 개체의 값을 해당하는 문자열 표현으로 변환합니다.</summary>
        <returns>현재 <see cref="T:System.DateTime" /> 개체의 값을 <paramref name="format" />에 지정된 내용에 따라 나타낸 문자열 표현입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.DateTime.ToString%28System.String%29> 메서드 자세한 정보에 대 한 현재 문화권의 서식 규칙을 사용 하는 특정 형식의 날짜 및 시간 값의 문자열 표현을 반환 내용은 <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>합니다.  
  
 합니다 `format` 매개 변수는 단일 형식 지정자 문자를 포함 해야 (참조 [표준 날짜 및 시간 형식 문자열](~/docs/standard/base-types/standard-date-and-time-format-strings.md)) 또는 사용자 지정 형식 패턴 (참조 [사용자 지정 날짜 및 시간 형식 문자열](~/docs/standard/base-types/custom-date-and-time-format-strings.md) ) 반환된 된 문자열의 형식을 정의 하는 합니다. 하는 경우 `format` 는 `null` 또는 빈 문자열인 경우 'G' 일반 서식 지정자를 사용 됩니다.  
  
 이 방법의 몇 가지 용도 다음과 같습니다.  
  
-   현재 문화권의 간단한 날짜 및 시간 형식으로 날짜 및 시간을 표시 하는 문자열을 가져오는 합니다. 이렇게 하려면 "G" 서식 지정자를 사용 합니다.  
  
-   월 및 연도 포함 하는 문자열을 가져오는 합니다. 이렇게 하려면 "MM/yyyy" 형식 문자열을 사용할 수 있습니다. 형식 문자열은 현재 문화권의 날짜 구분 기호를 사용합니다.  
  
-   문자열을 가져오는 날짜 및 시간을 특정 형식에서에 포함 되어 있습니다. 예를 들어은 "MM/dd/yyyyHH:mm" 형식 문자열 고정 형식으로 같은 날짜 및 시간 문자열을 표시 "19/03 / / 2013 18시 06분"입니다. 형식 문자열을 사용 하 여 "/" culture 별 설정에 관계 없이 고정된 날짜 구분 기호로 합니다.  
  
-   압축 된 형식으로 날짜는 시작 날짜 문자열로 직렬화 하는 데 사용 수 있습니다. 예를 들어, "yyyyMMdd" 형식 문자열 뒤에 2 자리 월 및 두 일 없는 날짜 구분 기호를 사용 하 여 4 자리 연도 표시 합니다.  
  
 다음 예제에서는 EN-US 및 FR-FR 문화권의 규칙을 사용 하 여 날짜 및 시간 값을 표시 하도록 이러한 세 가지 형식 문자열을 사용 합니다.  
  
 [!code-csharp[System.DateTime.ToString#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/tostring5.cs#5)]
 [!code-vb[System.DateTime.ToString#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/tostring5.vb#5)]  
  
   
  
## Examples  
 다음 예제에서는 각 표준 날짜 및 시간 형식 문자열 및 다양 한 사용자 지정 날짜 및 시간 서식 문자열 사용 하 여의 문자열 표현을 표시 하는 <xref:System.DateTime> 값입니다. 예를 들어 현재 스레드 문화권은 EN-US입니다.  
  
 [!code-csharp[System.DateTime.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/ToString2.cs#2)]
 [!code-vb[System.DateTime.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/ToString2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><paramref name="format" />의 길이가 1이고 <see cref="T:System.Globalization.DateTimeFormatInfo" />에 대해 정의된 형식 지정자 문자 중 하나가 아닙니다.  
  
또는 
 <paramref name="format" />에 올바른 사용자 지정 형식 패턴이 포함되어 있지 않습니다.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">날짜 및 시간이 현재 문화권에서 사용되는 달력에서 지원하는 날짜 범위를 벗어납니다.</exception>
        <block subset="none" type="usage"><para><see cref="M:System.DateTime.ToString(System.String)" /> 메서드는 현재 문화권에서 사용 된 달력에서 날짜 및 시간의 문자열 표현을 반환 합니다. 경우 현재 값 <see cref="T:System.DateTime" /> 인스턴스가 이전의 <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> 보다 이후 이거나 <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, 메서드가 throw는 <see cref="T:System.ArgumentOutOfRangeException" />합니다. 다음 예제에서 이에 대해 설명합니다. 범위 밖에 있는 날짜 서식 지정 하려고 합니다 <see cref="T:System.Globalization.HebrewCalendar" /> 현재 문화권이 히브리어 (이스라엘) 클래스입니다.  
  
[! 코드 csharp[System.DateTime.ToString.ArgumentOutOfRangeException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception3.cs#3)] [! 코드 vb[System.DateTime.ToString.ArgumentOutOfRangeException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/datetime.tostring.argumentoutofrangeexception3.vb#3)]</para></block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">.NET의 서식 지정 형식</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">표준 날짜 및 시간 형식 문자열</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">사용자 지정 날짜 및 시간 형식 문자열</related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(System::String ^ format, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : string * IFormatProvider -&gt; string" Usage="dateTime.ToString (format, provider)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">표준 또는 사용자 지정 날짜 및 시간 서식 문자열입니다.</param>
        <param name="provider">문화권별 서식 지정 정보를 제공하는 개체입니다.</param>
        <summary>지정된 형식 및 문화권별 형식 정보를 사용하여 현재 <see cref="T:System.DateTime" /> 개체의 값을 해당 문자열 표현으로 변환합니다.</summary>
        <returns>현재 <see cref="T:System.DateTime" /> 개체의 값을 <paramref name="format" /> 및 <paramref name="provider" />에 지정된 내용에 따라 나타낸 문자열 표현입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 `format` 매개 변수는 단일 형식 지정자 문자를 포함할 수 있습니다 (참조 [표준 날짜 및 시간 형식 문자열](~/docs/standard/base-types/standard-date-and-time-format-strings.md)) 또는 사용자 지정 형식 패턴 (참조 [사용자 지정 날짜 및 시간 형식 문자열](~/docs/standard/base-types/custom-date-and-time-format-strings.md)). 하는 경우 `format` 는 `null` 또는 빈 문자열 (""), "G" 표준 서식 지정자를 사용 됩니다.  
  
 `provider` 매개 변수는 표준 서식 지정자 뿐만 아니라 기호 및 날짜 및 시간 구성 요소 이름에 해당 하는 패턴을 정의 합니다. `provider` 매개 변수는 다음 중 하나일 수 있습니다.  
  
-   <xref:System.Globalization.CultureInfo> 반환된 된 문자열에 적용 하는 데 형식 규칙이 포함 된 문화권을 나타내는 개체입니다. 합니다 <xref:System.Globalization.DateTimeFormatInfo> 에서 반환 된 개체는 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> 속성은 반환된 된 문자열의 서식을 정의 합니다.  
  
-   <xref:System.Globalization.DateTimeFormatInfo> 날짜 및 시간 데이터 형식을 정의 하는 개체입니다.  
  
-   구현 하는 사용자 지정 개체를 <xref:System.IFormatProvider> 인터페이스입니다. 해당 <xref:System.IFormatProvider.GetFormat%2A> 메서드가 반환 되는 <xref:System.Globalization.DateTimeFormatInfo> 서식 지정 정보를 제공 하는 개체입니다.  
  
 하는 경우 `provider` 됩니다 `null`, <xref:System.Globalization.DateTimeFormatInfo> 현재와 관련 된 문화권이 사용 됩니다. 자세한 내용은 <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>를 참조하십시오.  
  
   
  
## Examples  
 다음 예제에서는 네 개의 서로 다른 문화권에 대 한 시간과 날짜의 문자열 표현에 표시할 각 표준 날짜 시간 형식 문자열을 사용 합니다.  
  
 [!code-csharp[System.DateTime.ToString#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/tostring3.cs#4)]
 [!code-vb[System.DateTime.ToString#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/tostring3.vb#4)]  
  
 다음 예제에서는 서식 지정 하는 여러 가지는 <xref:System.DateTime> invariant를 사용 하 여 값 <xref:System.Globalization.DateTimeFormatInfo>합니다.  
  
 [!code-cpp[Classic DateTime.ToString2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic DateTime.ToString2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic DateTime.ToString2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic DateTime.ToString2 Example/CS/source.cs#1)]
 [!code-vb[Classic DateTime.ToString2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic DateTime.ToString2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><paramref name="format" />의 길이가 1이고 <see cref="T:System.Globalization.DateTimeFormatInfo" />에 대해 정의된 형식 지정자 문자 중 하나가 아닙니다.  
  
또는 
 <paramref name="format" />에 올바른 사용자 지정 형식 패턴이 포함되어 있지 않습니다.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">날짜 및 시간이 <paramref name="provider" />에서 사용되는 달력에서 지원하는 날짜 범위를 벗어납니다.</exception>
        <block subset="none" type="usage"><para>합니다 <see cref="M:System.DateTime.ToString(System.String,System.IFormatProvider)" /> 메서드에서 사용 하는 달력에서 날짜 및 시간의 문자열 표현을 반환 합니다 <paramref name="provider" /> 매개 변수입니다. 해당 일정에 의해 정의 됩니다는 <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> 속성입니다. 경우 현재 값 <see cref="T:System.DateTime" /> 인스턴스가 이전의 <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> 보다 이후 이거나 <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, 메서드가 throw는 <see cref="T:System.ArgumentOutOfRangeException" />합니다. 다음 예제에서 이에 대해 설명합니다. 범위 밖에 있는 날짜 서식 지정 하려고 합니다 <see cref="T:System.Globalization.UmAlQuraCalendar" /> 클래스입니다.  
  
[! 코드 csharp[System.DateTime.ToString.ArgumentOutOfRangeException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception4.cs#4)] [! 코드 vb[System.DateTime.ToString.ArgumentOutOfRangeException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/datetime.tostring.argumentoutofrangeexception4.vb#4)]</para></block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">.NET의 서식 지정 형식</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">표준 날짜 및 시간 형식 문자열</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">사용자 지정 날짜 및 시간 형식 문자열</related>
        <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/NET-Framework-4-Formatting-9c4dae8d">샘플: .NET Framework 4 서식 유틸리티</related>
      </Docs>
    </Member>
    <Member MemberName="ToUniversalTime">
      <MemberSignature Language="C#" Value="public DateTime ToUniversalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime ToUniversalTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToUniversalTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUniversalTime () As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime ToUniversalTime();" />
      <MemberSignature Language="F#" Value="member this.ToUniversalTime : unit -&gt; DateTime" Usage="dateTime.ToUniversalTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>현재 <see cref="T:System.DateTime" /> 개체의 값을 UTC(협정 세계시)로 변환합니다.</summary>
        <returns><see cref="P:System.DateTime.Kind" /> 속성이 <see cref="F:System.DateTimeKind.Utc" />이고, 현재 <see cref="T:System.DateTime" /> 개체의 값에 해당하는 UTC가 값인 개체입니다. 변환된 값이 너무 커서 <see cref="F:System.DateTime.MaxValue" /> 개체로 표현할 수 없는 경우 <see cref="T:System.DateTime" />이고, 변환된 값이 너무 작아서 <see cref="F:System.DateTime.MinValue" /> 개체로 표현할 수 없는 경우 <see cref="T:System.DateTime" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 (UTC) 협정 세계시 현지 시간에서 UTC 오프셋을 뺀 값과 동일합니다. UTC 오프셋에 대 한 자세한 내용은 참조 하세요. <xref:System.TimeZone.GetUtcOffset%2A?displayProperty=nameWithType>합니다. 변환도 고려 현재 표시 된 시간이 적용 되는 일광 절약 시간 규칙 <xref:System.DateTime> 개체입니다.  
  
> [!IMPORTANT]
>  [!INCLUDE[winxp](~/includes/winxp-md.md)] 체제는 <xref:System.DateTime.ToUniversalTime%2A> 메서드 현지 시간에서 UTC로 변환 하는 경우에 현재 조정 규칙을 인식 합니다. 결과적으로, 현재 조정 규칙이 적용 되기 기간에 대 한 변환 현지 시간과 UTC 사이의 차이 정확 하 게 반영 되지 않을 수 있습니다.  
  
 .NET Framework 버전 2.0에서 반환한 값을 사용 하 여 시작 합니다 <xref:System.DateTime.ToUniversalTime%2A> 메서드에 의해 결정 됩니다 합니다 <xref:System.DateTime.Kind%2A> 속성이 현재 <xref:System.DateTime> 개체입니다. 다음 표에서 가능한 결과 설명 합니다.  
  
|종류|결과|  
|----------|-------------|  
|<xref:System.DateTimeKind.Utc>|변환이 수행 되지 않습니다.|  
|<xref:System.DateTimeKind.Local>|현재 <xref:System.DateTime> 개체 UTC로 변환 됩니다.|  
|<xref:System.DateTimeKind.Unspecified>|현재 <xref:System.DateTime> 개체를 현지 시간으로 간주 됩니다 및 변환이 수행 되며 처럼 <xref:System.DateTime.Kind%2A> 된 <xref:System.DateTimeKind.Local>합니다.|  
  
> [!NOTE]
>  <xref:System.DateTime.ToUniversalTime%2A> 변환 메서드는 <xref:System.DateTime> UTC 현지 시간에서 값. 비-현지 표준 시간대를 UTC에서 시간을 변환 하려면 사용 된 <xref:System.TimeZoneInfo.ConvertTimeToUtc%28System.DateTime%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> 메서드. 해당 오프셋이 UTC에서 알려진 시간을 변환 하려면 사용 된 <xref:System.DateTimeOffset.ToUniversalTime%2A> 메서드.  
  
 모호한 시간 날짜 및 시간 인스턴스 값을 사용 하는 경우이 메서드는 표준 시간 임을 가정 합니다. (모호한 시간은 표준 시간 또는 현지 표준 시간대에서 일광 절약 시간에 매핑될 수 있는) 잘못 된 시간을 날짜 및 시간 인스턴스 값을 사용 하는 경우이 메서드는 반환 UTC 오프셋이 현지 표준 시간대의 UTC에서 현지 시간 빼서 계산 합니다. (잘못 된 시간은 일광 절약 시간 조정 규칙 응용 프로그램 때문에 존재 하지 않는 것입니다.)  
  
   
  
## Examples  
 다음 예제는 <xref:System.DateTime.ToUniversalTime%2A> 메서드.  
  
 [!code-cpp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CS/class1.cs#1)]
 [!code-vb[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/VB/class1.vb#1)]  
  
 다음 예제에서는 합니다 <xref:System.DateTime.SpecifyKind%2A> 메서드를 보여 줍니다 하는 방법을 <xref:System.DateTime.Kind%2A> 속성이 영향을 줍니다 합니다 <xref:System.DateTime.ToLocalTime%2A> 및 <xref:System.DateTime.ToUniversalTime%2A> 변환 메서드.  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><see cref="M:System.DateTime.ToUniversalTime" /> 메서드는 때때로 현지 시간을 UTC로 변환 하는 데 사용 됩니다. <see cref="M:System.DateTime.ToLocalTime" /> 원래 현지 시간으로 복원 하려면 메서드가 호출 됩니다. 그러나 원래 시간이 현지 표준 시간대에서 잘못 된 시간을 나타내는 경우 두 현지 시간 값 같음 되지 않습니다. 추가 정보 및 예제에 대 한 참조를 <see cref="M:System.DateTime.ToLocalTime" /> 메서드.  
  
[!INCLUDE[winxp](~/includes/winxp-md.md)] 체제는 <see cref="M:System.DateTime.ToUniversalTime" /> 하위 수준 (즉, 날짜를 현재 조정의 시작 날짜 보다 이전 날짜를 포함 하는 모든 날짜에 적용 하는 현지 표준 시간대에 대 한 현재 조정 규칙을 인식 하는 메서드 규칙)입니다. 실행 중인 응용 프로그램 [!INCLUDE[winxp](~/includes/winxp-md.md)] 필요한 정확한 로컬 날짜 및 시간을 계산 해야 사용 하 여이 문제 해결 합니다 <see cref="M:System.TimeZoneInfo.FindSystemTimeZoneById(System.String)" /> 검색 하는 메서드를 <see cref="T:System.TimeZoneInfo" /> 현지 표준 시간대에 해당 하는 개체를 호출 해당 <see cref="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)" /> 메서드.  
  
다음 예제에서는 차이점을 보여 줍니다.는 <see cref="M:System.DateTime.ToUniversalTime" /> 하 고 <see cref="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)" /> 메서드를 [!INCLUDE[winxp](~/includes/winxp-md.md)] 미국의 시스템 표시합니다. 2006 날짜에는 현재 표준 시간대 조정 규칙 (2007 적용 됨)를 적용 하는 첫 번째 두 메서드 호출 됩니다. 년 3 월;의 두 번째 일요일에 일광 절약 시간 전환에 대 한 현재 조정 규칙을 제공합니다. 2006 년 4 월의 첫 번째 일요일에 일광 절약 시간제로 전환 하는 데 유효 했던 이전 규칙입니다. 세 번째 메서드 호출에는 정확 하 게이 과거 날짜 및 시간 변환을 수행합니다.  
  
[! 코드 csharp[System.DateTime.ToUniversalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.touniversaltime/cs/touniversaltime.cs#1)] [! 코드 vb[System.DateTime.ToUniversalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.touniversaltime/vb/touniversaltime.vb#1)]</para></block>
        <altmember cref="M:System.DateTime.ToLocalTime" />
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public bool TryFormat (Span&lt;char&gt; destination, out int charsWritten, ReadOnlySpan&lt;char&gt; format = null, IFormatProvider provider = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryFormat(valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFormat (destination As Span(Of Char), ByRef charsWritten As Integer, Optional format As ReadOnlySpan(Of Char) = null, Optional provider As IFormatProvider = null) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryFormat : Span&lt;char&gt; *  * ReadOnlySpan&lt;char&gt; * IFormatProvider -&gt; bool" Usage="dateTime.TryFormat (destination, charsWritten, format, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="charsWritten" Type="System.Int32" RefType="out" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <param name="charsWritten">To be added.</param>
        <param name="format">To be added.</param>
        <param name="provider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>날짜와 시간에 대한 지정된 문자열 표현을 해당 <see cref="T:System.DateTime" /> 요소로 변환하고, 변환에 성공했는지를 나타내는 값을 반환합니다.</summary>
        <altmember cref="Overload:System.DateTime.Parse" />
        <remarks>
          <format type="text/markdown"><![CDATA[  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

         ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.ReadOnlySpan{System.Char},System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As ReadOnlySpan(Of Char), ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; s, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; *  -&gt; bool" Usage="System.DateTime.TryParse (s, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.String,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string *  -&gt; bool" Usage="System.DateTime.TryParse (s, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="s">날짜와 시간이 포함된 변환할 문자열입니다.</param>
        <param name="result">이 메서드는 변환이 성공한 경우 <see cref="T:System.DateTime" />에 포함된 날짜와 시간에 해당하는 <paramref name="s" /> 값을 반환하고, 변환이 실패한 경우 <see cref="F:System.DateTime.MinValue" />를 반환합니다. <paramref name="s" /> 매개 변수가 <see langword="null" />이거나, 빈 문자열("")이거나, 날짜 및 시간에 유효한 문자열 표현을 포함하고 있지 않으면 변환에 실패합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
        <summary>날짜와 시간에 대한 지정된 문자열 표현을 해당 <see cref="T:System.DateTime" /> 요소로 변환하고, 변환에 성공했는지를 나타내는 값을 반환합니다.</summary>
        <returns><see langword="true" /> 매개 변수가 변환되었으면 <paramref name="s" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType> 메서드는 비슷합니다는 <xref:System.DateTime.Parse%28System.String%29?displayProperty=nameWithType> 메서드를 <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29> 메서드 변환에 실패 하면 예외를 throw 하지 않습니다.  
  
 문자열 `s` 서식 지정 정보를 사용 하 여 현재에서 구문 분석 <xref:System.Globalization.DateTimeFormatInfo> 현재 스레드 문화권에 의해 암시적으로 제공 되는 개체입니다.  
  
 가능한 경우이 메서드는 인식할 수 없는 데이터를 무시 하 고 월, 일 및 연도 정보는 현재 날짜를 사용 하 여 누락 된 채워집니다. 경우 `s` 날짜만 있고 시간이 포함이 메서드는 자정 12 시에 가정 합니다. 경우 `s` 날짜 구성 요소를 포함 한 두 자리 연도 사용 하 여의 값을 기반으로 현재 문화권의 현재 달력의 연간으로 변환 됩니다는 <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> 속성. 내부 조인, 선행 또는 후행 공백 문자에서 `s` 무시 됩니다. 날짜 및 시간을 선행 및 후행 숫자 기호 문자 ('#', U + 00-23), 쌍을 사용 하 여 대괄호로 묶어야 하 고 하나를 사용 하 여 올 수 있습니다 또는 이상의 NULL 문자 (U + 0000)입니다.  
  
 때문에 <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType> 메서드는 날짜의 문자열 표현을 구문 분석 하려고 시도 하 고 서로 다른 문화권에서 특정 문자열을 구문 분석 하는 동안 현재 문화권의 서식 규칙을 사용 하 여 실패 또는 다른 결과 반환할 수 있습니다. 여러 로캘에서 특정 날짜 및 시간 서식을 구문 분석 됩니다을 하는 경우 사용 합니다 <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> 메서드 또는 오버 로드 중 하나는 <xref:System.DateTime.TryParseExact%2A> 메서드 형식 지정자를 제공 하 고 합니다.  
  
 하는 경우 `s` 윤년의 현재 달력이 메서드 구문 분석에서 윤 일의 문자열 표현인 `s` 성공적으로 합니다. 하는 경우 `s` 윤 일에서 비-윤년 현재 문화권의 현재 달력의 문자열 표현입니다, 구문 분석 작업이 실패 하 고, 메서드가 반환 `false`합니다.  
  
 하는 경우 `s` 표준 시간대 정보가 없습니다 `result` 포함을 <xref:System.DateTime> 값 <xref:System.DateTime.Kind%2A> 속성이 <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> 메서드를 반환 하는 경우. 구문 분석 될 문자열 표준 시간대 정보를 포함 하는 경우 `result` 포함을 <xref:System.DateTime> 값 <xref:System.DateTime.Kind%2A> 속성이 <xref:System.DateTimeKind.Local?displayProperty=nameWithType> 메서드가 반환 합니다.  
  
   
  
## Examples  
 다음 예제에서는 날짜 및 시간 문자열을 숫자로 전달 된 <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType> 메서드.  
  
 [!code-cpp[System.DateTime.TryParse#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.TryParse/cpp/datetime.tryparse1.cpp#1)]
 [!code-csharp[System.DateTime.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParse/cs/TryParse1.cs#1)]
 [!code-vb[System.DateTime.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParse/vb/TryParse1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para>현재 속성의 영향을 받습니다 서식을 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 기본적으로에서 파생 되는 개체를 **국가 및 언어 옵션** 제어판 항목입니다. 합니다 <see cref="Overload:System.DateTime.TryParse" /> 예기치 않게 실패 하 고 반환할 수 메서드 <see langword="False" /> 하는 경우 현재 <see cref="P:System.Globalization.DateTimeFormatInfo.DateSeparator" /> 및 <see cref="P:System.Globalization.DateTimeFormatInfo.TimeSeparator" /> 속성이 동일한 값으로 설정 됩니다.</para></block>
        <altmember cref="Overload:System.DateTime.Parse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">.NET Framework의 날짜 및 시간 문자열 구문 분석</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">표준 날짜 및 시간 형식 문자열</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">사용자 지정 날짜 및 시간 형식 문자열</related>
        <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/NET-Framework-4-Formatting-9c4dae8d">샘플: .NET Framework 4 서식 유틸리티</related>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, IFormatProvider provider, System.Globalization.DateTimeStyles styles, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As ReadOnlySpan(Of Char), provider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; s, IFormatProvider ^ provider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTime.TryParse (s, provider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="styles">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, IFormatProvider provider, System.Globalization.DateTimeStyles styles, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, provider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, IFormatProvider ^ provider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTime.TryParse (s, provider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="s">날짜와 시간이 포함된 변환할 문자열입니다.</param>
        <param name="provider"><paramref name="s" />에 대한 문화권별 형식 지정 정보를 제공하는 개체입니다.</param>
        <param name="styles">현재 표준 시간대 또는 현재 날짜와 비교하여 구문 분석된 날짜를 해석하는 방법을 정의하는 열거형 값의 비트 조합입니다. 지정할 일반적인 값은 <see cref="F:System.Globalization.DateTimeStyles.None" />입니다.</param>
        <param name="result">이 메서드는 변환이 성공한 경우 <see cref="T:System.DateTime" />에 포함된 날짜와 시간에 해당하는 <paramref name="s" /> 값을 반환하고, 변환이 실패한 경우 <see cref="F:System.DateTime.MinValue" />를 반환합니다. <paramref name="s" /> 매개 변수가 <see langword="null" />이거나, 빈 문자열("")이거나, 날짜 및 시간에 유효한 문자열 표현을 포함하고 있지 않으면 변환에 실패합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
        <summary>지정된 문화권별 형식 정보 및 서식 지정 스타일을 사용하여 날짜 및 시간의 지정된 문자열 표현을 해당 <see cref="T:System.DateTime" />으로 변환하고 변환에 성공했는지를 나타내는 값을 반환합니다.</summary>
        <returns><see langword="true" /> 매개 변수가 변환되었으면 <paramref name="s" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> 메서드 날짜, 시간 및 표준 시간대 정보를 포함할 수 있는 문자열을 구문 분석 합니다. 비슷합니다는 <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> 메서드는 <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType> 메서드 변환에 실패 하면 예외를 throw 하지 않습니다.  
  
 이 메서드는 인식할 수 없는 데이터를 무시 하는 구문 분석 하려고 시도 `s` 완전히 합니다. 경우 `s` 번 하지만 날짜 없음, 기본 대체 현재 날짜에서 메서드를 포함 또는 `styles` 포함 된 <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault> 대체 플래그를 `DateTime.Date.MinValue`. 경우 `s` 날짜만 12: 00의 기본 시간으로 자정은 없는 시간을 포함 합니다. 연간으로 변환 됩니다 날짜 제공 되었지만 두 자릿수 연도 구성 요소 구성에 `provider` 의 값을 기반으로 하는 매개 변수의 현재 달력을 <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> 속성. 내부 조인, 선행 또는 후행 공백 문자 `s` 무시 됩니다. 날짜 및 시간을 선행 및 후행 숫자 기호 문자 ('#', U + 00-23), 쌍을 사용 하 여 대괄호로 묶어야 하 고 하나를 사용 하 여 올 수 있습니다 또는 이상의 NULL 문자 (U + 0000)입니다.  
  
 날짜 및 시간 요소 뿐만 아니라 이름 및 날짜 및 시간에 사용 되는 기호에 대 한 특정 유효 형식에 의해 정의 됩니다는 `provider` 매개 변수를 다음 중 하나일 수 있습니다.  
  
-   A <xref:System.Globalization.CultureInfo> 서식 지정에 사용 되는 문화권을 나타내는 개체를 `s` 매개 변수입니다. 합니다 <xref:System.Globalization.DateTimeFormatInfo> 에서 반환 된 개체를 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> 속성 정의에 사용 된 서식을 `s`합니다.  
  
-   A <xref:System.Globalization.DateTimeFormatInfo> 에 사용 되는 형식을 정의 하는 개체 `s`합니다.  
  
-   사용자 지정 <xref:System.IFormatProvider> 구현. 해당 <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> 메서드가 반환 되는 <xref:System.Globalization.DateTimeFormatInfo> 에 사용 되는 형식을 정의 하는 개체 `s`합니다.  
  
 `provider`가 `null`이면 현재 문화권이 사용됩니다.  
  
 하는 경우 `s` 윤년의 현재 달력이 메서드 구문 분석에서 윤 일의 문자열 표현인 `s` 성공적으로 합니다. 하는 경우 `s` 윤 일에서 비-윤년의 현재 달력의 문자열 표현입니다 `provider`구문 분석 작업이 실패 하 고 메서드 반환 `false`합니다.  
  
 `styles` 매개 변수 정의 정확 하 게 구문 분석된 된 문자열 및 구문 분석 작업을 처리 해야 하는 방법을 설명 합니다. 하나 이상의 멤버의 수를 <xref:System.Globalization.DateTimeStyles> 열거형에는 다음 표에 설명 된 대로 합니다.  
  
|DateTimeStyles 멤버|설명|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|구문 분석 `s` 필요한 UTC로 변환 하는 경우. 경우 `s` 표준 시간대 오프셋을 포함 이거나 `s` 시간대 정보가 없습니다 있지만 `styles` 포함 합니다 <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> 플래그를 메서드 호출 문자열 구문 분석 <xref:System.DateTime.ToUniversalTime%2A> 반환 된 변환할 <xref:System.DateTime> 값을 UTC 를 가져오거나 설정 합니다 <xref:System.DateTime.Kind%2A> 속성을 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>입니다. 경우 `s` UTC를 나타냅니다 이거나 `s` 표준 시간대 정보를 포함 하지 있지만 `styles` 포함 합니다 <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> 플래그를 메서드 문자열을 구문 분석, 반환 된 표준 시간대 변환 작업 없이 수행 <xref:System.DateTime> 값 집합과 합니다 <xref:System.DateTime.Kind%2A> 속성을 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>입니다. 다른 모든 경우 플래그에는 영향을 주지 않습니다.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|유효 하더라도이 값은 무시 됩니다. 날짜 및 시간 요소에 내부 공백을 허용 `s`합니다.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|유효 하더라도이 값은 무시 됩니다. 날짜 및 시간 요소에 선행 공백이 허용 됩니다 `s`합니다.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|유효 하더라도이 값은 무시 됩니다. 날짜 및 시간 요소에 허용 되는 후행 공백을 `s`합니다.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|지정 `s` 선행, 내부 및 후행 공백을 포함할 수 있습니다. 이것은 기본적인 동작입니다. 더 제한적인 제공 하 여 재정의할 수 없습니다 <xref:System.Globalization.DateTimeStyles> 와 같은 열거형 값 <xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType>합니다.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|지정 합니다 `s` 표준 시간대 정보가 없으면 로컬 시간을 나타내는 것으로 가정 합니다. 경우가 아니면 합니다 <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> 플래그가 없으면 합니다 <xref:System.DateTime.Kind%2A> 반환 된 속성 <xref:System.DateTime> 값으로 설정 됩니다 <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|지정 합니다 `s` 표준 시간대 정보가 없으면 UTC를 나타내는 것으로 가정 합니다. 경우가 아니면 합니다 <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> 플래그가, 메서드가 반환 된 변환 하는 <xref:System.DateTime> 값을 UTC에서 현지 시간 및 집합 해당 <xref:System.DateTime.Kind%2A> 속성을 <xref:System.DateTimeKind.Local?displayProperty=nameWithType>입니다.|  
|<xref:System.Globalization.DateTimeStyles.None>|유효 하더라도이 값은 무시 됩니다.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|표준 시간대 정보가 포함 된 문자열의 경우 날짜 및 시간 문자열을 변환 하지 않으려면 시도 <xref:System.DateTime> 값을 해당 <xref:System.DateTime.Kind%2A> 속성으로 설정 <xref:System.DateTimeKind.Local?displayProperty=nameWithType>합니다. 호출 하 여 이러한 문자열은 생성 하는 일반적으로 <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> "o", "r" 또는 "u" 표준 서식 지정자를 사용 하는 방법입니다.|  
  
 경우 `s` 표준 시간대 정보가 없습니다 합니다 <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> 메서드가 반환 되는 <xref:System.DateTime> 값 <xref:System.DateTime.Kind%2A> 속성은 <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> 하지 않는 한를 `styles` 플래그 합니다. 하는 경우 `s` 표준 시간대 또는 표준 시간대 오프셋된 정보를 포함 합니다 <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> 메서드는 필요한 시간 변환을 수행 하 고 다음 중 하나를 반환 합니다.  
  
-   A <xref:System.DateTime> 값을 해당 날짜와 시간이 현지 시간 및 해당 반영 <xref:System.DateTime.Kind%2A> 속성은 <xref:System.DateTimeKind.Local?displayProperty=nameWithType>합니다.  
  
-   또는 `styles` 포함 합니다 <xref:System.Globalization.DateTimeStyles.AdjustToUniversal> 플래그를는 <xref:System.DateTime> 해당 날짜 및 시간이 UTC와 갖는 반영 하는 값 <xref:System.DateTime.Kind%2A> 속성이 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>합니다.  
  
 사용 하 여이 동작을 재정의할 수는 <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> 플래그입니다.  
  
## <a name="parsing-custom-cultures"></a>사용자 지정 Culture를 구문 분석  
 사용자 지정 문화권에 대 한 생성 된 날짜 및 시간 문자열을 구문 분석할 경우 사용 합니다 <xref:System.DateTime.TryParseExact%2A> 메서드 대신는 <xref:System.DateTime.TryParse%2A> 메서드를 구문 분석 작업이 성공할 확률이 높아집니다. 사용자 지정 문화권 날짜 및 시간 문자열에는 복잡 하 고 구문 분석 하기 어려울 수 있습니다. <xref:System.DateTime.TryParse%2A> 메서드는 실패할 수 있습니다는 모두 여러 암시적 구문 분석 패턴을 사용 하 여 문자열 구문 분석 하려고 시도 합니다. 반면,는 <xref:System.DateTime.TryParseExact%2A> 메서드를 사용 하면 성공 가능성이 있는 정확한 구문 분석 패턴을 하나 이상의 명시적으로 지정 해야 합니다.  
  
 사용자 지정 culture에 대 한 자세한 내용은 참조는 <xref:System.Globalization.CultureAndRegionInfoBuilder?displayProperty=nameWithType> 클래스입니다.  
  
   
  
## Examples  
 다음 예제는 <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> 메서드.  
  
 [!code-csharp[System.DateTime.TryParse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParse/cs/tryparse2.cs#2)]
 [!code-vb[System.DateTime.TryParse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParse/vb/tryparse2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="styles" />는 유효한 <see cref="T:System.Globalization.DateTimeStyles" /> 값이 아닙니다.  
  
또는 
 <paramref name="styles" />에 <see cref="T:System.Globalization.DateTimeStyles" /> 값의 잘못된 조합이 포함되어 있습니다(예: <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> 및 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" /> 조합).</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="provider" />은(는) 중립 문화권이며 구문 분석 작업에 사용할 수 없습니다.</exception>
        <block subset="none" type="usage"><para>현재 속성의 영향을 받습니다 서식을 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 제공 하는 개체는 <paramref name="provider" /> 매개 변수입니다. 합니다 <see cref="Overload:System.DateTime.TryParse" /> 예기치 않게 실패 하 고 반환할 수 메서드 <see langword="False" /> 하는 경우 현재 <see cref="P:System.Globalization.DateTimeFormatInfo.DateSeparator" /> 및 <see cref="P:System.Globalization.DateTimeFormatInfo.TimeSeparator" /> 속성이 동일한 값으로 설정 됩니다.</para></block>
        <altmember cref="Overload:System.DateTime.Parse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">.NET Framework의 날짜 및 시간 문자열 구문 분석</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">표준 날짜 및 시간 형식 문자열</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">사용자 지정 날짜 및 시간 형식 문자열</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>날짜 및 시간에 대한 지정된 문자열 표현을 해당 <see cref="T:System.DateTime" />으로 변환합니다. 문자열 표현의 형식이 지정된 형식과 정확하게 일치해야 합니다. 이 메서드는 변환이 성공했는지 아니면 실패했는지를 나타내는 값을 반환합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

         ]]></format>
        </remarks>
        <altmember cref="Overload:System.DateTime.ParseExact" />
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; s, ReadOnlySpan&lt;char&gt; format, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; s, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (s As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), provider As IFormatProvider, style As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; s, ReadOnlySpan&lt;char&gt; format, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTime.TryParseExact (s, format, provider, style, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" Index="4" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="format">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="style">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (s As ReadOnlySpan(Of Char), formats As String(), provider As IFormatProvider, style As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; s, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : ReadOnlySpan&lt;char&gt; * string[] * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTime.TryParseExact (s, formats, provider, style, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="formats" Type="System.String[]" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" Index="4" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="formats">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="style">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string s, string format, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string s, string format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (s As String, format As String, provider As IFormatProvider, style As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ s, System::String ^ format, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : string * string * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTime.TryParseExact (s, format, provider, style, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="format" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" Index="4" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="s">날짜와 시간이 포함된 변환할 문자열입니다.</param>
        <param name="format"><paramref name="s" />의 필수 형식입니다.</param>
        <param name="provider"><paramref name="s" />에 대한 문화권별 형식 지정 정보를 제공하는 개체입니다.</param>
        <param name="style"><paramref name="s" />에 사용할 수 있는 형식을 나타내는 열거형 값 하나 이상의 비트 조합입니다.</param>
        <param name="result">이 메서드는 변환이 성공한 경우 <see cref="T:System.DateTime" />에 포함된 날짜와 시간에 해당하는 <paramref name="s" /> 값을 반환하고, 변환이 실패한 경우 <see cref="F:System.DateTime.MinValue" />를 반환합니다. <paramref name="s" /> 또는 <paramref name="format" /> 매개 변수가 <see langword="null" />이거나, 빈 문자열이거나, <paramref name="format" />에 지정된 패턴에 해당하는 날짜와 시간을 포함하지 않는 경우 변환에 실패합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
        <summary>지정된 형식, 문화권별 형식 정보 및 스타일을 사용하여 날짜 및 시간의 지정된 문자열 표현을 해당 <see cref="T:System.DateTime" />으로 변환합니다. 문자열 표현의 형식이 지정된 형식과 정확하게 일치해야 합니다. 이 메서드는 변환이 성공했는지 아니면 실패했는지를 나타내는 값을 반환합니다.</summary>
        <returns><see langword="true" />가 성공적으로 변환되었으면 <paramref name="s" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> 하 여 정의 된 형식에서 이어야 하는 날짜의 문자열 표현을 구문 분석 하는 메서드는 `format` 매개 변수입니다. 비슷합니다는 <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> 메서드는 <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> 메서드 변환에 실패 하면 예외를 throw 하지 않습니다.  
  
 합니다 `s` 매개 변수는 날짜 및 시간 구문 분석을 포함 하 고 정의 된 형식에 있어야 합니다 `format` 매개 변수입니다. 날짜, 시간 및 표준 시간대 요소에 있는 경우 `s`에 의해 지정 된 순서로 나타나야 `format`합니다. 하는 경우 `format` 날짜 정의 없습니다 시간 요소와 구문 분석 작업이 성공 하면 결과 <xref:System.DateTime> 값에는 시간을 자정 (00: 00:00). 경우 `format` 한 번 정의 요소가 없는 날짜와 구문 분석 작업이 성공 하면 결과 <xref:System.DateTime> 기본적으로 값의 날짜에 `DateTime.Now.Date`의 날짜 또는 `DateTime.MinValue.Date` 경우 `styles` 포함는 <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> 플래그입니다. 합니다 `style` 매개 변수를 결정 하는지 여부를 `s` 매개 변수 앞, 내부 또는 후행 공백 문자를 포함할 수 있습니다.  
  
 하는 경우 `s` 없는 표준 시간대 정보를 포함 합니다 <xref:System.DateTime.Kind%2A> 반환 된 속성 <xref:System.DateTime> 개체가 <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>합니다. 사용 하 여이 동작을 변경할 수 있습니다 합니다 <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> 플래그를 반환 하는 <xref:System.DateTime> 값 <xref:System.DateTime.Kind%2A> 속성이 <xref:System.DateTimeKind.Local?displayProperty=nameWithType>, 또는 사용 하 여를 <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> 및 <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> 플래그를 반환 하는 <xref:System.DateTime> 값 <xref:System.DateTime.Kind%2A> 속성은 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>합니다. 필요에 따라 시간이 현지 시간으로 변환 됩니다 s에 표준 시간대 정보를 포함 하는 경우와 <xref:System.DateTime.Kind%2A> 반환 된 속성 <xref:System.DateTime> 개체를로 <xref:System.DateTimeKind.Local?displayProperty=nameWithType>합니다. 사용 하 여이 동작을 변경할 수 있습니다 합니다 <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> 하지 현지 시간을 utc (협정 세계시)를 변환 하 고 설정 하는 플래그를 <xref:System.DateTime.Kind%2A> 속성을 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>입니다.  
  
 합니다 `format` 의 예상된 형식에 해당 하는 패턴을 포함 하는 매개 변수는 `s` 매개 변수입니다. 패턴에는 `format` 매개 변수 구성에서 하나 이상의 사용자 지정 형식 지정자는 [사용자 지정 날짜 및 시간 형식 문자열](~/docs/standard/base-types/custom-date-and-time-format-strings.md) 테이블 또는에서 미리 정의 된 패턴을 식별 하는 단일 표준 형식 지정자를는 [표준 날짜 및 시간 형식 문자열](~/docs/standard/base-types/standard-date-and-time-format-strings.md) 테이블입니다.  
  
 사용자 지정 형식 패턴에 날짜 또는 시간 구분 기호를 사용 하지 않는 경우에 대 한 고정 문화권을 사용 합니다 `provider` 매개 변수와 가장 넓은 형식으로 각 사용자 지정 형식 지정자입니다. 예를 들어 패턴에 시간을 지정 하려는 경우 "H" 형식 대신 더 광범위 한 형식, "HH"를 지정 합니다.  
  
> [!NOTE]
>  요구 하는 대신 `s` 구문 분석 작업이 성공 하기 위해 단일 형식을 준수, 호출할 수 있습니다는 <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> 메서드 여러 허용 된 형식을 지정 합니다. 이렇게 하면 구문 분석 작업이 성공 가능성이 있습니다.  
  
 특정 날짜 및 시간 기호 및 문자열 (예: 특정 언어로 요일 이름)에 사용 되는 `s` 가 정의한 합니다 `provider` 매개 변수를 그대로의 정확한 형식을 `s` 경우 `format` 표준 형식입니다 지정자 문자열입니다. `provider` 매개 변수는 다음 중 하나일 수 있습니다.  
  
-   A <xref:System.Globalization.CultureInfo> 해석에 사용 된 문화권을 나타내는 개체 `s`합니다. <xref:System.Globalization.DateTimeFormatInfo> 반환한 개체가 해당 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> 속성 정의 기호 및 서식을 `s`합니다.  
  
-   <xref:System.Globalization.DateTimeFormatInfo> 날짜 및 시간 데이터 형식을 정의 하는 개체입니다.  
  
-   사용자 지정 <xref:System.IFormatProvider> 구현입니다 <xref:System.IFormatProvider.GetFormat%2A> 메서드 중 하나를 반환 합니다 <xref:System.Globalization.CultureInfo> 개체 또는 <xref:System.Globalization.DateTimeFormatInfo> 서식 지정 정보를 제공 하는 개체입니다.  
  
 하는 경우 `provider` 됩니다 `null`, <xref:System.Globalization.CultureInfo> 현재 문화권에 해당 하는 개체를 사용 합니다.  
  
 합니다 `styles` 하나 이상의 멤버를 포함 하는 매개 변수를 <xref:System.Globalization.DateTimeStyles> 공백에 정의 되지 않은 여부와 위치를 결정 하는 열거형 `format` 에 나타날 수 있습니다 `s` 구문 분석 작업의 정확한 동작을 제어 하 합니다. 다음 표에서 각 방법의 멤버를 <xref:System.Globalization.DateTimeStyles> 열거형의 작업에 영향을 줍니다는 <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> 메서드.  
  
|DateTimeStyles 멤버|설명|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|구문 분석 `s` 필요한 UTC로 변환 하는 경우. 경우 `s` 표준 시간대 오프셋을 포함 이거나 `s` 시간대 정보가 없습니다 있지만 `styles` 포함 합니다 <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> 플래그를 메서드 호출 문자열 구문 분석 <xref:System.DateTime.ToUniversalTime%2A> 반환 된 변환할 <xref:System.DateTime> 값을 UTC 를 가져오거나 설정 합니다 <xref:System.DateTime.Kind%2A> 속성을 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>입니다. 경우 `s` UTC를 나타냅니다 이거나 `s` 표준 시간대 정보를 포함 하지 있지만 `styles` 포함 합니다 <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> 플래그를 메서드 문자열을 구문 분석, 반환 된 표준 시간대 변환 작업 없이 수행 <xref:System.DateTime> 값 집합과 합니다 <xref:System.DateTime.Kind%2A> 속성을 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>입니다. 다른 모든 경우 플래그에는 영향을 주지 않습니다.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|에 정의 되지 않은 공백이 지정 `format` 모든 개별 날짜 또는 시간 요소 사이 나타날 수 있습니다.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|지정 하 여 정의 되지 않은 공백이 `format` 부분에 나타날 수 있습니다 `s`합니다.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|지정 하 여 정의 되지 않은 공백이 `format` 끝에 표시 될 수 있습니다 `s`합니다.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|형식임 `s` 선행, 내부 및 후행에 정의 되지 않은 공백을 포함할 수 있습니다 `format`합니다.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|지정 합니다 `s` 표준 시간대 정보가 없으면 로컬 시간을 나타내는 것으로 가정 합니다. 경우가 아니면 합니다 <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> 플래그가 없으면 합니다 <xref:System.DateTime.Kind%2A> 반환 된 속성 <xref:System.DateTime> 값으로 설정 됩니다 <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|지정 합니다 `s` 표준 시간대 정보가 없으면 UTC를 나타내는 것으로 가정 합니다. 경우가 아니면 합니다 <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> 플래그가, 메서드가 반환 된 변환 하는 <xref:System.DateTime> 값을 UTC에서 현지 시간 및 집합 해당 <xref:System.DateTime.Kind%2A> 속성을 <xref:System.DateTimeKind.Local?displayProperty=nameWithType>입니다.|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|하는 경우 `s` 시간 포함 날짜 정보 없이 반환 값의 날짜 설정 됩니다 `DateTime.MinValue.Date`합니다.|  
|<xref:System.Globalization.DateTimeStyles.None>|`s` 매개 변수는 기본값을 사용 하 여 구문 분석 됩니다. 에 있는 이외의 공백이 없습니다 `format` 허용 됩니다. 하는 경우 `s` 날짜 구성 요소를 반환 된 날짜에 <xref:System.DateTime> 값 1/1/0001로 설정 됩니다. 경우 `s` 표준 시간대 정보가 없습니다 합니다 <xref:System.DateTime.Kind%2A> 반환 된 속성 <xref:System.DateTime> 개체를로 <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>합니다. 표준 시간대 정보에 있는 경우 `s`, 시간이 현지 시간으로 변환 됩니다 및 <xref:System.DateTime.Kind%2A> 반환 된 속성 <xref:System.DateTime> 개체를로 <xref:System.DateTimeKind.Local?displayProperty=nameWithType>합니다.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|표준 시간대 정보가 포함 된 문자열에 대 한 방지 하려고로 변환을 <xref:System.DateTime> 값을 해당 <xref:System.DateTime.Kind%2A> 속성으로 설정 <xref:System.DateTimeKind.Local?displayProperty=nameWithType>합니다. 이 플래그는 주로 현지 시간을 UTC 시간으로 변환을 방지합니다.|  
  
   
  
## Examples  
 다음 예제는 <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> 메서드. 문자열 "2009 년 5 월 01 8:30 AM" 분석할 수 없습니다 경우 합니다 `styles` 매개 변수가 같으면 <xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType> 선행 공백을 허용 하지 않는 있으므로 `format`합니다. 또한 문자열 "2009 년 5 월 01 09시"으로 분석할 수 없습니다는 `format` 의 "MM/dd/yyyyhh:mm" 날짜 문자열으로 앞에 0 사용 하 여 월 수를 붙이지 않습니다 때문에 `format` 필요 합니다.  
  
 [!code-csharp[System.DateTime.TryParseExact#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParseExact/cs/TryParseExact1.cs#1)]
 [!code-vb[System.DateTime.TryParseExact#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParseExact/vb/TryParseExact1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="styles" />는 유효한 <see cref="T:System.Globalization.DateTimeStyles" /> 값이 아닙니다.  
  
또는 
 <paramref name="styles" />에 <see cref="T:System.Globalization.DateTimeStyles" /> 값의 잘못된 조합이 포함되어 있습니다(예: <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> 및 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" /> 조합).</exception>
        <block subset="none" type="usage"><para>에 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], <see cref="Overload:System.DateTime.TryParseExact" /> 메서드가 반환 되는 <see langword="false" /> 구문 분석 될 문자열 경우 시간 구성 요소 및 계약에 없는 AM/PM 지정자를 포함 합니다. 에 [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] 이전 버전에서는 AM/PM 지정자는 무시 됩니다.</para></block>
        <altmember cref="Overload:System.DateTime.ParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">.NET Framework의 날짜 및 시간 문자열 구문 분석</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">표준 날짜 및 시간 형식 문자열</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">사용자 지정 날짜 및 시간 형식 문자열</related>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (s As String, formats As String(), provider As IFormatProvider, style As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ s, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : string * string[] * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTime.TryParseExact (s, formats, provider, style, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="formats" Type="System.String[]" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" Index="4" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="s">변환할 날짜 및 시간이 포함된 문자열입니다.</param>
        <param name="formats"><paramref name="s" />에 허용되는 형식의 배열입니다.</param>
        <param name="provider"><paramref name="s" />에 대한 문화권별 서식 지정 정보를 제공하는 개체입니다.</param>
        <param name="style"><paramref name="s" />에 사용할 수 있는 형식을 나타내는 열거형 값의 비트 조합입니다. 지정할 일반적인 값은 <see cref="F:System.Globalization.DateTimeStyles.None" />입니다.</param>
        <param name="result">이 메서드는 변환이 성공한 경우 <see cref="T:System.DateTime" />에 포함된 날짜와 시간에 해당하는 <paramref name="s" /> 값을 반환하고, 변환이 실패한 경우 <see cref="F:System.DateTime.MinValue" />를 반환합니다. <paramref name="s" /> 또는 <paramref name="formats" />이 <see langword="null" />이거나, <paramref name="s" /> 또는 <paramref name="formats" />의 요소가 빈 문자열이거나, <paramref name="s" />의 형식 패턴 중 하나 이상에서 <paramref name="formats" />의 형식이 정확하게 지정되지 않은 경우 변환에 실패합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
        <summary>지정된 형식 배열, 문화권별 형식 정보 및 스타일을 사용하여 지정된 날짜와 시간의 문자열 표현을 해당 <see cref="T:System.DateTime" /> 표현으로 변환합니다. 문자열 표현 형식은 지정된 형식과 정확히 일치해야 합니다. 이 메서드는 변환이 성공했는지 아니면 실패했는지를 나타내는 값을 반환합니다.</summary>
        <returns><see langword="true" /> 매개 변수가 변환되었으면 <paramref name="s" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> 에 할당 된 패턴 중 하 나와 일치 하는 날짜의 문자열 표현을 구문 분석 하는 메서드는 `formats` 매개 변수입니다. 비슷합니다는 <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> 메서드를 제외 하 고는 <xref:System.DateTime.TryParseExact%2A> 메서드 변환에 실패 하면 예외를 throw 하지 않습니다.  
  
 `s` 매개 변수는 날짜 및 시간 구문 분석을 포함 합니다. 경우는 `s` 매개 변수 시간만 있고 날짜가 하지 않으면 현재 날짜가 사용 됩니다는 `style` 매개 변수를 포함 합니다 <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> 기본 날짜는 경우에 플래그 (`DateTime.Date.MinValue`) 사용 됩니다. 경우는 `s` 매개 변수에 포함만 날짜 및 시간, 자정 (00: 00:00) 사용 됩니다. `style` 매개 변수를 결정 하는지 여부를 합니다 `s` 매개 변수는 최고의 포함 될 수 있습니다, 중간 또는 후행 공백 문자에서 형식 문자열 중 하나에서 허용 하는 것 보다 다른 `formats`.  
  
 하는 경우 `s` 없는 표준 시간대 정보를 포함 합니다 <xref:System.DateTime.Kind%2A> 반환 된 속성 <xref:System.DateTime> 개체가 <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>합니다. 사용 하 여이 동작을 변경할 수 있습니다 합니다 <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> 플래그를 반환 하는 <xref:System.DateTime> 값 <xref:System.DateTime.Kind%2A> 속성이 <xref:System.DateTimeKind.Local?displayProperty=nameWithType>, 또는 사용 하 여를 <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> 및 <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> 플래그를 반환 하는 <xref:System.DateTime> 값 <xref:System.DateTime.Kind%2A> 속성은 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>합니다. 필요에 따라 시간이 현지 시간으로 변환 됩니다 s에 표준 시간대 정보를 포함 하는 경우와 <xref:System.DateTime.Kind%2A> 반환 된 속성 <xref:System.DateTime> 개체를로 <xref:System.DateTimeKind.Local?displayProperty=nameWithType>합니다. 사용 하 여이 동작을 변경할 수 있습니다 합니다 <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> 하지 현지 시간을 utc (협정 세계시)를 변환 하 고 설정 하는 플래그를 <xref:System.DateTime.Kind%2A> 속성을 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>입니다.  
  
 합니다 `formats` 매개 변수 패턴의 배열을 포함 하는 중 `s` 구문 분석 작업이 성공 하는 경우에 정확히 일치 해야 합니다. 패턴을 `formats` 매개 변수가 구성에서 하나 이상의 사용자 지정 형식 지정자는 [사용자 지정 날짜 및 시간 형식 문자열](~/docs/standard/base-types/custom-date-and-time-format-strings.md) 테이블 또는에서 미리 정의 된 패턴을 식별 하는 단일 표준 형식 지정자를는 [표준 날짜 및 시간 형식 문자열](~/docs/standard/base-types/standard-date-and-time-format-strings.md) 테이블입니다.  
  
 사용자 지정 형식 패턴에 날짜 또는 시간 구분 기호를 사용 하지 않는 경우에 대 한 고정 문화권을 사용 합니다 `provider` 매개 변수와 가장 넓은 형식으로 각 사용자 지정 형식 지정자입니다. 예를 들어 패턴에 시간을 지정 하려는 경우 "H" 형식 대신 더 광범위 한 형식, "HH"를 지정 합니다.  
  
 특정 날짜 및 시간 기호 및 문자열 (예: 특정 언어로 요일 이름)에 사용 되는 `s` 가 정의한 합니다 `provider` 매개 변수를 그대로의 정확한 형식을 `s` 경우 `format` 표준 형식입니다 지정자 문자열입니다. `provider` 매개 변수는 다음 중 하나일 수 있습니다.  
  
-   A <xref:System.Globalization.CultureInfo> 해석에 사용 된 문화권을 나타내는 개체 `s`합니다. <xref:System.Globalization.DateTimeFormatInfo> 반환한 개체가 해당 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> 속성 정의 기호 및 서식을 `s`합니다.  
  
-   <xref:System.Globalization.DateTimeFormatInfo> 날짜 및 시간 데이터 형식을 정의 하는 개체입니다.  
  
-   사용자 지정 <xref:System.IFormatProvider> 구현입니다 <xref:System.IFormatProvider.GetFormat%2A> 메서드 중 하나를 반환 합니다 <xref:System.Globalization.CultureInfo> 개체 또는 <xref:System.Globalization.DateTimeFormatInfo> 서식 지정 정보를 제공 하는 개체입니다.  
  
 하는 경우 `provider` 됩니다 `null`, <xref:System.Globalization.CultureInfo> 현재 문화권에 해당 하는 개체를 사용 합니다.  
  
 합니다 `styles` 하나 이상의 멤버를 포함 하는 매개 변수를 <xref:System.Globalization.DateTimeStyles> 공백에 정의 되지 않은 여부와 위치를 결정 하는 열거형 `format` 에 나타날 수 있습니다 `s` 구문 분석 작업의 정확한 동작을 제어 하 합니다. 다음 표에서 각 방법의 멤버를 <xref:System.Globalization.DateTimeStyles> 열거형의 작업에 영향을 줍니다는 <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> 메서드.  
  
|DateTimeStyles 멤버|설명|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|구문 분석 `s` 필요한 UTC로 변환 하는 경우. 경우 `s` 표준 시간대 오프셋을 포함 이거나 `s` 시간대 정보가 없습니다 있지만 `styles` 포함 합니다 <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> 플래그를 메서드 호출 문자열 구문 분석 <xref:System.DateTime.ToUniversalTime%2A> 반환 된 변환할 <xref:System.DateTime> 값을 UTC 를 가져오거나 설정 합니다 <xref:System.DateTime.Kind%2A> 속성을 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>입니다. 경우 `s` UTC를 나타냅니다 이거나 `s` 표준 시간대 정보를 포함 하지 있지만 `styles` 포함 합니다 <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> 플래그를 메서드 문자열을 구문 분석, 반환 된 표준 시간대 변환 작업 없이 수행 <xref:System.DateTime> 값 집합과 합니다 <xref:System.DateTime.Kind%2A> 속성을 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>입니다. 다른 모든 경우 플래그에는 영향을 주지 않습니다.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|에 정의 되지 않은 공백이 지정 `format` 모든 개별 날짜 또는 시간 요소 사이 나타날 수 있습니다.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|지정 하 여 정의 되지 않은 공백이 `format` 부분에 나타날 수 있습니다 `s`합니다.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|지정 하 여 정의 되지 않은 공백이 `format` 끝에 표시 될 수 있습니다 `s`합니다.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|형식임 `s` 선행, 내부 및 후행에 정의 되지 않은 공백을 포함할 수 있습니다 `format`합니다.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|지정 합니다 `s` 표준 시간대 정보가 없으면 로컬 시간을 나타내는 것으로 가정 합니다. 경우가 아니면 합니다 <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> 플래그가 없으면 합니다 <xref:System.DateTime.Kind%2A> 반환 된 속성 <xref:System.DateTime> 값으로 설정 됩니다 <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|지정 합니다 `s` 표준 시간대 정보가 없으면 UTC를 나타내는 것으로 가정 합니다. 경우가 아니면 합니다 <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> 플래그가, 메서드가 반환 된 변환 하는 <xref:System.DateTime> 값을 UTC에서 현지 시간 및 집합 해당 <xref:System.DateTime.Kind%2A> 속성을 <xref:System.DateTimeKind.Local?displayProperty=nameWithType>입니다.|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|하는 경우 `s` 시간 포함 날짜 정보 없이 반환 값의 날짜 설정 됩니다 `DateTime.MinValue.Date`합니다.|  
|<xref:System.Globalization.DateTimeStyles.None>|`s` 매개 변수는 기본값을 사용 하 여 구문 분석 됩니다. 에 있는 이외의 공백이 없습니다 `format` 허용 됩니다. 하는 경우 `s` 날짜 구성 요소를 반환 된 날짜에 <xref:System.DateTime> 값 1/1/0001로 설정 됩니다. 경우 `s` 표준 시간대 정보가 없습니다 합니다 <xref:System.DateTime.Kind%2A> 반환 된 속성 <xref:System.DateTime> 개체를로 <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>합니다. 표준 시간대 정보에 있는 경우 `s`, 시간이 현지 시간으로 변환 됩니다 및 <xref:System.DateTime.Kind%2A> 반환 된 속성 <xref:System.DateTime> 개체를로 <xref:System.DateTimeKind.Local?displayProperty=nameWithType>합니다.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|표준 시간대 정보가 포함 된 문자열에 대 한 방지 하려고로 변환을 <xref:System.DateTime> 값을 해당 <xref:System.DateTime.Kind%2A> 속성으로 설정 <xref:System.DateTimeKind.Local?displayProperty=nameWithType>합니다. 이 플래그는 주로 현지 시간을 UTC 시간으로 변환을 방지합니다.|  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> 메서드는 여러 가지 가능한 형식에서에서 문자열로 구문 분석할 수 있도록 합니다.  
  
 [!code-csharp[System.Datetime.TryParseExact#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParseExact/cs/TryParseExact2.cs#2)]
 [!code-vb[System.Datetime.TryParseExact#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParseExact/vb/TryParseExact2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="styles" />는 유효한 <see cref="T:System.Globalization.DateTimeStyles" /> 값이 아닙니다.  
  
또는 
 <paramref name="styles" />에 <see cref="T:System.Globalization.DateTimeStyles" /> 값의 잘못된 조합이 포함되어 있습니다(예: <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> 및 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" /> 조합).</exception>
        <block subset="none" type="usage"><para>에 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], <see cref="Overload:System.DateTime.TryParseExact" /> 메서드가 반환 되는 <see langword="false" /> 구문 분석 될 문자열 경우 시간 구성 요소 및 계약에 없는 AM/PM 지정자를 포함 합니다. 에 [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] 이전 버전에서는 AM/PM 지정자는 무시 됩니다.</para></block>
        <altmember cref="Overload:System.DateTime.ParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">.NET Framework의 날짜 및 시간 문자열 구문 분석</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">표준 날짜 및 시간 형식 문자열</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">사용자 지정 날짜 및 시간 형식 문자열</related>
      </Docs>
    </Member>
    <Member MemberName="UnixEpoch">
      <MemberSignature Language="C#" Value="public static readonly DateTime UnixEpoch;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTime UnixEpoch" />
      <MemberSignature Language="DocId" Value="F:System.DateTime.UnixEpoch" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UnixEpoch As DateTime " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTime UnixEpoch;" />
      <MemberSignature Language="F#" Value=" staticval mutable UnixEpoch : DateTime" Usage="System.DateTime.UnixEpoch" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UtcNow">
      <MemberSignature Language="C#" Value="public static DateTime UtcNow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime UtcNow" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.UtcNow" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UtcNow As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime UtcNow { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.UtcNow : DateTime" Usage="System.DateTime.UtcNow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 컴퓨터의 현재 날짜와 시간으로 설정되고 UTC(협정 세계시)로 표시되는 <see cref="T:System.DateTime" /> 개체를 가져옵니다.</summary>
        <value>현재 UTC 날짜와 시간이 값인 개체입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성의 해결 방법을 기본 운영 체제에 따라 시스템 타이머에 따라 달라 집니다. 이 0.5 15 밀리초 사이 여야 하는 경향이 있습니다.

 반환 값은.NET Framework 버전 2.0부터는 <xref:System.DateTime> 해당 <xref:System.DateTime.Kind%2A> 속성이 반환 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>합니다.

 사용 하는 대신 <xref:System.DateTime.UtcNow%2A> 는 <xref:System.DateTimeOffset.UtcNow%2A?displayProperty=nameWithType>합니다. 이전의 날짜 및 시간 값을 할당 하 여 utc (협정 세계시) 인지 나타냅니다 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType> 에 해당 <xref:System.DateTime.Kind%2A> 속성인 후자 할당 날짜 및 시간 값은 UTC 시간 오프셋 (같음 <xref:System.TimeSpan.Zero?displayProperty=nameWithType>).
  
## Examples  
 다음 예제에서는 합니다 <xref:System.DateTime.SpecifyKind%2A> 메서드를 보여 줍니다 하는 방법을 <xref:System.DateTime.Kind%2A> 속성이 영향을 줍니다 합니다 <xref:System.DateTime.ToLocalTime%2A> 및 <xref:System.DateTime.ToUniversalTime%2A> 변환 메서드.  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.UtcNow" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="Year">
      <MemberSignature Language="C#" Value="public int Year { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Year" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Year" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Year As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Year { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Year : int" Usage="System.DateTime.Year" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 인스턴스가 나타내는 날짜의 연도 구성 요소를 가져옵니다.</summary>
        <value>1에서 9999 사이의 연도입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.Year%2A> 속성 일반 달력에서 현재 인스턴스의 연도 반환 합니다. 현재 문화권의 기본 달력을 사용 하 여 연도 반환 하지 않습니다. 특정 일정을 사용 하 여 연도 검색 하려면 해당 달력을 호출할 수 있습니다 `GetYear` 메서드를 다음 코드와 같이 합니다.  
  
 [!code-csharp[System.DateTime.Year#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Year/cs/Year.cs#1)]
 [!code-vb[System.DateTime.Year#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Year/vb/Year.vb#1)]  
  
   
  
## Examples  
 다음 예제는 <xref:System.DateTime.Year%2A> 속성입니다.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
  </Members>
</Type>