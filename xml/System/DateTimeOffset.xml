<Type Name="DateTimeOffset" FullName="System.DateTimeOffset">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a46ec7b40fa37bf3284716b81b91167081d06951" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="64996337" /></Metadata><TypeSignature Language="C#" Value="public struct DateTimeOffset : IComparable, IComparable&lt;DateTimeOffset&gt;, IEquatable&lt;DateTimeOffset&gt;, IFormattable, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit DateTimeOffset extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.DateTimeOffset&gt;, class System.IEquatable`1&lt;valuetype System.DateTimeOffset&gt;, class System.IFormattable, class System.Runtime.Serialization.IDeserializationCallback, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.DateTimeOffset" />
  <TypeSignature Language="VB.NET" Value="Public Structure DateTimeOffset&#xA;Implements IComparable, IComparable(Of DateTimeOffset), IDeserializationCallback, IEquatable(Of DateTimeOffset), IFormattable, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public value class DateTimeOffset : IComparable, IComparable&lt;DateTimeOffset&gt;, IEquatable&lt;DateTimeOffset&gt;, IFormattable, System::Runtime::Serialization::IDeserializationCallback, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type DateTimeOffset = struct&#xA;    interface IFormattable&#xA;    interface ISerializable&#xA;    interface IDeserializationCallback" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.DateTimeOffset&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.DateTimeOffset&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-3.0;netstandard-2.1">
      <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>UTC(협정 세계시)를 기준으로 일반적으로 날짜와 시간으로 표현한 시각을 나타냅니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset> 구조에 포함 됩니다는 <xref:System.DateTime> 와 함께 값을 <xref:System.DateTimeOffset.Offset%2A> 현재 간의 차이 정의 하는 속성 <xref:System.DateTimeOffset> 인스턴스의 날짜 및 시간과 utc (협정 세계시). 날짜 및 시간을 UTC 기준으로 정확 하 게 정의 하기 때문에 <xref:System.DateTimeOffset> 구조에 포함 되지 않습니다는 `Kind` 멤버로는 <xref:System.DateTime> 구조는 합니다. 서 기 9999 년 12 월 31 일 오후 11시 59분: 59에 날짜 및 시간 값을 해당 UTC 범위 12시: 00 년 1 월 1 일 자정 0001에서에서 서 기 (Common Era)를 나타냅니다. (C.E.)입니다.  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

 시간 구성 요소는 <xref:System.DateTimeOffset> 값 틱을 호출 하는 100 나노초 단위로 측정 됩니다 및 특정 날짜 자정 12:00 서 기 0001 년 1 월 1 일 이후 틱 수는 (C.E.) 에 <xref:System.Globalization.GregorianCalendar> 달력입니다. <xref:System.DateTimeOffset> 값은 항상 명시적의 컨텍스트 또는 기본 달력으로 표현 됩니다. 윤 초로 간주 되는 틱 틱의 총 수에 포함 되지 않습니다.  
  
 하지만 <xref:System.DateTimeOffset> 는 오프셋을 포함 하는 값, 표준 시간대를 완벽 하 게 인식 하는 데이터 구조가 없습니다. UTC의 오프셋은 표준 시간대의 특징 중 하나를 식별 하지 않습니다 명확 하 게 표준 시간대입니다. 여러 표준 시간대는 UTC에서 동일한 오프셋 공유지 않습니다 할 뿐만 아니라 단일 표준 시간대의 오프셋 일광 절약 시간을 준수 하는 경우에 변경 됩니다. 즉, 즉시는 <xref:System.DateTimeOffset> 값 해당 표준 시간대에서 분리,이 더 이상 명확 하 게 연결할 수는 원래 표준 시간대로 다시 합니다.  
  
 때문에 <xref:System.DateTimeOffset> 구조체를 <xref:System.DateTimeOffset> 개체 선언 되었지만 초기화 하지 않으면에 각 멤버 필드에 대 한 기본 값을 포함 합니다. 즉, 해당 <xref:System.DateTimeOffset.DateTime%2A> 속성이 <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> 및 해당 <xref:System.DateTimeOffset.Offset%2A> 속성이 <xref:System.TimeSpan.Zero?displayProperty=nameWithType>합니다.  
  
 새로 만들 수 있습니다 <xref:System.DateTimeOffset> 에 대 한 오버 로드 된 생성자와 유사한 해당 생성자의 오버 로드 중 하나를 호출 하 여 값을 <xref:System.DateTime> 구조입니다. 새로 만들 수도 있습니다 <xref:System.DateTimeOffset> 값을 할당 하 여는 <xref:System.DateTime> 값입니다. 이 암시적으로 변환 합니다. (C#의 경우)의 캐스팅 연산자가 필요 하거나 (Visual Basic)에서는 변환 메서드를 호출 하지 않습니다. 초기화할 수도 있습니다는 <xref:System.DateTimeOffset> 값을 포함 하는 메서드를 구문 분석 하는 정적 문자열의 수를 호출 하 여 시간과 날짜의 문자열 표현 <xref:System.DateTimeOffset.Parse%2A>, <xref:System.DateTimeOffset.ParseExact%2A>, <xref:System.DateTimeOffset.TryParse%2A>, 및 <xref:System.DateTimeOffset.TryParseExact%2A>합니다.  
  
 멤버는 <xref:System.DateTimeOffset> 구조는 다음 영역에서 기능을 제공 합니다.  
  
-   날짜 및 시간 산술 연산입니다.  
  
     에 더하거나 뺄 날짜 또는 시간 간격에서 특정 수 <xref:System.DateTimeOffset> 값입니다. 사용 하 여 산술 연산을 <xref:System.DateTimeOffset> 값을 가진 달리 <xref:System.DateTime> 결과 반환할 때 시간 오프셋의 차이점에 대 한 값을 조정 합니다. 예를 들어, 다음 코드에서는 <xref:System.DateTime> 변수를 현재 UTC 시간에서 현재 로컬 시간을 뺍니다. 코드를 사용 하 여 <xref:System.DateTimeOffset> 동일한 작업을 수행 하는 변수입니다. 사용 하 여 빼기 <xref:System.DateTime> 값으로 빼기 하는 동안 UTC에서 현지 표준 시간대의 차이 반환 <xref:System.DateTimeOffset> 반환 값 <xref:System.TimeSpan.Zero?displayProperty=nameWithType>합니다.  
  
     [!code-csharp[System.DateTimeOffset.Type#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Type/cs/Type.cs#1)]
     [!code-vb[System.DateTimeOffset.Type#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Type/vb/Type.vb#1)]  
  
-   변환 작업을 입력 합니다.  
  
     변환할 수 있습니다 <xref:System.DateTimeOffset> 값을 <xref:System.DateTimeOffset.DateTime%2A> 값 및 그 반대의 경우도 마찬가지입니다.  
  
-   시간 조작 및 추출 작업입니다.  
  
     날짜 또는 시간을 추출할 수 있습니다는 <xref:System.DateTimeOffset> 값입니다. 특정 값을 검색할 수도 있습니다 <xref:System.DateTimeOffset> 해당 연도 또는 월 같은 구성 요소입니다.  

   > [!NOTE]
   >  작업 하는 경우 틱 값을 사용 하 여 일부 다른 시간 간격을 분 또는 초 등 변환할을 사용 해야 합니다 <xref:System.TimeSpan.TicksPerDay?displayProperty=nameWithType>, <xref:System.TimeSpan.TicksPerHour?displayProperty=nameWithType>, <xref:System.TimeSpan.TicksPerMinute?displayProperty=nameWithType>, <xref:System.TimeSpan.TicksPerSecond?displayProperty=nameWithType>, 또는 <xref:System.TimeSpan.TicksPerMillisecond?displayProperty=nameWithType> 변환을 수행 하는 상수입니다. 예를 들어 시간 (초) 수를 추가 하려면 틱의 지정 된 번호로 표시 합니다 <xref:System.DateTimeOffset.Second%2A> 구성 요소를 <xref:System.DateTimeOffset> 값 식을 사용할 수 있습니다 `dateValue.Second + nTicks/Timespan.TicksPerSecond`합니다.  
  

-   날짜 및 시간 변환 합니다.  
  
     으로 변환할 수 있습니다 <xref:System.DateTimeOffset> 값을 다른 <xref:System.DateTimeOffset> 다른 표준 시간대의 시간에 동일한 시점을 나타내는 값입니다. 그러나 표준 시간대의 조정 규칙은의 경우는 <xref:System.DateTimeOffset.ToLocalTime%2A> 변환 하는 메서드를를 <xref:System.DateTimeOffset> 현지 시간대의 날짜 및 시간 값입니다.  
  
-   날짜 및 시간 비교 합니다.  
  
     있는지 여부를 확인할 수 있습니다 특정 <xref:System.DateTimeOffset> 값 보다 이전 인지, 동일한, 또는 이후 다른 <xref:System.DateTimeOffset> 값입니다. 비교를 수행 하기 전에 모든 값은 UTC로 변환 됩니다.  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/standard/datetime/choosing-between-datetime.md">DateTime, DateTimeOffset, TimeSpan 및 TimeZoneInfo 중 선택</related>
    <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/NET-Framework-4-Formatting-9c4dae8d">샘플: .NET Framework 4 서식 유틸리티</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.DateTimeOffset" /> 구조체의 새 인스턴스를 초기화합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : DateTime -&gt; DateTimeOffset" Usage="new System.DateTimeOffset dateTime" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">날짜와 시간입니다.</param>
        <summary>지정된 <see cref="T:System.DateTime" /> 값을 사용하여 <see cref="T:System.DateTimeOffset" /> 구조체의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 생성자의이 동작의 값에 따라 달라 집니다 합니다 <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> 의 속성을 `dateTime` 매개 변수:  
  
-   경우 값 <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> 됩니다 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>의 <xref:System.DateTimeOffset.DateTime%2A> 새 인스턴스의 속성으로 설정 되었습니다 `dateTime`, 및 <xref:System.DateTimeOffset.Offset%2A> 속성으로 설정 되었습니다 <xref:System.TimeSpan.Zero>합니다.  
  
-   경우 값 <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> 됩니다 <xref:System.DateTimeKind.Local?displayProperty=nameWithType> 또는 <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>의 <xref:System.DateTimeOffset.DateTime%2A> 새 인스턴스의 속성으로 설정 되었습니다 `dateTime`, 및 <xref:System.DateTimeOffset.Offset%2A> 속성은 로컬 시스템의 현재 표준 시간대의 오프셋으로 설정 됩니다.  
  
   
  
## Examples  
 다음 예제에서는 어떻게 값을 <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> 속성의는 `dateTime` 매개 변수는이 생성자에 의해 반환 되는 날짜 및 시간 값에 영향을 줍니다.  
  
 [!code-csharp[System.DateTimeOffset.Constructors#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#1)]
 [!code-vb[System.DateTimeOffset.Constructors#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">오프셋을 적용한 결과인 UTC(협정 세계시) 날짜 및 시간이 <see cref="F:System.DateTimeOffset.MinValue" />보다 빠릅니다.  
  
또는 
오프셋을 적용한 결과인 UTC 날짜 및 시간이 <see cref="F:System.DateTimeOffset.MaxValue" />보다 늦습니다.</exception>
        <related type="Article" href="~/docs/standard/datetime/instantiating-a-datetimeoffset-object.md">DateTimeOffset 개체 인스턴스화</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (DateTime dateTime, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.DateTime dateTime, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.DateTime,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(DateTime dateTime, TimeSpan offset);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : DateTime * TimeSpan -&gt; DateTimeOffset" Usage="new System.DateTimeOffset (dateTime, offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="dateTime">날짜와 시간입니다.</param>
        <param name="offset">UTC(협정 세계시)를 기준으로 해당 시간의 오프셋입니다.</param>
        <summary>지정된 <see cref="T:System.DateTime" /> 값과 오프셋을 사용하여 <see cref="T:System.DateTimeOffset" /> 구조체의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 생성자의이 동작은 부분적 값에는 <xref:System.DateTime.Kind%2A> 의 속성을 `dateTime` 매개 변수:  
  
-   경우 값 <xref:System.DateTime.Kind%2A> 는 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>의 값을 `offset` 매개 변수는 0 이어야 합니다 또는 <xref:System.ArgumentException> throw 됩니다.  
  
-   경우 값 <xref:System.DateTime.Kind%2A> 는 <xref:System.DateTimeKind.Local?displayProperty=nameWithType>의 값을 `offset` 매개 변수는 특정 날짜에 대 한 같음 현지 표준 시간대의 오프셋이 utc (협정 세계시) 이어야 합니다 또는 <xref:System.ArgumentException> throw 됩니다.  
  
-   경우 값 <xref:System.DateTime.Kind%2A> 됩니다 <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>, `offset` 매개 변수에 유효한 값을 사용할 수 있습니다.  
  
   
  
## Examples  
 다음 예제에서는 초기화 하는 방법을 보여 줍니다는 <xref:System.DateTimeOffset> 날짜 및 시간과 표준 시간대는 사전에 알려지지 않은 경우 현지 표준 시간대의 오프셋을 사용 하 여 개체입니다.  
  
 [!code-csharp[System.DateTimeOffset.Constructors#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#3)]
 [!code-vb[System.DateTimeOffset.Constructors#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateTime.Kind" />는 <see cref="F:System.DateTimeKind.Utc" />와 같고 <paramref name="offset" />은 0과 같지 않습니다.  
  
또는 
 <paramref name="dateTime.Kind" />는 <see cref="F:System.DateTimeKind.Local" />과 같고 <paramref name="offset" />은 시스템의 현지 표준 시간대 오프셋과 같지 않습니다.  
  
또는 
 <paramref name="offset" />이 전체 분 내에서 지정되지 않았습니다.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" />이 -14시간보다 작거나 14시간보다 큽니다.  
  
또는 
 <see cref="P:System.DateTimeOffset.UtcDateTime" />가 <see cref="F:System.DateTimeOffset.MinValue" />보다 작거나 <see cref="F:System.DateTimeOffset.MaxValue" />보다 큽니다.</exception>
        <related type="Article" href="~/docs/standard/datetime/instantiating-a-datetimeoffset-object.md">DateTimeOffset 개체 인스턴스화</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (long ticks, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 ticks, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.Int64,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ticks As Long, offset As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(long ticks, TimeSpan offset);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : int64 * TimeSpan -&gt; DateTimeOffset" Usage="new System.DateTimeOffset (ticks, offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="ticks">0001년 1월 1일 자정 12시 00분 00초부터 경과한 100나노초 간격의 수로 표현한 날짜와 시간입니다.</param>
        <param name="offset">UTC(협정 세계시)를 기준으로 해당 시간의 오프셋입니다.</param>
        <summary>지정된 수의 틱과 오프셋을 사용하여 <see cref="T:System.DateTimeOffset" /> 구조체의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 일반적으로 호출 하는 동안 합니다 <xref:System.DateTimeOffset.%23ctor%2A> 인스턴스화하는 생성자를 <xref:System.DateTimeOffset> 현지 시간의 영역 throw 하는 이외의 현지 시간 및 오프셋을 사용 하 여 값을 <xref:System.ArgumentException>. 이 오버 로드를 사용할 수는 <xref:System.DateTimeOffset> 이 제한을 해결 하는 생성자입니다. 다음 예제에서는 현지 시간의 틱 수를 사용 하 여 인스턴스화하는 <xref:System.DateTimeOffset> 오프셋 나타내지는지 않습니다 현지 시간을 하는 값:  
  
 [!code-csharp[System.DateTimeOffset.Constructors#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#4)]
 [!code-vb[System.DateTimeOffset.Constructors#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#4)]  
  
   
  
## Examples  
 다음 예제에서는 초기화를 <xref:System.DateTimeOffset> 오프셋을-5 사용 하 여 (이 예제의 경우 2007 년 7 월 16 일 오후 1 시 32 분)에 임의의 날짜에서 틱 수를 사용 하 여 개체입니다.  
  
 [!code-csharp[System.DateTimeOffset.Constructors#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#2)]
 [!code-vb[System.DateTimeOffset.Constructors#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="offset" />이 전체 분 내에서 지정되지 않았습니다.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><see cref="P:System.DateTimeOffset.UtcDateTime" /> 속성이 <see cref="F:System.DateTimeOffset.MinValue" /> 이전이거나 <see cref="F:System.DateTimeOffset.MaxValue" /> 이후입니다.  
  
또는 
 <paramref name="ticks" />가 <see langword="DateTimeOffset.MinValue.Ticks" />보다 작거나 <see langword="DateTimeOffset.MaxValue.Ticks" />보다 큽니다.  
  
또는 
 <paramref name="Offset" />이 -14시간보다 작거나 14시간보다 큽니다.</exception>
        <related type="Article" href="~/docs/standard/datetime/instantiating-a-datetimeoffset-object.md">DateTimeOffset 개체 인스턴스화</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (int year, int month, int day, int hour, int minute, int second, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, offset As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(int year, int month, int day, int hour, int minute, int second, TimeSpan offset);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : int * int * int * int * int * int * TimeSpan -&gt; DateTimeOffset" Usage="new System.DateTimeOffset (year, month, day, hour, minute, second, offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="year">연도(1부터 9999까지)</param>
        <param name="month">월(1부터 12까지)</param>
        <param name="day">일(1부터 <paramref name="month" />에 있는 일수까지)</param>
        <param name="hour">시(0부터 23까지)</param>
        <param name="minute">분(0부터 59까지)</param>
        <param name="second">초(0부터 59까지)</param>
        <param name="offset">UTC(협정 세계시)를 기준으로 해당 시간의 오프셋입니다.</param>
        <summary>지정된 연도, 월, 일, 시, 분, 초 및 오프셋을 사용하여 <see cref="T:System.DateTimeOffset" /> 구조체의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 생성자는 해석 `year`, `month`, 및 `day` 연도, 월 및 그레고리오 력으로 날짜를 합니다. 인스턴스화하는 <xref:System.DateTimeOffset> 호출 다른 일정에서 연도, 월 및 일을 사용 하 여 값을 <xref:System.DateTimeOffset.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.TimeSpan%29> 생성자입니다.  
  
   
  
## Examples  
 다음 예제에서는 한 <xref:System.DateTimeOffset> 사용 하 여 개체를 <xref:System.DateTimeOffset.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.TimeSpan%29?displayProperty=nameWithType> 생성자 오버 로드 합니다.  
  
 [!code-csharp[System.DateTimeOffset.Constructors#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#5)]
 [!code-vb[System.DateTimeOffset.Constructors#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="offset" />이 전체 시간(분)을 표시하지 않습니다.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" />가 1보다 작거나 9999보다 큽니다.  
  
또는 
 <paramref name="month" />가 1보다 작거나 12보다 큽니다.  
  
또는 
 <paramref name="day" />가 1보다 작거나 <paramref name="month" />의 일 수보다 큽니다.  
  
또는 
 <paramref name="hour" />가 0보다 작거나 23보다 큽니다.  
  
또는 
 <paramref name="minute" />가 0보다 작거나 59보다 큽니다.  
  
또는 
 <paramref name="second" />가 0보다 작거나 59보다 큽니다.  
  
또는 
 <paramref name="offset" />이 -14시간보다 작거나 14시간보다 큽니다.  
  
또는 
<see cref="P:System.DateTimeOffset.UtcDateTime" /> 속성이 <see cref="F:System.DateTimeOffset.MinValue" /> 이전이거나 <see cref="F:System.DateTimeOffset.MaxValue" /> 이후입니다.</exception>
        <related type="Article" href="~/docs/standard/datetime/instantiating-a-datetimeoffset-object.md">DateTimeOffset 개체 인스턴스화</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (int year, int month, int day, int hour, int minute, int second, int millisecond, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer, offset As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(int year, int month, int day, int hour, int minute, int second, int millisecond, TimeSpan offset);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : int * int * int * int * int * int * int * TimeSpan -&gt; DateTimeOffset" Usage="new System.DateTimeOffset (year, month, day, hour, minute, second, millisecond, offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="year">연도(1부터 9999까지)</param>
        <param name="month">월(1부터 12까지)</param>
        <param name="day">일(1부터 <paramref name="month" />에 있는 일수까지)</param>
        <param name="hour">시(0부터 23까지)</param>
        <param name="minute">분(0부터 59까지)</param>
        <param name="second">초(0부터 59까지)</param>
        <param name="millisecond">밀리초(0부터 999까지)</param>
        <param name="offset">UTC(협정 세계시)를 기준으로 해당 시간의 오프셋입니다.</param>
        <summary>지정된 연도, 월, 일, 시, 분, 초, 밀리초 및 오프셋을 사용하여 <see cref="T:System.DateTimeOffset" /> 구조체의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 생성자는 해석 `year`, `month`, 및 `day` 연도, 월 및 그레고리오 력으로 날짜를 합니다. 인스턴스화하는 <xref:System.DateTimeOffset> 호출 다른 일정에서 연도, 월 및 일을 사용 하 여 값을 <xref:System.DateTimeOffset.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.TimeSpan%29> 생성자입니다.  
  
   
  
## Examples  
 다음 예제에서는 한 <xref:System.DateTimeOffset> 사용 하 여 개체를 <xref:System.DateTimeOffset.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.TimeSpan%29?displayProperty=nameWithType> 생성자 오버 로드 합니다.  
  
 [!code-csharp[System.DateTimeOffset.Constructors#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#7)]
 [!code-vb[System.DateTimeOffset.Constructors#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="offset" />이 전체 시간(분)을 표시하지 않습니다.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" />가 1보다 작거나 9999보다 큽니다.  
  
또는 
 <paramref name="month" />가 1보다 작거나 12보다 큽니다.  
  
또는 
 <paramref name="day" />가 1보다 작거나 <paramref name="month" />의 일 수보다 큽니다.  
  
또는 
 <paramref name="hour" />가 0보다 작거나 23보다 큽니다.  
  
또는 
 <paramref name="minute" />가 0보다 작거나 59보다 큽니다.  
  
또는 
 <paramref name="second" />가 0보다 작거나 59보다 큽니다.  
  
또는 
 <paramref name="millisecond" />가 0보다 작거나 999보다 큽니다.  
  
또는 
 <paramref name="offset" />가 -14보다 작거나 14보다 큽니다.  
  
또는 
<see cref="P:System.DateTimeOffset.UtcDateTime" /> 속성이 <see cref="F:System.DateTimeOffset.MinValue" /> 이전이거나 <see cref="F:System.DateTimeOffset.MaxValue" /> 이후입니다.</exception>
        <related type="Article" href="~/docs/standard/datetime/instantiating-a-datetimeoffset-object.md">DateTimeOffset 개체 인스턴스화</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (int year, int month, int day, int hour, int minute, int second, int millisecond, System.Globalization.Calendar calendar, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, class System.Globalization.Calendar calendar, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(int year, int month, int day, int hour, int minute, int second, int millisecond, System::Globalization::Calendar ^ calendar, TimeSpan offset);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : int * int * int * int * int * int * int * System.Globalization.Calendar * TimeSpan -&gt; DateTimeOffset" Usage="new System.DateTimeOffset (year, month, day, hour, minute, second, millisecond, calendar, offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="month" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="day" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="hour" Type="System.Int32" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="minute" Type="System.Int32" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="second" Type="System.Int32" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="millisecond" Type="System.Int32" Index="6" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" Index="7" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="offset" Type="System.TimeSpan" Index="8" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="year">연도</param>
        <param name="month">월(1부터 12까지)</param>
        <param name="day">일(1부터 <paramref name="month" />에 있는 일수까지)</param>
        <param name="hour">시(0부터 23까지)</param>
        <param name="minute">분(0부터 59까지)</param>
        <param name="second">초(0부터 59까지)</param>
        <param name="millisecond">밀리초(0부터 999까지)</param>
        <param name="calendar"><paramref name="year" />, <paramref name="month" /> 및 <paramref name="day" />를 해석하는 데 사용되는 달력입니다.</param>
        <param name="offset">UTC(협정 세계시)를 기준으로 해당 시간의 오프셋입니다.</param>
        <summary>지정된 달력의 지정된 연도, 월, 일, 시, 분, 초, 밀리초 및 오프셋을 사용하여 <see cref="T:System.DateTimeOffset" /> 구조체의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `year`, `month`, `day`, `hour`, `minute`, `second`, 및 `millisecond` 매개 변수는 모두 반영 하 여 지정 된 달력에 표현 된 값을 `calendar` 매개 변수입니다. 이러한 값을 날짜 및 시간이이 달력을 사용 하 여 표현할 수 없는 경우 예외가 throw 됩니다.  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]   

## Examples  
 다음 예제에서는 둘 다의 인스턴스를 사용 합니다 <xref:System.Globalization.HebrewCalendar> 클래스 및 <xref:System.Globalization.HijriCalendar> 인스턴스화할 클래스를 <xref:System.DateTimeOffset> 값입니다. 해당 날짜 각 달력과 그레고리오 력 달력을 사용 하 여 콘솔에 표시 됩니다.  
  
 [!code-csharp[System.DateTimeOffset.Constructors#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#8)]
 [!code-vb[System.DateTimeOffset.Constructors#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="offset" />이 전체 시간(분)을 표시하지 않습니다.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="calendar" />가 <see langword="null" />이 될 수 없는 경우</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" />이 <paramref name="calendar" /> 매개 변수의 <see langword="MinSupportedDateTime.Year" />보다 작거나 <see langword="MaxSupportedDateTime.Year" />보다 큽니다.  
  
또는 
 <paramref name="month" />이 <paramref name="calendar" />의 <paramref name="year" />에 있는 개월 수보다 작거나 큽니다.  
  
또는 
 <paramref name="day" />가 1보다 작거나 <paramref name="month" />의 일 수보다 큽니다.  
  
또는 
 <paramref name="hour" />가 0보다 작거나 23보다 큽니다.  
  
또는 
 <paramref name="minute" />가 0보다 작거나 59보다 큽니다.  
  
또는 
 <paramref name="second" />가 0보다 작거나 59보다 큽니다.  
  
또는 
 <paramref name="millisecond" />가 0보다 작거나 999보다 큽니다.  
  
또는 
 <paramref name="offset" />이 -14시간보다 작거나 14시간보다 큽니다.  
  
또는 
<paramref name="year" />, <paramref name="month" /> 및 <paramref name="day" /> 매개 변수를 날짜 및 시간 값으로 나타낼 수 없습니다.  
  
또는 
<see cref="P:System.DateTimeOffset.UtcDateTime" /> 속성이 <see cref="F:System.DateTimeOffset.MinValue" /> 이전이거나 <see cref="F:System.DateTimeOffset.MaxValue" /> 이후입니다.</exception>
        <related type="Article" href="~/docs/standard/datetime/instantiating-a-datetimeoffset-object.md">DateTimeOffset 개체 인스턴스화</related>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public DateTimeOffset Add (TimeSpan timeSpan);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset Add(valuetype System.TimeSpan timeSpan) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Add(System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset Add(TimeSpan timeSpan);" />
      <MemberSignature Language="F#" Value="member this.Add : TimeSpan -&gt; DateTimeOffset" Usage="dateTimeOffset.Add timeSpan" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeSpan" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeSpan">양수 또는 음수 시간 간격을 나타내는 <see cref="T:System.TimeSpan" /> 개체입니다.</param>
        <summary>지정된 시간 간격을 이 인스턴스의 값에 추가하는 새 <see cref="T:System.DateTimeOffset" /> 개체를 반환합니다.</summary>
        <returns>값이 현재 <see cref="T:System.DateTimeOffset" /> 개체가 나타내는 날짜 및 시간과 <paramref name="timeSpan" />이 나타내는 시간 간격의 합인 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용할 수는 <xref:System.DateTimeOffset.Add%2A> 단일 작업에서 여러 종류의 시간 간격 (일, 시, 분, 초 또는 밀리초)을 추가 하는 방법입니다. 이 메서드의 동작은 더하기 연산자와 동일 합니다. <xref:System.DateTimeOffset> 구조에는 특수 한 더하기 메서드도 지원 (같은 <xref:System.DateTimeOffset.AddDays%2A>, <xref:System.DateTimeOffset.AddHours%2A>, 및 <xref:System.DateTimeOffset.AddMinutes%2A>) 각 시간 간격에 대 한 합니다.  
  
> [!NOTE]
>  이 메서드가 반환 새 <xref:System.DateTimeOffset> 개체입니다. 추가 하 여 현재 개체의 값을 수정 하지는 않습니다 `timeSpan` 날짜 및 시간입니다.  
  
 합니다 <xref:System.DateTimeOffset.Add%2A> 메서드는 현재 값을 주지 않습니다 <xref:System.DateTimeOffset> 개체의 <xref:System.DateTimeOffset.Offset%2A> 속성입니다.  
  
 때문에 <xref:System.DateTimeOffset> 개체에는 특정 표준 시간대의 시간과 날짜 나타내지는 <xref:System.DateTimeOffset.Add%2A> 메서드 날짜 및 시간 산술 연산을 수행할 때 특정 표준 시간대의 조정 규칙을 고려 하지 않습니다.  
  
 경우는 `timeSpan` 매개 변수가 `null`,이 메서드는 원래 값을 반환 <xref:System.DateTimeOffset> 변경 되지 않은 개체입니다.  
  
   
  
## Examples  
 다음 예제에서는 배열을 <xref:System.TimeSpan> 대상 사이의 비행 시간을 나타내는 개체입니다. 합니다 <xref:System.DateTimeOffset.Add%2A> 메서드는 이러한 시간을 추가한는 <xref:System.DateTimeOffset> 항공편의 초기 이륙 시간을 나타내는 개체입니다. 결과 각 대상에 예약 된 도착 시간을 반영합니다.  
  
 [!code-csharp[System.DateTimeOffset.Methods#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#1)]
 [!code-vb[System.DateTimeOffset.Methods#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">결과 <see cref="T:System.DateTimeOffset" /> 값이 <see cref="F:System.DateTimeOffset.MinValue" />보다 작습니다.  
  
또는 
결과 <see cref="T:System.DateTimeOffset" /> 값이 <see cref="F:System.DateTimeOffset.MaxValue" />보다 큽니다.</exception>
        <altmember cref="M:System.DateTimeOffset.op_Addition(System.DateTimeOffset,System.TimeSpan)" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">날짜 및 시간에 대한 산술 연산 수행</related>
      </Docs>
    </Member>
    <Member MemberName="AddDays">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddDays (double days);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddDays(float64 days) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddDays(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddDays (days As Double) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddDays(double days);" />
      <MemberSignature Language="F#" Value="member this.AddDays : double -&gt; DateTimeOffset" Usage="dateTimeOffset.AddDays days" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="days" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="days">정수 및 소수로 계산된 날 수입니다. 숫자는 음수가 될 수도 있고 양수가 될 수도 있습니다.</param>
        <summary>정수 및 소수로 계산된 지정된 시간 수를 이 인스턴스의 값에 더하는 새 <see cref="T:System.DateTimeOffset" /> 개체를 반환합니다.</summary>
        <returns>현재 시간과 날짜의 합을 값으로 갖는 개체 <see cref="T:System.DateTimeOffset" /> 개체와가 나타내는 날 수 <paramref name="days" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 소수 부분을 `days` 매개 변수는 날짜의 소수 부분입니다. 예를 들어 4.5는 4 일에 12 시간, 0 분, 0 초를 0 시간 (밀리초)와 동일 합니다. `days` 매개 변수는 밀리초 단위로 반올림 반올림 됩니다.  
  
> [!NOTE]
>  이 메서드가 반환 새 <xref:System.DateTimeOffset> 개체입니다. 추가 하 여 현재 개체의 값을 수정 하지는 않습니다 `days` 날짜 및 시간입니다.  
  
 때문에 <xref:System.DateTimeOffset> 개체에는 특정 표준 시간대의 시간과 날짜 나타내지는 <xref:System.DateTimeOffset.AddDays%2A> 메서드 날짜 및 시간 산술 연산을 수행할 때 특정 표준 시간대의 조정 규칙을 고려 하지 않습니다.  
  
 일부분으로 하루 미만의 시간 간격을 변환 하면 정밀도 손실이 될 수 있습니다. 문제가 있는 경우 사용할 수는 <xref:System.DateTimeOffset.Add%2A> 메서드를 간격 소수 부분은 하루를 변환할 필요가 없으며 단일 메서드 호출에서 여러 종류의 시간 간격을 지정할 수 있습니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.DateTimeOffset.AddDays%2A> 월요일, 2008 년 3 월에에서 시작 작업 요일에 해당 하는 날짜를 나열 하는 방법입니다.  
  
 [!code-csharp[System.DateTimeOffset.Methods#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#2)]
 [!code-vb[System.DateTimeOffset.Methods#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">결과 <see cref="T:System.DateTimeOffset" /> 값이 <see cref="F:System.DateTimeOffset.MinValue" />보다 작습니다.  
  
또는 
결과 <see cref="T:System.DateTimeOffset" /> 값이 <see cref="F:System.DateTimeOffset.MaxValue" />보다 큽니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddHours">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddHours (double hours);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddHours(float64 hours) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddHours(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddHours (hours As Double) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddHours(double hours);" />
      <MemberSignature Language="F#" Value="member this.AddHours : double -&gt; DateTimeOffset" Usage="dateTimeOffset.AddHours hours" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hours" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="hours">정수 및 소수로 계산된 시간 수입니다. 숫자는 음수가 될 수도 있고 양수가 될 수도 있습니다.</param>
        <summary>정수 및 소수로 계산된 지정된 시간 수를 이 인스턴스의 값에 더하는 새 <see cref="T:System.DateTimeOffset" /> 개체를 반환합니다.</summary>
        <returns>값이 현재 <see cref="T:System.DateTimeOffset" /> 개체가 나타내는 날짜 및 시간과 <paramref name="hours" />가 나타내는 시간 수의 합인 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 소수 부분을 `hours` 매개 변수는 시간의 소수 부분입니다. 예를 들어 4.5는 4 시간, 30 분을 0 초를 0 시간 (밀리초)와 동일 합니다. `hours` 매개 변수는 밀리초 단위로 반올림 반올림 됩니다.  
  
> [!NOTE]
>  이 메서드가 반환 새 <xref:System.DateTimeOffset> 개체입니다. 추가 하 여 현재 개체의 값을 수정 하지는 않습니다 `hours` 날짜 및 시간입니다.  
  
 때문에 <xref:System.DateTimeOffset> 개체에는 특정 표준 시간대의 시간과 날짜 나타내지는 <xref:System.DateTimeOffset.AddHours%2A> 메서드 날짜 및 시간 산술 연산을 수행할 때 특정 표준 시간대의 조정 규칙을 고려 하지 않습니다.  
  
 일부분으로 1 시간 미만 동안 시간 간격을 변환 하면 정밀도 손실이 될 수 있습니다. 예를 들어, 1 분 이어서 0.01666 시간에 해당 합니다. 문제가 있는 경우 사용할 수는 <xref:System.DateTimeOffset.Add%2A> 메서드를 단일 메서드 호출에서 여러 종류의 시간 간격을 지정할 수 있으며 시간 간격을 시간의 소수 부분을 변환할 필요가 없습니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.DateTimeOffset.AddHours%2A> 하루에 두 개의 8 시간 근무조에 있는 사무실에서 특정 주에 대 한 작업의 시작 시간을 나열 하는 메서드를 이동 합니다.  
  
 [!code-csharp[System.DateTimeOffset.Methods#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#3)]
 [!code-vb[System.DateTimeOffset.Methods#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">결과 <see cref="T:System.DateTimeOffset" /> 값이 <see cref="F:System.DateTimeOffset.MinValue" />보다 작습니다.  
  
또는 
결과 <see cref="T:System.DateTimeOffset" /> 값이 <see cref="F:System.DateTimeOffset.MaxValue" />보다 큽니다.</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">날짜 및 시간에 대한 산술 연산 수행</related>
      </Docs>
    </Member>
    <Member MemberName="AddMilliseconds">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddMilliseconds (double milliseconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddMilliseconds(float64 milliseconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddMilliseconds(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMilliseconds (milliseconds As Double) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddMilliseconds(double milliseconds);" />
      <MemberSignature Language="F#" Value="member this.AddMilliseconds : double -&gt; DateTimeOffset" Usage="dateTimeOffset.AddMilliseconds milliseconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="milliseconds" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="milliseconds">정수 및 소수로 계산된 밀리초 수입니다. 숫자는 음수가 될 수도 있고 양수가 될 수도 있습니다.</param>
        <summary>지정된 밀리초 수를 이 인스턴스의 값에 더하는 새 <see cref="T:System.DateTimeOffset" /> 개체를 반환합니다.</summary>
        <returns>값이 현재 <see cref="T:System.DateTimeOffset" /> 개체가 나타내는 날짜 및 시간과 <paramref name="milliseconds" />가 나타내는 정수 밀리초의 합인 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 소수 부분을 `milliseconds` 매개 변수는 밀리초의 소수 부분입니다. 예를 들어 4.5는 4 시간 (밀리초)을 1 밀리초의 10, 000 틱이 인 5000 틱을 합니다. 그러나 `milliseconds` 밀리초 단위로 반올림 됩니다; 반올림은.5 이상인 모든 값이 반올림 됩니다.  
  
> [!NOTE]
>  이 메서드가 반환 새 <xref:System.DateTimeOffset> 개체입니다. 추가 하 여 현재 개체의 값을 수정 하지는 않습니다 `milliseconds` 날짜 및 시간입니다.  
  
 때문에 <xref:System.DateTimeOffset> 개체에는 특정 표준 시간대의 시간과 날짜 나타내지는 <xref:System.DateTimeOffset.AddMilliseconds%2A> 메서드 날짜 및 시간 산술 연산을 수행할 때 특정 표준 시간대의 조정 규칙을 고려 하지 않습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">결과 <see cref="T:System.DateTimeOffset" /> 값이 <see cref="F:System.DateTimeOffset.MinValue" />보다 작습니다.  
  
또는 
결과 <see cref="T:System.DateTimeOffset" /> 값이 <see cref="F:System.DateTimeOffset.MaxValue" />보다 큽니다.</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">날짜 및 시간에 대한 산술 연산 수행</related>
      </Docs>
    </Member>
    <Member MemberName="AddMinutes">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddMinutes (double minutes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddMinutes(float64 minutes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddMinutes(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMinutes (minutes As Double) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddMinutes(double minutes);" />
      <MemberSignature Language="F#" Value="member this.AddMinutes : double -&gt; DateTimeOffset" Usage="dateTimeOffset.AddMinutes minutes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="minutes" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="minutes">정수 및 소수로 계산된 분 수입니다. 숫자는 음수가 될 수도 있고 양수가 될 수도 있습니다.</param>
        <summary>정수 및 소수로 계산된 지정된 분 수를 이 인스턴스의 값에 더하는 새 <see cref="T:System.DateTimeOffset" /> 개체를 반환합니다.</summary>
        <returns>값이 현재 <see cref="T:System.DateTimeOffset" /> 개체가 나타내는 날짜 및 시간과 <paramref name="minutes" />가 나타내는 분 수의 합인 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 소수 부분을 `minutes` 매개 변수는 1 분의 소수 부분입니다. 예를 들어 4.5는 4 분, 30 초, 0 시간 (밀리초)와 동일 합니다. `minutes` 매개 변수는 밀리초 단위로 반올림 반올림 됩니다.  
  
> [!NOTE]
>  이 메서드가 반환 새 <xref:System.DateTimeOffset> 개체입니다. 추가 하 여 현재 개체의 값을 수정 하지는 않습니다 `minutes` 날짜 및 시간입니다.  
  
 때문에 <xref:System.DateTimeOffset> 개체에는 특정 표준 시간대의 시간과 날짜 나타내지는 <xref:System.DateTimeOffset.AddMinutes%2A> 메서드 날짜 및 시간 산술 연산을 수행할 때 특정 표준 시간대의 조정 규칙을 고려 하지 않습니다.  
  
 일부분으로 1 분 미만 간격으로 변환 하면 정밀도 손실이 될 수 있습니다. 예를 들어 1 초 이어서 0.01666 분에 해당 합니다. 문제가 있는 경우 사용할 수는 <xref:System.DateTimeOffset.Add%2A> 메서드를 단일 메서드 호출에서 여러 종류의 시간 간격을 지정할 수 있으며 시간 간격을 1 분의 소수 자릿수가 변환할 필요가 없습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">결과 <see cref="T:System.DateTimeOffset" /> 값이 <see cref="F:System.DateTimeOffset.MinValue" />보다 작습니다.  
  
또는 
결과 <see cref="T:System.DateTimeOffset" /> 값이 <see cref="F:System.DateTimeOffset.MaxValue" />보다 큽니다.</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">날짜 및 시간에 대한 산술 연산 수행</related>
      </Docs>
    </Member>
    <Member MemberName="AddMonths">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddMonths (int months);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddMonths(int32 months) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddMonths(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMonths (months As Integer) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddMonths(int months);" />
      <MemberSignature Language="F#" Value="member this.AddMonths : int -&gt; DateTimeOffset" Usage="dateTimeOffset.AddMonths months" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="months" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="months">개월을 나타내는 정수입니다. 숫자는 음수가 될 수도 있고 양수가 될 수도 있습니다.</param>
        <summary>지정된 개월 수를 이 인스턴스의 값에 더하는 새 <see cref="T:System.DateTimeOffset" /> 개체를 반환합니다.</summary>
        <returns>현재 시간과 날짜의 합을 값으로 갖는 개체 <see cref="T:System.DateTimeOffset" /> 가 나타내는 개월 수와 개체 <paramref name="months" />합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 대부분의 날짜 및 시간 값으로 단일 시간 간격 단위 (예: 분 또는 일)을 추가 하는 다른 메서드는 달리 <xref:System.DateTimeOffset.AddMonths%2A> 사용 달의 소수 부분에 추가할 수는 없습니다. 기타 시간 단위에 월 외에도 구성 된 시간을 추가 하는 <xref:System.DateTimeOffset> 개체를 사용 하 여는 <xref:System.DateTimeOffset.Add%2A> 메서드.  
  
> [!NOTE]
>  이 메서드가 반환 새 <xref:System.DateTimeOffset> 개체입니다. 추가 하 여 현재 개체의 값을 수정 하지는 않습니다 `months` 날짜 및 시간입니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.DateTimeOffset.AddMonths%2A> 2007 연도의 각 분기의 시작 날짜를 표시 하는 방법입니다.  
  
 [!code-csharp[System.DateTimeOffset.Methods#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#4)]
 [!code-vb[System.DateTimeOffset.Methods#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">결과 <see cref="T:System.DateTimeOffset" /> 값이 <see cref="F:System.DateTimeOffset.MinValue" />보다 작습니다.  
  
또는 
결과 <see cref="T:System.DateTimeOffset" /> 값이 <see cref="F:System.DateTimeOffset.MaxValue" />보다 큽니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddSeconds">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddSeconds (double seconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddSeconds(float64 seconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddSeconds(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddSeconds (seconds As Double) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddSeconds(double seconds);" />
      <MemberSignature Language="F#" Value="member this.AddSeconds : double -&gt; DateTimeOffset" Usage="dateTimeOffset.AddSeconds seconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seconds" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="seconds">정수 및 소수로 계산된 초 수입니다. 숫자는 음수가 될 수도 있고 양수가 될 수도 있습니다.</param>
        <summary>정수 및 소수로 계산된 지정된 초 수를 이 인스턴스의 값에 더하는 새 <see cref="T:System.DateTimeOffset" /> 개체를 반환합니다.</summary>
        <returns>값이 현재 <see cref="T:System.DateTimeOffset" /> 개체가 나타내는 날짜 및 시간과 <paramref name="seconds" />가 나타내는 초 수의 합인 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 소수 부분을 `seconds` 매개 변수는 초의 소수 부분입니다. 초의 소수 부분의 값은 다음 표에 표시 됩니다.  
  
|두 번째 값|해당 항목|  
|------------------|----------------|  
|.1 초|100 밀리초|  
|두 번째.01|10 시간 (밀리초)|  
|.001 초|1 밀리초|  
  
 `seconds` 매개 변수는 밀리초 단위로 반올림 반올림 됩니다.  
  
> [!NOTE]
>  이 메서드가 반환 새 <xref:System.DateTimeOffset> 개체입니다. 추가 하 여 현재 개체의 값을 수정 하지는 않습니다 `minutes` 날짜 및 시간입니다.  
  
 때문에 <xref:System.DateTimeOffset> 개체에는 특정 표준 시간대의 시간과 날짜 나타내지는 <xref:System.DateTimeOffset.AddSeconds%2A> 메서드 날짜 및 시간 산술 연산을 수행할 때 특정 표준 시간대의 조정 규칙을 고려 하지 않습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">결과 <see cref="T:System.DateTimeOffset" /> 값이 <see cref="F:System.DateTimeOffset.MinValue" />보다 작습니다.  
  
또는 
결과 <see cref="T:System.DateTimeOffset" /> 값이 <see cref="F:System.DateTimeOffset.MaxValue" />보다 큽니다.</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">날짜 및 시간에 대한 산술 연산 수행</related>
      </Docs>
    </Member>
    <Member MemberName="AddTicks">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddTicks (long ticks);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddTicks(int64 ticks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddTicks(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddTicks (ticks As Long) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddTicks(long ticks);" />
      <MemberSignature Language="F#" Value="member this.AddTicks : int64 -&gt; DateTimeOffset" Usage="dateTimeOffset.AddTicks ticks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="ticks">천만 분의 1초 틱의 수입니다. 숫자는 음수가 될 수도 있고 양수가 될 수도 있습니다.</param>
        <summary>지정된 틱 수를 이 인스턴스의 값에 더하는 새 <see cref="T:System.DateTimeOffset" /> 개체를 반환합니다.</summary>
        <returns>값이 현재 <see cref="T:System.DateTimeOffset" /> 개체가 나타내는 날짜 및 시간과 <paramref name="ticks" />가 나타내는 틱 수의 합인 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 틱을 100 나노초 단위 또는 1-10 천만 분 초의 나타냅니다. 틱을 매우 작고 정확한 시간 간격을 이기 때문에 더 큰 시간 단위 정밀도의 손실 없이 틱 수로 표현할 수 있습니다.  
  
> [!NOTE]
>  이 메서드가 반환 새 <xref:System.DateTimeOffset> 개체입니다. 추가 하 여 현재 개체의 값을 수정 하지는 않습니다 `minutes` 날짜 및 시간입니다.  
  
 다음 표에서 특정 기간의 틱 수를 나열합니다.  
  
|시간 간격|틱 수|  
|-------------------|---------------------|  
|Second|10,000,000|  
|Minute|600,000,000|  
|Hour|36,000,000,000|  
|Day|864,000,000,000|  
|주|6,048,000,000,000|  
|월|월의 일 수에 따라 달라 집니다.|  
|비-윤년|315,360,000,000,000|  
|윤년|316,224,000,000,000|  
  
 때문에 <xref:System.DateTimeOffset> 개체에는 특정 표준 시간대의 시간과 날짜 나타내지는 <xref:System.DateTimeOffset.AddTicks%2A> 메서드 날짜 및 시간 산술 연산을 수행할 때 특정 표준 시간대의 조정 규칙을 고려 하지 않습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">결과 <see cref="T:System.DateTimeOffset" /> 값이 <see cref="F:System.DateTimeOffset.MinValue" />보다 작습니다.  
  
또는 
결과 <see cref="T:System.DateTimeOffset" /> 값이 <see cref="F:System.DateTimeOffset.MaxValue" />보다 큽니다.</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">날짜 및 시간에 대한 산술 연산 수행</related>
      </Docs>
    </Member>
    <Member MemberName="AddYears">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddYears (int years);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddYears(int32 years) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddYears(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddYears (years As Integer) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddYears(int years);" />
      <MemberSignature Language="F#" Value="member this.AddYears : int -&gt; DateTimeOffset" Usage="dateTimeOffset.AddYears years" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="years" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="years">연도 수입니다. 숫자는 음수가 될 수도 있고 양수가 될 수도 있습니다.</param>
        <summary>지정된 연도 수를 이 인스턴스의 값에 더하는 새 <see cref="T:System.DateTimeOffset" /> 개체를 반환합니다.</summary>
        <returns>현재 시간과 날짜의 합을 값으로 갖는 개체 <see cref="T:System.DateTimeOffset" /> 가 나타내는 연도 수와 개체 <paramref name="years" />합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 대부분의 날짜 및 시간 값으로 단일 시간 간격 단위 (예: 분 또는 일)을 추가 하는 다른 메서드는 달리 <xref:System.DateTimeOffset.AddYears%2A> 사용 연간 소수 부분에 추가할 수는 없습니다. 년 외에도 다른 시간 단위가 포함 된 시간을 추가 하는 <xref:System.DateTimeOffset> 개체는 <xref:System.DateTimeOffset.Add%2A> 메서드.  
  
> [!NOTE]
>  이 메서드가 반환 새 <xref:System.DateTimeOffset> 개체입니다. 추가 하 여 현재 개체의 값을 수정 하지는 않습니다 `months` 날짜 및 시간입니다.  
  
   
  
## Examples  
 미국에서 드라이버의 라이선스를 발급할 수 없습니다 개인에 게 16 세 미만입니다. 다음 예제에서는 날짜 또는 법적 운전 면허증 발급 하기 위해 태어난 해야 사용자를 표시 합니다.  
  
 [!code-csharp[System.DateTimeOffset.Methods#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#6)]
 [!code-vb[System.DateTimeOffset.Methods#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">결과 <see cref="T:System.DateTimeOffset" /> 값이 <see cref="F:System.DateTimeOffset.MinValue" />보다 작습니다.  
  
또는 
결과 <see cref="T:System.DateTimeOffset" /> 값이 <see cref="F:System.DateTimeOffset.MaxValue" />보다 큽니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (DateTimeOffset first, DateTimeOffset second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(valuetype System.DateTimeOffset first, valuetype System.DateTimeOffset second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Compare(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (first As DateTimeOffset, second As DateTimeOffset) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(DateTimeOffset first, DateTimeOffset second);" />
      <MemberSignature Language="F#" Value="static member Compare : DateTimeOffset * DateTimeOffset -&gt; int" Usage="System.DateTimeOffset.Compare (first, second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="first" Type="System.DateTimeOffset" />
        <Parameter Name="second" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="first">비교할 첫 번째 개체입니다.</param>
        <param name="second">비교할 두 번째 개체입니다.</param>
        <summary>두 <see cref="T:System.DateTimeOffset" /> 개체 및 첫 번째는 두 번째, 두 번째, 늦은지 두 번째 보다 이전 인지를 나타냅니다.</summary>
        <returns>나타내는 부호 있는 정수를 여부를 값을 <paramref name="first" /> 매개 변수 보다 이전 인지, 늦은지 같은 시간 값으로는 <paramref name="second" /> 매개 변수를 다음 표와 같이.  
  
 <list type="table"><listheader><term> 반환 값 
 </term><description> 의미 
 </description></listheader><item><term> 0보다 작음 
 </term><description><paramref name="first" />가 <paramref name="second" />보다 이전인 경우  
  
 </description></item><item><term> 0 
 </term><description><paramref name="first" />가 <paramref name="second" />와 같은 경우  
  
 </description></item><item><term> 0보다 큼 
 </term><description><paramref name="first" />이 <paramref name="second" />보다 나중인 경우  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 메서드 변환 둘 다에서 비교를 수행 합니다 `first` 및 `second` 매개 변수를 Utc (협정 세계시) 비교를 수행 하기 전에 합니다. 메서드는 다음과 같습니다.  
  
 [!code-csharp[System.DateTimeOffset.Syntax#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#1)]
 [!code-vb[System.DateTimeOffset.Syntax#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#1)]  
  
 즉,는 <xref:System.DateTimeOffset.Compare%2A> 메서드 두 여부를 결정 <xref:System.DateTimeOffset> 개체 시간 단일 지점을 나타냅니다. 날짜 및 시간 아니고 오프셋 직접 비교 됩니다.  
  
   
  
## Examples  
 다음 예제에 대 한 호출을 <xref:System.DateTimeOffset.Compare%2A> 비교 하는 방법 <xref:System.DateTimeOffset> 개체입니다.  
  
 [!code-csharp[System.DateTimeOffset.Methods#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods2.cs#7)]
 [!code-vb[System.DateTimeOffset.Methods#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods2.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (DateTimeOffset other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(valuetype System.DateTimeOffset other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.CompareTo(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (other As DateTimeOffset) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(DateTimeOffset other);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : DateTimeOffset -&gt; int&#xA;override this.CompareTo : DateTimeOffset -&gt; int" Usage="dateTimeOffset.CompareTo other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable`1.CompareTo(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="other">현재 <see cref="T:System.DateTimeOffset" /> 개체와 비교할 개체입니다.</param>
        <summary>현재 비교 <see cref="T:System.DateTimeOffset" /> 개체를 지정 된 <see cref="T:System.DateTimeOffset" /> 개체를 나타내고 두 번째 인스턴스보다 이상, 현재 개체 동일한 보다 이전 인지 <see cref="T:System.DateTimeOffset" /> 개체입니다.</summary>
        <returns>현재 관계를 나타내는 부호 있는 정수 <see cref="T:System.DateTimeOffset" /> 개체 및 <paramref name="other" />다음 표와 같이 합니다.  
  
 <list type="table"><listheader><term> 반환 값 
 </term><description> 설명 
 </description></listheader><item><term> 0보다 작음 
 </term><description> 현재 <see cref="T:System.DateTimeOffset" /> 개체가 이전의 <paramref name="other" />합니다.  
  
 </description></item><item><term> 0 
 </term><description> 현재 <see cref="T:System.DateTimeOffset" /> 같은 개체가 <paramref name="other" />합니다.  
  
 </description></item><item><term> 0보다 큼  
  
 </term><description> 현재 <see cref="T:System.DateTimeOffset" /> 개체 보다 크면 <paramref name="other" />합니다.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 비교 <xref:System.DateTimeOffset> 개체를 비교 하 여 해당 <xref:System.DateTimeOffset.UtcDateTime%2A> ; 값 즉,이 두 개체가 나타내는지 확인 단일 지점 시간 내에 현재 개체 보다 빠른 지, 늦은지 인지 또는 합니다 같은나타냅니다`other`매개 변수입니다.  
  
   
  
## Examples  
 다음 예제에 대 한 호출을 <xref:System.DateTimeOffset.CompareTo%2A> 비교 하는 방법 <xref:System.DateTimeOffset> 개체입니다.  
  
 [!code-csharp[System.DateTimeOffset.Methods#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods3.cs#8)]
 [!code-vb[System.DateTimeOffset.Methods#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods3.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Date">
      <MemberSignature Language="C#" Value="public DateTime Date { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime Date" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Date" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Date As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime Date { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.Date : DateTime" Usage="System.DateTimeOffset.Date" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>가져옵니다를 <see cref="T:System.DateTime" /> 현재 날짜 구성 요소를 나타내는 값 <see cref="T:System.DateTimeOffset" /> 개체입니다.</summary>
        <value>A <see cref="T:System.DateTime" /> 현재 날짜 구성 요소를 나타내는 값 <see cref="T:System.DateTimeOffset" /> 개체입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 모든 중요 한 부분에서 시간 구성 요소를 제거 하는이 속성을 <xref:System.DateTimeOffset> 개체 및 해당 유효 날짜 구성 요소만 반환 합니다. 예를 들어 경우는 <xref:System.DateTimeOffset> 개체의 날짜 및 시간 값은 "1/12/07 오후 4시 01분 + 7:30", 속성은 반환을 <xref:System.DateTime> 값 "1/12/07 오전 12시: 00"입니다. <xref:System.DateTime> 값 날짜만 표시 하는 표준 또는 사용자 지정 형식 지정자를 사용 하 여 표시 될 수 있습니다. (그림은 예제 섹션을 참조 합니다.)  
  
 값을 <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> 반환 된 속성 <xref:System.DateTime> 개체는 항상 <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>합니다. 값에 의해 영향을 받지는 <xref:System.DateTimeOffset.Offset%2A> 속성입니다.  
  
 해당 시간 구성 요소가 없는 날짜를 표시 하려면 사용할 수도 있습니다 "D" 또는 "d" 형식 지정자입니다. 아래 그림에 나온 예제 섹션을 참조 하세요.  
  
   
  
## Examples  
 다음 예제에서는 값을 검색 합니다 <xref:System.DateTimeOffset.Date%2A> 특정 날짜에 대 한 속성입니다. 그런 다음 몇 가지 표준 및 사용자 지정 날짜 전용 형식 지정자를 사용 하 여 콘솔에 해당 값을 표시 합니다.  
  
 [!code-csharp[System.DateTimeOffset.Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#1)]
 [!code-vb[System.DateTimeOffset.Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">표준 DateTime 형식 문자열</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">사용자 지정 DateTime 형식 문자열</related>
      </Docs>
    </Member>
    <Member MemberName="DateTime">
      <MemberSignature Language="C#" Value="public DateTime DateTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime DateTime" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.DateTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DateTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime DateTime { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.DateTime : DateTime" Usage="System.DateTimeOffset.DateTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 <see cref="T:System.DateTimeOffset" /> 개체의 날짜와 시간을 나타내는 <see cref="T:System.DateTime" /> 값을 가져옵니다.</summary>
        <value>현재 <see cref="T:System.DateTimeOffset" /> 개체의 날짜와 시간입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.DateTimeOffset.DateTime%2A> 속성의 값에 영향을 받지는 <xref:System.DateTimeOffset.Offset%2A> 속성입니다.  
  
 이 속성에는 날짜와의 시간 구성 요소를 모두 반환 합니다는 <xref:System.DateTimeOffset> 개체를 수행 하는 데 유용 <xref:System.DateTimeOffset> 에 <xref:System.DateTime> 변환 합니다. 예를 들어 경우는 <xref:System.DateTimeOffset> 개체의 날짜 및 시간 값은 "1/12/07 오후 4시 01분 + 7시 30분", 속성의 날짜를 반환 합니다. "1/12/07 오후 4시 01분"입니다.  
  
 값을 <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> 반환 된 속성 <xref:System.DateTime> 개체가 <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>합니다.  
  
   
  
## Examples  
 다음 예제를 사용 합니다 <xref:System.DateTimeOffset.DateTime%2A> 속성에서 반환 되는 시간을 변환 하는 <xref:System.DateTimeOffset.Now%2A> 및 <xref:System.DateTimeOffset.UtcNow%2A> 속성을 <xref:System.DateTime> 값입니다.  
  
 [!code-csharp[System.DateTimeOffset.Properties#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#2)]
 [!code-vb[System.DateTimeOffset.Properties#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.LocalDateTime" />
        <related type="Article" href="~/docs/standard/datetime/converting-between-datetime-and-offset.md">DateTime과 DateTimeOffset 간 변환</related>
      </Docs>
    </Member>
    <Member MemberName="Day">
      <MemberSignature Language="C#" Value="public int Day { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Day" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Day" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Day As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Day { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Day : int" Usage="System.DateTimeOffset.Day" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재가 나타내는 월의 일을 가져오는 <see cref="T:System.DateTimeOffset" /> 개체입니다.</summary>
        <value>현재 일 구성 요소 <see cref="T:System.DateTimeOffset" /> 개체를 1에서 31 사이의 값으로 표현 합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.DateTimeOffset.Day%2A> 속성의 값에 영향을 받지는 <xref:System.DateTimeOffset.Offset%2A> 속성입니다.  
  
 문자열 표현을 만들 수도 있습니다는 <xref:System.DateTimeOffset> 를 호출 하 여 개체의 일 구성 요소는 <xref:System.DateTimeOffset.ToString%2A> "d" 또는 "dd" 사용자 지정 형식 지정자를 사용 하 여 메서드.  
  
   
  
## Examples  
 일 구성 요소를 표시 하는 다음 예제는 <xref:System.DateTimeOffset> 세 가지 방법으로 개체:  
  
-   값을 검색 하 여 <xref:System.DateTimeOffset.Day%2A> 속성입니다.  
  
-   호출 하 여는 <xref:System.DateTimeOffset.ToString%28System.String%29> 메서드에 "d" 서식 지정자를 포함 합니다.  
  
-   호출 하 여는 <xref:System.DateTimeOffset.ToString%28System.String%29> 메서드 "dd" 서식 지정자를 포함 합니다.  
  
 [!code-csharp[System.DateTimeOffset.Properties#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#10)]
 [!code-vb[System.DateTimeOffset.Properties#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DayOfWeek">
      <MemberSignature Language="C#" Value="public DayOfWeek DayOfWeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DayOfWeek DayOfWeek" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.DayOfWeek" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DayOfWeek As DayOfWeek" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DayOfWeek DayOfWeek { DayOfWeek get(); };" />
      <MemberSignature Language="F#" Value="member this.DayOfWeek : DayOfWeek" Usage="System.DateTimeOffset.DayOfWeek" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DayOfWeek</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 요일을 가져옵니다 <see cref="T:System.DateTimeOffset" /> 개체입니다.</summary>
        <value>현재 요일을 나타내는 열거형 값 중 하나 <see cref="T:System.DateTimeOffset" /> 개체입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 상수 값을 <xref:System.DayOfWeek> 열거형에서 범위 <xref:System.DayOfWeek.Sunday?displayProperty=nameWithType> 에 <xref:System.DayOfWeek.Saturday?displayProperty=nameWithType>입니다. 경우 정수로 캐스팅, 해당 값 범위는 0에서 (나타냅니다 <xref:System.DayOfWeek.Sunday?displayProperty=nameWithType>)를 6 (나타내는 <xref:System.DayOfWeek.Saturday?displayProperty=nameWithType>).  
  
 또한 "D" 서식 지정자 또는 "dddd" 사용자 지정 형식 지정자를 사용 하 여 특정 날짜의 요일 이름을 표시할 수 있습니다. 예를 들어 다음과 같습니다.  
  
 [!code-csharp[System.DateTimeOffset.Properties#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#4)]
 [!code-vb[System.DateTimeOffset.Properties#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#4)]  
  
 호출 하 여 문자열을 반환 합니다 `ToString` 메서드는 <xref:System.DayOfWeek> 이 속성에 의해 반환 되는 열거형 멤버 현지화 되어 있지 않습니다. 현재 문화권 또는 특정 문화권의 요일 이름을 포함 하는 문자열을 추출 하려면 호출을 <xref:System.DateTimeOffset.ToString%2A> "dddd" 사용자 지정 형식 지정자를 사용 하 여 메서드. 다음 코드를 사용 하 여 날짜의 요일 이름을 표시 하는 예를 들어를 `fr-fr` 문화권입니다.  
  
 [!code-csharp[System.DateTimeOffset.Properties#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#5)]
 [!code-vb[System.DateTimeOffset.Properties#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#5)]  
  
   
  
## Examples  
 다음 예제에서는 2008 년의 각 월의 첫 번째 일의 요일 이름을 표시합니다.  
  
 [!code-csharp[System.DateTimeOffset.Properties#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#3)]
 [!code-vb[System.DateTimeOffset.Properties#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DayOfYear">
      <MemberSignature Language="C#" Value="public int DayOfYear { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DayOfYear" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.DayOfYear" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DayOfYear As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int DayOfYear { int get(); };" />
      <MemberSignature Language="F#" Value="member this.DayOfYear : int" Usage="System.DateTimeOffset.DayOfYear" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 연도의 일 수를 가져옵니다 <see cref="T:System.DateTimeOffset" /> 개체입니다.</summary>
        <value>현재 연간 일자 <see cref="T:System.DateTimeOffset" /> 개체를 1에서 366 사이의 값으로 표현 합니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>두 결정 <see cref="T:System.DateTimeOffset" /> 개체가 같은지 또는 <see cref="T:System.DateTimeOffset" /> 개체가 지정된 된 개체와 같은지 합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (DateTimeOffset other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.DateTimeOffset other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Equals(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(DateTimeOffset other);" />
      <MemberSignature Language="F#" Value="override this.Equals : DateTimeOffset -&gt; bool" Usage="dateTimeOffset.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="other">현재 <see cref="T:System.DateTimeOffset" /> 개체와 비교할 개체입니다.</param>
        <summary>확인 여부를 현재 <see cref="T:System.DateTimeOffset" /> 개체의 지정된 된 시간과 같은 시각을 나타내면 <see cref="T:System.DateTimeOffset" /> 개체입니다.</summary>
        <returns><see langword="true" /> 둘 다 <see cref="T:System.DateTimeOffset" /> 개체가 같으면 <see cref="P:System.DateTimeOffset.UtcDateTime" /> ; 값이 고, 그렇지 <see langword="false" />합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드가 변환의 값이 모두 비교를 수행 하기 전에 <xref:System.DateTimeOffset> 개체를 Utc (협정 세계시). 메서드는 다음과 같습니다.  
  
 [!code-csharp[System.DateTimeOffset.Syntax#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#2)]
 [!code-vb[System.DateTimeOffset.Syntax#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#2)]  
  
 즉,는 <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%29> 메서드 두 여부를 결정 <xref:System.DateTimeOffset> 개체 시간 단일 지점을 나타냅니다. 날짜 및 시간 아니고 오프셋 직접 비교 됩니다. 두 개의 지 여부를 결정 <xref:System.DateTimeOffset> 개체 같은 시간을 나타내고 값이 동일한 오프셋을 사용 하 여를 <xref:System.DateTimeOffset.EqualsExact%2A> 메서드.  
  
 A <xref:System.DateTimeOffset> 되지 않는 개체 `null` 이상 (또는 그 이상)로 간주 됩니다 것 보다 `null`합니다.  
  
 이 오버 로드는 <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%29> 메서드 구현 된 <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> 메서드. 보다 약간 더 나은 성능을 제공 합니다 <xref:System.DateTimeOffset.Equals%28System.Object%29?displayProperty=nameWithType> 때문에 오버 로드는 `other` 매개 변수는 개체에서 변환할 필요가 없습니다.  
  
   
  
## Examples  
 다음 예제에서는 호출을 보여 줍니다.는 <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%29> 테스트 하는 방법 <xref:System.DateTimeOffset> 개체의 현재 같은지 <xref:System.DateTimeOffset> 개체입니다.  
  
 [!code-csharp[System.DateTimeOffset.Methods#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#9)]
 [!code-vb[System.DateTimeOffset.Methods#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="dateTimeOffset.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">현재 비교할 개체 <see cref="T:System.DateTimeOffset" /> 개체입니다.</param>
        <summary>확인 여부는 <see cref="T:System.DateTimeOffset" /> 개체가 지정한 개체와에서 동일한 시각을 나타내는지 합니다.</summary>
        <returns><see langword="true" /> 경우는 <paramref name="obj" /> 매개 변수는를 <see cref="T:System.DateTimeOffset" /> 개체와의 현재 시간과 같은 시각을 나타내면 <see cref="T:System.DateTimeOffset" /> ; 개체이 고, 그렇지 <see langword="false" />합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 현재 값 비교를 수행 하기 전에 <xref:System.DateTimeOffset> 개체 및 `obj` utc (협정 세계시)로 매개 변수입니다. 메서드는 다음과 같습니다.  
  
 [!code-csharp[System.DateTimeOffset.Syntax#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#3)]
 [!code-vb[System.DateTimeOffset.Syntax#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#3)]  
  
 즉, 합니다 <xref:System.DateTimeOffset.Equals%28System.Object%29?displayProperty=nameWithType> 메서드 확인 여부를 현재 <xref:System.DateTimeOffset> 개체와 지정 된 개체에에서 단일 시점을 나타냅니다. 날짜 및 시간 아니고 오프셋 직접 비교 됩니다. 두 개의 지 여부를 결정 <xref:System.DateTimeOffset> 개체 같은 시간을 나타내고 값이 동일한 오프셋을 사용 하 여를 <xref:System.DateTimeOffset.EqualsExact%2A> 메서드.  
  
 경우 `obj` 됩니다 `null`의 런타임 형식이 나 `obj` 아닙니다 <xref:System.DateTimeOffset>, 메서드가 반환 `false`합니다.  
  
   
  
## Examples  
 다음 예에서는 여부를 현재 <xref:System.DateTimeOffset> 여러 다른 개체가 같은지 <xref:System.DateTimeOffset> 개체는 null 참조로 작업 하는 대로 및 <xref:System.DateTime> 개체입니다.  
  
 [!code-csharp[System.DateTimeOffset.Methods#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#10)]
 [!code-vb[System.DateTimeOffset.Methods#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (DateTimeOffset first, DateTimeOffset second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(valuetype System.DateTimeOffset first, valuetype System.DateTimeOffset second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Equals(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (first As DateTimeOffset, second As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Equals(DateTimeOffset first, DateTimeOffset second);" />
      <MemberSignature Language="F#" Value="static member Equals : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="System.DateTimeOffset.Equals (first, second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="first" Type="System.DateTimeOffset" />
        <Parameter Name="second" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="first">비교할 첫 번째 개체입니다.</param>
        <param name="second">비교할 두 번째 개체입니다.</param>
        <summary>지정 된 두 결정 <see cref="T:System.DateTimeOffset" /> 개체가 동일한 시각을 나타내는지 합니다.</summary>
        <returns><see langword="true" /> 하는 경우 두 <see cref="T:System.DateTimeOffset" /> 개체가 같으면 <see cref="P:System.DateTimeOffset.UtcDateTime" /> ; 값이 고, 그렇지 <see langword="false" />합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 모두 변환 비교를 수행 하기 전에 <xref:System.DateTimeOffset> 개체를 Utc (협정 세계시). 메서드는 다음과 같습니다.  
  
 [!code-csharp[System.DateTimeOffset.Syntax#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#4)]
 [!code-vb[System.DateTimeOffset.Syntax#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#4)]  
  
 즉,를 <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29> 메서드 확인 여부를 두 <xref:System.DateTimeOffset> 개체 시간 단일 지점을 나타냅니다. 날짜 및 시간 아니고 오프셋 직접 비교 됩니다. 두 개의 지 여부를 결정 <xref:System.DateTimeOffset> 개체 같은 시간을 나타내고 값이 동일한 오프셋을 사용 하 여를 <xref:System.DateTimeOffset.EqualsExact%2A> 메서드.  
  
   
  
## Examples  
 다음 예제에서는 호출을 보여 줍니다.는 <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29> 다양 한 쌍을 테스트 하는 방법 <xref:System.DateTimeOffset> 같음에 대 한 개체입니다.  
  
 [!code-csharp[System.DateTimeOffset.Methods#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#11)]
 [!code-vb[System.DateTimeOffset.Methods#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)" />
      </Docs>
    </Member>
    <Member MemberName="EqualsExact">
      <MemberSignature Language="C#" Value="public bool EqualsExact (DateTimeOffset other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool EqualsExact(valuetype System.DateTimeOffset other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Function EqualsExact (other As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EqualsExact(DateTimeOffset other);" />
      <MemberSignature Language="F#" Value="member this.EqualsExact : DateTimeOffset -&gt; bool" Usage="dateTimeOffset.EqualsExact other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="other">현재 비교할 개체 <see cref="T:System.DateTimeOffset" /> 개체입니다.</param>
        <summary>확인 여부를 현재 <see cref="T:System.DateTimeOffset" /> 개체가 동시 나타내고 오프셋이 지정 된 <see cref="T:System.DateTimeOffset" /> 개체입니다.</summary>
        <returns><see langword="true" /> 경우 현재 <see cref="T:System.DateTimeOffset" /> 개체와 <paramref name="other" /> 가 동일한 날짜 및 시간 값과 동일한 <see cref="P:System.DateTimeOffset.Offset" /> ; 값이 고, 그렇지 <see langword="false" />합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 여러 표준 시간대는 단일 오프셋이 반환 값을 공유 하므로 `true` 보장 하지 않습니다는 현재 및 `other` 동일한 표준 시간대의 시간을 나타내는 개체입니다.  
  
 와 달리 합니다 <xref:System.DateTimeOffset.EqualsExact%2A> 메서드를 오버 로드는 <xref:System.DateTimeOffset.Equals%2A> 메서드 여부만 확인 두 <xref:System.DateTimeOffset> 값으로에서 동일한 시각을 나타내는지 합니다. 두 값과 같은 날짜 및 시간 뿐만 아니라 동일한 오프셋은 나타내지 않습니다.  
  
   
  
## Examples  
 다음 예제를 사용 합니다 <xref:System.DateTimeOffset.EqualsExact%2A> 유사한 비교할 메서드 <xref:System.DateTimeOffset> 개체입니다.  
  
 [!code-csharp[System.DateTimeOffset.Methods#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#12)]
 [!code-vb[System.DateTimeOffset.Methods#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.DateTimeOffset.Equals" />
      </Docs>
    </Member>
    <Member MemberName="FromFileTime">
      <MemberSignature Language="C#" Value="public static DateTimeOffset FromFileTime (long fileTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset FromFileTime(int64 fileTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.FromFileTime(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromFileTime (fileTime As Long) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset FromFileTime(long fileTime);" />
      <MemberSignature Language="F#" Value="static member FromFileTime : int64 -&gt; DateTimeOffset" Usage="System.DateTimeOffset.FromFileTime fileTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileTime" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="fileTime">틱으로 표현된 Windows 파일 시간입니다.</param>
        <summary>지정한 Windows 파일 시간을 해당 현지 시간으로 변환합니다.</summary>
        <returns>날짜 및 시간을 나타내는 개체 <paramref name="fileTime" /> 현지 시간 오프셋으로 설정 된 오프셋을 사용 합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Windows 파일 시간은 서 기 1601 년 1 월 1 일 자정 12 시 이후 경과한 100 나노초 간격의 수를 나타내는 64 비트 값 (C.E.) UTC (Coordinated Universal Time)입니다. Windows 파일 시간을 사용 하 여 응용 프로그램 액세스를 만들거나 파일을 쓸 때 기록.  
  
 Windows 파일 시간은 호출 하 여 Windows API를 통해 직접 액세스할 수 합니다 `GetFileTime` 반환 하는 함수를 `FILETIME` 구조입니다. 단일 함수 매개 변수는 해당 파일 시간 정보를 검색할 파일의 핸들입니다. 파일 핸들을 검색 하는 `CreateFile` 함수입니다. `FILETIME` 구조체의 `dwHighDateTime` 파일의 4 개의 상위 바이트를 포함 하는 멤버 및 해당 `dwLowDateTime` 멤버 4 개의 하위 바이트를 포함 합니다. 다음 예제에서는 Windows 파일 시간 값을 검색 하도록 변환 하는 방법을 보여 줍니다 <xref:System.DateTimeOffset> 값입니다.  
  
 Windows 파일 시간 값에서 만들 수도 있습니다 <xref:System.DateTime> 를 호출 하 여 값을 <xref:System.DateTime.ToFileTime%2A?displayProperty=nameWithType> 및 <xref:System.DateTime.ToFileTimeUtc%2A?displayProperty=nameWithType> 메서드 및 <xref:System.DateTimeOffset> 호출 하 여 값을 <xref:System.DateTimeOffset.ToFileTime%2A?displayProperty=nameWithType> 메서드.  
  
   
  
## Examples  
 다음 예제에서는 워드 패드 실행 파일에 대 한 Windows 파일 시간을 검색 하는 Windows API를 사용 합니다.  
  
 [!code-csharp[System.DateTimeOffset.FromFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.FromFileTime/cs/FileTime.cs#1)]
 [!code-vb[System.DateTimeOffset.FromFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.FromFileTime/vb/FileTime.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="filetime" />가 0보다 작은 경우  
  
또는 
 <paramref name="filetime" />가 <see langword="DateTimeOffset.MaxValue.Ticks" />보다 큰 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="FromUnixTimeMilliseconds">
      <MemberSignature Language="C#" Value="public static DateTimeOffset FromUnixTimeMilliseconds (long milliseconds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset FromUnixTimeMilliseconds(int64 milliseconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.FromUnixTimeMilliseconds(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromUnixTimeMilliseconds (milliseconds As Long) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset FromUnixTimeMilliseconds(long milliseconds);" />
      <MemberSignature Language="F#" Value="static member FromUnixTimeMilliseconds : int64 -&gt; DateTimeOffset" Usage="System.DateTimeOffset.FromUnixTimeMilliseconds milliseconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="milliseconds" Type="System.Int64" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="milliseconds">1970-01-01T00:00:00Z(1970년 1월 1일 오전 12:00 UTC) 이후 경과된 Unix 시간(밀리초)입니다. 이 날짜 이전의 Unix 시간의 값은 음수입니다.</param>
        <summary>1970-01-01T00:00:00Z 이후 경과된 Unix 시간(밀리초)을 <see cref="T:System.DateTimeOffset" /> 값으로 변환합니다.</summary>
        <returns>Unix 시간과 시간의 동일한 순간을 나타내는 날짜 및 시간 값입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.DateTimeOffset.Offset%2A> 속성 값을 반환 <xref:System.DateTimeOffset> 인스턴스가 <xref:System.TimeSpan.Zero?displayProperty=nameWithType>, 협정 세계시를 나타내는입니다. 호출 하 여 특정 표준 시간대의 시간으로 변환할 수 있습니다는 <xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> 메서드.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="milliseconds" />가 -62,135,596,800,000보다 작습니다.  
  
또는 
 <paramref name="milliseconds" />가 253,402,300,799,999보다 큽니다.</exception>
        <altmember cref="M:System.DateTimeOffset.FromUnixTimeSeconds(System.Int64)" />
        <altmember cref="M:System.DateTimeOffset.ToUnixTimeMilliseconds" />
      </Docs>
    </Member>
    <Member MemberName="FromUnixTimeSeconds">
      <MemberSignature Language="C#" Value="public static DateTimeOffset FromUnixTimeSeconds (long seconds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset FromUnixTimeSeconds(int64 seconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.FromUnixTimeSeconds(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromUnixTimeSeconds (seconds As Long) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset FromUnixTimeSeconds(long seconds);" />
      <MemberSignature Language="F#" Value="static member FromUnixTimeSeconds : int64 -&gt; DateTimeOffset" Usage="System.DateTimeOffset.FromUnixTimeSeconds seconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seconds" Type="System.Int64" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="seconds">1970-01-01T00:00:00Z(1970년 1월 1일 오전 12:00 UTC) 이후 경과된 Unix 시간(초)입니다. 이 날짜 이전의 Unix 시간의 값은 음수입니다.</param>
        <summary>1970-01-01T00:00:00Z 이후 경과된 Unix 시간(초)을 <see cref="T:System.DateTimeOffset" /> 값으로 변환합니다.</summary>
        <returns>Unix 시간과 시간의 동일한 순간을 나타내는 날짜 및 시간 값입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.DateTimeOffset.Offset%2A> 속성 값을 반환 <xref:System.DateTimeOffset> 인스턴스가 <xref:System.TimeSpan.Zero?displayProperty=nameWithType>, 협정 세계시를 나타내는입니다. 호출 하 여 특정 표준 시간대의 시간으로 변환할 수 있습니다는 <xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> 메서드.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="seconds" />가 -62,135,596,800보다 작습니다.  
  
또는 
 <paramref name="seconds" />가 253,402,300,799보다 큽니다.</exception>
        <altmember cref="M:System.DateTimeOffset.FromUnixTimeMilliseconds(System.Int64)" />
        <altmember cref="M:System.DateTimeOffset.ToUnixTimeSeconds" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="dateTimeOffset.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>현재 <see cref="T:System.DateTimeOffset" /> 개체에 대한 해시 코드를 반환합니다.</summary>
        <returns>부호 있는 32비트 정수 해시 코드입니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Hour">
      <MemberSignature Language="C#" Value="public int Hour { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Hour" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Hour" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Hour As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Hour { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Hour : int" Usage="System.DateTimeOffset.Hour" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 표시 된 시간의 시간 구성 요소를 가져옵니다 <see cref="T:System.DateTimeOffset" /> 개체입니다.</summary>
        <value>현재 시간의 시간 구성 <see cref="T:System.DateTimeOffset" /> 개체입니다. 이 속성에는 24시간제가 사용되며 값의 범위는 0에서 23 사이입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.DateTimeOffset.Hour%2A> 속성의 값에 영향을 받지는 <xref:System.DateTimeOffset.Offset%2A> 속성입니다.  
  
 문자열 표현을 만들 수도 있습니다는 <xref:System.DateTimeOffset> 를 호출 하 여 개체의 시간 구성 요소는 <xref:System.DateTimeOffset.ToString%2A> "H"를 사용 하 여 메서드 또는 "HH" 사용자 지정 형식 지정자입니다.  
  
   
  
## Examples  
 시간 구성 요소를 표시 하는 다음 예제는 <xref:System.DateTimeOffset> 세 가지 방법으로 개체:  
  
-   값을 검색 하 여 <xref:System.DateTimeOffset.Hour%2A> 속성입니다.  
  
-   호출 하 여는 <xref:System.DateTimeOffset.ToString%28System.String%29> "H" 형식 지정자를 사용 하 여 메서드.  
  
-   호출 하 여는 <xref:System.DateTimeOffset.ToString%28System.String%29> "HH"를 사용 하 여 메서드 형식 지정자입니다.  
  
 [!code-csharp[System.DateTimeOffset.Properties#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#6)]
 [!code-vb[System.DateTimeOffset.Properties#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalDateTime">
      <MemberSignature Language="C#" Value="public DateTime LocalDateTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime LocalDateTime" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.LocalDateTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocalDateTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime LocalDateTime { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalDateTime : DateTime" Usage="System.DateTimeOffset.LocalDateTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>가져옵니다를 <see cref="T:System.DateTime" /> 현지 날짜와 현재 시간을 나타내는 값 <see cref="T:System.DateTimeOffset" /> 개체입니다.</summary>
        <value>로컬 날짜와 현재 시간 <see cref="T:System.DateTimeOffset" /> 개체입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 필요한 경우는 <xref:System.DateTimeOffset.LocalDateTime%2A> 속성에는 현재 변환 <xref:System.DateTimeOffset> 개체의 날짜와 시간을 로컬 시스템의 날짜 및 시간입니다. 변환 작업이 2 단계:  
  
1.  속성에는 현재 변환 <xref:System.DateTimeOffset> 개체의 시간을 Utc (협정 세계시).  
  
2.  그런 다음 속성을 현지 시간 UTC를 변환합니다.  
  
 잘못 된 경우가 있습니다 및 모호한 시간을 현지 시간대의 표준 시간으로 매핑됩니다. (변환 변칙을 만들 수 있지만: 경우는 <xref:System.DateTimeOffset> 모호한 날짜 및 시간 값 UTC로 변환할 수 있으며 다음 다시 원래 시간에서 현지 시간으로는 로컬 컴퓨터에서 파생 되는 값을 반영 합니다.)  이 변환을 수행 하는 경우 현지 표준 시간대의 조정 규칙을 적용 하는 속성입니다.  
  
 이 속성에는 날짜와의 시간 구성 요소를 모두 반환 합니다는 <xref:System.DateTimeOffset> 개체에 대 한 유용 <xref:System.DateTimeOffset> 에 <xref:System.DateTime> 변환 합니다. 필요한 시간 변환을 수행 하는 것 외에도이 속성에서 다른 합니다 <xref:System.DateTimeOffset.DateTime%2A> 속성의 값을 설정 하 여 합니다 <xref:System.DateTime.Kind%2A> 반환 된 속성 <xref:System.DateTime> 개체를 <xref:System.DateTimeKind.Local?displayProperty=nameWithType>입니다.  
  
   
  
## Examples  
 다음 예제에서는 몇 가지 변환을 <xref:System.DateTimeOffset> 미국에서 현지 시간에는 값 보여 줍니다. 마지막 세 번은 모호한 모든; note 속성은 단일 날짜 및 태평양 표준 시간대의 시간에 모두를 매핑합니다.  
  
 [!code-csharp[System.DateTimeOffset.Properties#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#7)]
 [!code-vb[System.DateTimeOffset.Properties#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="C#" Value="public static readonly DateTimeOffset MaxValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTimeOffset MaxValue" />
      <MemberSignature Language="DocId" Value="F:System.DateTimeOffset.MaxValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MaxValue As DateTimeOffset " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTimeOffset MaxValue;" />
      <MemberSignature Language="F#" Value=" staticval mutable MaxValue : DateTimeOffset" Usage="System.DateTimeOffset.MaxValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>가장 큰 값을 나타내는 <see cref="T:System.DateTimeOffset" />합니다. 이 필드는 읽기 전용입니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 상수의 값이 9999 년 12/31/11시 59분: 59 PM + 00:00 경우  
  
 <xref:System.DateTimeOffset.MaxValue> 속성 확인을 사용 하는지 여부를 새 값 <xref:System.DateTimeOffset> 개체 또는 <xref:System.DateTimeOffset> 산술 연산에서 반환 된 값은이 최대 범위 값 보다 빠르거나 동일 합니다. 메서드에서 throw 되지 않는 경우는 <xref:System.ArgumentOutOfRangeException>합니다. 모든 <xref:System.DateTimeOffset> 메서드를 사용 하 여 비교 하기 전에 값 utc (협정 세계시)로 변환 됩니다 <xref:System.DateTimeOffset.MaxValue>합니다.  즉, 한 <xref:System.DateTimeOffset> 값 최대 범위, 해당 날짜와 시간이 가까워질 하지만 해당 오프셋이 음수 이면 예외가 throw 될 수 있습니다. 예를 들어 값이 9999 년 12/31/오후 11시-02:00 이므로 범위를 벗어났습니다. 1 시간 보다 이후 <xref:System.DateTimeOffset.MaxValue> UTC로 변환 됩니다.  
  
 와 같은 일부 달력은 <xref:System.Globalization.UmAlQuraCalendar>, 이전의 위 날짜 범위를 지원 <xref:System.DateTime.MaxValue>. 이러한 경우에 액세스 하려고 <xref:System.DateTime.MaxValue> 변수 할당 또는 서식 지정 및 구문 분석 작업에서 throw 할 수는 <xref:System.ArgumentOutOfRangeException>합니다. 값을 검색 하는 대신 <xref:System.DateTime.MaxValue?displayProperty=nameWithType>에서 지정된 된 문화권의 최신 유효한 날짜 값의 값을 검색할 수는 <xref:System.Globalization.Calendar.MaxSupportedDateTime%2A?displayProperty=nameWithType> 속성입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><see cref="F:System.DateTime.MaxValue" /> 현재 또는 지정 된 문화권의 기본 달력의 범위를 벗어났습니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="Millisecond">
      <MemberSignature Language="C#" Value="public int Millisecond { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Millisecond" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Millisecond" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Millisecond As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Millisecond { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Millisecond : int" Usage="System.DateTimeOffset.Millisecond" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 나타내는 시간의 밀리초 구성 요소를 가져옵니다 <see cref="T:System.DateTimeOffset" /> 개체입니다.</summary>
        <value>현재 밀리초 구성 요소 <see cref="T:System.DateTimeOffset" /> 개체를 0에서 999 사이의 정수로 표현 됩니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 문자열 표현을 만들 수도 있습니다는 <xref:System.DateTimeOffset> 를 호출 하 여 개체의 밀리초 구성 요소는 <xref:System.DateTimeOffset.ToString%2A> "fff" 사용자 지정 형식 지정자를 사용 하 여 메서드.  
  
 와 같은 속성에 의존 하는 경우 <xref:System.DateTimeOffset.Now%2A> 또는 <xref:System.DateTimeOffset.UtcNow%2A> 경과 된 시간 (밀리초)의 수를 정확 하 게 추적 하려면 해당 시간의 밀리초 구성 요소 전체 자릿수 종속 시스템 클록의 해상도입니다. Windows NT 3.5 이상 및 Windows Vista 운영 체제 시계의 약 10-15 밀리초입니다.  
  
   
  
## Examples  
 시간 (밀리초)의 수를 표시 하는 다음 예제는 <xref:System.DateTimeOffset> 에 직접 액세스 하 고 사용자 지정 형식 지정자를 사용 하 여 개체를 <xref:System.DateTimeOffset.Millisecond%2A> 속성.  
  
 [!code-csharp[System.DateTimeOffset.Properties#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#12)]
 [!code-vb[System.DateTimeOffset.Properties#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Minute">
      <MemberSignature Language="C#" Value="public int Minute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Minute" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Minute" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Minute As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Minute { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Minute : int" Usage="System.DateTimeOffset.Minute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 나타내는 시간의 분 구성 요소를 가져옵니다 <see cref="T:System.DateTimeOffset" /> 개체입니다.</summary>
        <value>현재는 분 구성 요소 <see cref="T:System.DateTimeOffset" /> 개체를 0에서 59 사이의 정수로 표현 됩니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.DateTimeOffset.Minute%2A> 속성의 값에 영향을 받지는 <xref:System.DateTimeOffset.Offset%2A> 속성입니다.  
  
 문자열 표현을 만들 수도 있습니다는 <xref:System.DateTimeOffset> 를 호출 하 여 개체의 분 구성 요소는 <xref:System.DateTimeOffset.ToString%2A> "m" 또는 "mm" 사용자 지정 형식 지정자를 사용 하 여 메서드.  
  
   
  
## Examples  
 분 구성 요소를 표시 하는 다음 예제는 <xref:System.DateTimeOffset> 세 가지 방법으로 개체:  
  
-   값을 검색 하 여 <xref:System.DateTimeOffset.Minute%2A> 속성입니다.  
  
-   호출 하 여는 <xref:System.DateTimeOffset.ToString%28System.String%29> 메서드 "m" 서식 지정자를 포함 합니다.  
  
-   호출 하 여는 <xref:System.DateTimeOffset.ToString%28System.String%29> "mm" 형식 지정자를 사용 하 여 메서드.  
  
 [!code-csharp[System.DateTimeOffset.Properties#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#8)]
 [!code-vb[System.DateTimeOffset.Properties#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="C#" Value="public static readonly DateTimeOffset MinValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTimeOffset MinValue" />
      <MemberSignature Language="DocId" Value="F:System.DateTimeOffset.MinValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MinValue As DateTimeOffset " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTimeOffset MinValue;" />
      <MemberSignature Language="F#" Value=" staticval mutable MinValue : DateTimeOffset" Usage="System.DateTimeOffset.MinValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>가장 빠른 나타냅니다 <see cref="T:System.DateTimeOffset" /> 값입니다. 이 필드는 읽기 전용입니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 상수의 값이 1/1/0001 오전 12시: 00 + 00:00입니다.  
  
 <xref:System.DateTimeOffset.MinValue> 속성 확인을 사용 여부를 새 값 <xref:System.DateTimeOffset> 개체 또는 <xref:System.DateTimeOffset> 이 최소 범위 값 보다 산술 연산에서 반환 된 값은 동일 합니다. 메서드에서 throw 되지 않는 경우는 <xref:System.ArgumentOutOfRangeException>합니다. 모든 <xref:System.DateTimeOffset> 메서드를 사용 하 여 비교를 수행 하기 전에 값 utc (협정 세계시)로 변환 됩니다 <xref:System.DateTimeOffset.MinValue>합니다.  즉, 한 <xref:System.DateTimeOffset> 값 해당 날짜와 시간이 최소 범위에 가까워질 하지만 해당 오프셋이 양수 이면 예외가 throw 될 수 있습니다. 예를 들어 값 1/1/0001 오전 1 시 + 02:00 이므로 범위를 벗어났습니다. 1 시간 보다 이전 <xref:System.DateTimeOffset.MinValue> UTC로 변환 되 면 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <Member MemberName="Month">
      <MemberSignature Language="C#" Value="public int Month { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Month" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Month" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Month As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Month { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Month : int" Usage="System.DateTimeOffset.Month" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 날짜의 월 구성 요소를 가져옵니다 <see cref="T:System.DateTimeOffset" /> 개체입니다.</summary>
        <value>현재 월 구성 요소 <see cref="T:System.DateTimeOffset" /> 개체를 1에서 12 사이의 정수로 표현 됩니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.DateTimeOffset.Month%2A> 속성의 값에 영향을 받지는 <xref:System.DateTimeOffset.Offset%2A> 속성입니다.  
  
 문자열 표현을 만들 수도 있습니다는 <xref:System.DateTimeOffset> 를 호출 하 여 개체의 월 구성 요소는 <xref:System.DateTimeOffset.ToString%2A> "M" 또는 "MM" 사용자 지정 형식 지정자를 사용 하 여 메서드.  
  
   
  
## Examples  
 월 구성 요소를 표시 하는 다음 예제는 <xref:System.DateTimeOffset> 세 가지 방법으로 값:  
  
-   값을 검색 하 여 <xref:System.DateTimeOffset.Month%2A> 속성입니다.  
  
-   호출 하 여는 <xref:System.DateTimeOffset.ToString%28System.String%29> 메서드 "M" 서식 지정자를 포함 합니다.  
  
-   호출 하 여는 <xref:System.DateTimeOffset.ToString%28System.String%29> "MM" 형식 지정자를 사용 하 여 메서드.  
  
 [!code-csharp[System.DateTimeOffset.Properties#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#9)]
 [!code-vb[System.DateTimeOffset.Properties#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Now">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Now { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTimeOffset Now" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Now" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Now As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTimeOffset Now { DateTimeOffset get(); };" />
      <MemberSignature Language="F#" Value="member this.Now : DateTimeOffset" Usage="System.DateTimeOffset.Now" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>UTC(협정 세계시)를 기준으로 한 현지 시간의 오프셋으로 설정된 오프셋을 적용하여 현재 컴퓨터의 현재 날짜 및 시간으로 설정된 <see cref="T:System.DateTimeOffset" /> 개체를 가져옵니다.</summary>
        <value>해당 오프셋이 UTC(협정 세계시)를 기준으로 한 현지 시간대의 오프셋이고 해당 날짜 및 시간이 현재 현지 시간인 <see cref="T:System.DateTimeOffset" /> 개체입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 현재 현지 시간의 밀리초 구성 요소 전체 자릿수는 시스템 클록의 해상도에 따라 달라 집니다. Windows NT 3.5 이상 및 Windows Vista 운영 체제 시계의 약 10-15 밀리초입니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.DateTimeOffset.Now%2A> 현재 날짜 및 시간을 검색할 속성의 각 사용 하 여 표시를 [표준 날짜 및 시간 형식 문자열](~/docs/standard/base-types/standard-date-and-time-format-strings.md) 지는 <xref:System.DateTimeOffset> 형식.  
  
 [!code-csharp[System.DateTimeOffset.Now#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.now/cs/now1.cs#1)]
 [!code-vb[System.DateTimeOffset.Now#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.now/vb/now1.vb#1)]  
  
 다음 예제에서는 합니다 <xref:System.DateTimeOffset.Now%2A> 고 <xref:System.DateTimeOffset.Millisecond%2A> 시스템 클록의 해상도 결정 하는 속성입니다. 시간을 표시 하는 밀리초 구성 요소의 값이 변경 하는 경우에 합니다.  
  
 [!code-csharp[System.DateTimeOffset.Properties#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#11)]
 [!code-vb[System.DateTimeOffset.Properties#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.UtcNow" />
      </Docs>
    </Member>
    <Member MemberName="Offset">
      <MemberSignature Language="C#" Value="public TimeSpan Offset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan Offset" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Offset" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Offset As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan Offset { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.Offset : TimeSpan" Usage="System.DateTimeOffset.Offset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Utc (협정 세계시) 시간 오프셋을 가져옵니다.</summary>
        <value>현재 차이점 <see cref="T:System.DateTimeOffset" /> 개체의 시간 값과 utc (협정 세계시).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 값을 <xref:System.TimeSpan.Hours%2A> 반환 된 속성 <xref:System.TimeSpan> 개체 범위는-14 시간에서 14 시간입니다.  
  
 값을 <xref:System.DateTimeOffset.Offset%2A> 속성은 정밀도 분 단위입니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.DateTimeOffset.Offset%2A> 속성을 utc (협정 세계시)에서 현지 시간의 차이 표시 합니다.  
  
 [!code-csharp[System.DateTimeOffset.Properties#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#13)]
 [!code-vb[System.DateTimeOffset.Properties#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static DateTimeOffset operator + (DateTimeOffset dateTimeOffset, TimeSpan timeSpan);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Addition(valuetype System.DateTimeOffset dateTimeOffset, valuetype System.TimeSpan timeSpan) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Addition(System.DateTimeOffset,System.TimeSpan)" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset operator +(DateTimeOffset dateTimeOffset, TimeSpan timeSpan);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="F#" Value="static member ( + ) : DateTimeOffset * TimeSpan -&gt; DateTimeOffset" Usage="dateTimeOffset + timeSpan" FrameworkAlternate="netframework-2.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-3.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C#" Value="public static DateTimeOffset operator + (DateTimeOffset dateTimeTz, TimeSpan timeSpan);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Addition(valuetype System.DateTimeOffset dateTimeTz, valuetype System.TimeSpan timeSpan) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset operator +(DateTimeOffset dateTimeTz, TimeSpan timeSpan);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="F#" Value="static member ( + ) : DateTimeOffset * TimeSpan -&gt; DateTimeOffset" Usage="dateTimeTz + timeSpan" FrameworkAlternate="netframework-2.0;netstandard-2.1" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Addition(System.DateTimeOffset,System.TimeSpan)" FrameworkAlternate="netframework-2.0;dotnet-uwp-10.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="dateTimeTz" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
        <Parameter Name="timeSpan" Type="System.TimeSpan" Index="1" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">시간 간격을 추가할 개체입니다.</param>
        <param name="dateTimeTz">시간 간격을 추가할 개체입니다.</param>
        <param name="timeSpan">더할 시간 간격입니다.</param>
        <summary>날짜와 시간이 지정된 <see cref="T:System.DateTimeOffset" /> 개체에 지정된 시간 간격을 더하고 새 날짜와 시간이 포함된 <see cref="T:System.DateTimeOffset" /> 개체를 생성합니다.</summary>
        <returns>값이 <paramref name="dateTimeTz" /> <paramref name="timeSpan" /> 값의 합계인 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.DateTimeOffset.op_Addition%2A> 메서드 정의 대해 더하기 연산을 <xref:System.DateTimeOffset> 값입니다. 다음과 같은 코드 수 있도록 합니다.  
  
 [!code-csharp[System.DateTimeOffset.Operators#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#1)]
 [!code-vb[System.DateTimeOffset.Operators#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#1)]  
  
 사용자 지정 연산자 및 연산자 오버 로드를 지원 하지 않는 언어를 호출할 수는 <xref:System.DateTimeOffset.Add%2A> 메서드 대신 합니다.  
  
 이 연산자에 대 한 해당 메서드는 <xref:System.DateTimeOffset.Add%28System.TimeSpan%29?displayProperty=nameWithType>합니다.]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">결과 <see cref="T:System.DateTimeOffset" /> 값이 <see cref="F:System.DateTimeOffset.MinValue" />보다 작습니다.  
  
또는 
결과 <see cref="T:System.DateTimeOffset" /> 값이 <see cref="F:System.DateTimeOffset.MaxValue" />보다 큽니다.</exception>
        <altmember cref="M:System.DateTimeOffset.Add(System.TimeSpan)" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">날짜 및 시간에 대한 산술 연산 수행</related>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Equality(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">비교할 첫 번째 개체입니다.</param>
        <param name="right">비교할 두 번째 개체입니다.</param>
        <summary>지정 된 두 결정 <see cref="T:System.DateTimeOffset" /> 개체가 동일한 시각을 나타내는지 합니다.</summary>
        <returns><see langword="true" /> 둘 다 <see cref="T:System.DateTimeOffset" /> 개체가 같으면 <see cref="P:System.DateTimeOffset.UtcDateTime" /> ; 값이 고, 그렇지 <see langword="false" />합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.DateTimeOffset.op_Equality%2A> 메서드 정의 작업에 대 한 같음 연산자의 <xref:System.DateTimeOffset> 개체입니다. 다음과 같은 코드 수 있도록 합니다.  
  
 [!code-csharp[System.DateTimeOffset.Operators#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#2)]
 [!code-vb[System.DateTimeOffset.Operators#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#2)]  
  
 평가 하기 전에 합니다 `left` 고 `right` 같음 연산자의 두 피연산자는 utc (협정 세계시)를 모두 값으로 변환 합니다. 작업은 다음과 같습니다.  
  
 [!code-csharp[System.DateTimeOffset.Syntax#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#4)]
 [!code-vb[System.DateTimeOffset.Syntax#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#4)]  
  
 즉,를 <xref:System.DateTimeOffset.op_Equality%2A> 메서드 확인 여부를 두 <xref:System.DateTimeOffset> 개체 시간 단일 지점을 나타냅니다. 날짜 및 시간 아니고 오프셋 직접 비교 됩니다. 두 개의 지 여부를 결정 <xref:System.DateTimeOffset> 개체 같은 시간을 나타내고 값이 동일한 오프셋을 사용 하 여를 <xref:System.DateTimeOffset.EqualsExact%2A> 메서드.  
  
 이 연산자에 대 한 해당 메서드는 <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="Overload:System.DateTimeOffset.Equals" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_GreaterThan(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( &gt; ) : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="left &gt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">비교할 첫 번째 개체입니다.</param>
        <param name="right">비교할 두 번째 개체입니다.</param>
        <summary>같은지 확인 <see cref="T:System.DateTimeOffset" /> 개체 보다 큰지 (나 보다 이후)는 지정 된 두 번째 <see cref="T:System.DateTimeOffset" /> 개체입니다.</summary>
        <returns><see langword="true" /> 경우는 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 의 값 <paramref name="left" /> 보다 크면 합니다 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 값 <paramref name="right" />고, 그렇지 않으면 <see langword="false" />합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.DateTimeOffset.op_GreaterThan%2A> 메서드 정의 대 한 연산자 보다 큼 연산의 <xref:System.DateTimeOffset> 개체입니다. 다음과 같은 코드 수 있도록 합니다.  
  
 [!code-csharp[System.DateTimeOffset.Operators#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#3)]
 [!code-vb[System.DateTimeOffset.Operators#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#3)]  
  
 사용자 지정 연산자를 지원 하지 않는 언어를 호출할 수는 <xref:System.DateTimeOffset.Compare%2A> 메서드 대신 합니다. 호출할 수도 있습니다는 <xref:System.DateTimeOffset.op_GreaterThan%2A> 메서드를 직접 다음 예제와 같이 보여 줍니다.  
  
 [!code-vb[System.DateTimeOffset.Operators#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#4)]  
  
 평가 하기 전에 합니다 `left` 및 `right` 피연산자를 연산자 utc (협정 세계시)를 모두 값으로 변환 합니다. 작업은 다음과 같습니다.  
  
 [!code-csharp[System.DateTimeOffset.Syntax#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#5)]
 [!code-vb[System.DateTimeOffset.Syntax#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#5)]  
  
 이 연산자에 대 한 해당 메서드는 <xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_GreaterThanOrEqual(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( &gt;= ) : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="left &gt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">비교할 첫 번째 개체입니다.</param>
        <param name="right">비교할 두 번째 개체입니다.</param>
        <summary>같은지 확인 <see cref="T:System.DateTimeOffset" /> 초 보다 크거나 개체가 지정한 <see cref="T:System.DateTimeOffset" /> 개체입니다.</summary>
        <returns><see langword="true" /> 경우는 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 의 값 <paramref name="left" /> 보다 이후 이거나 동일 합니다 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 값 <paramref name="right" />고, 그렇지 않으면 <see langword="false" />합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.DateTimeOffset.op_GreaterThan%2A> 메서드는 보다 크거나 같음 연산자에 대 한 작업을 정의 <xref:System.DateTimeOffset> 개체입니다. 다음과 같은 코드 수 있도록 합니다.  
  
 [!code-csharp[System.DateTimeOffset.Operators#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#5)]
 [!code-vb[System.DateTimeOffset.Operators#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#5)]  
  
 사용자 지정 연산자를 지원 하지 않는 언어를 호출할 수는 <xref:System.DateTimeOffset.Compare%2A> 메서드 대신 합니다. 일부 언어는 <xref:System.DateTimeOffset.op_GreaterThanOrEqual%2A> 메서드를 직접 다음 예제와 같이 보여 줍니다.  
  
 [!code-vb[System.DateTimeOffset.Operators#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#6)]  
  
 평가 하기 전에 합니다 `left` 및 `right` 피연산자를 연산자 utc (협정 세계시)를 모두 값으로 변환 합니다. 작업은 다음과 같습니다.  
  
 [!code-csharp[System.DateTimeOffset.Syntax#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#6)]
 [!code-vb[System.DateTimeOffset.Syntax#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#6)]  
  
 이 연산자에 대 한 해당 메서드는 <xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator DateTimeOffset (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Implicit(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Implicit(System.DateTime)~System.DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator DateTimeOffset(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : DateTime -&gt; DateTimeOffset" Usage="System.DateTimeOffset.op_Implicit dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">변환할 개체입니다.</param>
        <summary>암시적 변환을 정의 <see cref="T:System.DateTime" /> 개체를 <see cref="T:System.DateTimeOffset" /> 개체입니다.</summary>
        <returns>변환된 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.op_Implicit%2A> 메서드를 사용 하면 컴파일러가 자동으로 변환 하는 <xref:System.DateTime> 개체를 <xref:System.DateTimeOffset> 가 명시적 캐스트 연산자 (C#) 또는 (Visual Basic)에서는 변환 함수를 호출 하지 않고 개체. 데이터가 손실 되지를 throw 하지 않는 확대 변환 정의 <xref:System.OverflowException>합니다. <xref:System.DateTimeOffset.op_Implicit%2A> 메서드에서 다음 가능한 같은 코드를 실행 합니다.  
  
 [!code-csharp[System.DateTimeOffset.Operators#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#7)]
 [!code-vb[System.DateTimeOffset.Operators#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#7)]  
  
 이 메서드는 해당 하는 <xref:System.DateTimeOffset.%23ctor%2A> 생성자입니다. 결과의 오프셋 <xref:System.DateTimeOffset> 개체의 값에 따라 달라 집니다 합니다 <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> 의 속성을 `dateTime` 매개 변수:  
  
-   경우 값을 <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> 속성은 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>의 시간과 날짜를 <xref:System.DateTimeOffset> 개체 집합입니다 `dateTime`, 및 해당 <xref:System.DateTimeOffset.Offset%2A> 속성이 0으로 설정 되어 합니다.  
  
-   경우의 값을 <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> 속성은 <xref:System.DateTimeKind.Local?displayProperty=nameWithType> 또는 <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>의 시간과 날짜를 <xref:System.DateTimeOffset> 개체 집합입니다 `dateTime`, 및 해당 <xref:System.DateTimeOffset.Offset%2A> 속성은 로컬 시스템의 현재 표준 시간대의 오프셋으로 설정 됩니다.  
  
 이 연산자에 대 한 해당 메서드는 <xref:System.DateTimeOffset.%23ctor%28System.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">오프셋을 적용한 결과인 UTC(협정 세계시) 날짜 및 시간이 <see cref="F:System.DateTimeOffset.MinValue" />보다 빠릅니다.  
  
또는 
오프셋을 적용한 결과인 UTC 날짜 및 시간이 <see cref="F:System.DateTimeOffset.MaxValue" />보다 늦습니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Inequality(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="System.DateTimeOffset.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">비교할 첫 번째 개체입니다.</param>
        <param name="right">비교할 두 번째 개체입니다.</param>
        <summary>지정 된 두 결정 <see cref="T:System.DateTimeOffset" /> 시간에 다른 시점으로 개체를 참조 합니다.</summary>
        <returns><see langword="true" /> 경우 <paramref name="left" /> 하 고 <paramref name="right" /> 동일 없는 <see cref="P:System.DateTimeOffset.UtcDateTime" /> ; 값이 고, 그렇지 <see langword="false" />합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.DateTimeOffset.op_Inequality%2A> 같지 않음 연산자에 대 한 작업을 정의 하는 메서드 <xref:System.DateTimeOffset> 개체입니다. 반대 결과를 항상 반환 <xref:System.DateTimeOffset.op_Equality%2A>합니다. <xref:System.DateTimeOffset.op_Inequality%2A> 메서드를 사용 하면 다음과 같은 코드가 있습니다.  
  
 [!code-csharp[System.DateTimeOffset.Operators#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#8)]
 [!code-vb[System.DateTimeOffset.Operators#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#8)]  
  
 평가 하기 전에 합니다 `left` 고 `right` 같음 연산자의 두 피연산자는 utc (협정 세계시)를 모두 값으로 변환 합니다. 작업은 다음과 같습니다.  
  
 [!code-csharp[System.DateTimeOffset.Syntax#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#4)]
 [!code-vb[System.DateTimeOffset.Syntax#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#4)]  
  
 즉, 합니다 <xref:System.DateTimeOffset.op_Inequality%2A> 메서드를 결정 하는지 여부를 두 <xref:System.DateTimeOffset> 개체에에서 다른 시점을 나타냅니다. 날짜 및 시간 아니고 오프셋 직접 비교 됩니다.  
  
 사용자 지정 연산자를 지원 하지 않는 언어를 호출할 수는 <xref:System.DateTimeOffset.Compare%2A> 메서드 대신 합니다. 또한 일부 언어를 호출할 수도 있습니다는 <xref:System.DateTimeOffset.op_Inequality%2A> 메서드를 직접 다음 예제와 같이 보여 줍니다.  
  
 [!code-vb[System.DateTimeOffset.Operators#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#9)]  
  
 이 연산자에 대 한 해당 메서드는 <xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_LessThan(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( &lt; ) : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="left &lt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">비교할 첫 번째 개체입니다.</param>
        <param name="right">비교할 두 번째 개체입니다.</param>
        <summary>같은지 확인 <see cref="T:System.DateTimeOffset" /> 미만 두 번째 지정 된 개체 <see cref="T:System.DateTimeOffset" /> 개체입니다.</summary>
        <returns><see langword="true" /> 경우는 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 값 <paramref name="left" /> 이전의 합니다 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 값 <paramref name="right" />고, 그렇지 않으면 <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.DateTimeOffset.op_LessThan%2A> 메서드를 보다 작음 연산자에 대 한 작업 정의 <xref:System.DateTimeOffset> 개체입니다. 다음과 같은 코드 수 있도록 합니다.  
  
 [!code-csharp[System.DateTimeOffset.Operators#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#10)]
 [!code-vb[System.DateTimeOffset.Operators#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#10)]  
  
 평가 하기 전에 합니다 `left` 고 `right` 피연산자를 연산자 두 피연산자를 utc (협정 세계시)로 변환 합니다. 작업은 다음과 같습니다.  
  
 [!code-csharp[System.DateTimeOffset.Syntax#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#8)]
 [!code-vb[System.DateTimeOffset.Syntax#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#8)]  
  
 사용자 지정 연산자를 지원 하지 않는 언어를 호출할 수는 <xref:System.DateTimeOffset.Compare%2A> 메서드 대신 합니다. 또한 일부 언어를 호출할 수도 있습니다는 <xref:System.DateTimeOffset.op_LessThan%2A> 메서드를 직접 다음 예제와 같이 보여 줍니다.  
  
 [!code-vb[System.DateTimeOffset.Operators#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#11)]  
  
 이 연산자에 대 한 해당 메서드는 <xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_LessThanOrEqual(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( &lt;= ) : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="left &lt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">비교할 첫 번째 개체입니다.</param>
        <param name="right">비교할 두 번째 개체입니다.</param>
        <summary>같은지 확인 <see cref="T:System.DateTimeOffset" /> 미만 두 번째 지정 된 개체 <see cref="T:System.DateTimeOffset" /> 개체입니다.</summary>
        <returns><see langword="true" /> 경우는 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 값 <paramref name="left" /> 이전의 합니다 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 값 <paramref name="right" />고, 그렇지 않으면 <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.DateTimeOffset.op_LessThanOrEqual%2A> 메서드 정의의 작업에 대 한 운영자에 게 less than 또는 equal <xref:System.DateTimeOffset> 개체입니다. 다음과 같은 코드 수 있도록 합니다.  
  
 [!code-csharp[System.DateTimeOffset.Operators#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#12)]
 [!code-vb[System.DateTimeOffset.Operators#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#12)]  
  
 사용자 지정 연산자를 지원 하지 않는 언어를 호출할 수는 <xref:System.DateTimeOffset.Compare%2A> 메서드 대신 합니다. 일부 언어는 <xref:System.DateTimeOffset.op_LessThanOrEqual%2A> 메서드를 직접 다음 예제와 같이 보여 줍니다.  
  
 [!code-vb[System.DateTimeOffset.Operators#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#13)]  
  
 평가 하기 전에 합니다 `left` 및 `right` 피연산자를 연산자 utc (협정 세계시)를 모두 값으로 변환 합니다. 작업은 다음과 같습니다.  
  
 [!code-csharp[System.DateTimeOffset.Syntax#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#9)]
 [!code-vb[System.DateTimeOffset.Syntax#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#9)]  
  
 이 연산자에 대 한 해당 메서드는 <xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Subtraction">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>지정 된 뺍니다 <see cref="T:System.DateTimeOffset" /> 또는 <see cref="T:System.TimeSpan" /> 에서 개체를 <see cref="T:System.DateTimeOffset" /> 개체입니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static TimeSpan operator - (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_Subtraction(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (left As DateTimeOffset, right As DateTimeOffset) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan operator -(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( - ) : DateTimeOffset * DateTimeOffset -&gt; TimeSpan" Usage="left - right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">피감수입니다.</param>
        <param name="right">감수입니다.</param>
        <summary>한 <see cref="T:System.DateTimeOffset" /> 개체를 다른 개체에서 빼서 시간 간격을 생성합니다.</summary>
        <returns><paramref name="left" />와 <paramref name="right" /> 사이의 차이를 나타내는 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.DateTimeOffset.op_Subtraction%2A> 메서드 정의 대해 빼기 연산을 <xref:System.DateTimeOffset> 개체입니다. 다음과 같은 코드 수 있도록 합니다.  
  
 [!code-csharp[System.DateTimeOffset.Operators#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#14)]
 [!code-vb[System.DateTimeOffset.Operators#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#14)]  
  
 사용자 지정 연산자 및 연산자 오버 로드를 지원 하지 않는 언어를 호출할 수는 <xref:System.DateTimeOffset.Subtract%28System.DateTimeOffset%29?displayProperty=nameWithType> 메서드 대신 합니다.  
  
 이 연산자에 대 한 해당 메서드는 <xref:System.DateTimeOffset.Subtract%28System.TimeSpan%29?displayProperty=nameWithType>합니다.]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.Subtract(System.DateTimeOffset)" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">날짜 및 시간에 대한 산술 연산 수행</related>
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static DateTimeOffset operator - (DateTimeOffset dateTimeOffset, TimeSpan timeSpan);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Subtraction(valuetype System.DateTimeOffset dateTimeOffset, valuetype System.TimeSpan timeSpan) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.TimeSpan)" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset operator -(DateTimeOffset dateTimeOffset, TimeSpan timeSpan);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="F#" Value="static member ( - ) : DateTimeOffset * TimeSpan -&gt; DateTimeOffset" Usage="dateTimeOffset - timeSpan" FrameworkAlternate="netframework-2.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-3.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C#" Value="public static DateTimeOffset operator - (DateTimeOffset dateTimeTz, TimeSpan timeSpan);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Subtraction(valuetype System.DateTimeOffset dateTimeTz, valuetype System.TimeSpan timeSpan) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset operator -(DateTimeOffset dateTimeTz, TimeSpan timeSpan);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="F#" Value="static member ( - ) : DateTimeOffset * TimeSpan -&gt; DateTimeOffset" Usage="dateTimeTz - timeSpan" FrameworkAlternate="netframework-2.0;netstandard-2.1" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.TimeSpan)" FrameworkAlternate="netframework-2.0;dotnet-uwp-10.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="dateTimeTz" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
        <Parameter Name="timeSpan" Type="System.TimeSpan" Index="1" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">뺄 대상 날짜 및 시간 개체입니다.</param>
        <param name="dateTimeTz">뺄 대상 날짜 및 시간 개체입니다.</param>
        <param name="timeSpan">뺄 시간 간격입니다.</param>
        <summary>지정된 날짜와 시간에서 지정된 시간 간격을 빼서 새 날짜와 시간을 생성합니다.</summary>
        <returns><paramref name="dateTimeOffset" />에서 <paramref name="timeSpan" />을 뺀 값과 같은 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.DateTimeOffset.op_Subtraction%2A> 메서드 정의 대해 빼기 연산을 <xref:System.DateTimeOffset> 개체입니다. 다음과 같은 코드 수 있도록 합니다.  
  
 [!code-csharp[System.DateTimeOffset.Operators#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#15)]
 [!code-vb[System.DateTimeOffset.Operators#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#15)]  
  
 사용자 지정 연산자 및 연산자 오버 로드를 지원 하지 않는 언어를 호출할 수는 <xref:System.DateTimeOffset.Subtract%28System.TimeSpan%29?displayProperty=nameWithType> 메서드 대신 합니다.  
  
 이 연산자에 대 한 해당 메서드는 <xref:System.DateTimeOffset.Subtract%28System.TimeSpan%29?displayProperty=nameWithType>합니다.]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">결과 <see cref="T:System.DateTimeOffset" /> 값이 <see cref="F:System.DateTimeOffset.MinValue" />보다 작거나 <see cref="F:System.DateTimeOffset.MaxValue" />보다 큽니다.</exception>
        <altmember cref="M:System.DateTimeOffset.Subtract(System.TimeSpan)" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">날짜 및 시간에 대한 산술 연산 수행</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>날짜 및 시간에 대한 지정된 문자열 표현을 해당 <see cref="T:System.DateTimeOffset" />으로 변환합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]        

         ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Parse (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset Parse(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (input As String) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset Parse(System::String ^ input);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; DateTimeOffset" Usage="System.DateTimeOffset.Parse input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">변환할 날짜 및 시간이 포함된 문자열입니다.</param>
        <summary>날짜, 시간 및 오프셋의 지정된 문자열 표현을 해당 <see cref="T:System.DateTimeOffset" />으로 변환합니다.</summary>
        <returns><paramref name="input" />에 포함된 날짜 및 시간에 해당하는 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Parse%28System.String%29> 임의의 순서로 나타날 수 있으며 공백으로 구분 되는 세 가지 요소를 사용 하 여 문자열 구문 분석 합니다. 이러한 세 가지 요소는 다음 표에 나와 있는 것 처럼 됩니다.  
  
|요소|예제|  
|-------------|-------------|  
|\<날짜 >|"2/10/2007"|  
|\<Time>|"PM 1시 02분: 03"|  
|\<오프셋 >|"-7:30"|  
  
 이러한 각 요소는 선택 사항 이지만 \<오프셋 > 단독으로 나타날 수 없습니다. 와 함께 제공 되어야 합니다 \<날짜 > 또는 \<시간 >. 경우 \<날짜 > 없는 경우 기본값은 현재 날짜입니다. 경우 \<시간 > 없는 경우 기본 값이 오전 12시: 00입니다. 하는 경우 \<날짜 > 있지만 해당 연도의 두 자리 숫자만 구성의 값을 기반으로 현재 문화권의 현재 달력의 연간 변환할는 <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> 속성입니다. 경우 \<오프셋 > 없는 경우 기본 값은 현지 표준 시간대의 오프셋입니다. \<오프셋 > 나타낼 수는 음수 또는 양수 오프셋을 utc (협정 세계시). 두 경우 모두 \<오프셋 > 부호 기호를 포함 해야 합니다.  
  
 `input` 의 형식 지정 정보를 사용 하 여 문자열 구문 분석 되는 <xref:System.Globalization.DateTimeFormatInfo> 현재 문화권에 대 한 초기화 되는 개체. 현재 문화권의 서식에 해당 하지 않는 지정 된 형식을 포함 하는 문자열을 구문 분석을 사용 하 여를 <xref:System.DateTimeOffset.ParseExact%2A> 메서드 및 형식 지정자를 제공 합니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.DateTimeOffset.Parse%28System.String%29> 여러 날짜 및 시간 문자열 구문 분석 하는 방법입니다. 예제 문화권이 en 인 시스템에서 2007 년 3 월 22 일에서 출력에 포함 됩니다-주세요.  
  
 [!code-csharp[System.DateTimeOffset.Parse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/cs/ParseExamples.cs#1)]
 [!code-vb[System.DateTimeOffset.Parse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/vb/ParseExamples.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">오프셋이 14시간보다 크거나 -14시간보다 작습니다.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.FormatException"><paramref name="input" />에 날짜 및 시간의 유효한 문자열 표현이 없습니다.  
  
또는 
 <paramref name="input" />에 날짜 또는 시간이 없는 오프셋 값의 문자열 표시가 있습니다.</exception>
        <altmember cref="Overload:System.DateTimeOffset.TryParse" />
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Parse (string input, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset Parse(string input, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Parse(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (input As String, formatProvider As IFormatProvider) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset Parse(System::String ^ input, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider -&gt; DateTimeOffset" Usage="System.DateTimeOffset.Parse (input, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="input">변환할 날짜 및 시간이 포함된 문자열입니다.</param>
        <param name="formatProvider"><paramref name="input" />에 대한 문화권별 서식 정보를 제공하는 개체입니다.</param>
        <summary>지정된 문화권별 형식 정보를 사용하여 날짜 및 시간의 지정된 문자열 표현을 해당 <see cref="T:System.DateTimeOffset" />으로 변환합니다.</summary>
        <returns><paramref name="formatProvider" />에 의해 지정된 대로 <paramref name="input" />에 포함된 날짜 및 시간에 해당하는 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 임의의 순서로 나타날 수 있으며 공백으로 구분 되는 세 가지 요소를 사용 하 여 문자열을 구문 분석 합니다. 이러한 세 가지 요소는 다음 표에 표시 됩니다.  
  
|요소|예제|  
|-------------|-------------|  
|\<날짜 >|"2/10/2007"|  
|\<Time>|"PM 1시 02분: 03"|  
|\<오프셋 >|"-7:30"|  
  
 이러한 각 요소는 선택 사항 이지만 \<오프셋 > 단독으로 나타날 수 없습니다. 와 함께 제공 되어야 합니다 \<날짜 > 또는 \<시간 >. 경우 \<날짜 > 없는 경우 기본값은 현재 날짜입니다. 경우 \<날짜 > 있지만 해당 연도의 두 자리 숫자만 구성, 연간으로 변환 됩니다 합니다 `provider` 의 값을 기반으로 하는 매개 변수의 현재 달력을 <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> 속성. 경우 \<시간 > 없는 경우 기본 값이 오전 12시: 00입니다. 경우 \<오프셋 > 없는 경우 기본 값은 현지 표준 시간대의 오프셋입니다. \<오프셋 > 나타낼 수는 음수 또는 양수 오프셋을 utc (협정 세계시). 두 경우 모두 \<오프셋 > 부호 기호를 포함 해야 합니다.  
  
 이러한 세 가지 요소 형식의 정의한는 `formatProvider` 매개 변수를 다음 중 하나일 수 있습니다.  
  
-   A <xref:System.Globalization.CultureInfo> 서식 지정에 사용 되는 문화권을 나타내는 개체를 `input` 매개 변수입니다. 합니다 <xref:System.Globalization.DateTimeFormatInfo> 에서 반환 된 개체를 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> 속성 정의에 사용 된 서식을 `input`합니다.  
  
-   <xref:System.Globalization.DateTimeFormatInfo> 날짜 및 시간 데이터 형식을 정의 하는 개체입니다.  
  
 하는 경우 `formatprovider` 됩니다 `null`, <xref:System.Globalization.CultureInfo> 현재 문화권에 해당 하는 개체를 사용 합니다.  
  
 에 사용 되는 양수 또는 음수 기호 \<오프셋 > 여야 + 또는-합니다. 정의 되지 않은 <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A> 또는 <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> 의 속성을 <xref:System.Globalization.NumberFormatInfo> 의 개체를 `formatProvider` 매개 변수.  
  
   
  
## Examples  
 다음 예제에서는 날짜를 구문 분석 및 시간 문자열 fr-fr 문화권에 대 한 서식이 지정 된 로컬 시스템을 사용 하 여 표시 하는 기본 en-우리 문화권입니다.  
  
 [!code-csharp[System.DateTimeOffset.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/cs/ParseExamples.cs#2)]
 [!code-vb[System.DateTimeOffset.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/vb/ParseExamples.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">오프셋이 14시간보다 크거나 -14시간보다 작습니다.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.FormatException"><paramref name="input" />에 날짜 및 시간의 유효한 문자열 표현이 없습니다.  
  
또는 
 <paramref name="input" />에 날짜 또는 시간이 없는 오프셋 값의 문자열 표시가 있습니다.</exception>
        <altmember cref="Overload:System.DateTimeOffset.TryParse" />
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Parse (ReadOnlySpan&lt;char&gt; input, IFormatProvider formatProvider = null, System.Globalization.DateTimeStyles styles = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset Parse(valuetype System.ReadOnlySpan`1&lt;char&gt; input, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (input As ReadOnlySpan(Of Char), Optional formatProvider As IFormatProvider = null, Optional styles As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTimeOffset" />
      <MemberSignature Language="F#" Value="static member Parse : ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.Parse (input, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <param name="styles">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Parse (string input, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset Parse(string input, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (input As String, formatProvider As IFormatProvider, styles As DateTimeStyles) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset Parse(System::String ^ input, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles);" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.Parse (input, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="input">변환할 날짜 및 시간이 포함된 문자열입니다.</param>
        <param name="formatProvider"><paramref name="input" />에 대한 문화권별 서식 정보를 제공하는 개체입니다.</param>
        <param name="styles"><paramref name="input" />에 사용할 수 있는 형식을 나타내는 열거형 값의 비트 조합입니다. 지정할 일반적인 값은 <see cref="F:System.Globalization.DateTimeStyles.None" />입니다.</param>
        <summary>지정된 문화권별 형식 정보 및 서식 지정 스타일을 사용하여 날짜 및 시간의 지정된 문자열 표현을 해당 <see cref="T:System.DateTimeOffset" />으로 변환합니다.</summary>
        <returns><paramref name="formatProvider" /> 및 <paramref name="styles" />에 의해 지정된 대로 <paramref name="input" />에 포함된 날짜 및 시간과 같은 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 임의의 순서로 나타날 수 있으며 공백으로 구분 되는 세 가지 요소를 사용 하 여 문자열을 구문 분석 합니다. 이러한 세 가지 요소는 다음 표에 표시 됩니다.  
  
|요소|예제|  
|-------------|-------------|  
|\<날짜 >|"2/10/2007"|  
|\<Time>|"PM 1시 02분: 03"|  
|\<오프셋 >|"-7:30"|  
  
 이러한 각 요소는 선택 사항 이지만 \<오프셋 > 단독으로 나타날 수 없습니다. 와 함께 제공 되어야 합니다 \<날짜 > 또는 \<시간 >. 경우 \<날짜 > 없는 경우 기본값은 현재 날짜입니다. 경우 \<날짜 > 있지만 해당 연도의 두 자리 숫자만 구성, 연간으로 변환 됩니다 합니다 `provider` 의 값을 기반으로 하는 매개 변수의 현재 달력을 <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> 속성. 경우 \<시간 > 없는 경우 기본 값이 오전 12시: 00입니다. 경우 \<오프셋 > 없는 경우 기본 값은 현지 표준 시간대의 오프셋 또는 <xref:System.TimeSpan.Zero?displayProperty=nameWithType> 경우는 <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> 또는 <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> 에 값이 지정는 `styles` 매개 변수입니다. 경우 \<오프셋 >가 나타낼 수는 음수 또는 양수 오프셋을 utc (협정 세계시). 두 경우 모두 \<오프셋 > 부호 기호를 포함 해야 합니다.  
  
 이러한 세 가지 요소 형식의 정의한는 `formatProvider` 매개 변수를 다음 중 하나일 수 있습니다.  
  
-   A <xref:System.Globalization.CultureInfo> 서식 지정에 사용 되는 문화권을 나타내는 개체를 `input` 매개 변수입니다. 합니다 <xref:System.Globalization.DateTimeFormatInfo> 에서 반환 된 개체를 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> 속성 정의에 사용 된 서식을 `input`합니다.  
  
-   <xref:System.Globalization.DateTimeFormatInfo> 날짜 및 시간 데이터 형식을 정의 하는 개체입니다.  
  
 각 요소는 선행 또는 후행 공백의 묶을 수도 하며 \<날짜 > 및 \<시간 > 요소 내부 공백 문자를 포함할 수 있습니다 (예 6::   00:00). 만 \<오프셋 > 구성 요소 내부 공백 문자를 포함할 수 없습니다.  
  
 하는 경우 `formatprovider` 됩니다 `null`, <xref:System.Globalization.CultureInfo> 현재 문화권에 해당 하는 개체를 사용 합니다.  
  
 에 사용 되는 양수 또는 음수 기호 \<오프셋 > 여야 + 또는-합니다. 정의 되지 않은 <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A> 또는 <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> 의 속성을 <xref:System.Globalization.NumberFormatInfo> 에서 반환 된 개체는 `formatProvider` 매개 변수.  
  
 다음 표에서의 멤버는 <xref:System.Globalization.DateTimeStyles?displayProperty=nameWithType> 지원 되는 열거형입니다.  
  
|DateTimeStyles 멤버|설명|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|표시 되는 문자열을 구문 분석 `input` 필요한 UTC로 변환 하는 경우. 문자열을 구문 분석 한 다음에 해당 하는 것을 <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType> 메서드의 반환된 된 <xref:System.DateTimeOffset> 개체입니다.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|유효 하더라도이 값은 무시 됩니다. 내부 공백이 허용 됩니다 합니다 \<날짜 > 및 \<시간 > 요소입니다.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|유효 하더라도이 값은 무시 됩니다. 구문 분석된 된 문자열의 각 구성 요소 앞에 선행 공백은 허용 됩니다.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|유효 하더라도이 값은 무시 됩니다. 구문 분석된 된 문자열의 각 구성 요소 앞에 후행 공백을 허용 됩니다.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|이것은 기본적인 동작입니다. 더 제한적인 제공 하 여 재정의할 수 없습니다 <xref:System.Globalization.DateTimeStyles> 열거형 값을 같은 <xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType>합니다.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|경우 이면를 `input` 매개 변수 없는 \<오프셋 > 요소를 현지 표준 시간대의 오프셋을 제공 해야 합니다. 이 기본적으로는 <xref:System.DateTimeOffset.Parse%2A> 메서드.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|경우 이면를 `input` 매개 변수 없는 \<오프셋 > 요소인 UTC 오프셋 (00:00) 제공 해야 합니다.|  
|<xref:System.Globalization.DateTimeStyles.None>|유효 하지만이 값이 무시 되 고 영향을 주지 않습니다.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|때문에 합니다 <xref:System.DateTimeOffset> 구조에 포함 되지 않습니다는 `Kind` 속성을이 값 효과가 없습니다.|  
  
 만 <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> 값 지원 되지 않습니다. <xref:System.ArgumentException> 이 값에 포함 된 경우 throw 되는 `styles` 매개 변수입니다.  
  
   
  
## Examples  
 다음 예제에서는 전달의 효과 보여 줍니다.는 <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>, <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>, 및 <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> 값을 합니다 `styles` 의 매개 변수는 <xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> 메서드.  
  
 [!code-csharp[System.DateTimeOffset.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/cs/ParseExamples.cs#3)]
 [!code-vb[System.DateTimeOffset.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/vb/ParseExamples.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">오프셋이 14시간보다 크거나 -14시간보다 작습니다.  
  
또는 
 <paramref name="styles" />은 유효한 <see cref="T:System.Globalization.DateTimeStyles" /> 값이 아닙니다.  
  
또는 
 <paramref name="styles" />에 지원되지 않는 <see cref="T:System.Globalization.DateTimeStyles" /> 값이 포함되어 있습니다.  
  
또는 
 <paramref name="styles" />는 함께 사용할 수 없는 <see cref="T:System.Globalization.DateTimeStyles" /> 값을 포함합니다.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.FormatException"><paramref name="input" />에 날짜 및 시간의 유효한 문자열 표현이 없습니다.  
  
또는 
 <paramref name="input" />에 날짜 또는 시간이 없는 오프셋 값의 문자열 표시가 있습니다.</exception>
        <altmember cref="Overload:System.DateTimeOffset.TryParse" />
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>날짜 및 시간에 대한 지정된 문자열 표현을 해당 <see cref="T:System.DateTimeOffset" />으로 변환합니다. 문자열 표현의 형식이 지정된 형식과 정확하게 일치해야 합니다.</summary>
        <format type="text/markdown"><![CDATA[  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]        

         ]]></format>
      </Docs>
    </MemberGroup>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (string input, string format, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(string input, string format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As String, format As String, formatProvider As IFormatProvider) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ParseExact(System::String ^ input, System::String ^ format, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string * IFormatProvider -&gt; DateTimeOffset" Usage="System.DateTimeOffset.ParseExact (input, format, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="input">변환할 날짜 및 시간이 포함된 문자열입니다.</param>
        <param name="format"><paramref name="input" />의 예상 형식을 정의하는 형식 지정자입니다.</param>
        <param name="formatProvider"><paramref name="input" />에 대한 문화권별 서식 지정 정보를 제공하는 개체입니다.</param>
        <summary>지정된 형식 및 문화권별 형식 정보를 사용하여 날짜 및 시간의 지정된 문자열 표현을 해당 <see cref="T:System.DateTimeOffset" />으로 변환합니다. 문자열 표현의 형식이 지정된 형식과 정확하게 일치해야 합니다.</summary>
        <returns><paramref name="format" /> 및 <paramref name="formatProvider" />에 의해 지정된 대로 <paramref name="input" />에 포함된 날짜 및 시간과 같은 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29> 하 여 정의 된 형식에서 이어야 하는 날짜의 문자열 표현을 구문 분석 하는 메서드는 `format` 매개 변수입니다. 또한 해야 하는 합니다 \<날짜 >, \<시간 >, 및 \<오프셋 > 날짜 및 시간의 문자열 표현의 요소에 지정 된 순서에 표시 `format`합니다. 경우는 `input` 문자열이이 일치 하지 않습니다 `format` 매개 변수는 메서드가 throw를 <xref:System.FormatException>입니다.  반면에 <xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> 메서드 형식 공급자가 인식 하는 형식 중 하나는 날짜의 문자열 표현을 구문 분석 <xref:System.Globalization.DateTimeFormatInfo> 개체입니다. <xref:System.DateTimeOffset.Parse%2A> 수도 있습니다는 \<날짜 >, \<시간 >, 및 \<오프셋 > 요소의 순서에 관계 없이 표시할 날짜 및 시간의 문자열 표현입니다.  
  
 합니다 `format` 매개 변수는 단일 표준 형식 지정자 또는의 필수 형식을 정의 하는 하나 이상의 사용자 지정 형식 지정자를 포함 하는 문자열을 `input` 매개 변수입니다. 유효한 서식 코드에 대 한 자세한 내용은 참조 하세요 [표준 날짜 및 시간 서식 문자열](~/docs/standard/base-types/standard-date-and-time-format-strings.md) 하 고 [사용자 지정 날짜 및 시간 형식 문자열](~/docs/standard/base-types/custom-date-and-time-format-strings.md)합니다. 경우 `format` 포함 된 `z`, `zz`, 또는 `zzz` 오프셋에 있어야 함을 나타내려면 사용자 지정 형식 지정자 `input`, 해당 오프셋은 음수 기호 또는 양수 기호를 포함 해야 합니다. 부호 없는 경우 메서드에서 throw 한 <xref:System.FormatException>합니다.  
  
 경우 `format` 되어 있어야 `input` 날짜가 들어에 시간이 아닌 결과 <xref:System.DateTimeOffset> 개체를 할당 하는 시간을 자정 (0: 00:00). 경우 `format` 되어 있어야 `input` 시간만 날짜가 아닌 결과 포함 <xref:System.DateTimeOffset> 개체를 로컬 시스템의 현재 날짜를 할당 합니다. 하는 경우 `format` 것을 요구 하지 않는 `input` 결과 오프셋을 포함 <xref:System.DateTimeOffset> 개체의 로컬 시스템 표준 시간대 오프셋으로 할당 됩니다.  
  
 특정 날짜 및 시간 기호 및에서 사용 되는 문자열 `input` 가 정의한 합니다 `formatProvider` 매개 변수를의 정확한 형식을 그대로 `input` 경우 `format` 표준 서식 지정자 문자열. `formatProvider` 매개 변수는 다음 중 하나일 수 있습니다.  
  
-   A <xref:System.Globalization.CultureInfo> 문화권을 나타내는 개체에 따라 `input` 해석 됩니다. <xref:System.Globalization.DateTimeFormatInfo> 반환한 개체가 해당 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> 속성 정의 기호 및 서식을 `input`합니다.  
  
-   <xref:System.Globalization.DateTimeFormatInfo> 날짜 및 시간 데이터 형식을 정의 하는 개체입니다.  
  
 하는 경우 `formatprovider` 됩니다 `null`, <xref:System.Globalization.CultureInfo> 현재 문화권에 해당 하는 개체를 사용 합니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> 여러 날짜 및 시간 문자열 구문 분석 하는 표준 및 사용자 지정 형식 지정자 및 고정 문화권을 사용 하 여 메서드.  
  
 [!code-csharp[System.DateTimeOffset.ParseExact#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/cs/ParseExact.cs#1)]
 [!code-vb[System.DateTimeOffset.ParseExact#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/vb/ParseExact.vb#1)]  

다음 예제에서는 구문 분석 하를 준수 해야 하는 문자열의 배열을 [ISO 8601](~/docs/standard/base-types/standard-date-and-time-format-strings.md#the-round-trip-o-o-format-specifier)합니다. 예제의 출력으로 선행 또는 후행 공백이 있는 문자열 마찬가지로 문자열 범위를 벗어나는 날짜 및 시간 요소를 사용 하 여 성공적으로 구문 분석에 실패 합니다.

[!code-csharp[Parsing an ISO 8601 string](~/samples/snippets/csharp/api/system/datetimeoffset/parseexact/parseexact-iso8601.cs)]
[!code-vb[Parsing an ISO 8601 string](~/samples/snippets/visualbasic/api/system/datetimeoffset/parseexact/parseexact-iso8601.vb)]


 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">오프셋이 14시간보다 크거나 -14시간보다 작습니다.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" />가 <see langword="null" />인 경우  
  
또는 
 <paramref name="format" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.FormatException"><paramref name="input" />가 빈 문자열("")인 경우  
  
또는 
 <paramref name="input" />에 날짜 및 시간의 유효한 문자열 표현이 없습니다.  
  
또는 
 <paramref name="format" />이 빈 문자열인 경우  
  
또는 
<paramref name="input" />의 시간 구성 요소와 AM/PM 지정자가 일치하지 않습니다.</exception>
        <block subset="none" type="usage"><para>에 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], <see cref="Overload:System.DateTimeOffset.ParseExact" /> 메서드가 throw를 <see cref="T:System.FormatException" /> 구문 분석 될 문자열 경우 시간 구성 요소 및 계약에 없는 AM/PM 지정자를 포함 합니다. 에 [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] 이전 버전에서는 AM/PM 지정자는 무시 됩니다.</para></block>
        <altmember cref="Overload:System.DateTimeOffset.TryParseExact" />
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">표준 날짜 및 시간 형식 문자열</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">사용자 지정 날짜 및 시간 형식 문자열</related>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;char&gt; format, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), formatProvider As IFormatProvider, Optional styles As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTimeOffset" />
      <MemberSignature Language="F#" Value="static member ParseExact : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.ParseExact (input, format, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="input">날짜 및 시간을 나타내는 문자 범위입니다.</param>
        <param name="format"><paramref name="input" />의 예상 형식을 정의하는 형식 지정자를 포함하는 문자 범위입니다.</param>
        <param name="formatProvider"><paramref name="input" />에 대한 문화권별 서식 정보를 제공하는 개체입니다.</param>
        <param name="styles"><paramref name="input" />에 사용할 수 있는 형식을 나타내는 열거형 값의 비트 조합입니다.</param>
        <summary>지정된 형식, 문화권별 형식 정보 및 스타일을 사용하여 날짜 및 시간을 나타내는 문자 범위를 해당 <see cref="T:System.DateTimeOffset" />으로 변환합니다. 날짜 및 시간 표현의 형식이 지정된 형식과 정확하게 일치해야 합니다.</summary>
        <returns><paramref name="format" />, <paramref name="formatProvider" /> 및 <paramref name="styles" /> 매개 변수에 의해 지정된 대로 <paramref name="input" /> 매개 변수에 포함된 날짜 및 시간과 같은 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

이 메서드를 정의한 형식 이어야 하는 날짜를 나타내는 문자 범위를 구문 분석 된 `format` 매개 변수입니다. 또한 해야 하는 합니다 \<날짜 >, \<시간 >, 및 \<오프셋 > 날짜 및 시간의 문자열 표현의 요소에 지정 된 순서에 표시 `format`합니다. 하는 경우 `input` 와 일치 하지 않습니다는 `format` 패턴에는 메서드가 throw를 <xref:System.FormatException>입니다.  반면에 <xref:System.DateTimeOffset.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)?displayProperty=nameWithType> 메서드 형식 공급자가 인식 하는 형식 중 하나는 날짜의 문자열 표현을 구문 분석 <xref:System.Globalization.DateTimeFormatInfo> 개체입니다. <xref:System.DateTimeOffset.Parse%2A> 수도 있습니다는 \<날짜 >, \<시간 >, 및 \<오프셋 > 요소의 순서에 관계 없이 표시할 날짜 및 시간의 문자열 표현입니다.  
  
 합니다 `format` 매개 변수는 단일 문자 표준 형식 지정자 또는의 필수 형식을 정의 하는 하나 이상의 사용자 지정 형식 지정자를 포함 하는 문자 범위는 `input` 매개 변수입니다. 유효한 서식 코드에 대 한 자세한 내용은 참조 하세요 [표준 날짜 및 시간 서식 문자열](~/docs/standard/base-types/standard-date-and-time-format-strings.md) 하 고 [사용자 지정 날짜 및 시간 형식 문자열](~/docs/standard/base-types/custom-date-and-time-format-strings.md)합니다. 경우 `format` 포함 된 `z`, `zz`, 또는 `zzz` 오프셋에 있어야 함을 나타내려면 사용자 지정 형식 지정자 `input`, 해당 오프셋은 음수 기호 또는 양수 기호를 포함 해야 합니다. 부호 없는 경우 메서드에서 throw 한 <xref:System.FormatException>합니다.  
  
 경우 `format` 되어 있어야 `input` 날짜가 들어에 시간이 아닌 결과 <xref:System.DateTimeOffset> 개체를 할당 하는 시간을 자정 (0: 00:00). 경우 `format` 되어 있어야 `input` 시간만 날짜가 아닌 결과 포함 <xref:System.DateTimeOffset> 개체를 로컬 시스템의 현재 날짜를 할당 합니다. 하는 경우 `format` 것을 요구 하지 않는 `input` 결과 오프셋을 포함 <xref:System.DateTimeOffset> 개체의 로컬 시스템 표준 시간대 오프셋으로 할당 됩니다.  
  
 특정 날짜 및 시간 기호 및에서 사용 되는 문자열 `input` 가 정의한 합니다 `formatProvider` 매개 변수를의 정확한 형식을 그대로 `input` 경우 `format` 는 표준 형식 지정자. `formatProvider` 매개 변수는 다음 중 하나일 수 있습니다.  
  
-   A <xref:System.Globalization.CultureInfo> 문화권을 나타내는 개체에 따라 `input` 해석 됩니다. <xref:System.Globalization.DateTimeFormatInfo> 반환한 개체가 해당 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> 속성 정의 기호 및 서식을 `input`합니다.  
  
-   <xref:System.Globalization.DateTimeFormatInfo> 날짜 및 시간 데이터 형식을 정의 하는 개체입니다.  
  
 하는 경우 `formatprovider` 됩니다 `null`, <xref:System.Globalization.CultureInfo> 현재 문화권에 해당 하는 개체를 사용 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">오프셋이 14시간보다 크거나 -14시간보다 작습니다.  
또는  
<paramref name="styles" /> 매개 변수에 지원되지 않는 값이 포함되어 있습니다.  
또는  
<paramref name="styles" /> 매개 변수에 함께 사용할 수 없는 <see cref="T:System.Globalization.DateTimeStyles" /> 값이 들어 있습니다.</exception>
        <exception cref="T:System.FormatException"><paramref name="input" />은 비어 있는 문자 범위입니다.  
 또는 <paramref name="input" />에 날짜 및 시간의 유효한 문자열 표현이 없습니다.  
 또는 <paramref name="format" />은 비어 있는 문자 범위입니다.  
 또는  
 <paramref name="input" />의 시간 구성 요소와 AM/PM 지정자가 일치하지 않습니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (ReadOnlySpan&lt;char&gt; input, string[] formats, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As ReadOnlySpan(Of Char), formats As String(), formatProvider As IFormatProvider, Optional styles As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTimeOffset" />
      <MemberSignature Language="F#" Value="static member ParseExact : ReadOnlySpan&lt;char&gt; * string[] * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.ParseExact (input, formats, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="formats" Type="System.String[]" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="input">변환할 날짜 및 시간을 포함하는 문자 범위입니다.</param>
        <param name="formats"><paramref name="input" />의 예상 형식을 정의하는 형식 지정자의 배열입니다.</param>
        <param name="formatProvider"><paramref name="input" />에 대한 문화권별 형식 지정 정보를 제공하는 개체입니다.</param>
        <param name="styles"><paramref name="input" />에 사용할 수 있는 형식을 나타내는 열거형 값의 비트 조합입니다.</param>
        <summary>지정된 형식, 문화권별 형식 정보 및 스타일을 사용하여 지정된 날짜와 시간의 문자열 표현을 해당 <see cref="T:System.DateTimeOffset" />으로 변환합니다. 날짜 및 시간 표현의 형식은 지정된 형식 중 하나와 정확히 일치해야 합니다.</summary>
        <returns><paramref name="formats" />, <paramref name="formatProvider" /> 및 <paramref name="styles" /> 매개 변수에 의해 지정된 대로 <paramref name="input" /> 매개 변수에 포함된 날짜 및 시간과 같은 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 
에 할당 된 패턴 중 하 나와 일치 하는 날짜를 나타내는 문자 범위를 구문 분석 하는이 메서드는 `formats` 매개 변수입니다. 하는 경우 `input` 정의한 변형 중 하나를 사용 하 여 이러한 패턴 중 하 나와 일치 하지 않습니다 합니다 `styles` 매개 변수는 메서드가 throw를 <xref:System.FormatException>입니다. 비교 하는 것 외 `input` 여러 서식 지정 패턴을이 오버 로드 동일 하 게 동작 합니다 <xref:System.DateTimeOffset.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)?displayProperty=nameWithType> 메서드.  
  
 합니다 `formats` 매개 변수는 요소가 포함 된 단일 표준 형식 지정자 또는 하나 이상의 사용자 지정 형식 지정자의 가능한 패턴을 정의 하는 문자열 배열은 `input` 매개 변수입니다. 메서드가 호출 되 면 `input` 이러한 패턴 중 하 나와 일치 해야 합니다. 유효한 서식 코드에 대 한 자세한 내용은 참조 하세요 [표준 날짜 및 시간 서식 문자열](~/docs/standard/base-types/standard-date-and-time-format-strings.md) 하 고 [사용자 지정 날짜 및 시간 형식 문자열](~/docs/standard/base-types/custom-date-and-time-format-strings.md)합니다. 경우에 일치 하는 요소의 `formats` 포함 합니다 `z`를 `zz`, 또는 `zzz` 오프셋에 있어야 함을 나타내려면 사용자 지정 형식 지정자 `input`, 해당 오프셋은 음수 기호 또는 양수 기호를 포함 해야 합니다. 부호 없는 경우 메서드에서 throw 한 <xref:System.FormatException>합니다.  
  
> [!IMPORTANT]
>  사용 하는 `formats` 여러 형식을 지정 하려면이 오버 로드의 시간과 날짜를 입력 하면 많은 사용자가 경험 하는 번거로움을 줄이는 데 도움이 됩니다. 특히 여러 개의 입력된 패턴을 정의 하는 기능 포함 하거나 부족 한 월, 일, 시간, 분 및 초를 앞에 오는 0 수 있는 날짜와 시간 표현을 처리 하도록 애플리케이션을 수 있습니다.
  
 경우에 일치 하는 요소의 `formats` 되어 있어야 `input` 날짜만 시간이 아닌 결과 포함 <xref:System.DateTimeOffset> 개체를 할당 하는 시간을 자정 (0: 00:00). 경우에 일치 하는 요소의 `formats` 해야 `input` 시간만 날짜가 아닌 결과 포함 <xref:System.DateTimeOffset> 개체를 로컬 시스템의 현재 날짜를 할당 합니다. 경우에 일치 하는 요소의 `formats` 것을 요구 하지 않는 `input` 결과의 오프셋에 오프셋을 포함 <xref:System.DateTimeOffset> 개체의 값에 따라 달라 집니다는 `styles` 매개 변수입니다. 하는 경우 `styles` 포함 <xref:System.Globalization.DateTimeStyles.AssumeLocal>, 현지 표준 시간대의 오프셋에 할당 되는 <xref:System.DateTimeOffset> 개체입니다. 경우 `styles` 포함 <xref:System.Globalization.DateTimeStyles.AssumeUniversal>, utc (협정 세계시) 오프셋 또는 + 00시 할당 되는 <xref:System.DateTimeOffset> 개체입니다. 두 값을 지정 하는 경우 현지 표준 시간대의 오프셋이 사용 됩니다.  
  
 특정 날짜 및 시간 기호 및에서 사용 되는 문자열 `input` 가 정의한는 `formatProvider` 매개 변수입니다. 정확한 형식의 마찬가지 `input`이면 일치 하는 요소의 `formats` 표준 서식 지정자 문자열. `formatProvider` 매개 변수는 다음 중 하나일 수 있습니다.  
  
-   A <xref:System.Globalization.CultureInfo> 문화권을 나타내는 개체에 따라 `input` 해석 됩니다. 합니다 <xref:System.Globalization.DateTimeFormatInfo> 에서 반환 된 개체를 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> 속성 정의 기호 및 서식을 `input`합니다.  
  
-   <xref:System.Globalization.DateTimeFormatInfo> 날짜 및 시간 데이터 형식을 정의 하는 개체입니다.  
  
 하는 경우 `formatprovider` 됩니다 `null`, <xref:System.Globalization.CultureInfo> 현재 문화권에 해당 하는 개체를 사용 합니다.  
  
 `styles` 매개 변수는 공백이 허용 되는지 여부를 정의 입력된 문자열에서 나타내고 어떻게 명시적 오프셋된 구성 요소가 없는 문자열 구문 분석 되 고 구문 분석 작업의 일환으로 UTC 변환을 지원 합니다. 모든 멤버를 <xref:System.Globalization.DateTimeStyles> 열거형을 제외 하 고 지 <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>합니다. 다음 표에서 각 지원 되는 멤버의 효과 보여 줍니다.  
  
|`DateTimeStyles` 멤버|동작|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|구문 분석 `input` 필요한 UTC로 변환 하는 경우. 문자열을 구문 분석 한 다음에 해당 하는 것은 <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType> 메서드의 반환된 된 <xref:System.DateTimeOffset> 개체입니다.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|경우에 일치 하는 요소의 `formats` 것을 요구 하지 않는 `input` 반환 되는 오프셋된 값이 포함 되어 <xref:System.DateTimeOffset> 개체의 현지 표준 시간대 오프셋에 지정 됩니다. 기본값입니다.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|경우에 일치 하는 요소의 `formats` 것을 요구 하지 않는 `input` 반환 되는 오프셋된 값이 포함 되어 <xref:System.DateTimeOffset> 개체의 UTC 오프셋 (+ 00시)에 지정 됩니다.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|허용 `input` 지정 되지 않은 내부 공백 포함 하도록 `format`합니다. 추가 공백 (오프셋)을 제외 하 고 개별 구성 요소 내에서 날짜 및 시간 구성 요소 사이 나타날 수 있습니다 및 문자열을 구문 분석 하는 경우 무시 됩니다.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|허용 `input` 지정 되지 않은 선행 공백을 포함 하도록 `formats`합니다. 이러한 문자열을 구문 분석 하는 경우 무시 됩니다.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|허용 `input` 후행 공백을 지정 되지 않은 포함 하도록 `formats`합니다. 이러한 문자열을 구문 분석 하는 경우 무시 됩니다.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|허용 `input` 지정 되지 않은 앞, 후행 공백 및 내부 공백을 넣을 수 `formats`입니다. 에 있는 해당 요소에 지정 되지 않은 모든 추가 공백 문자 `formats` 문자열을 구문 분석 하는 경우 무시 됩니다.|  
|<xref:System.Globalization.DateTimeStyles.None>|에 추가 공백이 허용 되지 않습니다 나타냅니다 `input`합니다. 공백이의 특정 요소에 지정 된 대로 나타나야 합니다. `formats` 일치 항목이 발생 합니다. 이것은 기본적인 동작입니다.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|아무런 영향을 주지는 <xref:System.DateTimeOffset> 구조에 포함 되지 않습니다는 `Kind` 속성입니다.|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">오프셋이 14시간보다 크거나 -14시간보다 작습니다.  
또는 <paramref name="styles" />에 지원되지 않는 값이 포함되어 있습니다.  
또는  
<paramref name="styles" /> 매개 변수에 함께 사용할 수 없는 <see cref="T:System.Globalization.DateTimeStyles" /> 값이 들어 있습니다.</exception>
        <exception cref="T:System.FormatException"><paramref name="input" />은 비어 있는 문자 범위입니다.  
또는 <paramref name="input" />에 날짜 및 시간의 유효한 문자열 표현이 없습니다.  
또는  
올바른 형식 지정자를 포함하는 <paramref name="formats" />의 요소가 없습니다.  
또는  
<paramref name="input" />의 시간 구성 요소와 AM/PM 지정자가 일치하지 않습니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (string input, string format, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(string input, string format, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As String, format As String, formatProvider As IFormatProvider, styles As DateTimeStyles) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ParseExact(System::String ^ input, System::String ^ format, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.ParseExact (input, format, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="input">변환할 날짜 및 시간이 포함된 문자열입니다.</param>
        <param name="format"><paramref name="input" />의 예상 형식을 정의하는 형식 지정자입니다.</param>
        <param name="formatProvider"><paramref name="input" />에 대한 문화권별 서식 지정 정보를 제공하는 개체입니다.</param>
        <param name="styles"><paramref name="input" />에 사용할 수 있는 형식을 나타내는 열거형 값의 비트 조합입니다.</param>
        <summary>지정된 형식, 문화권별 형식 정보 및 스타일을 사용하여 날짜 및 시간의 지정된 문자열 표현을 해당 <see cref="T:System.DateTimeOffset" />으로 변환합니다. 문자열 표현의 형식이 지정된 형식과 정확하게 일치해야 합니다.</summary>
        <returns><paramref name="format" />, <paramref name="formatProvider" /> 및 <paramref name="styles" /> 매개 변수에 의해 지정된 대로 <paramref name="input" /> 매개 변수에 포함된 날짜 및 시간과 같은 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> 하 여 정의 된 형식에서 이어야 하는 날짜의 문자열 표현을 구문 분석 하는 메서드는 `format` 매개 변수입니다. 또한 해야 하는 합니다 \<날짜 >, \<시간 >, 및 \<오프셋 > 날짜 및 시간의 문자열 표현의 요소에 지정 된 순서에 표시 `format`합니다. 경우는 `input` 문자열이 패턴과 일치 하지 않습니다 합니다 `format` 매개 변수를 정의한 변화를 `styles` 매개 변수는 메서드가 throw를 <xref:System.FormatException>합니다.  반면에 <xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> 메서드 형식 공급자가 인식 하는 형식 중 하나는 날짜의 문자열 표현을 구문 분석 <xref:System.Globalization.DateTimeFormatInfo> 개체입니다. <xref:System.DateTimeOffset.Parse%2A> 수도 있습니다는 \<날짜 >, \<시간 >, 및 \<오프셋 > 요소의 순서에 관계 없이 표시할 날짜 및 시간의 문자열 표현입니다.  
  
 합니다 `format` 매개 변수는 단일 표준 형식 지정자 또는의 필수 패턴을 정의 하는 하나 이상의 사용자 지정 형식 지정자를 포함 하는 문자열을 `input` 매개 변수입니다. 유효한 서식 코드에 대 한 자세한 내용은 참조 하세요 [표준 날짜 및 시간 서식 문자열](~/docs/standard/base-types/standard-date-and-time-format-strings.md) 하 고 [사용자 지정 날짜 및 시간 형식 문자열](~/docs/standard/base-types/custom-date-and-time-format-strings.md)합니다. 경우 `format` 포함 된 `z`, `zz`, 또는 `zzz` 오프셋에 있어야 함을 나타내려면 사용자 지정 형식 지정자 `input`, 해당 오프셋은 음수 기호 또는 양수 기호를 포함 해야 합니다. 부호 없는 경우 메서드에서 throw 한 <xref:System.FormatException>합니다.  
  
 경우 `format` 되어 있어야 `input` 날짜가 들어에 시간이 아닌 결과 <xref:System.DateTimeOffset> 개체를 할당 하는 시간을 자정 (0: 00:00). 경우 `format` 되어 있어야 `input` 시간만 날짜가 아닌 결과 포함 <xref:System.DateTimeOffset> 개체를 로컬 시스템의 현재 날짜를 할당 합니다. 하는 경우 `format` 것을 요구 하지 않는 `input` 결과의 오프셋에 오프셋을 포함 <xref:System.DateTimeOffset> 개체의 값에 따라 달라 집니다는 `styles` 매개 변수입니다. 하는 경우 `styles` 포함 <xref:System.Globalization.DateTimeStyles.AssumeLocal>, 현지 표준 시간대의 오프셋에 할당 되는 <xref:System.DateTimeOffset> 개체입니다. 경우 `styles` 포함 <xref:System.Globalization.DateTimeStyles.AssumeUniversal>, utc (협정 세계시) 오프셋 또는 + 00시 할당 되는 <xref:System.DateTimeOffset> 개체입니다. 두 값을 지정 하는 경우 현지 표준 시간대의 오프셋이 사용 됩니다.  
  
 특정 날짜 및 시간 기호 및에서 사용 되는 문자열 `input` 가 정의한는 `formatProvider` 매개 변수입니다. 정확한 형식의 마찬가지 `input`이면 `format` 표준 서식 지정자 문자열입니다. `formatProvider` 매개 변수는 다음 중 하나일 수 있습니다.  
  
-   A <xref:System.Globalization.CultureInfo> 문화권을 나타내는 개체에 따라 `input` 해석 됩니다. 합니다 <xref:System.Globalization.DateTimeFormatInfo> 에서 반환 된 개체를 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> 속성 정의 기호 및 서식을 `input`합니다.  
  
-   <xref:System.Globalization.DateTimeFormatInfo> 날짜 및 시간 데이터 형식을 정의 하는 개체입니다.  
  
 하는 경우 `formatprovider` 됩니다 `null`, <xref:System.Globalization.CultureInfo> 현재 문화권에 해당 하는 개체를 사용 합니다.  
  
 `styles` 매개 변수는 공백이 허용 되는지 여부를 정의 입력된 문자열에서 나타내고 어떻게 명시적 오프셋된 구성 요소가 없는 문자열 구문 분석 되 고 구문 분석 작업의 일환으로 UTC 변환을 지원 합니다. 모든 멤버를 <xref:System.Globalization.DateTimeStyles> 열거형을 제외 하 고 지 <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>합니다. 다음 표에서 각 지원 되는 멤버의 효과 보여 줍니다.  
  
|`DateTimeStyles` 멤버|동작|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|구문 분석 `input` 필요한 UTC로 변환 하는 경우. 문자열을 구문 분석 한 다음에 해당 하는 것은 <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType> 메서드의 반환된 된 <xref:System.DateTimeOffset> 개체입니다.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|하는 경우 `format` 것을 요구 하지 않는 `input` 반환 되는 오프셋된 값이 포함 되어 <xref:System.DateTimeOffset> 개체의 현지 표준 시간대 오프셋에 지정 됩니다. 기본값입니다.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|하는 경우 `format` 것을 요구 하지 않는 `input` 반환 되는 오프셋된 값이 포함 되어 <xref:System.DateTimeOffset> 개체의 UTC 오프셋 (+ 00시)에 지정 됩니다.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|허용 `input` 지정 되지 않은 내부 공백 포함 하도록 `format`합니다. 추가 공백 날짜 및 시간 구성 요소 간 및 개별 구성 요소 내에 나타날 수 있습니다 및 문자열을 구문 분석 하는 경우 무시 됩니다.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|허용 `input` 지정 되지 않은 선행 공백을 포함 하도록 `format`합니다. 이러한 문자열을 구문 분석 하는 경우 무시 됩니다.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|허용 `input` 후행 공백을 지정 되지 않은 포함 하도록 `format`합니다. 이러한 문자열을 구문 분석 하는 경우 무시 됩니다.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|허용 `input` 지정 되지 않은 앞, 후행 공백 및 내부 공백을 넣을 수 `format`입니다. 에 지정 되지 않은 모든 추가 공백 문자 `format` 문자열을 구문 분석 하는 경우 무시 됩니다.|  
|<xref:System.Globalization.DateTimeStyles.None>|에 추가 공백이 허용 되지 않습니다 나타냅니다 `input`합니다. 공백 문자에 지정 된 대로 표시 되어야 합니다 `format`합니다. 이것은 기본적인 동작입니다.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|아무런 영향을 주지는 <xref:System.DateTimeOffset> 구조에 포함 되지 않습니다는 `Kind` 속성입니다.|  
  
   
  
## Examples  
 다음 예제에서는 합니다 <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> 표준 및 사용자 지정 형식 지정자, 고정 문화권 및 다양 한 메서드 <xref:System.Globalization.DateTimeStyles> 여러 날짜 및 시간 문자열 구문 분석 하는 값입니다.  
  
 [!code-csharp[System.DateTimeOffset.ParseExact#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/cs/ParseExact.cs#2)]
 [!code-vb[System.DateTimeOffset.ParseExact#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/vb/ParseExact.vb#2)]  

다음 예제에서는 여러 가지 <xref:System.Globalization.DateTimeStyles> 값을 준수 해야 하는 문자열의 배열을 구문 분석할 [ISO 8601](~/docs/standard/base-types/standard-date-and-time-format-strings.md#the-round-trip-o-o-format-specifier)합니다. 예제의 출력에서 볼 수 있듯이 적절 한 형식으로 된 문자열을 하는 경우 구문 분석 실패 합니다.

- 공백 및 적절 한 있을 <xref:System.Globalization.DateTimeStyles> 플래그 (같은 <xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWithType> 메서드 호출에 제공 되지 않았습니다.

- 범위를 벗어나는 날짜 및 시간 요소를 포함 합니다.

UTC 오프셋을 지정 하지 않는 문자열의 현지 표준 시간대 오프셋에 있는 것으로 간주 됩니다 (이 경우-07:00) 하지 않는 한를 <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> 플래그는 메서드 호출에서 제공 됩니다. 이 경우 협정 세계시를 간주 됩니다.

[!code-csharp[Parsing ISO 8601 strings](~/samples/snippets/csharp/api/system/datetimeoffset/parseexact/parseexact-iso8601-2.cs)]
[!code-vb[Parsing ISO 8601 strings](~/samples/snippets/visualbasic/api/system/datetimeoffset/parseexact/parseexact-iso8601-2.vb)]


 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">오프셋이 14시간보다 크거나 -14시간보다 작습니다.  
  
또는 
<paramref name="styles" /> 매개 변수에 지원되지 않는 값이 포함되어 있습니다.  
  
또는 
<paramref name="styles" /> 매개 변수에 함께 사용할 수 없는 <see cref="T:System.Globalization.DateTimeStyles" /> 값이 들어 있습니다.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" />가 <see langword="null" />인 경우  
  
또는 
 <paramref name="format" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.FormatException"><paramref name="input" />가 빈 문자열("")인 경우  
  
또는 
 <paramref name="input" />에 날짜 및 시간의 유효한 문자열 표현이 없습니다.  
  
또는 
 <paramref name="format" />이 빈 문자열인 경우  
  
또는 
<paramref name="input" />의 시간 구성 요소와 AM/PM 지정자가 일치하지 않습니다.</exception>
        <block subset="none" type="usage"><para>에 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], <see cref="Overload:System.DateTimeOffset.ParseExact" /> 메서드가 throw를 <see cref="T:System.FormatException" /> 구문 분석 될 문자열 경우 시간 구성 요소 및 계약에 없는 AM/PM 지정자를 포함 합니다. 에 [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] 이전 버전에서는 AM/PM 지정자는 무시 됩니다.</para></block>
        <altmember cref="Overload:System.DateTimeOffset.TryParseExact" />
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">표준 날짜 및 시간 형식 문자열</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">사용자 지정 날짜 및 시간 형식 문자열</related>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (string input, string[] formats, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(string input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As String, formats As String(), formatProvider As IFormatProvider, styles As DateTimeStyles) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ParseExact(System::String ^ input, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string[] * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.ParseExact (input, formats, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="input">변환할 날짜 및 시간이 포함된 문자열입니다.</param>
        <param name="formats"><paramref name="input" />의 예상 형식을 정의하는 형식 지정자의 배열입니다.</param>
        <param name="formatProvider"><paramref name="input" />에 대한 문화권별 형식 지정 정보를 제공하는 개체입니다.</param>
        <param name="styles"><paramref name="input" />에 사용할 수 있는 형식을 나타내는 열거형 값의 비트 조합입니다.</param>
        <summary>지정된 형식, 문화권별 형식 정보 및 스타일을 사용하여 지정된 날짜와 시간의 문자열 표현을 해당 <see cref="T:System.DateTimeOffset" /> 표현으로 변환합니다. 문자열 표시의 형식은 지정된 형식 중 하나와 정확히 일치해야 합니다.</summary>
        <returns><paramref name="formats" />, <paramref name="formatProvider" /> 및 <paramref name="styles" /> 매개 변수에 의해 지정된 대로 <paramref name="input" /> 매개 변수에 포함된 날짜 및 시간과 같은 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> 에 할당 된 패턴 중 하 나와 일치 하는 날짜의 문자열 표현을 구문 분석 하는 메서드는 `formats` 매개 변수입니다. 경우는 `input` 문자열이 정의한 변형 중 하나를 사용 하 여 이러한 패턴 중 하 나와 일치 하지 않습니다 합니다 `styles` 매개 변수는 메서드가 throw를 <xref:System.FormatException>입니다. 비교 하는 것 외 `input` 여러 서식 지정 패턴을이 오버 로드 동일 하 게 동작 합니다 <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> 메서드.  
  
 합니다 `formats` 매개 변수는 요소가 포함 된 단일 표준 형식 지정자 또는 하나 이상의 사용자 지정 형식 지정자의 가능한 패턴을 정의 하는 문자열 배열은 `input` 매개 변수입니다. 메서드가 호출 되 면 `input` 이러한 패턴 중 하 나와 일치 해야 합니다. 유효한 서식 코드에 대 한 자세한 내용은 참조 하세요 [표준 날짜 및 시간 서식 문자열](~/docs/standard/base-types/standard-date-and-time-format-strings.md) 하 고 [사용자 지정 날짜 및 시간 형식 문자열](~/docs/standard/base-types/custom-date-and-time-format-strings.md)합니다. 경우에 일치 하는 요소의 `formats` 포함 합니다 `z`를 `zz`, 또는 `zzz` 오프셋에 있어야 함을 나타내려면 사용자 지정 형식 지정자 `input`, 해당 오프셋은 음수 기호 또는 양수 기호를 포함 해야 합니다. 부호 없는 경우 메서드에서 throw 한 <xref:System.FormatException>합니다.  
  
> [!IMPORTANT]
>  사용 하는 `formats` 여러 형식을 지정 하려면이 오버 로드의 시간과 날짜를 입력 하면 많은 사용자가 경험 하는 번거로움을 줄이는 데 도움이 됩니다. 특히 여러 개의 입력된 패턴을 정의 하는 기능 포함 하거나 부족 한 월, 일, 시간, 분 및 초를 앞에 오는 0 수 있는 날짜와 시간 표현을 처리 하도록 애플리케이션을 수 있습니다. 예제는이 보여 줍니다.  
  
 경우에 일치 하는 요소의 `formats` 되어 있어야 `input` 날짜만 시간이 아닌 결과 포함 <xref:System.DateTimeOffset> 개체를 할당 하는 시간을 자정 (0: 00:00). 경우에 일치 하는 요소의 `formats` 해야 `input` 시간만 날짜가 아닌 결과 포함 <xref:System.DateTimeOffset> 개체를 로컬 시스템의 현재 날짜를 할당 합니다. 경우에 일치 하는 요소의 `formats` 것을 요구 하지 않는 `input` 결과의 오프셋에 오프셋을 포함 <xref:System.DateTimeOffset> 개체의 값에 따라 달라 집니다는 `styles` 매개 변수입니다. 하는 경우 `styles` 포함 <xref:System.Globalization.DateTimeStyles.AssumeLocal>, 현지 표준 시간대의 오프셋에 할당 되는 <xref:System.DateTimeOffset> 개체입니다. 경우 `styles` 포함 <xref:System.Globalization.DateTimeStyles.AssumeUniversal>, utc (협정 세계시) 오프셋 또는 + 00시 할당 되는 <xref:System.DateTimeOffset> 개체입니다. 두 값을 지정 하는 경우 현지 표준 시간대의 오프셋이 사용 됩니다.  
  
 특정 날짜 및 시간 기호 및에서 사용 되는 문자열 `input` 가 정의한는 `formatProvider` 매개 변수입니다. 정확한 형식의 마찬가지 `input`이면 일치 하는 요소의 `formats` 표준 서식 지정자 문자열. `formatProvider` 매개 변수는 다음 중 하나일 수 있습니다.  
  
-   A <xref:System.Globalization.CultureInfo> 문화권을 나타내는 개체에 따라 `input` 해석 됩니다. 합니다 <xref:System.Globalization.DateTimeFormatInfo> 에서 반환 된 개체를 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> 속성 정의 기호 및 서식을 `input`합니다.  
  
-   <xref:System.Globalization.DateTimeFormatInfo> 날짜 및 시간 데이터 형식을 정의 하는 개체입니다.  
  
 하는 경우 `formatprovider` 됩니다 `null`, <xref:System.Globalization.CultureInfo> 현재 문화권에 해당 하는 개체를 사용 합니다.  
  
 `styles` 매개 변수는 공백이 허용 되는지 여부를 정의 입력된 문자열에서 나타내고 어떻게 명시적 오프셋된 구성 요소가 없는 문자열 구문 분석 되 고 구문 분석 작업의 일환으로 UTC 변환을 지원 합니다. 모든 멤버를 <xref:System.Globalization.DateTimeStyles> 열거형을 제외 하 고 지 <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>합니다. 다음 표에서 각 지원 되는 멤버의 효과 보여 줍니다.  
  
|`DateTimeStyles` 멤버|동작|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|구문 분석 `input` 필요한 UTC로 변환 하는 경우. 문자열을 구문 분석 한 다음에 해당 하는 것은 <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType> 메서드의 반환된 된 <xref:System.DateTimeOffset> 개체입니다.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|경우에 일치 하는 요소의 `formats` 것을 요구 하지 않는 `input` 반환 되는 오프셋된 값이 포함 되어 <xref:System.DateTimeOffset> 개체의 현지 표준 시간대 오프셋에 지정 됩니다. 기본값입니다.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|경우에 일치 하는 요소의 `formats` 것을 요구 하지 않는 `input` 반환 되는 오프셋된 값이 포함 되어 <xref:System.DateTimeOffset> 개체의 UTC 오프셋 (+ 00시)에 지정 됩니다.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|허용 `input` 지정 되지 않은 내부 공백 포함 하도록 `format`합니다. 추가 공백 (오프셋)을 제외 하 고 개별 구성 요소 내에서 날짜 및 시간 구성 요소 사이 나타날 수 있습니다 및 문자열을 구문 분석 하는 경우 무시 됩니다.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|허용 `input` 지정 되지 않은 선행 공백을 포함 하도록 `formats`합니다. 이러한 문자열을 구문 분석 하는 경우 무시 됩니다.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|허용 `input` 후행 공백을 지정 되지 않은 포함 하도록 `formats`합니다. 이러한 문자열을 구문 분석 하는 경우 무시 됩니다.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|허용 `input` 지정 되지 않은 앞, 후행 공백 및 내부 공백을 넣을 수 `formats`입니다. 에 있는 해당 요소에 지정 되지 않은 모든 추가 공백 문자 `formats` 문자열을 구문 분석 하는 경우 무시 됩니다.|  
|<xref:System.Globalization.DateTimeStyles.None>|에 추가 공백이 허용 되지 않습니다 나타냅니다 `input`합니다. 공백이의 특정 요소에 지정 된 대로 나타나야 합니다. `formats` 일치 항목이 발생 합니다. 이것은 기본적인 동작입니다.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|아무런 영향을 주지는 <xref:System.DateTimeOffset> 구조에 포함 되지 않습니다는 `Kind` 속성입니다.|  
  
   
  
## Examples  
 다음 예제에서는 날짜 및 시간 오프셋된 값의 문자열 표현에 대 한 여러 입력된 형식을 정의 하 고 다음 사용자가 입력 한 문자열을 전달 합니다 <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> 메서드.  
  
 [!code-csharp[System.DateTimeOffset.ParseExact#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/cs/ParseExact.cs#3)]
 [!code-vb[System.DateTimeOffset.ParseExact#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/vb/ParseExact.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">오프셋이 14시간보다 크거나 -14시간보다 작습니다.  
  
또는 
 <paramref name="styles" />에 지원되지 않는 값이 포함되어 있습니다.  
  
또는 
<paramref name="styles" /> 매개 변수에 함께 사용할 수 없는 <see cref="T:System.Globalization.DateTimeStyles" /> 값이 들어 있습니다.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.FormatException"><paramref name="input" />가 빈 문자열("")인 경우  
  
또는 
 <paramref name="input" />에 날짜 및 시간의 유효한 문자열 표현이 없습니다.  
  
또는 
올바른 형식 지정자를 포함하는 <paramref name="formats" />의 요소가 없습니다.  
  
또는 
<paramref name="input" />의 시간 구성 요소와 AM/PM 지정자가 일치하지 않습니다.</exception>
        <block subset="none" type="usage"><para>에 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], <see cref="Overload:System.DateTimeOffset.ParseExact" /> 메서드가 throw를 <see cref="T:System.FormatException" /> 구문 분석 될 문자열 경우 시간 구성 요소 및 계약에 없는 AM/PM 지정자를 포함 합니다. 에 [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] 이전 버전에서는 AM/PM 지정자는 무시 됩니다.</para></block>
        <altmember cref="Overload:System.DateTimeOffset.TryParseExact" />
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">표준 날짜 및 시간 형식 문자열</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">사용자 지정 날짜 및 시간 형식 문자열</related>
      </Docs>
    </Member>
    <Member MemberName="Second">
      <MemberSignature Language="C#" Value="public int Second { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Second" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Second" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Second As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Second { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Second : int" Usage="System.DateTimeOffset.Second" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 나타내는 클록 시간의 초 구성 요소를 가져옵니다 <see cref="T:System.DateTimeOffset" /> 개체입니다.</summary>
        <value>초 구성 요소는 <see cref="T:System.DateTimeOffset" /> 개체를 0에서 59 사이의 정수 값으로 표현 합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.DateTimeOffset.Second%2A> 속성의 값에 영향을 받지는 <xref:System.DateTimeOffset.Offset%2A> 속성입니다.  
  
 문자열 표현을 만들 수도 있습니다는 <xref:System.DateTimeOffset> 를 호출 하 여 개체의 두 번째 구성 요소는 <xref:System.DateTimeOffset.ToString%2A> "s" 또는 "ss" 사용자 지정 형식 지정자를 사용 하 여 메서드.  
  
   
  
## Examples  
 초 구성 요소를 표시 하는 다음 예제는 <xref:System.DateTimeOffset> 세 가지 방법으로 개체:  
  
-   값을 검색 하 여 <xref:System.DateTimeOffset.Second%2A> 속성입니다.  
  
-   호출 하 여는 <xref:System.DateTimeOffset.ToString%28System.String%29> 메서드 "s" 서식 지정자를 포함 합니다.  
  
-   호출 하 여는 <xref:System.DateTimeOffset.ToString%28System.String%29> 메서드 "ss" 형식 지정자입니다.  
  
 [!code-csharp[System.DateTimeOffset.Properties#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#14)]
 [!code-vb[System.DateTimeOffset.Properties#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Subtract">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>지정 된 시간이 나 현재에서 기간을 뺍니다 <see cref="T:System.DateTimeOffset" /> 개체입니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public TimeSpan Subtract (DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan Subtract(valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Subtract(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtract (value As DateTimeOffset) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan Subtract(DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.Subtract : DateTimeOffset -&gt; TimeSpan" Usage="dateTimeOffset.Subtract value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="value">뺄 값을 나타내는 개체입니다.</param>
        <summary>특정 날짜와 시간을 나타내는 <see cref="T:System.DateTimeOffset" /> 값을 현재 <see cref="T:System.DateTimeOffset" /> 개체에서 뺍니다.</summary>
        <returns>두 <see cref="T:System.DateTimeOffset" /> 개체 사이의 간격을 지정하는 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 모두 변환 <xref:System.DateTimeOffset> utc (협정 세계시)로 구분 하는 시간 간격을 계산 하기 전에 개체입니다. 이 비교에 서로 다른 UTC 오프셋 수 있는 영향을 주지를 제거 합니다.  
  
> [!NOTE]
>  사용자 지정 연산자를 지 원하는 언어에 대 한 빼기 연산자를 사용 하 여 날짜 및 시간 뺄셈을 수행할 수 있습니다. 자세한 내용은 참조는 <xref:System.DateTimeOffset.op_Subtraction%2A> 메서드.  
  
 때문에 모두 현재 <xref:System.DateTimeOffset> 개체 또는 `value` 매개 변수는 특정 표준 시간대의 시간과 날짜를 나타내는 <xref:System.DateTimeOffset.Subtract%28System.DateTimeOffset%29> 메서드 날짜 및 시간을 뺄 때 특정 표준 시간대의 조정 규칙을 고려 하지 않습니다.  
  
   
  
## Examples  
 다음 예제를 사용 하는 빼기는 <xref:System.DateTimeOffset.Subtract%28System.DateTimeOffset%29> 메서드.  
  
 [!code-csharp[System.DateTimeOffset.Methods#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#13)]
 [!code-vb[System.DateTimeOffset.Methods#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#13)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">날짜 및 시간에 대한 산술 연산 수행</related>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public DateTimeOffset Subtract (TimeSpan value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset Subtract(valuetype System.TimeSpan value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Subtract(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtract (value As TimeSpan) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset Subtract(TimeSpan value);" />
      <MemberSignature Language="F#" Value="member this.Subtract : TimeSpan -&gt; DateTimeOffset" Usage="dateTimeOffset.Subtract value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="value">뺄 시간 간격입니다.</param>
        <summary>현재 <see cref="T:System.DateTimeOffset" /> 개체에서 지정된 시간 간격을 뺍니다.</summary>
        <returns>현재 <see cref="T:System.DateTimeOffset" /> 개체에서 <paramref name="value" />로 표현된 시간 간격을 빼서 나타낸 날짜 및 시간과 같은 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용할 수는 <xref:System.DateTimeOffset.Subtract%2A> 여러 종류의 단일 작업의 시간 간격 (일, 시, 분, 초 또는 밀리초)을 빼기 위한 방법입니다. 해당 동작은 동일 합니다 <xref:System.DateTimeOffset.op_Subtraction%28System.DateTimeOffset%2CSystem.TimeSpan%29> 빼기 연산자를 정의 하는 메서드. <xref:System.DateTimeOffset> 구조 특수화 된 더하기 메서드도 지원 (같은 <xref:System.DateTimeOffset.AddDays%2A>, <xref:System.DateTimeOffset.AddHours%2A>, 및 <xref:System.DateTimeOffset.AddMinutes%2A>) 빼기 메서드 매개 변수에 음수 값을 할당 하 여 수행할 수 있도록 합니다.  
  
> [!NOTE]
>  이 메서드가 반환 새 <xref:System.DateTimeOffset> 개체입니다. 추가 하 여 현재 개체의 값을 수정 하지는 않습니다 `timeSpan` 날짜 및 시간입니다.  
  
 합니다 <xref:System.DateTimeOffset.Subtract%2A> 메서드는 값의 영향을 주지 않습니다 합니다 <xref:System.DateTimeOffset> 개체의 <xref:System.DateTimeOffset.Offset%2A> 속성입니다. 반환 된 <xref:System.DateTimeOffset> 개체에 원래 개체와 동일한 오프셋입니다.  
  
 때문에 현재 <xref:System.DateTimeOffset> 개체에는 특정 표준 시간대의 시간과 날짜 나타내지는 <xref:System.DateTimeOffset.Subtract%28System.TimeSpan%29> 메서드는 뺄셈을 수행할 때 특정 표준 시간대의 조정 규칙을 고려 하지 않습니다.  
  
   
  
## Examples  
 다음 예제를 사용 하는 빼기는 <xref:System.DateTimeOffset.Subtract%2A> 메서드.  
  
 [!code-csharp[System.DateTimeOffset.Methods#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#14)]
 [!code-vb[System.DateTimeOffset.Methods#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">결과 <see cref="T:System.DateTimeOffset" /> 값이 <see cref="F:System.DateTimeOffset.MinValue" />보다 작습니다.  
  
또는 
결과 <see cref="T:System.DateTimeOffset" /> 값이 <see cref="F:System.DateTimeOffset.MaxValue" />보다 큽니다.</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">날짜 및 시간에 대한 산술 연산 수행</related>
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (obj As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ obj) = IComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">현재 <see cref="T:System.DateTimeOffset" /> 개체와 비교할 개체입니다.</param>
        <summary>현재 값과 비교 <see cref="T:System.DateTimeOffset" /> 동일한 형식의 다른 개체와 개체입니다.</summary>
        <returns>32 비트 부호 있는 정수를 나타냅니다 여부 현재 <see cref="T:System.DateTimeOffset" /> 개체 보다 작은지, 같은지 또는 보다 큰 <paramref name="obj" />입니다. 이 메서드의 반환 값은 다음과 같이 해석됩니다. 
 <list type="table"><listheader><term> 반환 값 
 </term><description> 설명 
 </description></listheader><item><term> 0보다 작음 
 </term><description> 현재 <see cref="T:System.DateTimeOffset" /> 개체는 보다 작은 (빠른) 경우 <paramref name="obj" />합니다.  
  
 </description></item><item><term> 0 
 </term><description> 현재 <see cref="T:System.DateTimeOffset" /> 개체가 같은지 (으로 동일한 지점)를 <paramref name="obj" />입니다.  
  
 </description></item><item><term> 0보다 큼 
 </term><description> 현재 <see cref="T:System.DateTimeOffset" /> 개체는 보다 큰 (늦은) 경우 <paramref name="obj" />합니다.  
  
 </description></item></list></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDeserialization (sender As Object) Implements IDeserializationCallback.OnDeserialization" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System::Object ^ sender) = System::Runtime::Serialization::IDeserializationCallback::OnDeserialization;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="sender">콜백을 시작한 개체입니다. 이 매개 변수의 기능은 현재 구현되지 않았습니다.</param>
        <summary>개체의 deserialization이 완료될 때 실행됩니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="info">데이터로 채울 개체입니다.</param>
        <param name="context">이 serialization의 대상입니다(<see cref="T:System.Runtime.Serialization.StreamingContext" /> 참조).</param>
        <summary>채웁니다를 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 현재를 serialize 하는 데 필요한 데이터를 사용 하 여 개체 <see cref="T:System.DateTimeOffset" /> 개체입니다.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="info" /> 매개 변수가 <see langword="null" />인 경우</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다. 이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</permission>
      </Docs>
    </Member>
    <Member MemberName="Ticks">
      <MemberSignature Language="C#" Value="public long Ticks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Ticks" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Ticks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Ticks As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long Ticks { long get(); };" />
      <MemberSignature Language="F#" Value="member this.Ticks : int64" Usage="System.DateTimeOffset.Ticks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 시간과 날짜를 나타내는 틱 수를 가져옵니다 <see cref="T:System.DateTimeOffset" /> 시간에서 개체입니다.</summary>
        <value>틱 수를 <see cref="T:System.DateTimeOffset" /> 개체의 시계 시간입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.DateTimeOffset.Ticks%2A> 속성의 값에 영향을 받지는 <xref:System.DateTimeOffset.Offset%2A> 속성입니다.  
  
 값을 <xref:System.DateTimeOffset.Ticks%2A> 속성 0001 년 1 월 1 일 12시: 00 자정 이후 경과 된 100 나노초 간격의 수를 나타냅니다 (값 <xref:System.DateTimeOffset.MinValue>). 윤 초에 의해 추가 될 틱은 포함 되지 않습니다. 나노초는; 초의 1 분 초당에서 10 백만 틱 있습니다. 값을 <xref:System.DateTimeOffset.Ticks%2A> 속성에서 범위 `DateTimeOffset.MinValue.Ticks` 에 `DateTimeOffset.MaxValue.Ticks`입니다.  
  
 틱의 수를 할당할 수는 <xref:System.DateTimeOffset> 사용 하 여 개체를 <xref:System.DateTimeOffset.%23ctor%28System.Int64%2CSystem.TimeSpan%29> 생성자 오버 로드 합니다.  
  
   
  
## Examples  
 다음 예제에서는 초기화를 <xref:System.DateTimeOffset> 날짜 2008 년 7 월 1 일에서 틱 수를 어림잡아 개체 1시 23분: 07입니다. 날짜 및 콘솔에 해당 날짜를 나타내는 틱 수를 표시 합니다.  
  
 [!code-csharp[System.DateTimeOffset.Properties#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#15)]
 [!code-vb[System.DateTimeOffset.Properties#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#15)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.UtcDateTime" />
      </Docs>
    </Member>
    <Member MemberName="TimeOfDay">
      <MemberSignature Language="C#" Value="public TimeSpan TimeOfDay { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan TimeOfDay" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.TimeOfDay" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TimeOfDay As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan TimeOfDay { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.TimeOfDay : TimeSpan" Usage="System.DateTimeOffset.TimeOfDay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재는 하루 중 시간을 가져옵니다 <see cref="T:System.DateTimeOffset" /> 개체입니다.</summary>
        <value>자정을 기준으로 경과한 현재 날짜의 시간 간격입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.DateTimeOffset.TimeOfDay%2A> 속성의 값에 영향을 받지는 <xref:System.DateTimeOffset.Offset%2A> 속성입니다.  
  
 <xref:System.DateTimeOffset.TimeOfDay%2A> 의 시간 구성 요소를 반환 하는 속성을 <xref:System.DateTimeOffset> 형식의 개체를 <xref:System.TimeSpan> 개체입니다. 에 해당 하는 것은 <xref:System.DateTime.TimeOfDay%2A?displayProperty=nameWithType> 속성입니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.DateTimeOffset.TimeOfDay%2A> 속성을 시간을 추출 하 고 콘솔에 표시 합니다.  
  
 [!code-csharp[System.DateTimeOffset.Properties#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#16)]
 [!code-vb[System.DateTimeOffset.Properties#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#16)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToFileTime">
      <MemberSignature Language="C#" Value="public long ToFileTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToFileTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToFileTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToFileTime () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToFileTime();" />
      <MemberSignature Language="F#" Value="member this.ToFileTime : unit -&gt; int64" Usage="dateTimeOffset.ToFileTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>현재 <see cref="T:System.DateTimeOffset" /> 개체의 값을 Windows 파일 시간으로 변환합니다.</summary>
        <returns>현재 값 <see cref="T:System.DateTimeOffset" /> 개체에는 Windows 파일 시간으로 표시 합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Windows 파일 시간은 서 기 1601 년 1 월 1 일 자정 12 시 이후 경과한 100 나노초 간격의 수를 나타내는 64 비트 값 (C.E.) UTC (Coordinated Universal Time)입니다. Windows 파일 시간을 사용 하 여 응용 프로그램 액세스를 만들거나 파일을 쓸 때 기록.  
  
 합니다 <xref:System.DateTimeOffset.ToFileTime%2A> 메서드는 현재 변환 <xref:System.DateTimeOffset> 개체의 날짜와 시간을 UTC의 변환을 수행 합니다. 즉, 호출을 <xref:System.DateTimeOffset.ToFileTime%2A> 메서드는 다음 메서드 호출에 해당 합니다.  
  
```csharp
this.ToUtcDateTime().ToFileTime();  
```  
  
```vb  
Me.ToUtcDateTime().ToFileTime()  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">결과 파일 시간이 서 기 1601 년 1 월 1 일 자정 전에 시간과 날짜를 나타내는 것 UTC (Coordinated Universal Time)입니다.</exception>
        <altmember cref="M:System.DateTimeOffset.FromFileTime(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="ToLocalTime">
      <MemberSignature Language="C#" Value="public DateTimeOffset ToLocalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset ToLocalTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToLocalTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLocalTime () As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset ToLocalTime();" />
      <MemberSignature Language="F#" Value="member this.ToLocalTime : unit -&gt; DateTimeOffset" Usage="dateTimeOffset.ToLocalTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>현재 변환 <see cref="T:System.DateTimeOffset" /> 개체는 <see cref="T:System.DateTimeOffset" /> 현지 시간을 나타내는 개체입니다.</summary>
        <returns>현재 시간과 날짜를 나타내는 개체 <see cref="T:System.DateTimeOffset" /> 개체가 현지 시간으로 변환 합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 현지 시간으로 변환 수행, 메서드가 먼저 변환 하는 현재 <xref:System.DateTimeOffset> 개체의 날짜 및 시간 오프셋을 빼서 utc (협정 세계시) 시간입니다. 그런 다음 변환 UTC 날짜 및 시간을 현지 시간을 현지 시간 표준 시간대 오프셋을 추가 하 여 합니다. 이 과정에서 현지 표준 시간대에 대 한 모든 조정 규칙의 계정을 걸립니다.  
  
 현재 값 <xref:System.DateTimeOffset> 의 값과 개체를 <xref:System.DateTimeOffset> 메서드 호출에서 반환 된 개체에에서 동일한 시각을 나타내는지 합니다. 즉, 모두 전달 하는 경우는 <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType> 메서드는 반환 메서드에 `true`합니다.  
  
 변환의 범위를 벗어난 되는 시간으로 인해 경우는 <xref:System.DateTimeOffset> 형식을 <xref:System.DateTimeOffset.ToLocalTime%2A> 메서드가 반환 되는 <xref:System.DateTimeOffset> 날짜와 시간이 포함 된 개체 중 하나로 설정 <xref:System.DateTimeOffset.MaxValue> 또는 <xref:System.DateTimeOffset.MinValue> 및 현지 표준 시간대 오프셋으로 설정 된 오프셋.  
  
   
  
## Examples  
 다음 예제에서는 합니다 <xref:System.DateTimeOffset.ToLocalTime%2A> 변환할 메서드는 <xref:System.DateTimeOffset> 태평양 표준 시간대의 현지 시간 값. 현지 표준 시간대의 조정 규칙에 대 한 메서드의 지원을 보여 줍니다.  
  
 [!code-csharp[System.DateTimeOffset.Methods#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#15)]
 [!code-vb[System.DateTimeOffset.Methods#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#15)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.ToUniversalTime" />
      </Docs>
    </Member>
    <Member MemberName="ToOffset">
      <MemberSignature Language="C#" Value="public DateTimeOffset ToOffset (TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset ToOffset(valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToOffset(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToOffset (offset As TimeSpan) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset ToOffset(TimeSpan offset);" />
      <MemberSignature Language="F#" Value="member this.ToOffset : TimeSpan -&gt; DateTimeOffset" Usage="dateTimeOffset.ToOffset offset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="offset">변환할 대상 오프셋은 <see cref="T:System.DateTimeOffset" /> 값입니다.</param>
        <summary>현재 값으로 변환 <see cref="T:System.DateTimeOffset" /> 날짜 및 시간을 오프셋된 값으로 지정 된 개체입니다.</summary>
        <returns>원래 같은 개체 <see cref="T:System.DateTimeOffset" /> 개체 (즉, 해당 <see cref="M:System.DateTimeOffset.ToUniversalTime" /> 메서드는 시간에 동일한 시각을 반환) 하지만 <see cref="P:System.DateTimeOffset.Offset" /> 속성이 <paramref name="offset" />합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.DateTimeOffset.ToOffset%2A> 메서드는 호출 하는 대신은 <xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> 메서드. 표준 시간대의 오프셋이 utc (협정 세계시) 라고 하는 경우 다른 시간대에서 간단한 변환을 수행 하는 데 유용할 수 있습니다. 그러나 때문에 모두 원래 <xref:System.DateTimeOffset> 개체나 새 <xref:System.DateTimeOffset> 메서드 호출에서 반환 되는 개체 명확 하 게 관련 된 특정 표준 시간대 메서드 변환에서 모든 표준 시간대 조정 규칙을 적용 되지 않습니다.  
  
   
  
## Examples  
 다음 예제를 사용 하는 방법을 <xref:System.DateTimeOffset.ToOffset%2A> 변환할 메서드를 <xref:System.DateTimeOffset> 개체를 <xref:System.DateTimeOffset> 오프셋이 다른 개체입니다.  
  
 [!code-csharp[System.DateTimeOffset.ToOffset#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToOffset/cs/ToOffset.cs#1)]
 [!code-vb[System.DateTimeOffset.ToOffset#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToOffset/vb/ToOffset.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">결과 <see cref="T:System.DateTimeOffset" /> 개체에는 <see cref="P:System.DateTimeOffset.DateTime" /> 값 보다 이전 <see cref="F:System.DateTimeOffset.MinValue" />합니다.  
  
또는 
결과 <see cref="T:System.DateTimeOffset" /> 개체에는 <see cref="P:System.DateTimeOffset.DateTime" /> 값 보다 이후 <see cref="F:System.DateTimeOffset.MaxValue" />합니다.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" /> -14 시간 보다 작은 경우  
  
또는 
 <paramref name="offset" /> 14 시간 보다 큽니다.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>현재 <see cref="T:System.DateTimeOffset" /> 개체의 값을 해당하는 문자열 표현으로 변환합니다.</summary>
        <format type="text/markdown"><![CDATA[  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]        

         ]]></format>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="dateTimeOffset.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>현재 <see cref="T:System.DateTimeOffset" /> 개체의 값을 해당하는 문자열 표현으로 변환합니다.</summary>
        <returns>문자열 표현을 <see cref="T:System.DateTimeOffset" /> 문자열의 끝에 추가 되는 오프셋을 포함 하는 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드의 반환 값은 동일 합니다는 <xref:System.DateTime.ToString?displayProperty=nameWithType> 문자열의 끝에 추가 되는 오프셋 뒤에 메서드를 공간을 포함 하는 제외 합니다. 즉, 간단한 날짜 패턴을 자세한 날짜 패턴을 사용 하 여 출력 형식을 지정 하며 `zzz` 공백 사용 하 여 이전 요소를 구분 된 각 요소를 사용 하 여 사용자 지정 서식 문자열입니다. 예를 들어 경우 <xref:System.DateTime.ToString?displayProperty=nameWithType> 2008 년 1 월 12의 값을 반환 오후 6시 15분: 50, <xref:System.DateTimeOffset.ToString> 2008 년 1 월 12의 값을 반환 오후 6시 15분: 50-08:8 시간 뒤 Utc (협정 세계시) 시간을 00입니다.  
  
 이 메서드가 현재 문화권에서 파생 된 형식 지정 정보를 사용 합니다. 자세한 내용은 <xref:System.Globalization.CultureInfo.CurrentCulture%2A>을 참조하세요. 다른 오버 로드 된 <xref:System.DateTimeOffset.ToString%2A> 방법을 사용 하면 문화권을 지정 하려면 서식 지정을 사용 하 고 출력 패턴을 정의 하는 <xref:System.DateTimeOffset> 값입니다.  
  
   
  
## Examples  
 다음 예제에서는 호출을 보여 줍니다.는 <xref:System.DateTimeOffset.ToString> 메서드 현재 문화권 인 en 시스템에서 출력을 표시 하 고-주세요.  
  
 [!code-csharp[System.DateTimeOffset.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/cs/ToString.cs#1)]
 [!code-vb[System.DateTimeOffset.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/vb/ToString.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">날짜 및 시간이 현재 문화권에서 사용되는 달력에서 지원하는 날짜 범위를 벗어납니다.</exception>
        <block subset="none" type="usage"><para><see cref="M:System.DateTimeOffset.ToString" /> 메서드는 현재 문화권에서 사용 된 달력에서 날짜 및 시간의 문자열 표현을 반환 합니다. 경우 현재 값 <see cref="T:System.DateTimeOffset" /> 인스턴스가 이전의 <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> 보다 이후 이거나 <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, 메서드가 throw는 <see cref="T:System.ArgumentOutOfRangeException" />합니다. 다음 예제에서 이에 대해 설명합니다. 범위 밖에 있는 날짜 서식 지정 하려고 합니다 <see cref="T:System.Globalization.HijriCalendar" /> 현재 문화권은 아랍어 (시리아) 클래스입니다.  
  
[! 코드 csharp[System.DateTimeOffset.ToString.ArgumentOutOfRangeException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/cs/datetimeoffset.tostring.argumentoutofrangeexception2.cs#2)] [! 코드 vb[System.DateTimeOffset.ToString.ArgumentOutOfRangeException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/vb/datetimeoffset.tostring.argumentoutofrangeexception2.vb#2)]</para></block>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="override this.ToString : IFormatProvider -&gt; string" Usage="dateTimeOffset.ToString formatProvider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="formatProvider">문화권별 서식 지정 정보를 제공하는 개체입니다.</param>
        <summary>현재 값으로 변환 <see cref="T:System.DateTimeOffset" /> 개체 지정된 된 문화권별 형식 정보를 사용 하 여 해당 문자열 표현입니다.</summary>
        <returns>현재 <see cref="T:System.DateTimeOffset" /> 개체의 값을 <paramref name="formatProvider" />에 지정된 대로 나타낸 문자열 표현입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드의 반환 값은 동일 합니다는 해당 오버 로드는 <xref:System.DateTime.ToString%2A?displayProperty=nameWithType> 문자열의 끝에 추가 되는 오프셋 뒤에 메서드를 공간을 포함 하는 제외 합니다. 즉, 간단한 날짜 패턴을 자세한 날짜 패턴을 사용 하 여 출력 형식을 지정 하며 `zzz` 공백 사용 하 여 이전 요소를 구분 된 각 요소를 사용 하 여 사용자 지정 서식 문자열입니다.  
  
 이러한 세 가지 요소 형식의 정의한는 `formatProvider` 매개 변수입니다. `formatProvider` 매개 변수는 다음 중 하나일 수 있습니다.  
  
-   <xref:System.Globalization.CultureInfo> 해당 형식 지정 규칙은 반환된 된 문자열에 적용 되는 문화권을 나타내는 개체입니다. 합니다 <xref:System.Globalization.DateTimeFormatInfo> 에서 반환 된 개체는 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> 속성은 반환된 된 문자열의 서식을 정의 합니다.  
  
-   <xref:System.Globalization.DateTimeFormatInfo> 날짜 및 시간 데이터 형식을 정의 하는 개체입니다.  
  
 경우 `formatProvider` 됩니다 `null`, <xref:System.Globalization.DateTimeFormatInfo> 현재 문화권과 연결 된 개체가 사용 됩니다 (참조 <xref:System.Globalization.CultureInfo.CurrentCulture%2A>).  
  
   
  
## Examples  
 다음 예제에서는 표시를 <xref:System.DateTimeOffset> 개체를 사용 하 여 <xref:System.Globalization.CultureInfo> 고정 문화권을 뿐만 아니라 다른 네 개 문화권을 나타내는 개체입니다.  
  
 [!code-csharp[System.DateTimeOffset.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/cs/ToString.cs#2)]
 [!code-vb[System.DateTimeOffset.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/vb/ToString.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">날짜 및 시간이 <paramref name="formatProvider" />에서 사용되는 달력에서 지원하는 날짜 범위를 벗어납니다.</exception>
        <block subset="none" type="usage"><para>합니다 <see cref="M:System.DateTimeOffset.ToString(System.IFormatProvider)" /> 메서드가 나타내는 문화권에서 사용 된 달력에서 날짜 및 시간의 문자열 표현을 반환 합니다 <paramref name="formatProvider" /> 매개 변수입니다. 해당 일정에 의해 정의 됩니다는 <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> 속성입니다. 경우 현재 값 <see cref="T:System.DateTimeOffset" /> 인스턴스가 이전의 <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> 보다 이후 이거나 <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, 메서드가 throw는 <see cref="T:System.ArgumentOutOfRangeException" />합니다. 다음 예제에서 이에 대해 설명합니다. 범위 밖에 있는 날짜 서식 지정 하려고 합니다 <see cref="T:System.Globalization.JapaneseCalendar" /> 클래스입니다.  
  
[! 코드 csharp[System.DateTimeOffset.ToString.ArgumentOutOfRangeException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/cs/datetimeoffset.tostring.argumentoutofrangeexception1.cs#1)] [! 코드 vb[System.DateTimeOffset.ToString.ArgumentOutOfRangeException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/vb/datetimeoffset.tostring.argumentoutofrangeexception1.vb#1)]</para></block>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format);" />
      <MemberSignature Language="F#" Value="override this.ToString : string -&gt; string" Usage="dateTimeOffset.ToString format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">서식 문자열입니다.</param>
        <summary>지정된 형식을 사용하여 현재 <see cref="T:System.DateTimeOffset" /> 개체의 값을 해당하는 문자열 표현으로 변환합니다.</summary>
        <returns>현재 <see cref="T:System.DateTimeOffset" /> 개체의 값을 <paramref name="format" />에 지정된 대로 나타낸 문자열 표현입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 `format` 매개 변수는 단일 형식 지정자 문자를 포함 해야 (참조 [표준 날짜 및 시간 형식 문자열](~/docs/standard/base-types/standard-date-and-time-format-strings.md)) 또는 사용자 지정 형식 패턴 (참조 [사용자 지정 날짜 및 시간 형식 문자열](~/docs/standard/base-types/custom-date-and-time-format-strings.md) ) 반환된 된 문자열의 형식을 정의 하는 합니다. 하는 경우 `format` 는 null 이거나 빈 문자열 (""), <xref:System.DateTimeOffset> 값 기본 형식을 사용 하 여 출력 됩니다.  
  
 다음 표에서 특정 형식 지정자와 함께 사용할 때의 정확한 작업을 보여 줍니다. <xref:System.DateTimeOffset>를 사용 하는 경우 해당 동작에서 다른는 <xref:System.DateTime>.  
  
|기존 형식 지정자|새 동작|  
|-------------------------------|------------------|  
|"K"|왕복 하도록 날짜 및 시간입니다. 사용 하 여 <xref:System.DateTimeOffset>, "zzz" (오프셋 항상 시간 및 분을 사용 하 여 표시 됨)에 매핑됩니다. "K"는 사용자 지정 형식 지정자입니다. 단일 문자로 사용 될 수 없습니다 `format`합니다.|  
|"U"|지원되지 않습니다.|  
|"r"|변환 된 <xref:System.DateTimeOffset> 개체를 Utc (협정 세계시) 하 고 사용자 지정 서식 문자열을 사용 하 여 출력 `ddd, dd MMM yyyy HH:mm:ss GMT`합니다.|  
|"u"|변환 된 <xref:System.DateTimeOffset> 개체를 UTC 형식을 사용 하 여 출력 `yyyy-MM-dd HH:mm:ssZ`.|  
  
 나머지 표준 날짜 및 시간 형식 지정자도 동일한 동작을 <xref:System.DateTimeOffset.ToString%28System.String%29> 메서드와 마찬가지로 <xref:System.DateTime.ToString%2A> 메서드.  
  
 이 메서드가 현재 문화권에서 파생 된 형식 지정 정보를 사용 합니다. 자세한 내용은 <xref:System.Globalization.CultureInfo.CurrentCulture%2A>을 참조하세요.  
  
   
  
## Examples  
 다음 예제에서는 표시를 <xref:System.DateTimeOffset> 각 표준 날짜 및 시간 서식 지정자를 사용 하 여 콘솔에는 개체입니다. 출력은 en를 사용 하 여 형식이-culture입니다.  
  
 [!code-csharp[System.DateTimeOffset.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/cs/ToString.cs#3)]
 [!code-vb[System.DateTimeOffset.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/vb/ToString.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><paramref name="format" />의 길이가 1이고 <see cref="T:System.Globalization.DateTimeFormatInfo" />에 대해 정의된 표준 형식 지정자 문자 중 하나가 아닙니다.  
  
또는 
 <paramref name="format" />에 올바른 사용자 지정 형식 패턴이 포함되어 있지 않습니다.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">날짜 및 시간이 현재 문화권에서 사용되는 달력에서 지원하는 날짜 범위를 벗어납니다.</exception>
        <block subset="none" type="usage"><para><see cref="M:System.DateTimeOffset.ToString(System.String)" /> 메서드는 현재 문화권에서 사용 된 달력에서 날짜 및 시간의 문자열 표현을 반환 합니다. 경우 현재 값 <see cref="T:System.DateTimeOffset" /> 인스턴스가 이전의 <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> 보다 이후 이거나 <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, 메서드가 throw는 <see cref="T:System.ArgumentOutOfRangeException" />합니다. 다음 예제에서 이에 대해 설명합니다. 범위 밖에 있는 날짜 서식 지정 하려고 합니다 <see cref="T:System.Globalization.HebrewCalendar" /> 현재 문화권이 히브리어 (이스라엘) 클래스입니다.  
  
[! 코드 csharp[System.DateTimeOffset.ToString.ArgumentOutOfRangeException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/cs/datetimeoffset.tostring.argumentoutofrangeexception3.cs#3)] [! 코드 vb[System.DateTimeOffset.ToString.ArgumentOutOfRangeException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/vb/datetimeoffset.tostring.argumentoutofrangeexception3.vb#3)]</para></block>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">표준 날짜 및 시간 형식 문자열</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">사용자 지정 날짜 및 시간 형식 문자열</related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(System::String ^ format, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="override this.ToString : string * IFormatProvider -&gt; string" Usage="dateTimeOffset.ToString (format, formatProvider)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">서식 문자열입니다.</param>
        <param name="formatProvider">문화권별 서식 지정 정보를 제공하는 개체입니다.</param>
        <summary>지정된 형식 및 문화권별 형식 정보를 사용하여 현재 <see cref="T:System.DateTimeOffset" /> 개체의 값을 해당 문자열 표현으로 변환합니다.</summary>
        <returns>현재 <see cref="T:System.DateTimeOffset" /> 개체의 값을 <paramref name="format" /> 및 <paramref name="provider" />에 지정된 대로 나타낸 문자열 표현입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 `format` 매개 변수는 단일 형식 지정자 문자를 포함 해야 (참조 [표준 날짜 및 시간 형식 문자열](~/docs/standard/base-types/standard-date-and-time-format-strings.md)) 또는 사용자 지정 형식 패턴 (참조 [사용자 지정 날짜 및 시간 형식 문자열](~/docs/standard/base-types/custom-date-and-time-format-strings.md) ). 하는 경우 `format` 는 null 이거나 빈 문자열 (""), <xref:System.DateTimeOffset> 기본 형식을 사용 하 여 개체를 출력 합니다.  
  
 다음 표에서 특정 형식 지정자와 함께 사용할 때의 정확한 작업을 보여 줍니다. <xref:System.DateTimeOffset>를 사용 하는 경우 해당 동작에서 다른는 <xref:System.DateTime>.  
  
|기존 형식 지정자|새 동작|  
|-------------------------------|------------------|  
|"K"|왕복 하도록 날짜 및 시간입니다. 사용 하 여 <xref:System.DateTimeOffset>, "zzz" (오프셋 항상 시간 및 분을 사용 하 여 표시 됨)에 매핑됩니다. "K"는 사용자 지정 형식 지정자입니다. 단일 문자로 사용 될 수 없습니다 `format`합니다.|  
|"U"|지원되지 않습니다.|  
|"r"|변환 된 <xref:System.DateTimeOffset> 개체를 Utc (협정 세계시) 하 고 사용자 지정 서식 문자열을 사용 하 여 출력 `ddd, dd MMM yyyy HH:mm:ss GMT`합니다.|  
|"u"|변환 된 <xref:System.DateTimeOffset> 값을 UTC 형식을 사용 하 여 출력 `yyyy-MM-dd HH:mm:ssZ`합니다.|  
  
 나머지 표준 날짜 및 시간 형식 지정자도 동일한 동작을 <xref:System.DateTimeOffset.ToString%28System.String%29> 메서드와 마찬가지로 <xref:System.DateTime.ToString%2A> 메서드.  
  
 표준 서식 지정자와 기호 및 날짜 및 시간 구성 요소 이름에 해당 하는 패턴에서 정의 됩니다는 `formatProvider` 매개 변수입니다. `formatProvider` 매개 변수는 다음 중 하나일 수 있습니다.  
  
-   A <xref:System.Globalization.CultureInfo> 서식 지정에 사용 되는 문화권을 나타내는 개체 `input`합니다. 합니다 <xref:System.Globalization.DateTimeFormatInfo> 에서 반환 된 개체를 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> 속성 정의에 사용 된 서식을 `input`합니다.  
  
-   <xref:System.Globalization.DateTimeFormatInfo> 날짜 및 시간 데이터 형식을 정의 하는 개체입니다.  
  
 경우 `formatProvider` 됩니다 `null`, <xref:System.Globalization.DateTimeFormatInfo> 현재 문화권과 연결 된 개체가 사용 됩니다 (참조 <xref:System.Globalization.CultureInfo.CurrentCulture%2A>).  
  
   
  
## Examples  
 다음 예제에서는 합니다 <xref:System.DateTimeOffset.ToString%28System.String%2CSystem.IFormatProvider%29> 표시 하는 메서드를 <xref:System.DateTimeOffset> 몇 가지 다른 문화권에 대 한 사용자 지정 서식 문자열을 사용 하 여 개체입니다.  
  
 [!code-csharp[System.DateTimeOffset.ToString#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/cs/ToString.cs#4)]
 [!code-vb[System.DateTimeOffset.ToString#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/vb/ToString.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><paramref name="format" />의 길이가 1이고 <see cref="T:System.Globalization.DateTimeFormatInfo" />에 대해 정의된 표준 형식 지정자 문자 중 하나가 아닙니다.  
  
또는 
 <paramref name="format" />에 올바른 사용자 지정 형식 패턴이 포함되어 있지 않습니다.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">날짜 및 시간이 <paramref name="formatProvider" />에서 사용되는 달력에서 지원하는 날짜 범위를 벗어납니다.</exception>
        <block subset="none" type="usage"><para>합니다 <see cref="M:System.DateTimeOffset.ToString(System.String,System.IFormatProvider)" /> 메서드에서 사용 하는 달력에서 날짜 및 시간의 문자열 표현을 반환 합니다 <paramref name="formatProvider" /> 매개 변수입니다. 해당 일정에 의해 정의 됩니다는 <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> 속성입니다. 경우 현재 값 <see cref="T:System.DateTimeOffset" /> 인스턴스가 이전의 <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> 보다 이후 이거나 <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, 메서드가 throw는 <see cref="T:System.ArgumentOutOfRangeException" />합니다. 다음 예제에서 이에 대해 설명합니다. 범위 밖에 있는 날짜 서식 지정 하려고 합니다 <see cref="T:System.Globalization.UmAlQuraCalendar" /> 클래스입니다.  
  
[! 코드 csharp[System.DateTimeOffset.ToString.ArgumentOutOfRangeException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/cs/datetimeoffset.tostring.argumentoutofrangeexception4.cs#4)] [! 코드 vb[System.DateTimeOffset.ToString.ArgumentOutOfRangeException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/vb/datetimeoffset.tostring.argumentoutofrangeexception4.vb#4)]</para></block>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">표준 날짜 및 시간 형식 문자열</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">사용자 지정 날짜 및 시간 형식 문자열</related>
        <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/NET-Framework-4-Formatting-9c4dae8d">샘플: .NET Framework 4 서식 유틸리티</related>
      </Docs>
    </Member>
    <Member MemberName="ToUniversalTime">
      <MemberSignature Language="C#" Value="public DateTimeOffset ToUniversalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset ToUniversalTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToUniversalTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUniversalTime () As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset ToUniversalTime();" />
      <MemberSignature Language="F#" Value="member this.ToUniversalTime : unit -&gt; DateTimeOffset" Usage="dateTimeOffset.ToUniversalTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>현재 변환 <see cref="T:System.DateTimeOffset" /> 개체는 <see cref="T:System.DateTimeOffset" /> 협정 세계시 (UTC)를 나타내는 값입니다.</summary>
        <returns>현재 시간과 날짜를 나타내는 개체 <see cref="T:System.DateTimeOffset" /> 개체가 utc (협정 세계시)로 변환 합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드가 반환 된 <xref:System.DateTimeOffset> 개체 <xref:System.DateTimeOffset.Offset%2A> 속성이 0으로 설정 됩니다.  
  
 현재 값 <xref:System.DateTimeOffset> 의 값과 개체를 <xref:System.DateTimeOffset> 메서드 호출에서 반환 된 개체에에서 동일한 시각을 나타내는지 합니다. 즉, 모두 전달 하는 경우는 <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType> 메서드는 반환 메서드에 `true`합니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.DateTimeOffset.ToUniversalTime%2A> 현지 시간과 여러 다른 시간을 utc (협정 세계시)로 변환 하는 방법입니다.  
  
 [!code-csharp[System.DateTimeOffset.Methods#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#16)]
 [!code-vb[System.DateTimeOffset.Methods#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#16)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.ToLocalTime" />
        <altmember cref="M:System.DateTimeOffset.ToOffset(System.TimeSpan)" />
      </Docs>
    </Member>
    <Member MemberName="ToUnixTimeMilliseconds">
      <MemberSignature Language="C#" Value="public long ToUnixTimeMilliseconds ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToUnixTimeMilliseconds() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToUnixTimeMilliseconds" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUnixTimeMilliseconds () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToUnixTimeMilliseconds();" />
      <MemberSignature Language="F#" Value="member this.ToUnixTimeMilliseconds : unit -&gt; int64" Usage="dateTimeOffset.ToUnixTimeMilliseconds " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>1970-01-01T00:00:00.000Z 이후 경과된 시간(밀리초)을 반환합니다.</summary>
        <returns>1970-01-01T00:00:00.000Z 이후 경과된 시간(밀리초)입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Unix 시간 이후 경과 된 시간 (초) 수를 나타내는-01-01T00:00:00Z (1, 1970 년 1 월 오전 12:00 utc)입니다. 계정에 윤 초를 사용 하지 않습니다. 이 메서드는 Unix 시간에서 (밀리초)을 반환합니다.  
  
 이 메서드는 먼저 해당 Unix 시간 (밀리초)을 반환 하기 전에 UTC로 현재 인스턴스를 변환 합니다. 1970 이전의 날짜 및 시간 값에 대 한-01-01T00:00:00Z,이 메서드는 음수 값을 반환 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.ToUnixTimeSeconds" />
        <altmember cref="M:System.DateTimeOffset.FromUnixTimeMilliseconds(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="ToUnixTimeSeconds">
      <MemberSignature Language="C#" Value="public long ToUnixTimeSeconds ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToUnixTimeSeconds() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToUnixTimeSeconds" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUnixTimeSeconds () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToUnixTimeSeconds();" />
      <MemberSignature Language="F#" Value="member this.ToUnixTimeSeconds : unit -&gt; int64" Usage="dateTimeOffset.ToUnixTimeSeconds " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>1970-01-01T00:00:00Z 이후 경과된 시간(초)을 반환합니다.</summary>
        <returns>1970-01-01T00:00:00Z 이후 경과된 시간(초)입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Unix 시간 이후 경과 된 시간 (초) 수를 나타내는-01-01T00:00:00Z (1, 1970 년 1 월 오전 12:00 utc)입니다. 계정에 윤 초를 사용 하지 않습니다.  
  
 이 메서드는 먼저 해당 Unix 시간을 반환 하기 전에 UTC로 현재 인스턴스를 변환 합니다. 1970 이전의 날짜 및 시간 값에 대 한-01-01T00:00:00Z,이 메서드는 음수 값을 반환 합니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.DateTimeOffset.ToUnixTimeSeconds%2A> 떠나기 직전 및 1970 직후 같음, 값의 Unix 시간을 반환 하는 방법-01-01T00:00:00Z 합니다.  
  
 [!code-csharp[System.DateTimeOffset.ToUnixTimeSeconds#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tounixtimeseconds/cs/tounixtimeseconds1.cs#1)]
 [!code-vb[System.DateTimeOffset.ToUnixTimeSeconds#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.tounixtimeseconds/vb/tounixtimeseconds1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.FromUnixTimeSeconds(System.Int64)" />
        <altmember cref="M:System.DateTimeOffset.ToUnixTimeMilliseconds" />
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public bool TryFormat (Span&lt;char&gt; destination, out int charsWritten, ReadOnlySpan&lt;char&gt; format = null, IFormatProvider formatProvider = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryFormat(valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFormat (destination As Span(Of Char), ByRef charsWritten As Integer, Optional format As ReadOnlySpan(Of Char) = null, Optional formatProvider As IFormatProvider = null) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryFormat : Span&lt;char&gt; *  * ReadOnlySpan&lt;char&gt; * IFormatProvider -&gt; bool" Usage="dateTimeOffset.TryFormat (destination, charsWritten, format, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="charsWritten" Type="System.Int32" RefType="out" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <param name="charsWritten">To be added.</param>
        <param name="format">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>날짜 및 시간의 지정 된 문자열 표현을 해당 <see cref="T:System.DateTimeOffset" /> 동일 합니다.</summary>
        <format type="text/markdown"><![CDATA[  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]        

         ]]></format>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; input, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; input, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParse(System.ReadOnlySpan{System.Char},System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (input As ReadOnlySpan(Of Char), ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; input, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; *  -&gt; bool" Usage="System.DateTimeOffset.TryParse (input, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string input, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string input, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParse(System.String,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (input As String, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ input, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string *  -&gt; bool" Usage="System.DateTimeOffset.TryParse (input, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">변환할 날짜 및 시간이 포함된 문자열입니다.</param>
        <param name="result">메서드가 반환될 때 변환이 성공했으면 <paramref name="input" />의 날짜와 시간에 해당하는 <see cref="T:System.DateTimeOffset" />를 포함하고, 변환이 실패했으면 <see cref="F:System.DateTimeOffset.MinValue" />를 포함합니다. <paramref name="input" /> 매개 변수가 <see langword="null" />이거나 날짜 및 시간에 대한 유효한 문자열 표현을 포함하고 있지 않으면 변환이 실패합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
        <summary>날짜와 시간에 대한 지정된 문자열 표현을 해당 <see cref="T:System.DateTimeOffset" /> 요소로 변환하고, 변환에 성공했는지를 나타내는 값을 반환합니다.</summary>
        <returns><paramref name="input" /> 매개 변수가 변환되었으면 <see langword="true" />이고, 변환되지 않았으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 오버 로드는 <xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.DateTimeOffset%40%29> 메서드와 비슷합니다는 <xref:System.DateTimeOffset.Parse%28System.String%29?displayProperty=nameWithType> 메서드와 변환에 실패 하면 예외를 throw 하지 않습니다. 임의의 순서로 나타날 수 있으며 공백으로 구분 되는 세 가지 요소를 사용 하 여 문자열 구문 분석 합니다. 이러한 세 가지 요소는 다음 표에 표시 됩니다.  
  
|요소|예제|  
|-------------|-------------|  
|\<날짜 >|"2/10/2007"|  
|\<Time>|"PM 1시 02분: 03"|  
|\<오프셋 >|"-7:30"|  
  
 이러한 각 요소는 선택 사항 이지만 \<오프셋 > 단독으로 나타날 수 없습니다. 와 함께 제공 되어야 합니다 \<날짜 > 또는 \<시간 >. 경우 \<날짜 > 없는 경우 기본값은 현재 날짜입니다. 하는 경우 \<날짜 > 있지만 해당 연도의 두 자리 숫자만 구성의 값을 기반으로 현재 문화권의 현재 달력의 연간 변환할는 <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> 속성입니다. 경우 \<시간 > 없는 경우 기본 값이 오전 12시: 00입니다. 경우 \<오프셋 > 없는 경우 기본 값은 현지 표준 시간대의 오프셋입니다. 경우 \<오프셋 >가 나타낼 수는 음수 또는 양수 오프셋을 utc (협정 세계시). 두 경우 모두 \<오프셋 > 부호 기호 또는 메서드 반환 있어야 `false`합니다.  
  
 `input` 의 형식 지정 정보를 사용 하 여 문자열 구문 분석 되는 <xref:System.Globalization.DateTimeFormatInfo> 현재 문화권에 대 한 초기화 되는 개체입니다. 현재 문화권의 해당 하지 않는 지정 된 형식을 포함 하는 문자열을 구문 분석을 사용 하 여를 <xref:System.DateTimeOffset.TryParseExact%2A> 메서드 및 형식 지정자를 제공 합니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.DateTimeOffset%40%29> 다양 한 날짜 및 시간 형식을 사용 하 여 여러 문자열을 구문 분석 하는 방법입니다.  
  
 [!code-csharp[System.DateTimeOffset.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.TryParse/cs/TryParse.cs#1)]
 [!code-vb[System.DateTimeOffset.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.TryParse/vb/TryParse.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.DateTimeOffset.Parse" />
        <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/NET-Framework-4-Formatting-9c4dae8d">샘플: .NET Framework 4 서식 유틸리티</related>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; input, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; input, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (input As ReadOnlySpan(Of Char), formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; input, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTimeOffset.TryParse (input, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <param name="styles">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string input, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string input, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (input As String, formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ input, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTimeOffset.TryParse (input, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">변환할 날짜 및 시간이 포함된 문자열입니다.</param>
        <param name="formatProvider"><paramref name="input" />에 대한 문화권별 서식 정보를 제공하는 개체입니다.</param>
        <param name="styles"><paramref name="input" />에 사용할 수 있는 형식을 나타내는 열거형 값의 비트 조합입니다.</param>
        <param name="result">메서드가 반환될 때 변환이 성공했으면 <paramref name="input" />의 날짜 및 시간에 해당하는 <see cref="T:System.DateTimeOffset" /> 값을 포함하고, 변환이 실패했으면 <see cref="F:System.DateTimeOffset.MinValue" />를 포함합니다. <paramref name="input" /> 매개 변수가 <see langword="null" />이거나 날짜 및 시간에 대한 유효한 문자열 표현을 포함하고 있지 않으면 변환이 실패합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
        <summary>날짜 및 시간에 대한 지정된 문자열 표현을 해당 <see cref="T:System.DateTimeOffset" /> 요소로 변환하고, 변환에 성공했는지를 나타내는 값을 반환합니다.</summary>
        <returns><paramref name="input" /> 매개 변수가 변환되었으면 <see langword="true" />이고, 변환되지 않았으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 오버 로드는 <xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29> 메서드와 비슷합니다는 <xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> 메서드와 변환에 실패 하면 예외를 throw 하지 않습니다. 메서드는 임의의 순서로 나타날 수 있으며 공백으로 구분 되는 세 가지 요소를 사용 하 여 문자열을 구문 분석 합니다. 이러한 세 가지 요소는 다음 표에 표시 됩니다.  
  
|요소|예제|  
|-------------|-------------|  
|\<날짜 >|"2/10/2007"|  
|\<Time>|"PM 1시 02분: 03"|  
|\<오프셋 >|"-7:30"|  
  
 이러한 각 요소는 선택 사항 이지만 \<오프셋 > 단독으로 나타날 수 없습니다. 와 함께 제공 되어야 합니다 \<날짜 > 또는 \<시간 >. 경우 \<날짜 > 없는 경우 기본값은 현재 날짜입니다. 경우 \<날짜 > 있지만 해당 연도의 두 자리 숫자만 구성, 연간으로 변환 됩니다 합니다 `provider` 의 값을 기반으로 하는 매개 변수의 현재 달력을 <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> 속성. 경우 \<시간 > 없는 경우 기본 값이 오전 12시: 00입니다. 하는 경우 \<오프셋 > 없는 경우 기본 값은 현지 표준 시간대의 오프셋 또는 <xref:System.TimeSpan.Zero> 경우는 <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> 또는 <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> 에 값이 지정 `styles`합니다. 경우 \<오프셋 >가 나타낼 수는 음수 또는 양수 오프셋을 utc (협정 세계시). 두 경우 모두 \<오프셋 > 부호 기호 또는 메서드 반환 있어야 `false`합니다.  
  
 `input` 에서 문화권별 서식 지정 정보를 사용 하 여 문자열 구문 분석 되는 <xref:System.Globalization.DateTimeFormatInfo> 에서 제공 하는 개체를 `formatProvider` 매개 변수입니다. `formatProvider` 매개 변수는 다음 중 하나일 수 있습니다.  
  
-   A <xref:System.Globalization.CultureInfo> 서식 지정에 사용 되는 문화권을 나타내는 개체 `input`합니다. 합니다 <xref:System.Globalization.DateTimeFormatInfo> 에서 반환 된 개체를 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> 속성에 사용 되는 형식을 정의 `input`합니다.  
  
-   <xref:System.Globalization.DateTimeFormatInfo> 날짜 및 시간 데이터 형식을 정의 하는 개체입니다.  
  
 또한는 선행 또는 후행 공백을 각 요소를 구분할 수 있습니다 및 \<날짜 > 및 \<시간 > 구성 요소에는 내부 공백이 포함 될 수 있습니다 (예 6::   00:00). 만 \<오프셋 > 구성 요소 내부 공백 문자를 포함할 수 없습니다.  
  
 하는 경우 `provider` 됩니다 `null`, <xref:System.Globalization.CultureInfo> 현재 문화권에 해당 하는 개체를 사용 합니다.  
  
 에 사용 되는 양수 또는 음수 기호 \<오프셋 > 여야 + 또는-합니다. 정의 되지 않은 <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A> 또는 <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> 의 속성을 <xref:System.Globalization.NumberFormatInfo> 에서 반환 된 개체를 `formatprovider` 매개 변수의 <xref:System.Globalization.CultureInfo.NumberFormat%2A> 속성.  
  
 다음 멤버를 <xref:System.Globalization.DateTimeStyles> 열거형 지원 됩니다.  
  
|DateTimeStyles 멤버|설명|  
|---------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|표시 되는 문자열을 구문 분석 `input` 필요한 UTC로 변환 하는 경우. 문자열을 구문 분석 한 다음 반환된 된 개체를 호출 하는 것과 같습니다 <xref:System.DateTimeOffset.ToUniversalTime> 메서드.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|유효 하더라도이 값은 무시 됩니다. 내부 공백에서 허용 되는 \<날짜 > 및 \<시간 > 구성 요소입니다.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|유효 하더라도이 값은 무시 됩니다. 구문 분석된 된 문자열의 각 구성 요소 앞에 선행 공백은 허용 됩니다.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|유효 하더라도이 값은 무시 됩니다. 구문 분석된 된 문자열의 각 구성 요소 앞에 후행 공백을 허용 됩니다.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|이것은 기본적인 동작입니다. 더 제한적인 제공 하 여 재정의할 수 없습니다 <xref:System.Globalization.DateTimeStyles> 열거형 값을 같은 <xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType>합니다.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|경우 이면를 `input` 매개 변수 없는 \<오프셋 > 요소를 현지 표준 시간대의 오프셋을 제공 해야 합니다. 이 기본적으로는 <xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29> 메서드.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|경우 이면를 `input` 매개 변수 없는 \<오프셋 > 요소인 UTC 오프셋 (00:00) 제공 해야 합니다.|  
|<xref:System.Globalization.DateTimeStyles.None>|유효 하지만이 값이 무시 되 고 영향을 주지 않습니다.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|때문에 합니다 <xref:System.DateTimeOffset> 구조에 포함 되지 않습니다는 `Kind` 속성을이 값 효과가 없습니다.|  
  
 만 <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> 값 지원 되지 않습니다. <xref:System.ArgumentException> 이 값에 포함 된 경우 throw 되는 `styles` 매개 변수입니다.  
  
   
  
## Examples  
 다음 예제에서는 합니다 <xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29> 다양 한 메서드 <xref:System.Globalization.DateTimeStyles> 다양 한 날짜 및 시간 형식으로 일부 문자열을 구문 분석 하는 값입니다.  
  
 [!code-csharp[System.DateTimeOffset.TryParse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.TryParse/cs/TryParse.cs#2)]
 [!code-vb[System.DateTimeOffset.TryParse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.TryParse/vb/TryParse.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="styles" />에 정의되지 않은 <see cref="T:System.Globalization.DateTimeStyles" /> 값이 들어 있습니다.  
  
또는 
 <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" />은 지원되지 않습니다.  
  
또는 
 <paramref name="styles" />에 함께 사용할 수 없는 <see cref="T:System.Globalization.DateTimeStyles" /> 값이 들어 있습니다.</exception>
        <altmember cref="Overload:System.DateTimeOffset.Parse" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>날짜 및 시간에 대한 지정된 문자열 표현을 해당 <see cref="T:System.DateTimeOffset" />으로 변환합니다. 문자열 표현의 형식이 지정된 형식과 정확하게 일치해야 합니다.</summary>
        <format type="text/markdown"><![CDATA[  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]        

         ]]></format>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;char&gt; format, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;char&gt; format, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTimeOffset.TryParseExact (input, format, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" Index="4" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="input">변환할 날짜 및 시간의 표시를 포함하는 문자 범위입니다.</param>
        <param name="format"><paramref name="input" />의 필수 형식을 정의하는 서식 지정자입니다.</param>
        <param name="formatProvider"><paramref name="input" />에 대한 문화권별 서식 지정 정보를 제공하는 개체입니다.</param>
        <param name="styles"><paramref name="input" />에 사용할 수 있는 형식을 나타내는 열거형 값의 비트 조합입니다. 지정할 일반적인 값은 <see cref="F:System.Globalization.DateTimeStyles.None" />입니다.</param>
        <param name="result">메서드가 반환될 때 변환이 성공했으면 <paramref name="input" />의 날짜와 시간에 해당하는 <see cref="T:System.DateTimeOffset" />를 포함하고, 변환이 실패했으면 <see cref="F:System.DateTimeOffset.MinValue" />를 포함합니다. 다음과 같은 경우 변환에 실패합니다.</param>
        <summary>지정된 형식, 문화권별 형식 정보 및 스타일을 사용하여 날짜 및 시간의 표현을 해당 <see cref="System.DateTimeOffset" />으로 변환합니다. 날짜 및 시간 표현의 형식이 지정된 형식과 정확하게 일치해야 합니다.</summary>
        <returns><paramref name="input" /> 매개 변수가 변환되었으면 <see langword="true" />이고, 변환되지 않았으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

이 오버 로드는 <xref:System.DateTimeOffset.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)?displayProperty=nameWithType> 메서드를 제외 하 고 변환에 실패 하면이 메서드가 예외를 throw 하지 않습니다. 에 지정 된 패턴을 정확 하 게 일치 해야 하는 시간과 날짜의 표현을 구문 분석 된 `format` 매개 변수입니다. 경우 `input` 공백 정의한 일부의 변형 사용 하 여이 패턴과 일치 하지 않는 합니다 `styles` 매개 변수를 구문 분석 작업이 실패 하 고 메서드 반환 `false`.  
  
합니다 `format` 매개 변수는 단일 표준 형식 지정자 또는의 필수 패턴을 정의 하는 하나 이상의 사용자 지정 형식 지정자를 포함 하는 문자 범위 `input`합니다. 유효한 서식 코드에 대 한 자세한 내용은 참조 하세요 [표준 날짜 및 시간 서식 문자열](~/docs/standard/base-types/standard-date-and-time-format-strings.md) 하 고 [사용자 지정 날짜 및 시간 형식 문자열](~/docs/standard/base-types/custom-date-and-time-format-strings.md)합니다. 경우 `format` 포함 된 `z`, `zz`, 또는 `zzz` 오프셋에 있어야 함을 나타내려면 사용자 지정 형식 지정자 `input`, 해당 오프셋은 음수 기호 또는 양수 기호를 포함 해야 합니다. 부호 없는 구문 분석 작업이 실패 하 고, 메서드가 반환 하는 경우 `false`합니다.  
  
경우 `format` 되어 있어야 `input` 날짜가 들어에 시간이 아닌 결과 <xref:System.DateTimeOffset> 개체를 할당 하는 시간을 자정 (0: 00:00). 경우 `format` 되어 있어야 `input` 시간만 날짜가 아닌 결과 포함 <xref:System.DateTimeOffset> 개체를 로컬 시스템의 현재 날짜를 할당 합니다. 하는 경우 `format` 것을 요구 하지 않는 `input` 결과의 오프셋에 오프셋을 포함 <xref:System.DateTimeOffset> 개체의 값에 따라 달라 집니다는 `styles` 매개 변수입니다. 하는 경우 `styles` 포함 <xref:System.Globalization.DateTimeStyles.AssumeLocal>, 현지 표준 시간대의 오프셋에 할당 되는 <xref:System.DateTimeOffset> 개체입니다. 경우 `styles` 포함 <xref:System.Globalization.DateTimeStyles.AssumeUniversal>, utc (협정 세계시) 오프셋 또는 + 00시 할당 되는 <xref:System.DateTimeOffset> 개체입니다. 두 값을 지정 하는 경우 현지 표준 시간대의 오프셋이 사용 됩니다.  
  
특정 날짜 및 시간 기호 및에서 사용 되는 문자열 `input` 가 정의한는 `formatProvider` 매개 변수입니다. 정확한 패턴의 마찬가지 `input` 경우 `format` 표준 서식 지정자 문자열입니다. `formatProvider` 매개 변수는 다음 중 하나일 수 있습니다.  
  
-   A <xref:System.Globalization.CultureInfo> 문화권을 나타내는 개체에 따라 `input` 해석 됩니다. 합니다 <xref:System.Globalization.DateTimeFormatInfo> 에서 반환 된 개체를 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> 기호를 정의 하는 속성 및 표준 형식에 허용 `input`합니다.  
  
-   <xref:System.Globalization.DateTimeFormatInfo> 날짜 및 시간 데이터 형식을 정의 하는 개체입니다.  
  
 하는 경우 `formatprovider` 됩니다 `null`, <xref:System.Globalization.CultureInfo> 현재 문화권에 해당 하는 개체를 사용 합니다.  
  
 `styles` 매개 변수는 공백이 허용 되는지 여부를 정의 입력된 문자열에서 나타내고 어떻게 명시적 오프셋된 구성 요소가 없는 문자열 구문 분석 되 고 구문 분석 작업의 일환으로 UTC 변환을 지원 합니다. 모든 멤버를 <xref:System.Globalization.DateTimeStyles> 열거형을 제외 하 고 지 <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>합니다. 다음 표에서 각 지원 되는 멤버의 효과 보여 줍니다.  
  
|`DateTimeStyles` 멤버|동작|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|구문 분석 `input` 필요한 UTC로 변환 하는 경우. 날짜 및 시간 표현, 구문 분석 한 다음에 해당 하는 것은 <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType> 메서드의 반환된 된 <xref:System.DateTimeOffset> 개체입니다.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|하는 경우 `format` 것을 요구 하지 않는 `input` 반환 되는 오프셋된 값이 포함 되어 <xref:System.DateTimeOffset> 개체의 현지 표준 시간대 오프셋에 지정 됩니다. 이것은 기본적인 동작입니다.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|하는 경우 `format` 것을 요구 하지 않는 `input` 반환 되는 오프셋된 값이 포함 되어 <xref:System.DateTimeOffset> 개체의 UTC 오프셋 (+ 00시)에 지정 됩니다.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|허용 `input` 형식으로 지정 되지 않은 내부 공백 포함 하도록 합니다. 추가 공백 날짜 및 시간 구성 요소 사이의 오프셋 이외의 개별 구성 요소 내에 나타날 수 있습니다 및 문자열을 구문 분석 하는 경우 무시 됩니다.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|허용 `input` 지정 되지 않은 선행 공백을 포함 하도록 `format`합니다. 이러한 문자열을 구문 분석 하는 경우 무시 됩니다.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|허용 `input` 후행 공백을 지정 되지 않은 포함 하도록 `format`합니다. 이러한 문자열을 구문 분석 하는 경우 무시 됩니다.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|허용 `input` 지정 되지 않은 앞, 후행 공백 및 내부 공백을 넣을 수 `format`입니다. 에 지정 되지 않은 모든 추가 공백 문자 `format` 문자열을 구문 분석 하는 경우 무시 됩니다.|  
|<xref:System.Globalization.DateTimeStyles.None>|에 추가 공백이 허용 되지 않습니다 나타냅니다 `input`합니다. 공백 문자에 지정 된 대로 표시 되어야 합니다 `format`합니다. 이것은 기본적인 동작입니다.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|아무런 영향을 주지는 <xref:System.DateTimeOffset> 구조에 포함 되지 않습니다는 `Kind` 속성입니다.|  

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="styles" />에 정의되지 않은 <see cref="T:System.Globalization.DateTimeStyles" /> 값이 들어 있습니다.  
또는 <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" />는 지원되지 않습니다.  
또는 <paramref name="styles" />에 함께 사용할 수 없는 <see cref="T:System.Globalization.DateTimeStyles" /> 값이 들어 있습니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; input, string[] formats, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As ReadOnlySpan(Of Char), formats As String(), formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; input, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : ReadOnlySpan&lt;char&gt; * string[] * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTimeOffset.TryParseExact (input, formats, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="formats" Type="System.String[]" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" Index="4" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="formats">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <param name="styles">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks
 
에 할당 된 패턴 중 하 나와 일치 하는 날짜의 문자열 표현을 구문 분석 하는이 메서드는 `formats` 배열입니다. 하는 경우 `input` 에서 정의한 모든 변형으로 이러한 패턴 중 하 나와 일치 하지 않습니다는 `styles` 매개 변수를 구문 분석 작업이 실패 하 고 메서드 반환 `false`합니다. 비교 하는 것 외 `input` 형식 지정자를 포함 하는 여러 문자열로,이 오버 로드 동일 하 게 동작 합니다 <xref:System.DateTimeOffset.ParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)?displayProperty=nameWithType> 메서드.  
  
 합니다 `formats` 매개 변수는 요소가 포함 된 단일 표준 형식 지정자 또는 하나 이상의 사용자 지정 형식 지정자의 가능한 패턴을 정의 하는 문자열 배열 `input`합니다. 유효한 서식 코드에 대 한 자세한 내용은 참조 하세요 [표준 날짜 및 시간 서식 문자열](~/docs/standard/base-types/standard-date-and-time-format-strings.md) 하 고 [사용자 지정 날짜 및 시간 형식 문자열](~/docs/standard/base-types/custom-date-and-time-format-strings.md)합니다. 경우에 일치 하는 요소의 `formats` 포함 합니다 `z`를 `zz`, 또는 `zzz` 오프셋에 있어야 함을 나타내려면 사용자 지정 형식 지정자 `input`, 해당 오프셋은 음수 기호 또는 양수 기호를 포함 해야 합니다. 부호 없는 구문 분석 작업이 실패 하 고 메서드를 반환 하는 경우 `false`합니다.  
  
> [!IMPORTANT]
>  사용 하는 `formats` 여러 형식을 지정 하려면이 오버 로드의 시간과 날짜를 입력 하면 많은 사용자가 경험 하는 번거로움을 줄이는 데 도움이 됩니다. 특히 여러 개의 입력된 패턴을 정의 하는 기능 포함 하거나 부족 한 월, 일, 시간, 분 및 초를 앞에 오는 0 수 있는 날짜와 시간 표현을 처리 하도록 애플리케이션을 수 있습니다. 예제는이 보여 줍니다.  
  
 경우에 일치 하는 요소의 `formats` 되어 있어야 `input` 날짜만 시간이 아닌 결과 포함 <xref:System.DateTimeOffset> 개체를 할당 하는 시간을 자정 (0: 00:00). 경우에 일치 하는 요소의 `formats` 입력이 시간만 날짜가 아닌 결과 포함 되어 있어야 <xref:System.DateTimeOffset> 개체를 로컬 시스템의 현재 날짜를 할당 합니다. 경우에 일치 하는 요소의 `formats` 것을 요구 하지 않는 `input` 결과의 오프셋에 오프셋을 포함 <xref:System.DateTimeOffset> 개체의 값에 따라 달라 집니다는 `styles` 매개 변수입니다. 하는 경우 `styles` 포함 <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>, 현지 표준 시간대의 오프셋에 할당 되는 <xref:System.DateTimeOffset> 개체입니다. 경우 `styles` 포함 <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>, utc (협정 세계시) 오프셋 또는 + 00시 할당 되는 <xref:System.DateTimeOffset> 개체입니다. 두 값을 지정 하는 경우 현지 표준 시간대의 오프셋이 사용 됩니다.  
  
 특정 날짜 및 시간 기호 레지스트리에 `input` 에 의해 정의 됩니다는 `formatProvider` 매개 변수입니다. 정확한 패턴의 마찬가지 `input` 경우 일치 하는 요소의 `formats` 표준 서식 지정자 문자열입니다. `formatProvider` 매개 변수는 다음 중 하나일 수 있습니다.  
  
-   A <xref:System.Globalization.CultureInfo> 문화권을 나타내는 개체에 따라 `input` 해석 됩니다. 합니다 <xref:System.Globalization.DateTimeFormatInfo> 에서 반환 된 개체를 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> 속성 정의 기호 및 서식을 `input`합니다.  
  
-   <xref:System.Globalization.DateTimeFormatInfo> 날짜 및 시간 데이터 형식을 정의 하는 개체입니다.  
  
 하는 경우 `formatprovider` 됩니다 `null`, <xref:System.Globalization.CultureInfo> 현재 문화권에 해당 하는 개체를 사용 합니다.  
  
 `styles` 매개 변수는 공백이 허용 되는지 여부를 정의 입력된 문자열에서 나타내고 어떻게 명시적 오프셋된 구성 요소가 없는 문자열 구문 분석 되 고 구문 분석 작업의 일환으로 UTC 변환을 지원 합니다. 모든 멤버를 <xref:System.Globalization.DateTimeStyles> 열거형을 제외 하 고 지 <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>합니다. 다음 표에서 각 지원 되는 멤버의 효과 보여 줍니다.  
  
|`DateTimeStyles` 멤버|동작|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|구문 분석 `input` 필요한 UTC로 변환 하는 경우. 문자열을 구문 분석 한 다음에 해당 하는 것은 <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType> 메서드의 반환된 된 <xref:System.DateTimeOffset> 개체입니다.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|경우에 일치 하는 요소의 `formats` 것을 요구 하지 않는 `input` 반환 되는 오프셋된 값이 포함 되어 <xref:System.DateTimeOffset> 개체의 현지 표준 시간대 오프셋에 지정 됩니다. 기본값입니다.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|경우에 일치 하는 요소의 `formats` 것을 요구 하지 않는 `input` 반환 되는 오프셋된 값이 포함 되어 <xref:System.DateTimeOffset> 개체의 UTC 오프셋 (+ 00시)에 지정 됩니다.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|허용 `input` 의 요소에 지정 되지 않은 내부 공백 포함 하도록 `formats`합니다. 추가 공백 (오프셋) 제외 하 고 개별 구성 요소 내에서 날짜 및 시간 구성 요소 사이 나타날 수 있습니다 및 문자열을 구문 분석 하는 경우 무시 됩니다.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|허용 `input` 앞의 요소에 지정 되지 않은 공백을 포함할 `formats`합니다. 이러한 문자열을 구문 분석 하는 경우 무시 됩니다.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|허용 `input` 의 요소에 지정 되지 않은 공백을 후행를 포함 하도록 `formats`합니다. 이러한 문자열을 구문 분석 하는 경우 무시 됩니다.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|허용 `input` 의 요소에 지정 되지 않은 앞, 후행 공백 및 내부 공간을 포함 하도록 `formats`합니다. 에 있는 해당 요소에 지정 되지 않은 모든 추가 공백 문자 `formats` 문자열을 구문 분석 하는 경우 무시 됩니다.|  
|<xref:System.Globalization.DateTimeStyles.None>|에 추가 공백이 허용 되지 않습니다 나타냅니다 `input`합니다. 공백에서 특정 요소에 지정 된 대로 표시 되어야 합니다 `formats` 성공적인 일치 항목이 발생 합니다. 이것은 기본적인 동작입니다.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|아무런 영향을 주지는 <xref:System.DateTimeOffset> 구조에 포함 되지 않습니다는 `Kind` 속성입니다.|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="styles" />에 정의되지 않은 <see cref="T:System.Globalization.DateTimeStyles" /> 값이 들어 있습니다.  
또는 <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" />는 지원되지 않습니다.  
또는 <paramref name="styles" />에 함께 사용할 수 없는 <see cref="T:System.Globalization.DateTimeStyles" /> 값이 들어 있습니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string input, string format, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string input, string format, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As String, format As String, formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ input, System::String ^ format, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : string * string * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTimeOffset.TryParseExact (input, format, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">변환할 날짜 및 시간이 포함된 문자열입니다.</param>
        <param name="format"><paramref name="input" />의 필수 형식을 정의하는 서식 지정자입니다.</param>
        <param name="formatProvider"><paramref name="input" />에 대한 문화권별 서식 지정 정보를 제공하는 개체입니다.</param>
        <param name="styles">input에 사용할 수 있는 형식을 나타내는 열거형 값의 비트 조합입니다. 지정할 일반적인 값은 <see langword="None" />입니다.</param>
        <param name="result">메서드가 반환될 때 변환이 성공했으면 <paramref name="input" />의 날짜와 시간에 해당하는 <see cref="T:System.DateTimeOffset" />를 포함하고, 변환이 실패했으면 <see cref="F:System.DateTimeOffset.MinValue" />를 포함합니다. <paramref name="input" /> 매개 변수가 <see langword="null" />이거나 <paramref name="format" /> 및 <c>provider</c>에 정의된 예상 형식에 따라 날짜와 시간을 나타내는 유효한 문자열 표현을 포함하지 않으면 변환이 실패합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
        <summary>지정된 형식, 문화권별 형식 정보 및 스타일을 사용하여 날짜 및 시간의 지정된 문자열 표현을 해당 <see cref="T:System.DateTimeOffset" />으로 변환합니다. 문자열 표현의 형식이 지정된 형식과 정확하게 일치해야 합니다.</summary>
        <returns><paramref name="input" /> 매개 변수가 변환되었으면 <see langword="true" />이고, 변환되지 않았으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 오버 로드 된 <xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29> 메서드와 비슷합니다는 <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> 메서드를 제외 하 고 변환에 실패 하면이 메서드가 예외를 throw 하지 않습니다. 지정 된 패턴을 정확 하 게 일치 해야 하는 시간과 날짜의 문자열 표현을 구문 분석 된 `format` 매개 변수입니다. 경우는 `input` 문자열이 공백 정의한 일부의 변형 사용 하 여이 패턴을 일치 하지 않습니다 합니다 `styles` 매개 변수를 구문 분석 작업이 실패 하 고 메서드 반환 `false`합니다.  
  
 합니다 `format` 매개 변수는 단일 표준 형식 지정자 또는의 필수 패턴을 정의 하는 하나 이상의 사용자 지정 형식 지정자를 포함 하는 문자열로 `input`합니다. 유효한 서식 코드에 대 한 자세한 내용은 참조 하세요 [표준 날짜 및 시간 서식 문자열](~/docs/standard/base-types/standard-date-and-time-format-strings.md) 하 고 [사용자 지정 날짜 및 시간 형식 문자열](~/docs/standard/base-types/custom-date-and-time-format-strings.md)합니다. 경우 `format` 포함 된 `z`, `zz`, 또는 `zzz` 오프셋에 있어야 함을 나타내려면 사용자 지정 형식 지정자 `input`, 해당 오프셋은 음수 기호 또는 양수 기호를 포함 해야 합니다. 부호 없는 구문 분석 작업이 실패 하 고, 메서드가 반환 하는 경우 `false`합니다.  
  
 경우 `format` 되어 있어야 `input` 날짜가 들어에 시간이 아닌 결과 <xref:System.DateTimeOffset> 개체를 할당 하는 시간을 자정 (0: 00:00). 경우 `format` 되어 있어야 `input` 시간만 날짜가 아닌 결과 포함 <xref:System.DateTimeOffset> 개체를 로컬 시스템의 현재 날짜를 할당 합니다. 하는 경우 `format` 것을 요구 하지 않는 `input` 결과의 오프셋에 오프셋을 포함 <xref:System.DateTimeOffset> 개체의 값에 따라 달라 집니다는 `styles` 매개 변수입니다. 하는 경우 `styles` 포함 <xref:System.Globalization.DateTimeStyles.AssumeLocal>, 현지 표준 시간대의 오프셋에 할당 되는 <xref:System.DateTimeOffset> 개체입니다. 경우 `styles` 포함 <xref:System.Globalization.DateTimeStyles.AssumeUniversal>, utc (협정 세계시) 오프셋 또는 + 00시 할당 되는 <xref:System.DateTimeOffset> 개체입니다. 두 값을 지정 하는 경우 현지 표준 시간대의 오프셋이 사용 됩니다.  
  
 특정 날짜 및 시간 기호 및에서 사용 되는 문자열 `input` 가 정의한는 `formatProvider` 매개 변수입니다. 정확한 패턴의 마찬가지 `input` 경우 `format` 표준 서식 지정자 문자열입니다. `formatProvider` 매개 변수는 다음 중 하나일 수 있습니다.  
  
-   A <xref:System.Globalization.CultureInfo> 문화권을 나타내는 개체에 따라 `input` 해석 됩니다. 합니다 <xref:System.Globalization.DateTimeFormatInfo> 에서 반환 된 개체를 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> 기호를 정의 하는 속성 및 표준 형식에 허용 `input`합니다.  
  
-   <xref:System.Globalization.DateTimeFormatInfo> 날짜 및 시간 데이터 형식을 정의 하는 개체입니다.  
  
 하는 경우 `formatprovider` 됩니다 `null`, <xref:System.Globalization.CultureInfo> 현재 문화권에 해당 하는 개체를 사용 합니다.  
  
 `styles` 매개 변수는 공백이 허용 되는지 여부를 정의 입력된 문자열에서 나타내고 어떻게 명시적 오프셋된 구성 요소가 없는 문자열 구문 분석 되 고 구문 분석 작업의 일환으로 UTC 변환을 지원 합니다. 모든 멤버를 <xref:System.Globalization.DateTimeStyles> 열거형을 제외 하 고 지 <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>합니다. 다음 표에서 각 지원 되는 멤버의 효과 보여 줍니다.  
  
|`DateTimeStyles` 멤버|동작|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|구문 분석 `input` 필요한 UTC로 변환 하는 경우. 문자열을 구문 분석 한 다음에 해당 하는 것은 <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType> 메서드의 반환된 된 <xref:System.DateTimeOffset> 개체입니다.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|하는 경우 `format` 것을 요구 하지 않는 `input` 반환 되는 오프셋된 값이 포함 되어 <xref:System.DateTimeOffset> 개체의 현지 표준 시간대 오프셋에 지정 됩니다. 이것은 기본적인 동작입니다.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|하는 경우 `format` 것을 요구 하지 않는 `input` 반환 되는 오프셋된 값이 포함 되어 <xref:System.DateTimeOffset> 개체의 UTC 오프셋 (+ 00시)에 지정 됩니다.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|허용 `input` 형식으로 지정 되지 않은 내부 공백 포함 하도록 합니다. 추가 공백 날짜 및 시간 구성 요소 사이의 오프셋 이외의 개별 구성 요소 내에 나타날 수 있습니다 및 문자열을 구문 분석 하는 경우 무시 됩니다.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|허용 `input` 지정 되지 않은 선행 공백을 포함 하도록 `format`합니다. 이러한 문자열을 구문 분석 하는 경우 무시 됩니다.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|허용 `input` 후행 공백을 지정 되지 않은 포함 하도록 `format`합니다. 이러한 문자열을 구문 분석 하는 경우 무시 됩니다.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|허용 `input` 지정 되지 않은 앞, 후행 공백 및 내부 공백을 넣을 수 `format`입니다. 에 지정 되지 않은 모든 추가 공백 문자 `format` 문자열을 구문 분석 하는 경우 무시 됩니다.|  
|<xref:System.Globalization.DateTimeStyles.None>|에 추가 공백이 허용 되지 않습니다 나타냅니다 `input`합니다. 공백 문자에 지정 된 대로 표시 되어야 합니다 `format`합니다. 이것은 기본적인 동작입니다.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|아무런 영향을 주지는 <xref:System.DateTimeOffset> 구조에 포함 되지 않습니다는 `Kind` 속성입니다.|  
  
## Examples 

 다음 예제에서는 합니다 <xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29> 표준 및 사용자 지정 형식 지정자, 고정 문화권 및 다양 한 메서드 <xref:System.Globalization.DateTimeStyles> 여러 날짜 및 시간 문자열 구문 분석 하는 값입니다.  
  
 [!code-csharp[System.DateTimeOffset.TryParseExact#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.TryParseExact/cs/TryParseExact.cs#1)]
 [!code-vb[System.DateTimeOffset.TryParseExact#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.TryParseExact/vb/TryParseExact.vb#1)]  

다음 예제에서는 여러 가지 <xref:System.Globalization.DateTimeStyles> 값을 준수 해야 하는 문자열의 배열을 구문 분석할 [ISO 8601](~/docs/standard/base-types/standard-date-and-time-format-strings.md#the-round-trip-o-o-format-specifier)합니다. 예제의 출력에서 볼 수 있듯이 적절 한 형식으로 된 문자열을 하는 경우 구문 분석 실패 합니다.

- 공백 및 적절 한 있을 <xref:System.Globalization.DateTimeStyles> 플래그 (같은 <xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWithType> 메서드 호출에 제공 되지 않았습니다.

- 범위를 벗어나는 날짜 및 시간 요소를 포함 합니다.

UTC 오프셋을 지정 하지 않는 문자열의 현지 표준 시간대 오프셋에 있는 것으로 간주 됩니다 (이 경우-07:00 태평양 일광 절약 표준 시간대의 오프셋을 반영 하는) 하지 않는 한를 <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> 플래그는 메서드 호출에서 제공 됩니다. 이 경우 협정 세계시를 간주 됩니다.

[!code-csharp[Parsing ISO 8601 strings](~/samples/snippets/csharp/api/system/datetimeoffset/tryparseexact/tryparseexacto8601-2.cs)]
[!code-vb[Parsing ISO 8601 strings](~/samples/snippets/visualbasic/api/system/datetimeoffset/tryparseexact/tryparseexacto8601-2.vb)]
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="styles" />에 정의되지 않은 <see cref="T:System.Globalization.DateTimeStyles" /> 값이 들어 있습니다.  
  
또는 
 <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" />은 지원되지 않습니다.  
  
또는 
 <paramref name="styles" />에 함께 사용할 수 없는 <see cref="T:System.Globalization.DateTimeStyles" /> 값이 들어 있습니다.</exception>
        <block subset="none" type="usage"><para>에 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]는 <see cref="Overload:System.DateTimeOffset.TryParseExact" /> 반환 <see langword="false" /> 구문 분석 될 문자열이 시간 구성 요소와 계약에 없는 AM/PM 지정자를 포함할 경우. 에 [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] 이전 버전에서는 AM/PM 지정자는 무시 됩니다.</para></block>
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string input, string[] formats, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As String, formats As String(), formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ input, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : string * string[] * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTimeOffset.TryParseExact (input, formats, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">변환할 날짜 및 시간이 포함된 문자열입니다.</param>
        <param name="formats"><paramref name="input" />의 예상 형식을 정의하는 배열입니다.</param>
        <param name="formatProvider"><paramref name="input" />에 대한 문화권별 서식 지정 정보를 제공하는 개체입니다.</param>
        <param name="styles">input에 사용할 수 있는 형식을 나타내는 열거형 값의 비트 조합입니다. 지정할 일반적인 값은 <see langword="None" />입니다.</param>
        <param name="result">메서드가 반환될 때 변환이 성공했으면 <paramref name="input" />의 날짜와 시간에 해당하는 <see cref="T:System.DateTimeOffset" />를 포함하고, 변환이 실패했으면 <see cref="F:System.DateTimeOffset.MinValue" />를 포함합니다. <paramref name="input" />에 날짜 및 시간의 유효한 문자열 표현이 포함되어 있지 않거나 <paramref name="format" />에 정의된 예상 형식에 따른 날짜 및 시간이 포함되어 있지 않거나 <paramref name="formats" />가 <see langword="null" />이면 변환이 실패합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
        <summary>지정된 형식 배열, 문화권별 형식 정보 및 스타일을 사용하여 지정된 날짜와 시간의 문자열 표현을 해당 <see cref="T:System.DateTimeOffset" /> 표현으로 변환합니다. 문자열 표시의 형식은 지정된 형식 중 하나와 정확히 일치해야 합니다.</summary>
        <returns><paramref name="input" /> 매개 변수가 변환되었으면 <see langword="true" />이고, 변환되지 않았으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29> 에 할당 된 패턴 중 하 나와 일치 하는 날짜의 문자열 표현을 구문 분석 하는 메서드는 `formats` 배열입니다. 경우는 `input` 문자열이 정의한 변화를 사용 하 여 이러한 패턴 중 하 나와 일치 하지 않습니다 합니다 `styles` 매개 변수를 구문 분석 작업이 실패 하 고 메서드 반환 `false`합니다. 비교 하는 것 외 `input` 형식 지정자를 포함 하는 여러 문자열로,이 오버 로드 동일 하 게 동작 합니다 <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> 메서드.  
  
 합니다 `formats` 매개 변수는 요소가 포함 된 단일 표준 형식 지정자 또는 하나 이상의 사용자 지정 형식 지정자의 가능한 패턴을 정의 하는 문자열 배열 `input`합니다. 유효한 서식 코드에 대 한 자세한 내용은 참조 하세요 [표준 날짜 및 시간 서식 문자열](~/docs/standard/base-types/standard-date-and-time-format-strings.md) 하 고 [사용자 지정 날짜 및 시간 형식 문자열](~/docs/standard/base-types/custom-date-and-time-format-strings.md)합니다. 경우에 일치 하는 요소의 `formats` 포함 합니다 `z`를 `zz`, 또는 `zzz` 오프셋에 있어야 함을 나타내려면 사용자 지정 형식 지정자 `input`, 해당 오프셋은 음수 기호 또는 양수 기호를 포함 해야 합니다. 부호 없는 구문 분석 작업이 실패 하 고 메서드를 반환 하는 경우 `false`합니다.  
  
> [!IMPORTANT]
>  사용 하는 `formats` 여러 형식을 지정 하려면이 오버 로드의 시간과 날짜를 입력 하면 많은 사용자가 경험 하는 번거로움을 줄이는 데 도움이 됩니다. 특히 여러 개의 입력된 패턴을 정의 하는 기능 포함 하거나 부족 한 월, 일, 시간, 분 및 초를 앞에 오는 0 수 있는 날짜와 시간 표현을 처리 하도록 애플리케이션을 수 있습니다. 예제는이 보여 줍니다.  
  
 경우에 일치 하는 요소의 `formats` 되어 있어야 `input` 날짜만 시간이 아닌 결과 포함 <xref:System.DateTimeOffset> 개체를 할당 하는 시간을 자정 (0: 00:00). 경우에 일치 하는 요소의 `formats` 입력이 시간만 날짜가 아닌 결과 포함 되어 있어야 <xref:System.DateTimeOffset> 개체를 로컬 시스템의 현재 날짜를 할당 합니다. 경우에 일치 하는 요소의 `formats` 것을 요구 하지 않는 `input` 결과의 오프셋에 오프셋을 포함 <xref:System.DateTimeOffset> 개체의 값에 따라 달라 집니다는 `styles` 매개 변수입니다. 하는 경우 `styles` 포함 <xref:System.Globalization.DateTimeStyles.AssumeLocal>, 현지 표준 시간대의 오프셋에 할당 되는 <xref:System.DateTimeOffset> 개체입니다. 경우 `styles` 포함 <xref:System.Globalization.DateTimeStyles.AssumeUniversal>, utc (협정 세계시) 오프셋 또는 + 00시 할당 되는 <xref:System.DateTimeOffset> 개체입니다. 두 값을 지정 하는 경우 현지 표준 시간대의 오프셋이 사용 됩니다.  
  
 특정 날짜 및 시간 기호 및에서 사용 되는 문자열 `input` 가 정의한는 `formatProvider` 매개 변수입니다. 정확한 패턴의 마찬가지 `input` 경우 일치 하는 요소의 `formats` 표준 서식 지정자 문자열입니다. `formatProvider` 매개 변수는 다음 중 하나일 수 있습니다.  
  
-   A <xref:System.Globalization.CultureInfo> 문화권을 나타내는 개체에 따라 `input` 해석 됩니다. 합니다 <xref:System.Globalization.DateTimeFormatInfo> 에서 반환 된 개체를 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> 속성 정의 기호 및 서식을 `input`합니다.  
  
-   <xref:System.Globalization.DateTimeFormatInfo> 날짜 및 시간 데이터 형식을 정의 하는 개체입니다.  
  
 하는 경우 `formatprovider` 됩니다 `null`, <xref:System.Globalization.CultureInfo> 현재 문화권에 해당 하는 개체를 사용 합니다.  
  
 `styles` 매개 변수는 공백이 허용 되는지 여부를 정의 입력된 문자열에서 나타내고 어떻게 명시적 오프셋된 구성 요소가 없는 문자열 구문 분석 되 고 구문 분석 작업의 일환으로 UTC 변환을 지원 합니다. 모든 멤버를 <xref:System.Globalization.DateTimeStyles> 열거형을 제외 하 고 지 <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>합니다. 다음 표에서 각 지원 되는 멤버의 효과 보여 줍니다.  
  
|`DateTimeStyles` 멤버|동작|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|구문 분석 `input` 필요한 UTC로 변환 하는 경우. 문자열을 구문 분석 한 다음에 해당 하는 것은 <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType> 메서드의 반환된 된 <xref:System.DateTimeOffset> 개체입니다.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|경우에 일치 하는 요소의 `formats` 것을 요구 하지 않는 `input` 반환 되는 오프셋된 값이 포함 되어 <xref:System.DateTimeOffset> 개체의 현지 표준 시간대 오프셋에 지정 됩니다. 기본값입니다.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|경우에 일치 하는 요소의 `formats` 것을 요구 하지 않는 `input` 반환 되는 오프셋된 값이 포함 되어 <xref:System.DateTimeOffset> 개체의 UTC 오프셋 (+ 00시)에 지정 됩니다.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|허용 `input` 의 요소에 지정 되지 않은 내부 공백 포함 하도록 `formats`합니다. 추가 공백 (오프셋) 제외 하 고 개별 구성 요소 내에서 날짜 및 시간 구성 요소 사이 나타날 수 있습니다 및 문자열을 구문 분석 하는 경우 무시 됩니다.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|허용 `input` 앞의 요소에 지정 되지 않은 공백을 포함할 `formats`합니다. 이러한 문자열을 구문 분석 하는 경우 무시 됩니다.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|허용 `input` 의 요소에 지정 되지 않은 공백을 후행를 포함 하도록 `formats`합니다. 이러한 문자열을 구문 분석 하는 경우 무시 됩니다.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|허용 `input` 의 요소에 지정 되지 않은 앞, 후행 공백 및 내부 공간을 포함 하도록 `formats`합니다. 에 있는 해당 요소에 지정 되지 않은 모든 추가 공백 문자 `formats` 문자열을 구문 분석 하는 경우 무시 됩니다.|  
|<xref:System.Globalization.DateTimeStyles.None>|에 추가 공백이 허용 되지 않습니다 나타냅니다 `input`합니다. 공백에서 특정 요소에 지정 된 대로 표시 되어야 합니다 `formats` 성공적인 일치 항목이 발생 합니다. 이것은 기본적인 동작입니다.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|아무런 영향을 주지는 <xref:System.DateTimeOffset> 구조에 포함 되지 않습니다는 `Kind` 속성입니다.|  
  
   
  
## Examples  
 다음 예제에서는 날짜 및 시간 오프셋된 값의 문자열 표현에 대 한 여러 입력된 형식을 정의 하 고 다음 사용자가 입력 한 문자열을 전달 합니다 <xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29> 메서드.  
  
 [!code-csharp[System.DateTimeOffset.TryParseExact#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.TryParseExact/cs/TryParseExact.cs#2)]
 [!code-vb[System.DateTimeOffset.TryParseExact#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.TryParseExact/vb/TryParseExact.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="styles" />에 정의되지 않은 <see cref="T:System.Globalization.DateTimeStyles" /> 값이 들어 있습니다.  
  
또는 
 <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" />은 지원되지 않습니다.  
  
또는 
 <paramref name="styles" />에 함께 사용할 수 없는 <see cref="T:System.Globalization.DateTimeStyles" /> 값이 들어 있습니다.</exception>
        <block subset="none" type="usage"><para>에 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]는 <see cref="Overload:System.DateTimeOffset.TryParseExact" /> 반환 <see langword="false" /> 구문 분석 될 문자열이 시간 구성 요소와 계약에 없는 AM/PM 지정자를 포함할 경우. 에 [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] 이전 버전에서는 AM/PM 지정자는 무시 됩니다.</para></block>
      </Docs>
    </Member>
    <Member MemberName="UnixEpoch">
      <MemberSignature Language="C#" Value="public static readonly DateTimeOffset UnixEpoch;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTimeOffset UnixEpoch" />
      <MemberSignature Language="DocId" Value="F:System.DateTimeOffset.UnixEpoch" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UnixEpoch As DateTimeOffset " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTimeOffset UnixEpoch;" />
      <MemberSignature Language="F#" Value=" staticval mutable UnixEpoch : DateTimeOffset" Usage="System.DateTimeOffset.UnixEpoch" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UtcDateTime">
      <MemberSignature Language="C#" Value="public DateTime UtcDateTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime UtcDateTime" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.UtcDateTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UtcDateTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime UtcDateTime { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.UtcDateTime : DateTime" Usage="System.DateTimeOffset.UtcDateTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>가져옵니다를 <see cref="T:System.DateTime" /> utc (협정 세계시) 날짜와 현재 시간을 나타내는 값 <see cref="T:System.DateTimeOffset" /> 개체입니다.</summary>
        <value>현재 시간과 utc (협정 세계시) 날짜 <see cref="T:System.DateTimeOffset" /> 개체입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.UtcDateTime%2A> 속성 이중 변환을 수행 합니다.  
  
-   현재 시간과 날짜 변환 <xref:System.DateTimeOffset> 개체를 Utc (협정 세계시). 값을 빼서 변환이 수행 되며 합니다 <xref:System.DateTimeOffset.Offset%2A> 속성을 현재 시간과 날짜 <xref:System.DateTimeOffset> 개체.  
  
-   변환 된 <xref:System.DateTimeOffset> 값을 <xref:System.DateTime> 값입니다.  
  
 합니다 <xref:System.DateTime.Kind%2A> 반환 된 속성 <xref:System.DateTimeOffset.DateTime%2A> 값으로 설정 되어 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>입니다.  
  
 값을 검색 하는 <xref:System.DateTimeOffset.UtcDateTime%2A> 속성은 현재 호출 <xref:System.DateTimeOffset> 개체의 `ToUniversalTime.DateTime` 한다는 점을 제외 하는 속성인을 <xref:System.DateTime.Kind%2A> 후자의 속성 <xref:System.DateTime> 값은 <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>합니다.  
  
   
  
## Examples  
 다음 예제에서는 사용 하는 방법을 보여 줍니다 합니다 <xref:System.DateTimeOffset.UtcDateTime%2A> 속성을 표시는 <xref:System.DateTimeOffset> 값과 해당 UTC 시간입니다.  
  
 [!code-csharp[System.DateTimeOffset.Properties#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#17)]
 [!code-vb[System.DateTimeOffset.Properties#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#17)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UtcNow">
      <MemberSignature Language="C#" Value="public static DateTimeOffset UtcNow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTimeOffset UtcNow" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.UtcNow" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UtcNow As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTimeOffset UtcNow { DateTimeOffset get(); };" />
      <MemberSignature Language="F#" Value="member this.UtcNow : DateTimeOffset" Usage="System.DateTimeOffset.UtcNow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>가져옵니다를 <see cref="T:System.DateTimeOffset" /> 개체를 해당 날짜와 시간이 현재 utc (협정 세계시) 날짜와 시간으로 설정 되 고 해당 오프셋이 <see cref="F:System.TimeSpan.Zero" />합니다.</summary>
        <value>해당 날짜 및 시간 개체는 현재 협정 세계시 (UTC) 있고 해당 오프셋이 <see cref="F:System.TimeSpan.Zero" />합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.UtcNow%2A> 속성은 로컬 시스템의 표준 시간대를 정의한 오프셋과 현재 협정 세계시 (UTC) 로컬 시스템 시계 시간을 기준으로 계산 합니다.  
  
 현재 UTC 시간의 밀리초 구성 요소 전체 자릿수는 시스템 클록의 해상도에 따라 달라 집니다. Windows NT 3.5 이상 및 Windows Vista 운영 체제 시계의 약 10-15 밀리초입니다.  
  
   
  
## Examples  
 다음 예제에서는 (UTC) 협정 세계시와 현지 시간 사이의 관계를 보여 줍니다.  
  
 [!code-csharp[System.DateTimeOffset.Properties#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#18)]
 [!code-vb[System.DateTimeOffset.Properties#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#18)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.Now" />
      </Docs>
    </Member>
    <Member MemberName="UtcTicks">
      <MemberSignature Language="C#" Value="public long UtcTicks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 UtcTicks" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.UtcTicks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UtcTicks As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long UtcTicks { long get(); };" />
      <MemberSignature Language="F#" Value="member this.UtcTicks : int64" Usage="System.DateTimeOffset.UtcTicks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 시간과 날짜를 나타내는 틱 수를 가져옵니다 <see cref="T:System.DateTimeOffset" /> 개체의 Utc (협정 세계시).</summary>
        <value>틱 수를 <see cref="T:System.DateTimeOffset" /> 개체의 Utc (협정 세계시).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 값을 <xref:System.DateTimeOffset.UtcTicks%2A> 속성 0001 년 1 월 1 일 12시: 00 자정 이후 경과 된 100 나노초 간격의 수를 나타냅니다 (값 <xref:System.DateTimeOffset.MinValue>). 윤 초에 의해 추가 될 틱은 포함 되지 않습니다. 나노초는; 초의 1 분 초당에서 10 백만 틱 있습니다. 값을 <xref:System.DateTimeOffset.UtcTicks%2A> 속성에서 범위 `DateTimeOffset.MinValue.Ticks` 에 `DateTimeOffset.MaxValue.Ticks`입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Year">
      <MemberSignature Language="C#" Value="public int Year { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Year" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Year" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Year As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Year { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Year : int" Usage="System.DateTimeOffset.Year" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 날짜의 연도 구성 요소를 가져옵니다 <see cref="T:System.DateTimeOffset" /> 개체입니다.</summary>
        <value>현재 연도 구성 요소 <see cref="T:System.DateTimeOffset" /> 개체를 0에서 9999 사이의 정수 값으로 표현 합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.DateTimeOffset.Year%2A> 속성의 값에 영향을 받지는 <xref:System.DateTimeOffset.Offset%2A> 속성입니다.  
  
 문자열 표현을 만들 수도 있습니다는 <xref:System.DateTimeOffset> 를 호출 하 여 개체의 연도 구성 요소는 <xref:System.DateTimeOffset.ToString%2A> "y", "yy" 또는 "yyyy" 사용자 지정 형식 지정자를 사용 하 여 메서드.  
  
   
  
## Examples  
 연도 구성 요소를 표시 하는 다음 예제는 <xref:System.DateTimeOffset> 네 가지 방법으로 값:  
  
-   값을 검색 하 여 <xref:System.DateTimeOffset.Year%2A> 속성입니다.  
  
-   호출 하 여는 <xref:System.DateTimeOffset.ToString%28System.String%29> 메서드 "y" 서식 지정자를 포함 합니다.  
  
-   호출 하 여는 <xref:System.DateTimeOffset.ToString%28System.String%29> 메서드 "yy" 서식 지정자를 포함 합니다.  
  
-   호출 하 여는 <xref:System.DateTimeOffset.ToString%28System.String%29> "yyyy" 형식 지정자를 사용 하 여 메서드.  
  
 [!code-csharp[System.DateTimeOffset.Properties#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#19)]
 [!code-vb[System.DateTimeOffset.Properties#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#19)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>