<Type Name="GenericUriParser" FullName="System.GenericUriParser">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cf3c8341d323e07d5567abdb31609c4a7ce79bd3" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58741845" /></Metadata><TypeSignature Language="C#" Value="public class GenericUriParser : UriParser" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit GenericUriParser extends System.UriParser" />
  <TypeSignature Language="DocId" Value="T:System.GenericUriParser" />
  <TypeSignature Language="VB.NET" Value="Public Class GenericUriParser&#xA;Inherits UriParser" />
  <TypeSignature Language="C++ CLI" Value="public ref class GenericUriParser : UriParser" />
  <TypeSignature Language="F#" Value="type GenericUriParser = class&#xA;    inherit UriParser" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.UriParser</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>계층적 URI에 대한 사용자 지정할 수 있는 파서입니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 만들려는 경우를 잘 알려진 체계를 기반으로 하는 파서를 사용 <xref:System.HttpStyleUriParser>, <xref:System.FtpStyleUriParser>, <xref:System.GopherStyleUriParser>합니다 <xref:System.LdapStyleUriParser>, 또는 <xref:System.NewsStyleUriParser>합니다.  
  
 전달에 사용 가능한 값의 비트 조합 하 여 파서 동작을 지정 하는 사용자 지정 가능한 파서를 만들 때 합니다 <xref:System.GenericUriParserOptions?displayProperty=nameWithType> 열거형을 <xref:System.GenericUriParser> 생성자입니다.  
  
 기존 <xref:System.Uri?displayProperty=nameWithType> 클래스 식별자 IRI (International Resource) 및 이름을 IDN (Internationalized Domain)에 대 한 지원을 제공 하도록 확장 되었습니다. 현재 사용자의 경우 IRI를 사용하도록 설정하지 않는 한 .NET Framework 2.0 동작에서 차이를 느끼지 못할 것입니다. 이 덕분에 .NET Framework 이전 버전과의 애플리케이션 호환성이 제공됩니다.  
  
 파생 된 모든 파서 <xref:System.GenericUriParser> 기본적으로 IRI 및 IDN 지원을 얻지 것입니다. <xref:System.GenericUriParserOptions.Default> IRI 및 IDN 옵션이 포함 되지 않습니다 지원 합니다. 두 개의 새 값에 추가 됩니다는 <xref:System.GenericUriParserOptions?displayProperty=nameWithType> IRI 및 IDN 사용자 지정 파서를 지원 하는지 나타내는 열거형입니다.  
  
 IRI 및 IDN 지원에 대 한 자세한 내용은 설명 섹션을 참조 하세요.를 <xref:System.Uri?displayProperty=nameWithType> 클래스입니다.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GenericUriParser (GenericUriParserOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.GenericUriParserOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GenericUriParser.#ctor(System.GenericUriParserOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (options As GenericUriParserOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GenericUriParser(GenericUriParserOptions options);" />
      <MemberSignature Language="F#" Value="new GenericUriParser : GenericUriParserOptions -&gt; GenericUriParser" Usage="new System.GenericUriParser options" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="options" Type="System.GenericUriParserOptions" />
      </Parameters>
      <Docs>
        <param name="options">이 <see cref="T:System.GenericUriParser" />에 대한 옵션을 지정합니다.</param>
        <summary>계층적 URI에 대한 사용자 지정할 수 있는 파서를 만듭니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 생성자에 인수로 사용 <xref:System.UriParser.Register%28System.UriParser%2CSystem.String%2CSystem.Int32%29?displayProperty=nameWithType>  
  
 만들려는 경우를 잘 알려진 체계를 기반으로 하는 파서를 사용 <xref:System.HttpStyleUriParser>, <xref:System.FtpStyleUriParser>, <xref:System.GopherStyleUriParser>합니다 <xref:System.LdapStyleUriParser>, 또는 <xref:System.NewsStyleUriParser>합니다.  
  
 전달에 사용 가능한 값의 비트 조합 하 여 파서 동작을 지정 하는 사용자 지정 가능한 파서를 만들 때 합니다 <xref:System.GenericUriParserOptions?displayProperty=nameWithType> 열거형을 <xref:System.GenericUriParser> 생성자입니다.  
  
 기존 <xref:System.Uri?displayProperty=nameWithType> 클래스 식별자 IRI (International Resource) 및 이름을 IDN (Internationalized Domain)에 대 한 지원을 제공 하도록 확장 되었습니다. 현재 사용자의 경우 IRI를 사용하도록 설정하지 않는 한 .NET Framework 2.0 동작에서 차이를 느끼지 못할 것입니다. 이 덕분에 .NET Framework 이전 버전과의 애플리케이션 호환성이 제공됩니다.  
  
 파생 된 모든 파서 <xref:System.GenericUriParser> 기본적으로 IRI 및 IDN 지원을 얻지 것입니다. <xref:System.GenericUriParserOptions.Default> IRI 및 IDN 옵션이 포함 되지 않습니다 지원 합니다. 두 개의 새 값에 추가 됩니다는 <xref:System.GenericUriParserOptions?displayProperty=nameWithType> IRI 및 IDN 사용자 지정 파서를 지원 하는지 나타내는 열거형입니다.  
  
 <xref:System.GenericUriParserOptions.IriParsing> 형식은 파서가 RFC 3987에 지정된 IRI(International Resource Identifier)에 대한 구문 분석 규칙을 지원함을 나타냅니다. IRI 사용 여부는 구성 값에 따라 결정됩니다.  
  
 <xref:System.GenericUriParserOptions.Idn> 형식은 파서가 호스트 이름의 IDN(Internationalized Domain Name) 구문 분석을 지원함을 나타냅니다. IDN 사용 여부는 구성 값에 따라 결정됩니다.  
  
 구성 설정 합니다 <xref:System.Configuration.IdnElement?displayProperty=nameWithType> 간접적으로 제어 하 여는 <xref:System.Configuration.IriParsingElement?displayProperty=nameWithType> IRI 처리를 제어 하는 구성 설정는 <xref:System.Uri?displayProperty=nameWithType> 클래스. IDN 처리가 가능하려면 IRI 처리를 사용하도록 설정해야 합니다. IRI 처리가 사용하지 않도록 설정되면 IDN 처리는 .NET Framework 2.0 동작이 호환성에 사용되고 IDN 이름이 사용되지 않는 기본 설정으로 지정됩니다.  
  
 다국어 도메인 이름 (IDN) 특성만 IDN 처리를 제어합니다. 다른 모든 IRI 처리 (예: 문자 정규화)는 기본적으로 수행 됩니다.  
  
 IRI 및 IDN 지원에 대 한 자세한 내용은 설명 섹션을 참조 하세요.를 <xref:System.Uri?displayProperty=nameWithType> 클래스입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Configuration.IdnElement" />
        <altmember cref="T:System.Configuration.IriParsingElement" />
        <altmember cref="T:System.GenericUriParserOptions" />
        <altmember cref="T:System.Uri" />
      </Docs>
    </Member>
  </Members>
</Type>