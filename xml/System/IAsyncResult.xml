<Type Name="IAsyncResult" FullName="System.IAsyncResult">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c2ecc782eb2870d7590501d83dafc6e4f3812393" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58741087" /></Metadata><TypeSignature Language="C#" Value="public interface IAsyncResult" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IAsyncResult" />
  <TypeSignature Language="DocId" Value="T:System.IAsyncResult" />
  <TypeSignature Language="VB.NET" Value="Public Interface IAsyncResult" />
  <TypeSignature Language="C++ CLI" Value="public interface class IAsyncResult" />
  <TypeSignature Language="F#" Value="type IAsyncResult = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>비동기 작업의 상태를 나타냅니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IAsyncResult> 인터페이스는 비동기적으로 작동할 수 있는 메서드를 포함 하는 클래스로 구현 됩니다. 와 같은 비동기 작업을 시작 하는 메서드의 반환 형식인 것 <xref:System.IO.FileStream.BeginRead%2A?displayProperty=nameWithType>와 같은 비동기 작업을 끝내는 메서드에 전달 됩니다 <xref:System.IO.FileStream.EndRead%2A?displayProperty=nameWithType>합니다. <xref:System.IAsyncResult> 개체를 호출한 메서드에 전달도 <xref:System.AsyncCallback> 비동기 작업이 완료 되 면 위임 합니다.  
  
 지 원하는 개체를 <xref:System.IAsyncResult> 인터페이스는 비동기 작업에 대 한 상태 정보를 저장 하 고 스레드는 작업이 완료 될 때 신호를 보낼 수 있도록 동기화 개체를 제공 합니다.  
  
> [!NOTE]
>  <xref:System.Runtime.Remoting.Messaging.AsyncResult> 클래스의 구현인 <xref:System.IAsyncResult> 에서 반환 하는 `BeginInvoke` 대리자를 사용 하 여 비동기로 메서드를 호출 하는 메서드.  
  
 에 대 한 자세한 설명은 하는 방법을 <xref:System.IAsyncResult> 내용은 인터페이스를 사용 합니다 [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md) 항목입니다.  
  
   
  
## Examples  
 다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A> 가져올 속성은 <xref:System.Threading.WaitHandle>, 및 대리자에 대 한 비동기 호출 대기 하는 방법. 비동기 호출이 완료되면 <xref:System.Threading.WaitHandle> 은 신호를 받으며 <xref:System.Threading.WaitHandle.WaitOne%2A> 메서드를 호출하여 대기할 수 있습니다.  
  
 이 예제에서는 두 개의 클래스로 이루어져: 비동기적으로 호출 되는 메서드 및 포함 하는 클래스를 포함 하는 클래스는 `Main` 메서드 호출을 수행 하 합니다.  
  
 자세한 내용 및 대리자를 사용 하 여 메서드를 비동기적으로 호출 하는 더 많은 예제를 참조 하세요 [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)합니다.  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#3](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/waithandle.cpp#3)]
[!code-csharp[AsyncDelegateExamples#3](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/waithandle.cs#3)]
[!code-vb[AsyncDelegateExamples#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/WaitHandle.vb#3)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AsyncState">
      <MemberSignature Language="C#" Value="public object AsyncState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object AsyncState" />
      <MemberSignature Language="DocId" Value="P:System.IAsyncResult.AsyncState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AsyncState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ AsyncState { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AsyncState : obj" Usage="System.IAsyncResult.AsyncState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>비동기 작업을 한정하거나 정보를 포함하는 사용자 정의 개체를 가져옵니다.</summary>
        <value>비동기 작업을 한정하거나 정보를 포함하는 사용자 정의 개체입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성은 비동기 작업을 시작 하는 메서드의 마지막 매개 변수는 개체를 반환 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 방법을 <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState%2A> 속성 정보를 콜백 메서드로 전달 하는 데 사용 됩니다. 마지막 매개 변수는 `BeginInvoke` 메서드 호출이 될 콜백 메서드를 사용 하 여 출력 메시지의 형식을 지정 형식 문자열입니다.  
  
 이 예제에서는 두 개의 클래스로 이루어져: 비동기적으로 호출 되는 메서드 및 포함 하는 클래스를 포함 하는 클래스는 `Main` 메서드 호출을 수행 하 합니다.  
  
 콜백 예제 작동 하는 방법에 대 한 자세한 내용 및 대리자를 사용 하 여 메서드를 비동기적으로 호출 하는 더 많은 예제를 참조 하세요 [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)합니다.  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#5](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/callback.cpp#5)]
[!code-csharp[AsyncDelegateExamples#5](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/callback.cs#5)]
[!code-vb[AsyncDelegateExamples#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/callback.vb#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>비동기 작업의 호출자가 작업의 시작 부분에 지정 하는 응용 프로그램 정의 개체를 가져올 수 있도록이 속성을 구현 합니다.</para></block>
        <block subset="none" type="usage"><para>이 개체에 비동기 작업에 대 한 상태 정보를 전달할 수는 <see cref="T:System.AsyncCallback" /> 제공 하는 합니다.</para></block>
        <altmember cref="T:System.AsyncCallback" />
      </Docs>
    </Member>
    <Member MemberName="AsyncWaitHandle">
      <MemberSignature Language="C#" Value="public System.Threading.WaitHandle AsyncWaitHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.WaitHandle AsyncWaitHandle" />
      <MemberSignature Language="DocId" Value="P:System.IAsyncResult.AsyncWaitHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AsyncWaitHandle As WaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::WaitHandle ^ AsyncWaitHandle { System::Threading::WaitHandle ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AsyncWaitHandle : System.Threading.WaitHandle" Usage="System.IAsyncResult.AsyncWaitHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.WaitHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>비동기 작업이 완료될 때까지 기다리는 데 사용하는 <see cref="T:System.Threading.WaitHandle" />을 가져옵니다.</summary>
        <value>비동기 작업이 완료될 때까지 기다리는 데 사용하는 <see cref="T:System.Threading.WaitHandle" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 클라이언트 폴링 대신 완료 하기 위해 비동기 작업에 대 한 대기 허용 된 반환 값 <xref:System.IAsyncResult.IsCompleted%2A> 작업이 완료 될 때까지 합니다. 값을 반환 하는 데 사용할 수는 <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>, 또는 <xref:System.Threading.WaitHandle.WaitAll%2A> 작업 합니다.  
  
 공용 언어 런타임에서 제공 대기 가능 개체의 수와 같은 <xref:System.Threading.ManualResetEvent>, <xref:System.Threading.AutoResetEvent>, 및 <xref:System.Threading.Mutex>, Win32 동기화 기본형을 미러 모두 합니다.  
  
   
  
## Examples  
 다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.IAsyncResult.AsyncWaitHandle%2A> 가져올 속성은 <xref:System.Threading.WaitHandle>, 및 대리자에 대 한 비동기 호출 대기 하는 방법. 비동기 호출이 완료되면 <xref:System.Threading.WaitHandle> 은 신호를 받으며 <xref:System.Threading.WaitHandle.WaitOne%2A> 메서드를 호출하여 대기할 수 있습니다.  
  
 이 예제에서는 두 개의 클래스로 이루어져: 비동기적으로 호출 되는 메서드 및 포함 하는 클래스를 포함 하는 클래스는 `Main` 메서드 호출을 수행 하 합니다.  
  
 자세한 내용 및 대리자를 사용 하 여 메서드를 비동기적으로 호출 하는 더 많은 예제를 참조 하세요 [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)합니다.  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#3](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/waithandle.cpp#3)]
[!code-csharp[AsyncDelegateExamples#3](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/waithandle.cs#3)]
[!code-vb[AsyncDelegateExamples#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/WaitHandle.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>구현 하는 개체 <see cref="T:System.IAsyncResult" /> 만들 필요가 없습니다 합니다 <see cref="T:System.Threading.WaitHandle" /> 때까지 <see cref="P:System.IAsyncResult.AsyncWaitHandle" /> 속성이 읽기. 선택한 것을 <see cref="T:System.IAsyncResult" /> 구현자 합니다. 그러나 구현자를 만드는 경우 <see cref="P:System.IAsyncResult.AsyncWaitHandle" />, 것은 신호 구현자의 책임을 <see cref="T:System.Threading.WaitHandle" /> 는 적절 한 시간 대기를 종료 합니다. 예를 들어 <see cref="T:System.Runtime.Remoting.Messaging.AsyncResult" /> 를 비동기적으로 호출 된 메서드가 반환 될 때 호출자를 대신 하 여 대기를 종료 합니다. 일단 만들어지면 <see cref="P:System.IAsyncResult.AsyncWaitHandle" /> 해야 활성 상태로 유지 하도록 사용자를 비동기 작업을 끝내는 메서드를 호출할 때까지 합니다. 뒤의 개체가 당시 <see cref="P:System.IAsyncResult.AsyncWaitHandle" /> 삭제할 수 있습니다.</para></block>
        <block subset="none" type="usage"><para>작업이 완료 (폴링하는) 대기 하는 클라이언트에서 대기 하도록 동기화 개체를 가져오려면이 속성을 사용 합니다.  
  
 <block subset="none" type="note"><para>  
 사용 하는 경우는 <see langword="BeginInvoke" /> 메서드의 대리자를 비동기적으로 메서드를 호출 하 여 결과에서 대기 핸들을 가져오는 <see cref="T:System.IAsyncResult" />를 사용 하 여 호출 하 여 완료 되는 즉시 대기 핸들을 종료 하는 것이 좋습니다는 <see cref="M:System.Threading.WaitHandle.Close" /> 메서드. 단순히 대기 핸들에 대 한 모든 참조를 해제 하면 가비지 수집 대기 핸들을 회수 하지만 삭제 가능한 개체는 명시적으로 닫히거나 삭제 하는 경우 가비지 수집 보다 효율적으로 작동 하는 경우 시스템 리소스가 해제 됩니다. 자세한 내용은 <see cref="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle" /> 속성을 참조하세요.  
  
</para></block></para></block>
      </Docs>
    </Member>
    <Member MemberName="CompletedSynchronously">
      <MemberSignature Language="C#" Value="public bool CompletedSynchronously { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CompletedSynchronously" />
      <MemberSignature Language="DocId" Value="P:System.IAsyncResult.CompletedSynchronously" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CompletedSynchronously As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CompletedSynchronously { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CompletedSynchronously : bool" Usage="System.IAsyncResult.CompletedSynchronously" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>비동기 작업이 동기적으로 완료되었는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>비동기 작업이 동기적으로 완료되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 호출이 동기적으로 완료에서 발견 되는 경우는 <xref:System.AsyncCallback> 비동기 작업을 시작 하는 스레드는 현재 스레드의 가능성이 높습니다 대리자입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>대부분의 구현자는 <see cref="T:System.IAsyncResult" /> 인터페이스는이 속성을 사용 하지 않습니다 및 반환할지 <see langword="false" />합니다. 부터는 [!INCLUDE[net_v45](~/includes/net-v45-md.md)]를 사용 하 여 만든 작업을 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)" /> 메서드는이 속성을 올바르게 구현 되지 않은 경우 완료 되지 것입니다. 참조 [4.5의 응용 프로그램 호환성](~/docs/framework/migration-guide/application-compatibility-in-the-net-framework-4-5.md)합니다.</para></block>
        <block subset="none" type="usage"><para>비동기 작업이 동기적으로 완료 하는 경우를 확인 하려면이 속성을 사용 합니다. 이 속성을 반환할 수 있습니다 예를 들어 <see langword="true" /> 비동기 I/O 작업의 I/O 요청이 작은 경우.</para></block>
      </Docs>
    </Member>
    <Member MemberName="IsCompleted">
      <MemberSignature Language="C#" Value="public bool IsCompleted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCompleted" />
      <MemberSignature Language="DocId" Value="P:System.IAsyncResult.IsCompleted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCompleted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCompleted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCompleted : bool" Usage="System.IAsyncResult.IsCompleted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>비동기 작업이 완료되었는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>작업이 끝나면 <see langword="true" />이고 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성이 `true`를 안전 하 게 사용 하 여 비동기 작업에서 할당 한 리소스를 삭제할 것을 가정할 수 있습니다.  
  
   
  
## Examples  
 다음 예제에서는 사용 하는 방법을 보여 줍니다 합니다 <xref:System.IAsyncResult.IsCompleted%2A> 의 속성을 <xref:System.IAsyncResult> 비동기 호출이 완료 되 면 검색할. 비동기 호출을 사용 하 여이 예제의 경우 이루어집니다는 `BeginInvoke` 메서드의 대리자입니다. 사용할 수 있습니다는 <xref:System.IAsyncResult.IsCompleted%2A> 완료 하는 스레드에서 비동기 호출을 수행 하는 경우 서비스 사용자 인터페이스에 대 한 폴링 속성입니다. 완료에 대해 폴링하면 비동기 호출이 <xref:System.Threading.ThreadPool> 스레드에서 실행되는 동안 호출 스레드가 계속 실행될 수 있습니다.  
  
 이 예제에서는 두 개의 클래스로 이루어져: 비동기적으로 호출 되는 메서드 및 포함 하는 클래스를 포함 하는 클래스는 `Main` 메서드 호출을 수행 하 합니다.  
  
 자세한 내용 및 대리자를 사용 하 여 메서드를 비동기적으로 호출 하는 더 많은 예제를 참조 하세요 [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)합니다.  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#4](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/polling.cpp#4)]
[!code-csharp[AsyncDelegateExamples#4](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/polling.cs#4)]
[!code-vb[AsyncDelegateExamples#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/polling.vb#4)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>일반적으로 구현자가이 속성의 값으로 내부 테스트 전용 필드의 값을 반환 합니다.</para></block>
        <block subset="none" type="usage"><para>동기화 개체에서 대기 중) (반대로 작업 상태를 폴링하는 클라이언트 작업의 상태를 확인 하려면이 속성을 사용 합니다.</para></block>
      </Docs>
    </Member>
  </Members>
</Type>