<Type Name="ICustomFormatter" FullName="System.ICustomFormatter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7e0e89e011838e20213bc48e7d0a2f9e5f56f30c" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58681404" /></Metadata><TypeSignature Language="C#" Value="public interface ICustomFormatter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICustomFormatter" />
  <TypeSignature Language="DocId" Value="T:System.ICustomFormatter" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICustomFormatter" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICustomFormatter" />
  <TypeSignature Language="F#" Value="type ICustomFormatter = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>개체 값의 사용자 지정 서식 지정을 지원하는 메서드를 정의합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.ICustomFormatter> 단일 메서드를 포함 하는 인터페이스 <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>합니다. 이 인터페이스는 참조 또는 값 형식에 의해 구현 되는 <xref:System.ICustomFormatter.Format%2A> 메서드는 개체의 값의 사용자 지정 형식 문자열 표현을 반환 합니다.  
  
 일반적으로 <xref:System.ICustomFormatter> 인터페이스는 사용 하 여 구현 됩니다는 <xref:System.IFormatProvider> 의 두.NET Framework 복합 문자열 형식 지정 메서드를 포함 하는 동작을 사용자 지정 인터페이스는 <xref:System.IFormatProvider> 매개 변수. 특히 합니다 <xref:System.ICustomFormatter> 인터페이스에 전달 된 개체의 값에 대 한 사용자 지정 형식 지정을 제공할 수는 <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> 및 <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> 메서드.  
  
 사용자 지정 개체의 값 표현을 제공 하려면 다음을 수행 하는 필요 합니다.  
  
1.  구현 하는 클래스를 정의 합니다 <xref:System.ICustomFormatter> 인터페이스 및 해당 단일 멤버를 <xref:System.ICustomFormatter.Format%2A> 메서드.  
  
2.  구현 하는 클래스를 정의 합니다 <xref:System.IFormatProvider> 인터페이스 및 해당 단일 멤버를 <xref:System.IFormatProvider.GetFormat%2A> 메서드. 합니다 <xref:System.IFormatProvider.GetFormat%2A> 의 인스턴스를 반환 하는 방법에 <xref:System.ICustomFormatter> 구현 합니다. 단일 클래스 둘 다 구현 종종 <xref:System.ICustomFormatter> 고 <xref:System.IFormatProvider>입니다. 이런 경우, 클래스의 `GetFormat` 구현만 자체의 인스턴스를 반환 합니다.  
  
3.  전달 합니다 <xref:System.IFormatProvider> 구현으로를 `provider` 인수는 <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> 메서드 또는 비슷한 메서드.  
  
 .NET Framework 메서드는 자체 대신 사용자 지정 형식을 사용 합니다.  
  
   
  
## Examples  
 다음 예제에서는 구현 <xref:System.ICustomFormatter> 이진, 8 진수 및 16 진수 정수 계열 값의 서식 지정을 허용 하도록 합니다. 이 예에서 단일 클래스 `IBinaryFormatter`를 둘 다 구현 <xref:System.ICustomFormatter> 고 <xref:System.IFormatProvider>합니다. 해당 <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> 메서드를 결정 하는지 여부를 합니다 `formatType` 매개 변수를 나타냅니다는 <xref:System.ICustomFormatter> 형식. 그렇지 않으면 `BinaryFormatter` 인스턴스가 반환 자체를 반환 합니다 `null`합니다. 해당 <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> 구현 형식 매개 변수는 세 가지 지원 되는 형식 문자열 중 하나 인지 확인 ("B" "O"에 대 한 이진에 대 한 8 진수 및 16 진수에 대 한 "H") 하 고 서식을 지정 합니다 `arg` 매개 변수 적절 하 게 합니다. 그렇지 않은 경우, `arg` 아닙니다 `null`를 호출 합니다 `arg` 매개 변수의 <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> 있을 경우 구현 하거나 해당 매개 변수가 없는 `ToString` 메서드, 하나는 그렇지 않습니다. `arg`가 `null`이면 메서드에서 <xref:System.String.Empty?displayProperty=nameWithType>을 반환합니다.  
  
 [!code-csharp[System.ICustomFormatter.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#1)]
 [!code-vb[System.ICustomFormatter.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#1)]  
  
 `BinaryFormatter` 전달 하 여 사용자 지정 서식을 제공을 사용할 수 있습니다는 `BinaryFormatter` 개체를 `provider` 의 매개 변수는 <xref:System.String.Format%2A> 메서드를 다음 예제와 같이 합니다.  
  
 [!code-csharp[System.ICustomFormatter.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#2)]
 [!code-vb[System.ICustomFormatter.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#2)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>공용 언어 런타임에서 사용 하려고 시도 하 <see cref="T:System.ICustomFormatter" /> 합성 형식 문자열의 모든 형식 항목에 대 한 구현 합니다. 결과적으로 기대할 수 있는 프로그램 <see cref="T:System.ICustomFormatter" /> 구현을 호출 하 여 서식 지정 서비스 개체를 제공 하는 또는 처리 하도록 설계 되지는 값입니다. 이러한 경우에 <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> 메서드는 개체 또는 값에 대 한 적절 한 형식 지정 메서드를 호출 해야 합니다.  
  
두 가지 종류의 <see cref="T:System.ICustomFormatter" /> 구현: 내장 함수 및 확장 합니다.  
  
내장 함수 구현에는 응용 프로그램 정의 개체에 대 한 사용자 지정 서식 지정을 제공 하는 구현입니다. 이 경우 구현 해야 다음과 같은 
-정의 개체의 형식을 지정 하는 형식 문자열입니다. 형식 문자열은 선택 사항입니다. 일반적으로 "G" 또는 "g" 형식 문자열에는 일반 (또는 자주 사용 하는) 형식으로 정의합니다. 그러나 자유롭게를 선택 하는 형식 문자열을 정의할 수 있습니다. 대/소문자 구분 또는 대/소문자 구분 되는지 여부를 결정 하지 수도 있습니다.  
  
-개체의 형식을 전달할 수 있도록 테스트 프로그램 <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> 메서드는 응용 프로그램 정의 형식입니다. 없는 경우 개체의 호출 해야 <see cref="T:System.IFormattable" /> 구현, 있는 경우 또는 해당 <see cref="M:System.Object.ToString" /> 메서드를 사용할 수 없는 경우. 이러한 메서드 호출에서 throw 할 수 있는 예외를 처리 하도록 준비 해야 합니다.  
  
-구현 형식 문자열을 지 원하는 경우 null 서식 문자열을 처리 하는 코드입니다. 가장 일반적인 방법은 일반 서식 지정자를 사용 하 여 null 형식 문자열을 바꾸는 것입니다.  
  
-구현이 지 원하는 모든 서식 문자열을 처리 하는 코드입니다.  
  
-지원 되지 않는 형식 문자열을 처리 하는 코드입니다. 가장 일반적인 방법은 throw 하는 것을 <see cref="T:System.FormatException" />이지만 기본 서식 지정을 제공할 수 있습니다.  
  
확장 구현에는 이미 지원 서식 지정 하는 형식에 대 한 사용자 지정 서식 지정을 제공 하는 구현입니다. 예를 들어 정의할 수 있습니다는 <c>CustomerNumberFormatter</c> 서식을 지정 하는 특정 숫자 사이가 하이픈으로 정수 계열 형식입니다. 이 경우 구현 해야 다음과 같은 
-정의 된 개체의 형식을 확장 하는 형식 문자열입니다. 이러한 형식 문자열은 필요 하지만 형식의 기존 형식 문자열을 사용 하 여 충돌 하지 않아야 합니다. 예를 들어, 확장 하는 경우에 대 한 서식 지정을 <see cref="T:System.Int32" /> 형식, "C", "D", "E", "F"와 "G" 형식 지정자 중 일부를 구현 하지 않아야 합니다.  
  
개체의 형식에 전달 하는-테스트 프로그램 <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> 메서드는 서식 지정 확장 지원 형식입니다. 없는 경우 개체의 호출 <see cref="T:System.IFormattable" /> 구현, 있는 경우 또는 개체의 매개 변수가 없는 경우 <see cref="M:System.Object.ToString" /> 메서드를 사용할 수 없는 경우. 이러한 메서드 호출에서 throw 할 수 있는 예외를 처리 하도록 준비 해야 합니다.  
  
-코드 처리 확장 프로그램을 지 원하는 모든 서식 문자열입니다.  
  
-코드 처리 확장 프로그램을 지원 하지 않는 모든 서식 문자열입니다. 이러한 형식에 전달 되어야 합니다 <see cref="T:System.IFormattable" /> 구현 합니다. 이러한 메서드 호출에서 throw 할 수 있는 예외를 처리 하도록 준비 해야 합니다.</para></block>
    <altmember cref="T:System.IFormatProvider" />
  </Docs>
  <Members>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public string Format (string format, object arg, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Format(string format, object arg, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function Format (format As String, arg As Object, formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Format(System::String ^ format, System::Object ^ arg, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="abstract member Format : string * obj * IFormatProvider -&gt; string" Usage="iCustomFormatter.Format (format, arg, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">형식 지정 사양을 포함하는 형식 문자열입니다.</param>
        <param name="arg">서식을 지정할 개체입니다.</param>
        <param name="formatProvider">현재 인스턴스에 대한 서식 정보를 제공하는 개체입니다.</param>
        <summary>지정된 형식 및 문화권별 형식 지정 정보를 사용하여 지정된 개체의 값을 해당하는 문자열로 변환합니다.</summary>
        <returns><paramref name="arg" /> 및 <paramref name="format" />에서 지정한 대로 형식이 지정된 <paramref name="formatProvider" /> 값을 문자열로 나타낸 것입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> 은 콜백 메서드입니다. 와 같은 사용자 지정 형식을 지 원하는 메서드에 의해 호출 됩니다 <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> 또는 <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>합니다. 구현에서 각 형식 항목에 대해 한 번씩 호출 됩니다는 [복합 형식 문자열](~/docs/standard/base-types/composite-formatting.md)합니다. 예를 들어 다음 문에서는 <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> 메서드 세 번 호출 됩니다.  
  
 [!code-csharp[System.ICustomFormatter.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#4)]
 [!code-vb[System.ICustomFormatter.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#4)]  
  
 `arg` 매개 변수는 특정 형식 항목의 인덱스에 해당 하는 0부터 시작 위치가 개체 목록의 개체입니다.  
  
 합니다 `format` 매개 변수는 형식 문자열을 포함 합니다 `formatString` 형식 항목의 구성 요소입니다. 형식 항목이 없으면 `formatString` 구성 요소, 값 `format` 는 `null`합니다. 하는 경우 `format` 됩니다 `null`의 형식에 따라 `arg`, 선택한 기본 형식 지정을 사용할 수 있습니다.  
  
 `formatProvider` 매개 변수를 <xref:System.IFormatProvider> 구현에 대 한 서식 지정을 제공 하는 `arg`합니다. 인스턴스의 것이 일반적으로 프로그램 <xref:System.ICustomFormatter> 구현 합니다. 하는 경우 `formatProvider` 는 `null`, 해당 매개 변수를 무시 합니다.  
  
 구현 된 <xref:System.ICustomFormatter.Format%2A> 메서드에.NET Framework 지원 하지 않는 서식 지정을 제공할 수 있도록 다음과 같은 기능을 포함 해야 합니다. 형식 메서드 형식을 지원 하지 않으면, 결정 되는 개체 구현 포맷 되었는지는 <xref:System.IFormattable> 인터페이스입니다. 호출을 하는 경우는 <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> 해당 인터페이스의 메서드입니다. 그렇지 않으면 기본값을 호출할 <xref:System.Object.ToString%2A?displayProperty=nameWithType> 기본 개체의 메서드. 다음 코드에서는이 패턴을 보여 줍니다.  
  
 [!code-csharp[System.ICustomFormatter.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#3)]
 [!code-vb[System.ICustomFormatter.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#3)]  
  
   
  
## Examples  
 다음 예제에서는 구현 <xref:System.ICustomFormatter> 이진, 8 진수 및 16 진수 정수 계열 값의 서식 지정을 허용 하도록 합니다. 해당 <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> 구현 형식 매개 변수는 세 가지 지원 되는 형식 문자열 중 하나 인지 확인 ("B" "O"에 대 한 이진에 대 한 8 진수 및 16 진수에 대 한 "H") 하 고 서식을 지정 합니다 `arg` 매개 변수 적절 하 게 합니다. 그렇지 않은 경우, `arg` 아닙니다 `null`를 호출 합니다 `arg` 매개 변수의 <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> 있을 경우 구현 하거나 해당 매개 변수가 없는 `ToString` 메서드, 하나는 그렇지 않습니다. `arg`가 `null`이면 메서드에서 <xref:System.String.Empty?displayProperty=nameWithType>을 반환합니다.  
  
 [!code-csharp[System.ICustomFormatter.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#1)]
 [!code-vb[System.ICustomFormatter.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#1)]  
  
 `BinaryFormatter` 전달 하 여 사용자 지정 서식을 제공을 사용할 수 있습니다는 `BinaryFormatter` 개체를 `provider` 의 매개 변수는 <xref:System.String.Format%2A> 메서드를 다음 예제와 같이 합니다.  
  
 [!code-csharp[System.ICustomFormatter.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#2)]
 [!code-vb[System.ICustomFormatter.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormattable" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">.NET의 서식 지정 형식</related>
        <related type="Article" href="~/docs/standard/base-types/composite-formatting.md">복합 형식 지정</related>
      </Docs>
    </Member>
  </Members>
</Type>