<Type Name="IDisposable" FullName="System.IDisposable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0173afb2044bf3eff6d9c5187d74f826f4c4fa77" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58733149" /></Metadata><TypeSignature Language="C#" Value="public interface IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IDisposable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDisposable" />
  <TypeSignature Language="F#" Value="type IDisposable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>관리되지 않은 리소스 해제를 위한 메커니즘을 제공합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 관리 되지 않는 리소스를 해제 하는 데이 인터페이스의 기본 사용이 됩니다. 가비지 수집기는 자동으로 관리 되는 개체는 개체가 더 이상 사용 될 때 할당 된 메모리를 해제 합니다. 그러나 가비지 수집이 발생 하는 경우 예측할 수 없는 합니다. 또한 가비지 수집기 알지 창 핸들, 관리 되지 않는 리소스 또는 파일 및 스트림을 엽니다.  
  
 사용 하 여는 <xref:System.IDisposable.Dispose%2A> 명시적으로 가비지 수집기와 함께에서 관리 되지 않는 리소스를 해제 하려면이 인터페이스의 메서드입니다. 개체의 소비자는 개체가 더 이상 필요 없는 경우이 메서드를 호출할 수 없습니다.  
  
> [!WARNING]
>  주요 변경 내용 추가 하는 것은 <xref:System.IDisposable> 기존 클래스에 대 한 인터페이스입니다. 형식의 기존 소비자가 호출할 수 없습니다 때문에 <xref:System.IDisposable.Dispose%2A>, 해당 형식에서 보유 하는 관리 되지 않는 리소스를 해제 됩니다 확신할 수 없습니다.  
  
 때문에 합니다 <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> 인스턴스를 소유 하는 리소스를 더 이상 필요 없는 경우 구현 형식의 소비자가 호출 되 면 관리 되는 개체에 래핑해야 하거나는 <xref:System.Runtime.InteropServices.SafeHandle> (권장 되는 대체) 재정의해야하는또는<xref:System.Object.Finalize%2A?displayProperty=nameWithType>소비자가 호출 하는 관리 되지 않는 리소스를 확보 하려면 <xref:System.IDisposable.Dispose%2A>합니다.  
  
> [!IMPORTANT]
>  .NET framework에서는 c + + 컴파일러 리소스의 명확한 삭제를 지원 하며 직접 구현은 허용 하지 않습니다는 <xref:System.IDisposable.Dispose%2A> 메서드.  
  
 방법에 대 한 자세한 내용은이 인터페이스와 <xref:System.Object.Finalize%2A?displayProperty=nameWithType> 메서드 사용 되 고, 참조를 [가비지 수집](~/docs/standard/garbage-collection/index.md) 및 [Dispose 메서드 구현](~/docs/standard/garbage-collection/implementing-dispose.md) 항목.  
  
## <a name="using-an-object-that-implements-idisposable"></a>IDisposable을 구현 하는 개체를 사용 하 여  
 앱 간단히 구현 하는 개체를 사용 하는 경우는 <xref:System.IDisposable> 인터페이스 개체를 호출 해야 <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> 사용 하 여 작업을 마쳤으면 구현 합니다. 프로그래밍 언어에 따라 두 가지 방법 중 하나에서이 수행할 수 있습니다.  
  
-   언어를 사용 하 여 같은 생성 합니다 `using` C# 및 Visual Basic의 문입니다.  
  
-   에 대 한 호출을 래핑하여 합니다 <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> 구현에는 `try` / `finally` 블록입니다.  
  
> [!NOTE]
>  설명서에 대 한 구현 하는 형식을 <xref:System.IDisposable> 사실을 확인 하 고 호출에 대 한 알림을 포함 해당 <xref:System.IDisposable.Dispose%2A> 구현 합니다.  
  
<a name="Using"></a>   
### <a name="the-c-and-visual-basic-using-statement"></a>C# 및 Visual Basic Using 문  
 언어와 같은 구문을 지 원하는 경우는 [를 사용 하 여](~/docs/csharp/language-reference/keywords/using.md) C#의 문은 하며 [사용 하 여](~/docs/visual-basic/language-reference/statements/using-statement.md) Visual Basic의 문을 사용할 수 있습니다 명시적으로 호출 하는 대신 <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> 직접. 다음 예제에서는 정의에서이 접근 방식을 `WordCount` 파일과에서 단어 개수에 대 한 정보를 유지 하는 클래스입니다.  
  
 [!code-csharp[System.IDisposable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/calling1.cs#1)]
 [!code-vb[System.IDisposable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/calling1.vb#1)]  
  
 `using` 문은 실제로 편리한 구문입니다. 중간 언어 (IL)에 대 한 언어 컴파일러가 컴파일 타임에 구현 된 `try` / `finally` 블록입니다.  
  
 에 대 한 자세한 내용은 합니다 `using` 문을 참조는 [Using 문](~/docs/visual-basic/language-reference/statements/using-statement.md) 또는 [문을 사용 하 여](~/docs/csharp/language-reference/keywords/using-statement.md) 항목.  
  
### <a name="the-tryfinally-block"></a>Try/Finally 블록  
 프로그래밍 언어와 같은 생성자를 지원 하지 않는 경우는 `using` C# 또는 Visual Basic의 경우 문 또는 사용 하지 않으려는 경우 호출할 수 있습니다는 <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> 구현을 `finally` 블록을 `try` / `finally` 문입니다. 다음 예제에서는 대체 합니다 `using` 이전 예제에서 블록을 `try` / `finally` 블록입니다.  
  
 [!code-csharp[System.IDisposable#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/calling2.cs#2)]
 [!code-vb[System.IDisposable#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/calling2.vb#2)]  
  
 에 대 한 자세한 내용은 합니다 `try` / `finally` 패턴을 참조 하십시오 [시도 하는 중... Catch 하는 중... Finally 문](~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md), [try finally](~/docs/csharp/language-reference/keywords/try-finally.md), 또는 [try-finally 문](https://msdn.microsoft.com/library/514400c1-c322-4bf3-9e48-3047240b8a82)합니다.  
  
## <a name="implementing-idisposable"></a>IDisposable 구현  
 구현 해야 <xref:System.IDisposable> 형식을 관리 되지 않는 리소스를 직접 사용 하는 경우에 합니다. 형식의 소비자가 호출할 수 없습니다 프로그램 <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> 인스턴스가 더 이상 필요 없는 경우 리소스를 해제 하려면 구현 합니다. 호출에 실패 하는 경우를 처리 <xref:System.IDisposable.Dispose%2A>, 클래스에서 파생을 사용 하 여 <xref:System.Runtime.InteropServices.SafeHandle> 재정의 해야 하거나 관리 되지 않는 리소스를 래핑하는 <xref:System.Object.Finalize%2A?displayProperty=nameWithType> 메서드는 참조 형식에 대 한 합니다. 두 경우 모두 사용 하 여는 <xref:System.IDisposable.Dispose%2A> 확보, 해제 또는 관리 되지 않는 리소스를 다시 설정 등의 관리 되지 않는 리소스를 사용 하 여 모든 정리 반드시 수행 하는 방법입니다.  
  
> [!IMPORTANT]
>  기본 클래스를 정의 하는 경우 관리 되지 않는 리소스를 사용 하는, 또는 삭제 해야 하는 서브 클래스를 포함 하는 일을 할는 구현 해야 합니다 <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> 메서드는 두 번째 오버 로드를 제공 하 고 `Dispose`다음에 설명 된 대로 섹션입니다.  
  
<a name="BaseClasses"></a>   
## <a name="idisposable-and-the-inheritance-hierarchy"></a>IDisposable 및 상속 계층 구조  
 삭제 가능 해야 하는 서브 클래스를 사용 하 여 기본 클래스를 구현 해야 <xref:System.IDisposable> 다음과 같습니다. 구현 될 때마다이 패턴을 사용 해야 <xref:System.IDisposable> 없는 모든 형식에 `sealed` (`NotInheritable` Visual Basic에서).  
  
-   공용, 비가상 제공 해야 <xref:System.IDisposable.Dispose> 메서드와 보호 된 가상 `Dispose(Boolean disposing)` 메서드.  
  
-   합니다 <xref:System.IDisposable.Dispose> 메서드를 호출 해야 `Dispose(true)` 및 성능에 대 한 종료를 표시 하지 않아야 합니다.  
  
-   기본 형식은 종료자를 포함하지 않아야 합니다.  
  
 다음 코드 조각은 기본 클래스에 대 한 삭제 패턴을 반영합니다. 형식을 재정의 하지 않는 것으로 가정 합니다 <xref:System.Object.Finalize%2A?displayProperty=nameWithType> 메서드.  
  
 [!code-csharp[System.IDisposable#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/base1.cs#3)]
 [!code-vb[System.IDisposable#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/base1.vb#3)]  
  
 재정의 하는 경우는 <xref:System.Object.Finalize%2A?displayProperty=nameWithType> 메서드를 클래스에 다음 패턴을 구현 해야 합니다.  
  
 [!code-csharp[System.IDisposable#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/base2.cs#5)]
 [!code-vb[System.IDisposable#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/base2.vb#5)]  
  
 서브 클래스는 다음과 같이 삭제 가능한 패턴을 구현해야 합니다.  
  
-   `Dispose(Boolean)`을 재정의하고 기본 클래스 `Dispose(Boolean)` 구현을override 호출해야 합니다.  
  
-   필요한 경우 종료자를 제공할 수 있습니다. 종료자가 `Dispose(false)`을 호출해야 합니다.  
  
 파생된 클래스 구현 하지 않는 자체를 확인 합니다 <xref:System.IDisposable> 인터페이스 및 매개 변수가 없는 넣지 마십시오 <xref:System.IDisposable.Dispose%2A> 메서드. 기본 클래스 재정의 `Dispose(Boolean)` 메서드.  
  
 다음 코드는 파생된 클래스에 대 한 삭제 패턴을 반영합니다. 형식을 재정의 하지 않는 것으로 가정 합니다 <xref:System.Object.Finalize%2A?displayProperty=nameWithType> 메서드.  
  
 [!code-csharp[System.IDisposable#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/derived1.cs#4)]
 [!code-vb[System.IDisposable#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/derived1.vb#4)]  
  
   
  
## Examples  
 다음 예제에서는 구현 하는 리소스 클래스를 만드는 방법의 <xref:System.IDisposable> 인터페이스입니다.  
  
 [!code-cpp[System.IDisposable.Dispose Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CPP/idisposabledispose.cpp#1)]
 [!code-csharp[System.IDisposable.Dispose Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CS/idisposabledispose.cs#1)]
 [!code-vb[System.IDisposable.Dispose Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/VB/idisposabledispose.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle" />
    <related type="Article" href="~/docs/standard/garbage-collection/implementing-dispose.md">Dispose 메서드 구현</related>
  </Docs>
  <Members>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IDisposable.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit" Usage="iDisposable.Dispose " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>관리되지 않는 리소스의 확보, 해제 또는 다시 설정과 관련된 애플리케이션 정의 작업을 수행합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 닫거나 파일, 스트림 및이 인터페이스를 구현 하는 클래스의 인스턴스를 소유 하는 핸들 등의 관리 되지 않는 리소스를 해제 하려면이 메서드를 사용 합니다. 규칙에 따라이 메서드는 개체에서 보유 한 리소스 해제와 관련 된 모든 작업에 사용 하거나 개체를 다시 사용할 수 있도록 준비 합니다.  
  
> [!WARNING]
>  구현 하는 클래스를 사용 하는 경우는 <xref:System.IDisposable> 를 호출 해야 인터페이스를 해당 <xref:System.IDisposable.Dispose%2A> 클래스를 사용 하 여 작업을 마쳤으면 구현 합니다. 자세한 내용은 "IDisposable을 구현 하는 개체를 사용 하 여" 섹션을 참조 하세요.를 <xref:System.IDisposable> 항목입니다.  
  
 이 메서드를 구현 하는 경우에 포함 계층 구조를 통해 호출을 전파 하 여 리소스가 해제 됩니다 모든 보유를 확인 합니다. 예를 들어 개체는 개체 B를 할당 하 고 개체 B 개체 C에는 다음의 할당 <xref:System.IDisposable.Dispose%2A> 구현을 호출 해야 합니다 <xref:System.IDisposable.Dispose%2A> B에는 다시 호출 해야 <xref:System.IDisposable.Dispose%2A> c  
  
> [!IMPORTANT]
>  C + + 컴파일러가 리소스의 명확한 삭제를 지원 하며 직접 구현은 허용 하지 않습니다는 <xref:System.IDisposable.Dispose%2A> 메서드.  
  
 개체도 호출 해야 합니다는 <xref:System.IDisposable.Dispose%2A> 기본 클래스를 구현 하는 경우 기본 클래스의 메서드 <xref:System.IDisposable>합니다. 구현에 대 한 자세한 내용은 <xref:System.IDisposable> 기본 클래스 및 해당 하위 클래스에는 "IDisposable 및 상속 계층 구조" 섹션을 참조 합니다 <xref:System.IDisposable> 항목입니다.  
  
 개체의 <xref:System.IDisposable.Dispose%2A> 메서드가 두 번 이상 호출 되 면 개체가 첫 번째 이후의 모든 호출을 무시 해야 합니다. 개체 해야 하는 경우 예외를 throw 하지 해당 <xref:System.IDisposable.Dispose%2A> 메서드가 여러 번 호출 됩니다. 인스턴스 메서드 이외의 <xref:System.IDisposable.Dispose%2A> throw 할 수는 <xref:System.ObjectDisposedException> 리소스가 이미 삭제 됩니다.  
  
 사용자가 해제 된 상태와 할당 된 상태를 나타내는 특정 규칙을 사용 하는 리소스 형식이 예상 합니다. 이 예로 일반적으로 열린 것으로 간주 하거나 닫을 스트림 클래스입니다. 이러한 규칙에는 클래스의 구현자와 같은 사용자 지정 된 이름의 public 메서드를 구현 하기로 결정할 수 있다 `Close`는 호출을 <xref:System.IDisposable.Dispose%2A> 메서드.  
  
 때문에 합니다 <xref:System.IDisposable.Dispose%2A> 메서드를 명시적으로 호출 해야, 관리 되지 않는 리소스 되지 않는 위험은 항상 릴리스를 호출 하는 개체의 소비자 실패 하기 때문에 해당 <xref:System.IDisposable.Dispose%2A> 메서드. 이 문제를 방지 하는 방법은 두 가지:  
  
-   관리 되는 리소스에서 파생 된 개체에 래핑할 <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType>합니다. 프로그램 <xref:System.IDisposable.Dispose%2A> 하면 구현을 호출 합니다 <xref:System.IDisposable.Dispose%2A> 메서드의 <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType> 인스턴스. 자세한 내용은 "SafeHandle 대안" 섹션을 참조 합니다 <xref:System.Object.Finalize%2A?displayProperty=nameWithType> 항목입니다.  
  
-   리소스를 해제 하는 종료자를 구현 하면 <xref:System.IDisposable.Dispose%2A> 호출 되지 않습니다. 기본적으로 가비지 수집기는 메모리를 회수 하기 전에 개체의 종료 자가 자동으로 호출 합니다. 그러나 경우는 <xref:System.IDisposable.Dispose%2A> 메서드가 호출 필요한 경우가 아니라면 일반적으로 삭제 된 개체의 종료자를 호출 하는 가비지 수집기입니다. 자동 종료를 방지 하기 위해 <xref:System.IDisposable.Dispose%2A> 구현을 호출할 수는 <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> 메서드.  
  
 와 같은 관리 되지 않는 리소스를 액세스 하는 개체를 사용 하는 경우는 <xref:System.IO.StreamWriter>를 사용 하 여 인스턴스를 만드는 것이 좋습니다는 `using` 문입니다. 합니다 `using` 스트림과 호출에 자동으로 문을 닫습니다 <xref:System.IDisposable.Dispose%2A> 사용 하는 코드가 완료 되 면 개체에서. 예를 들어 참조 된 <xref:System.IO.StreamWriter> 클래스입니다.  
  
   
  
## Examples  
 다음 예제에서는 구현 하는 방법을 보여 줍니다는 <xref:System.IDisposable.Dispose%2A> 메서드.  
  
 [!code-cpp[System.IDisposable.Dispose Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CPP/idisposabledispose.cpp#1)]
 [!code-csharp[System.IDisposable.Dispose Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CS/idisposabledispose.cs#1)]
 [!code-vb[System.IDisposable.Dispose Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/VB/idisposabledispose.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/garbage-collection/implementing-dispose.md">Dispose 메서드 구현</related>
      </Docs>
    </Member>
  </Members>
</Type>