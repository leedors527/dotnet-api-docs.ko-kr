<Type Name="IFormattable" FullName="System.IFormattable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b2576510961cb47b6ac9c492844f7dae58d8f64e" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48589818" /></Metadata><TypeSignature Language="C#" Value="public interface IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IFormattable" />
  <TypeSignature Language="DocId" Value="T:System.IFormattable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IFormattable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IFormattable" />
  <TypeSignature Language="F#" Value="type IFormattable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>개체의 값을 문자열 표현으로 서식 지정하는 기능을 제공합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IFormattable> 인터페이스 개체는 형식 문자열과 형식 공급자에 따라 해당 문자열 표현으로 변환 합니다.  
  
 형식 문자열에는 일반적으로 개체의 전반적인 모양은 정의합니다. 예를 들어 다음.NET Framework를 지원합니다.  
  
-   열거형 값의 서식을 지정 하는 것에 대 한 표준 형식 문자열 (참조 [열거형 형식 문자열](~/docs/standard/base-types/enumeration-format-strings.md)).  
  
-   숫자 값의 서식을 지정 하는 것에 대 한 표준 및 사용자 지정 형식 문자열 (참조 [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) 하 고 [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md)).  
  
-   날짜 및 시간 값의 서식을 지정 하는 것에 대 한 표준 및 사용자 지정 형식 문자열 (참조 [표준 날짜 및 시간 서식 문자열](~/docs/standard/base-types/standard-date-and-time-format-strings.md) 하 고 [사용자 지정 날짜 및 시간 형식 문자열](~/docs/standard/base-types/custom-date-and-time-format-strings.md)).  
  
-   시간 간격 형식 지정에 대 한 표준 및 사용자 지정 형식 문자열 (참조 [표준 TimeSpan 서식 문자열](~/docs/standard/base-types/standard-timespan-format-strings.md) 하 고 [사용자 지정 TimeSpan 형식 문자열](~/docs/standard/base-types/custom-timespan-format-strings.md)).  
  
 또한 애플리케이션 정의 형식의 서식 지정을 지원 하기 위해 사용자 고유의 형식 문자열을 정의할 수 있습니다.  
  
 형식 공급자는 일반적으로 개체를 문자열 표현으로 변환할 때 사용 되는 기호를 정의 하는 서식 지정 개체를 반환 합니다. 예를 들어 통화 값을 숫자로 변환할 때 형식 공급자는 결과 문자열에 표시 되는 통화 기호를 정의 합니다. .NET Framework는 세 가지 형식 공급자를 정의합니다.  
  
-   합니다 <xref:System.Globalization.CultureInfo?displayProperty=nameWithType> 중 하나를 반환 하는 클래스를 <xref:System.Globalization.NumberFormatInfo> 숫자 값의 서식을 지정 하는 것에 대 한 개체 또는 <xref:System.Globalization.DateTimeFormatInfo> 날짜 및 시간 값의 서식을 지정 하는 것에 대 한 개체입니다.  
  
-   <xref:System.Globalization.NumberFormatInfo?displayProperty=nameWithType> 숫자 값의 서식을 지정 하는 것에 대 한 자체의 인스턴스를 반환 하는 클래스입니다.  
  
-   <xref:System.Globalization.DateTimeFormatInfo?displayProperty=nameWithType> 날짜 및 시간 값의 서식을 지정 하는 것에 대 한 자체의 인스턴스를 반환 하는 클래스입니다.  
  
 또한 문화권별, 직업 별로 제공할 사용자 고유의 사용자 지정 형식 공급자를 정의할 수 있습니다 또는 산업별 정보 서식 지정에 사용 합니다. 사용자 지정 형식 공급자를 사용 하 여 사용자 지정 서식을 구현 하는 방법에 대 한 자세한 내용은 참조 하세요. <xref:System.ICustomFormatter>합니다.  
  
 합니다 <xref:System.IFormattable> 는 단일 메서드를 정의 하는 인터페이스 <xref:System.IFormattable.ToString%2A>를 구현 하는 형식에 대 한 서식 지정 서비스를 제공 하는 합니다. <xref:System.IFormattable.ToString%2A> 메서드를 직접 호출할 수 있습니다. 또한 라고 자동으로 <xref:System.Convert.ToString%28System.Object%29?displayProperty=nameWithType> 및 <xref:System.Convert.ToString%28System.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType> 메서드 및 사용 하는 방법으로는 [복합 서식 지정 기능](~/docs/standard/base-types/composite-formatting.md) .NET Framework에서. 이러한 메서드를 포함 <xref:System.Console.WriteLine%28System.String%2CSystem.Object%29?displayProperty=nameWithType>, <xref:System.String.Format%2A?displayProperty=nameWithType>, 및 <xref:System.Text.StringBuilder.AppendFormat%28System.String%2CSystem.Object%29?displayProperty=nameWithType>, 특히 합니다. <xref:System.IFormattable.ToString%2A> 메서드의 형식 문자열의 각 서식 항목에 대 한 호출 됩니다.  
  
 <xref:System.IFormattable> 인터페이스는 기본 데이터 형식으로 구현 됩니다.  
  
   
  
## Examples  
 다음 예제에서는 `Temperature` 인터페이스를 구현하는 <xref:System.IFormattable> 클래스를 정의합니다. 이 클래스는 4 명의 형식 지정 자가 지원: 온도 섭씨;에 표시 되는 여부를 나타내는 "G" 및 "C" "F" 온도를 화씨로; 표시할 임을 나타냅니다 및 "K" 온도를 켈빈 표시할 임을 나타냅니다. 또한 합니다 <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> 구현도 처리할 수는 서식 문자열입니다 `null` 이거나 비어 있습니다. 다른 두 `ToString` 정의한 메서드를 `Temperature` 클래스는 호출을 래핑하는 <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> 구현 합니다.  
  
 [!code-csharp[System.IFormattable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iformattable/cs/example1.cs#1)]
 [!code-vb[System.IFormattable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iformattable/vb/example1.vb#1)]  
  
 다음 예제에서는 호출을 <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> 구현을 직접 또는 합성 서식 문자열을 사용 하 여 합니다.  
  
 [!code-csharp[System.IFormattable#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iformattable/cs/example1.cs#2)]
 [!code-vb[System.IFormattable#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iformattable/vb/example1.vb#2)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>보다는 문자열의 서식을 제어할 필요가 있는 클래스 <see cref="M:System.Object.ToString" /> 제공 구현 해야 <see cref="T:System.IFormattable" />합니다.  
  
구현 하는 클래스 <see cref="T:System.IFormattable" /> "G" (일반) 서식 지정자를 지원 해야 합니다. "G" 지정자 외 클래스 목록은 지원 되는 형식 지정자를 정의할 수 있습니다. 클래스는 형식 지정자를 처리 하도록 준비 해야 합니다 또한 <see langword="null" />합니다. 서식 지정 및 코드 서식 지정에 대 한 자세한 내용은 참조 하세요. [형식](~/docs/standard/base-types/formatting-types.md)</para></block>
    <altmember cref="T:System.IFormatProvider" />
    <altmember cref="M:System.Object.ToString" />
    <altmember cref="P:System.Threading.Thread.CurrentCulture" />
    <related type="Article" href="~/docs/standard/base-types/formatting-types.md">.NET의 서식 지정 형식</related>
  </Docs>
  <Members>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="abstract member ToString : string * IFormatProvider -&gt; string" Usage="iFormattable.ToString (format, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">사용할 형식입니다.  
  
또는 
<see cref="T:System.IFormattable" /> 구현의 형식에 대해 정의된 기본 형식을 사용하려는 경우 null 참조(Visual Basic의 경우 <see langword="Nothing" />)입니다.</param>
        <param name="formatProvider">값의 형식을 지정하는 데 사용할 공급자입니다.  
  
또는 
운영 체제의 현재 로캘 설정에서 숫자 형식 정보를 가져오려는 경우 null 참조(Visual Basic의 경우 <see langword="Nothing" />)입니다.</param>
        <summary>지정된 형식을 사용하여 현재 인스턴스 값의 형식을 지정합니다.</summary>
        <returns>지정된 형식의 현재 인스턴스 값입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IFormattable.ToString%2A> 메서드 값을 여러 가지 방법으로 표현할 수 있는 문자열 표현으로 변환 합니다. 정확한 형식은 특정 기호 또는 특정 문화권, 직업 또는 산업에서 정의한 지정된 된 순서에 따라 달라 집니다. 직접 메서드를 호출할 수 있습니다. 자동으로 라고도 합니다 <xref:System.Convert.ToString%28System.Object%29?displayProperty=nameWithType> 및 <xref:System.Convert.ToString%28System.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType> 메서드 및 복합 형식 지정을 사용 하는 방법으로 기능.NET framework에서 같은 <xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>, <xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>, 및 <xref:System.Text.StringBuilder.AppendFormat%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>. (자세한 내용은 [복합 서식 지정](~/docs/standard/base-types/composite-formatting.md).)  
  
 형식 메서드를 호출 하는 복합을 <xref:System.IFormattable.ToString%2A> 형식 문자열의 각 서식 항목에 한 번씩 메서드. 메서드에 전달 된 매개 변수를 다음과 같이 형식 항목의 콘텐츠 및 호출 되는 특정 형식 지정 방법을 따라:  
  
-   형식 항목 형식 문자열을 포함 하지 않습니다 (서식 항목은 경우에 예를 들어 `{0}`)에 전달 됩니다 `null` 값으로는 <xref:System.String?displayProperty=nameWithType> 매개 변수.  
  
-   형식 항목에는 서식 문자열을 포함 하는 경우 (예를 들어 `{0:G}`), 형식 문자열의 값으로 전달 되도록는 <xref:System.String?displayProperty=nameWithType> 매개 변수입니다.  
  
-   원래 메서드 호출을 포함 하지 않는 경우는 <xref:System.IFormatProvider?displayProperty=nameWithType> 매개 변수를 <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> 값으로 전달 되는 <xref:System.IFormatProvider?displayProperty=nameWithType> 매개 변수입니다.  
  
-   원래 메서드 호출에 포함 된 경우는 <xref:System.IFormatProvider?displayProperty=nameWithType> 매개 변수를 메서드 호출에서 제공 되는 공급자의 값으로 전달 되는 <xref:System.IFormatProvider?displayProperty=nameWithType> 매개 변수입니다.  
  
> [!NOTE]
>  개체의 <xref:System.IFormattable.ToString%2A> 전달 되지 않은 경우에 복합 형식 지정 메서드 구현을 호출는 <xref:System.ICustomFormatter> 형식 공급자 또는 경우에는 <xref:System.ICustomFormatter.Format%2A> 사용자 지정 형식 공급자의 메서드에 반환 `null`.  
  
 .NET Framework에 모두를 구현 하는 세 가지 형식 공급자는 <xref:System.IFormatProvider> 인터페이스:  
  
-   <xref:System.Globalization.NumberFormatInfo> 숫자 그룹 구분 기호 및 소수에 사용할 문자 등의 정보를 서식 지정 맞춤법 및 통화 값의 통화 기호 배치를 제공 합니다.  
  
-   <xref:System.Globalization.DateTimeFormatInfo> 월, 일 및 연도 날짜 패턴의 위치와 같은 관련 된 날짜 및 시간 관련 형식 지정 정보를 제공합니다.  
  
-   <xref:System.Globalization.CultureInfo> 기본 숫자 형식 정보를 포함 하 여 특정 문화권의 정보와 관련 된 날짜 및 시간 관련 서식 지정 정보를 서식 지정을 포함 합니다.  
  
 또한 사용자 고유의 사용자 지정 형식 공급자를 정의할 수 있습니다.  
  
   
  
## Examples  
 다음 예제는 `Temperature` 클래스를 구현 하는 <xref:System.IFormattable.ToString%2A> 메서드. 이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.IFormattable> 클래스입니다.  
  
 [!code-csharp[System.IFormattable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iformattable/cs/example1.cs#1)]
 [!code-vb[System.IFormattable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iformattable/vb/example1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" /> 메서드는 "G" (일반) 형식 지정자를 지원 해야 합니다. "G" 지정자 외 클래스 목록은 지원 되는 형식 지정자를 정의할 수 있습니다. 클래스는 형식 지정자를 처리 하도록 준비 해야 합니다 또한 <see langword="null" />합니다. 서식 지정 및 코드 서식 지정에 대 한 자세한 내용은 참조 하세요. [형식](~/docs/standard/base-types/formatting-types.md)합니다.</para></block>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.IFormatProvider" />
        <altmember cref="T:System.Globalization.NumberFormatInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
  </Members>
</Type>