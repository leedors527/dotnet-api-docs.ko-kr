<Type Name="InvalidOperationException" FullName="System.InvalidOperationException">
  <Metadata><Meta Name="ms.openlocfilehash" Value="810fe50283e801c3e7dde603475dc30ccd6ad1c8" /><Meta Name="ms.sourcegitcommit" Value="7845f124909a0999a19cc65f40feab5e75cd9b8d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="05/06/2019" /><Meta Name="ms.locfileid" Value="65064613" /></Metadata><TypeSignature Language="C#" Value="public class InvalidOperationException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit InvalidOperationException extends System.SystemException" />
  <TypeSignature Language="DocId" Value="T:System.InvalidOperationException" />
  <TypeSignature Language="VB.NET" Value="Public Class InvalidOperationException&#xA;Inherits SystemException" />
  <TypeSignature Language="C++ CLI" Value="public ref class InvalidOperationException : SystemException" />
  <TypeSignature Language="F#" Value="type InvalidOperationException = class&#xA;    inherit SystemException" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Exception</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>메서드 호출이 개체의 현재 상태에 대해 유효하지 않을 때 throw되는 예외입니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.InvalidOperationException> 잘못 된 인수 이외의 이유로 인해 메서드 호출에 실패 하는 경우에 경우에 사용 됩니다. 일반적으로 개체의 상태는이 메서드를 지원할 수 없는 경우 throw 됩니다. 예를 들어는 <xref:System.InvalidOperationException> 같은 메서드에서 throw 된 예외:  
  
-   <xref:System.Collections.IEnumerator.MoveNext%2A?displayProperty=nameWithType> 컬렉션의 개체 후 수정 되는 경우 열거자 생성 됩니다. 자세한 내용은 [것을 반복 하는 동안 컬렉션을 변경](#Iterating)합니다.  
  
-   <xref:System.Resources.ResourceSet.GetString%2A?displayProperty=nameWithType> 리소스 집합을 닫은 후에 메서드 호출이 이루어집니다.  
  
-   <xref:System.Xml.Linq.XContainer.Add%2A?displayProperty=nameWithType>에 추가할 개체를 잘못 구조화 된 XML 문서에서 초래 하는 경우.  
  
-   UI 없는 주 스레드나 UI 스레드를 조작 하려고 하는 메서드.  
  
> [!IMPORTANT]
>  때문에 합니다 <xref:System.InvalidOperationException> 예외를 throw 다양 한 상황을에서는 반환 된 예외 메시지를 꼭 읽으십시오는 <xref:System.Exception.Message%2A> 속성입니다.  
  
 섹션 내용  
  
 [몇 가지 일반적인 원인은 InvalidOperationException 예외](#Causes)   
 [UI가 아닌 스레드에서 UI 스레드를 업데이트 하는 중](#UI)  
 [이 반복 하는 동안 컬렉션 변경](#Iterating)  
 [해당 개체를 비교할 수 없습니다 배열 또는 컬렉션 정렬](#Sorting)  
 [Nullable 캐스팅&lt;T&gt; 해당 기본 형식에 null이](#Nullable)   
 [빈 컬렉션에 System.Linq.Enumerable 메서드가 호출](#Empty)  
 [하나의 요소가 없는 시퀀스에서 Enumerable.Single 또는 Enumerable.SingleOrDefault 호출](#Single)  
 [동적 응용 프로그램 간 도메인 필드 액세스](#Emit)  
[InvalidOperationException 예외를 throw](#Throwing)  
[기타 정보](#Misc)  
  
<a name="Causes"></a>   
## <a name="some-common-causes-of-invalidoperationexception-exceptions"></a>몇 가지 일반적인 원인은 InvalidOperationException 예외  
 다음 섹션에는 몇 가지 일반적인 경우 하는 방법을 보여 줍니다. <xref:System.InvalidOperationException> 앱에서 예외가 throw 됩니다. 문제를 처리 하는 방법은 특정 상황에 따라 달라 집니다. 가장 일반적으로 단, 예외에서에서 결과 개발자 오류 및 <xref:System.InvalidOperationException> 예외를 예상 하 고 방지할 수 있습니다.  
  
<a name="UI"></a>   
### <a name="updating-a-ui-thread-from-a-non-ui-thread"></a>UI가 아닌 스레드에서 UI 스레드를 업데이트 하는 중  
 종종 작업자 스레드 애플리케이션의 사용자 인터페이스에 표시 되는 데이터 수집을 포함 하는 몇 가지 백그라운드 작업 하는 데 사용 됩니다. 그러나 합니다. Windows Forms 및 Windows Presentation Foundation (WPF) 등.NET Framework에 대 한 대부분의 GUI (그래픽 사용자 인터페이스) 애플리케이션 프레임 워크를 사용 하면 수 스레드를 만들고 관리 UI (기본 또는 UI 스레드) 에서만 GUI 개체에 액세스 합니다. <xref:System.InvalidOperationException> UI 스레드가 아닌 스레드에서 UI 요소에 액세스 하려고 할 때 throw 됩니다.  예외 메시지의 텍스트는 다음 표에 표시 됩니다.  
  
|애플리케이션 종류|메시지|  
|----------------------|-------------|  
|WPF 앱|**호출 스레드가 소유 하는 다른 스레드가이 개체를 액세스할 수 없습니다.**|  
|UWP 앱|**응용 프로그램을 다른 스레드에 대 한 인터페이스에 마샬링 되었거나를 호출 했습니다.**|  
|Windows Forms 앱|**크로스 스레드 작업이 잘못 되었습니다. 컨트롤 'TextBox1' 스레드가 아닌 스레드에서 액세스 되었습니다.**|  
  
 .NET Framework에 대 한 UI 프레임 워크 구현 된 *발송자* UI 요소의 멤버에 대 한 호출을 UI 스레드에서 실행 되는지를 확인 하는 메서드 및 UI 스레드에서 호출을 예약 하는 기타 메서드가 포함 된 패턴:  
  
-   WPF 앱에서 호출 된 <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A?displayProperty=nameWithType> UI가 아닌 스레드에서 메서드를 실행 중인지 확인 하는 방법입니다. 반환 `true` 메서드는 UI 스레드에서 실행 중인 경우 및 `false` 그렇지 않은 경우. 오버 로드 중 하나를 호출 하 여 <xref:System.Windows.Threading.Dispatcher.Invoke%2A?displayProperty=nameWithType> UI 스레드에서 호출을 예약 하는 방법입니다.  
  
-   UWP 앱에서 호출 된 [CoreDispatcher.HasThreadAccess](https://msdn.microsoft.com/library/windows/apps/windows.ui.core.coredispatcher.hasthreadaccess.aspx) UI가 아닌 스레드에서 메서드를 실행 중인지 확인 하는 방법입니다. 호출 된 [CoreDispatcher.RunAsync](https://msdn.microsoft.com/library/windows/apps/windows.ui.core.coredispatcher.runasync.aspx) UI 스레드를 업데이트 하는 대리자를 실행 하는 방법입니다. 명령줄에서  
  
-   Windows Forms 앱에서 사용 된 <xref:System.Windows.Forms.Control.InvokeRequired%2A?displayProperty=nameWithType> UI가 아닌 스레드에서 메서드를 실행 하는 경우를 결정 하는 속성입니다. 오버 로드 중 하나를 호출 하 여 <xref:System.Windows.Forms.Control.Invoke%2A?displayProperty=nameWithType> UI 스레드를 업데이트 하는 대리자를 실행 하는 방법입니다.  
  
 다음 예제는 설명의 <xref:System.InvalidOperationException> 만든 스레드가 아닌 스레드에서 UI 요소를 업데이트 하려고 할 때 throw 되는 예외입니다.  각 예제에서는 두 개의 만들어야 합니다.  
  
-   텍스트 상자 컨트롤 이라는 `textBox1`합니다.  설정 해야 하는 Windows Forms 앱에서 해당 <xref:System.Windows.Forms.TextBox.Multiline%2A> 속성을 `true`입니다.  
  
-   이라는 button 컨트롤과 `threadExampleBtn`합니다. 이 예제에서는 처리기를 제공 `ThreadsExampleBtn_Click`, 단추에 대 한 `Click` 이벤트입니다.  
  
 각각의 경우에는 `threadExampleBtn_Click` 이벤트 처리기 호출을 `DoSomeWork` 메서드를 두 번입니다. 첫 번째 호출은 동기적으로 실행 되 고 성공 합니다. 하지만 두 번째 호출에서 스레드 풀 스레드에서 비동기적으로 실행 되기 때문에 하려고 UI가 아닌 스레드에서 UI를 업데이트 합니다. 이 인해는 <xref:System.InvalidOperationException> 예외입니다.  
  
 WPF 및 UWP 앱  
 [!code-csharp[System.InvalidOperationException.Threading.WPF1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wpf1/cs/MainWindow.xaml.cs#1)]
 [!code-vb[System.InvalidOperationException.Threading.WPF1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wpf1/vb/MainWindow.xaml.vb#1)]  
  
 다음 버전의 `DoSomeWork` 메서드 WPF 앱에서 예외를 제거 합니다.  
  
 [!code-csharp[System.InvalidOperationException.Threading.WPF2#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wpf2/cs/MainWindowDispatcher.xaml.cs#3)]
 [!code-vb[System.InvalidOperationException.Threading.WPF2#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wpf2/vb/MainWindowDispatcher.xaml.vb#3)]  
  
 다음 버전의 `DoSomeWork` 메서드 UWP 앱에서 예외를 제거 합니다.  
  
 [!code-csharp[System.InvalidOperationException.Threading.UWP#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception.threading.uwp/cs/MainPage.xaml.cs#4)]
 [!code-vb[System.InvalidOperationException.Threading.UWP#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception.threading.uwp/vb/MainPage.xaml.vb#4)]  
  
 Windows Forms 앱  
 [!code-csharp[System.InvalidOperationException.Threading.WF#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wf/cs/Form1.cs#2)]
 [!code-vb[System.InvalidOperationException.Threading.WF#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wf/vb/Form1.vb#2)]  
  
 다음 버전의 `DoSomeWork` 메서드는 Windows Forms 앱에서 예외를 제거 합니다.  
  
 [!code-csharp[System.InvalidOperationException.Threading.WF2#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wf2/cs/Form1.cs#5)]
 [!code-vb[System.InvalidOperationException.Threading.WF2#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wf2/vb/Form1.vb#5)]  
  
<a name="Iterating"></a>   
### <a name="changing-a-collection-while-iterating-it"></a>이 반복 하는 동안 컬렉션 변경  
 합니다 `foreach` C#의 문은 또는 `For Each` 컬렉션의 멤버를 반복할 읽기 또는 해당 개별 요소를 수정 하려면 Visual Basic에서 문이 사용 됩니다. 그러나 추가 하거나 컬렉션에서 항목을 제거 하려면 사용할 수 없습니다. Throw이 수행 하는 <xref:System.InvalidOperationException> 에 유사한 메시지와 함께 예외 "**컬렉션이 수정 되었습니다. 열거 작업이 실행 되지 않을 수 있습니다.** "  
  
 다음 예제에서는 컬렉션에 각 정수에 대 한 제곱을 추가 하 려 하면 정수 컬렉션을 반복 합니다. 이 예제에서는 throw를 <xref:System.InvalidOperationException> 첫 번째 호출을 사용 하 여는 <xref:System.Collections.Generic.List%601.Add%2A?displayProperty=nameWithType> 메서드.  
  
 [!code-csharp[System.InvalidOperationException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Iterating1.cs#1)]
 [!code-vb[System.InvalidOperationException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Iterating1.vb#1)]  
  
 애플리케이션 논리에 따라 두 가지 방법 중 하나에서 예외를 제거할 수 있습니다.  
  
-   이 반복 하는 동안 컬렉션에 요소를 추가 해야 할 인덱스를 사용 하 여 반복할 수 있습니다 합니다 `for` 대신 문을 `foreach` 또는 `For Each`합니다. 다음 예에서는 컬렉션에 컬렉션에 있는 숫자의 제곱을 추가 하는 문에 대 한 합니다.  
  
     [!code-csharp[System.InvalidOperationException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Iterating2.cs#2)]
     [!code-vb[System.InvalidOperationException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Iterating2.vb#2)]  
  
     뒤로 반복 하 여 루프를 적절 하 게 종료 됩니다 루프 카운터를 사용 하 여 컬렉션을 반복 하기 전에 반복 횟수를 설정 해야 하는 참고에서 `Count` -1에서 0 또는 번호를 할당 하 여 예제와 같이 루프의 상한값을 설정 하는 데 사용 하는 변수 배열에 적용 됩니다. 그렇지 않으면 요소 반복 될 때마다 컬렉션에 추가 되 면 무한 루프가 발생 합니다.  
  
-   이 반복 하는 동안 컬렉션에 요소를 추가할 필요가 없는 경우 컬렉션을 반복 마치면 추가한 임시 컬렉션에 추가 될 요소를 저장할 수 있습니다.  다음 예제에서는이 방법을 사용 하 여 숫자의 제곱 임시 컬렉션을 컬렉션에 추가 및 단일 배열 개체로 컬렉션을 결합 합니다.  
  
     [!code-csharp[System.InvalidOperationException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Iterating3.cs#3)]
     [!code-vb[System.InvalidOperationException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Iterating3.vb#3)]  
  
<a name="Sorting"></a>   
### <a name="sorting-an-array-or-collection-whose-objects-cannot-be-compared"></a>해당 개체를 비교할 수 없습니다 배열 또는 컬렉션 정렬  
 정렬 메서드의 같은 범용 합니다 <xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType> 메서드 또는 <xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType> 메서드를 일반적으로 필요 구현 하는 하나 이상의 개체를 정렬할 합니다 <xref:System.IComparable%601> 또는 <xref:System.IComparable> 인터페이스. 그렇지 않은 컬렉션 또는 배열을 정렬할 수 없습니다, 하 고 메서드가 throw는 <xref:System.InvalidOperationException> 예외입니다. 다음 예제에서는 정의 `Person` 클래스에 두 개의 저장소 `Person` 개체를 일반에서 <xref:System.Collections.Generic.List%601> 개체 및 정렬 하려고 합니다. 예제에 대 한 호출의 출력으로는 <xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType> 메서드가 throw는 <xref:System.InvalidOperationException>합니다.  
  
 [!code-csharp[System.InvalidOperationException#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/List_Sort1.cs#12)]
 [!code-vb[System.InvalidOperationException#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/List_Sort1.vb#12)]  
  
 세 가지 방법 중 하나에서 예외를 제거할 수 있습니다.  
  
-   (즉, 제어할 경우 소스 코드)를 정렬 하려고 하는 형식을 소유할 수 있습니다, 구현할를 수정할 수 있습니다 합니다 <xref:System.IComparable%601> 또는 <xref:System.IComparable> 인터페이스입니다. 이 위해서는 중 하나를 구현 합니다 <xref:System.IComparable%601.CompareTo%2A?displayProperty=nameWithType> 또는 <xref:System.IComparable.CompareTo%2A> 메서드. 인터페이스를 구현할 때 기존 형식에 추가 되었습니다 크게 변경 되었습니다.  
  
     다음 예제에서는이 방법을 사용 하 여 제공을 <xref:System.IComparable%601> 에 대 한 구현을 `Person` 클래스입니다. 컬렉션 또는 배열의 일반 정렬 메서드를 호출할 수 있습니다 및 예제의 출력에서 볼 수 있듯이 컬렉션 정렬 했습니다.  
  
     [!code-csharp[System.InvalidOperationException#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/List_Sort2.cs#13)]
     [!code-vb[System.InvalidOperationException#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/List_Sort2.vb#13)]  
  
-   정렬 하려는 형식에 대 한 소스 코드를 수정할 수 없는 경우 구현 하는 특수 한 용도의 정렬 클래스를 정의할 수 있습니다는 <xref:System.Collections.Generic.IComparer%601> 인터페이스입니다.  오버 로드를 호출할 수 있습니다 합니다 `Sort` 포함 하는 메서드는 <xref:System.Collections.Generic.IComparer%601> 매개 변수입니다. 이 방법은 여러 조건을 기반으로 하는 개체를 정렬할 수 있는 특수 한 정렬 클래스를 개발 하려는 경우에 특히 유용 합니다.  
  
     다음 예제에서는 사용자 지정을 개발 하 여 방법을 사용 `PersonComparer` 정렬 하는 데 사용 되는 클래스 `Person` 컬렉션입니다.  그런 다음이 클래스의 인스턴스로 전달 된 <xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29?displayProperty=nameWithType> 메서드.  
  
     [!code-csharp[System.InvalidOperationException#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/List_Sort3.cs#14)]
     [!code-vb[System.InvalidOperationException#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/List_Sort3.vb#14)]  
  
-   형식에 대 한 소스 코드를 수정할 수 없는 경우 정렬 하려는 경우 만들 수 있습니다는 <xref:System.Comparison%601> 정렬을 수행할 대리자입니다. 대리자 시그니처는  
  
    ```vb  
    Function Comparison(Of T)(x As T, y As T) As Integer  
    ```  
  
    ```csharp  
    int Comparison<T>(T x, T y)  
    ```  
  
     다음 예제에서는 정의한 방법을 사용을 `PersonComparison` 일치 하는 메서드는 <xref:System.Comparison%601> 대리자 시그니처입니다.  그런 다음이 대리자에 전달 된 <xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29?displayProperty=nameWithType> 메서드.  
  
     [!code-csharp[System.InvalidOperationException#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/List_Sort4.cs#15)]
     [!code-vb[System.InvalidOperationException#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/List_Sort4.vb#15)]  
  
<a name="Nullable"></a>   
### <a name="casting-a-nullablet-that-is-null-to-its-underlying-type"></a>Nullable 캐스팅\<T >는 해당 기본 형식에 null  
 캐스팅 하려고를 <xref:System.Nullable%601> 값이 `null` 해당 기본 형식에 throw는 <xref:System.InvalidOperationException> 예외 오류 메시지를 표시 하 고 "**Nullable 개체 값이 있어야 합니다.**  
  
 다음 예제에서는 throw를 <xref:System.InvalidOperationException> 포함 된 배열을 반복 하려고 할 때 예외를 `Nullable(Of Integer)` 값입니다.  
  
 [!code-csharp[System.InvalidOperationException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Nullable1.cs#4)]
 [!code-vb[System.InvalidOperationException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Nullable1.vb#4)]  
  
 예외를 방지할:  
  
-   사용 된 <xref:System.Nullable%601.HasValue%2A?displayProperty=nameWithType> 속성을 선택 하지 않은 요소만 `null`.  
  
-   중 하나를 호출 합니다 <xref:System.Nullable%601.GetValueOrDefault%2A?displayProperty=nameWithType> 오버 로드에 대 한 기본 값을 제공 하는 `null` 값입니다.  
  
 다음 예제와 방지 하려면 둘 다를 <xref:System.InvalidOperationException> 예외입니다.  
  
 [!code-csharp[System.InvalidOperationException#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Nullable2.cs#5)]
 [!code-vb[System.InvalidOperationException#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Nullable2.vb#5)]  
  
<a name="Empty"></a>   
### <a name="calling-a-systemlinqenumerable-method-on-an-empty-collection"></a>빈 컬렉션에 System.Linq.Enumerable 메서드가 호출  
 <xref:System.Linq.Enumerable.Aggregate%2A?displayProperty=nameWithType>, <xref:System.Linq.Enumerable.Average%2A?displayProperty=nameWithType>, <xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType>, <xref:System.Linq.Enumerable.Last%2A?displayProperty=nameWithType>를 <xref:System.Linq.Enumerable.Max%2A?displayProperty=nameWithType>를 <xref:System.Linq.Enumerable.Min%2A?displayProperty=nameWithType>, <xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType>, 및 <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType> 메서드 시퀀스에 대 한 작업을 수행 하 고 단일 결과 반환 합니다.   이러한 메서드의 일부 오버 로드를 throw 한 <xref:System.InvalidOperationException> 시퀀스가 비어 있지만 다른 오버 로드를 반환 하는 동안 예외가 발생 `null`합니다. <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType> 메서드는 또한 throw는 <xref:System.InvalidOperationException> 시퀀스에 요소가 둘 이상 포함 하는 동안 예외가 발생 합니다.  
  
> [!NOTE]
>  대부분의 throw 하는 메서드는 <xref:System.InvalidOperationException> 예외는 오버 로드 합니다. 선택 하는 오버 로드의 동작을 이해 해야 합니다.  
  
 다음 표에서에서 예외 메시지를 <xref:System.InvalidOperationException> 일부에 대 한 호출에서 throw 된 예외 개체 <xref:System.Linq.Enumerable?displayProperty=nameWithType> 메서드.  
  
|메서드|메시지|  
|------------|-------------|  
|`Aggregate` <br /> `Average` <br /> `Last` <br /> `Max` <br /> `Min`|**시퀀스에 요소가 없습니다.**|  
|`First`|**시퀀스에 일치 하는 요소가 없으면**|  
|`Single` <br /> `SingleOrDefault`|**시퀀스에 일치 하는 요소가 둘 이상**|  
  
 제거 하거나 예외를 처리 하는 방법을 호출 하는 특정 방법 및 애플리케이션의 가정에 따라 달라 집니다.  
  
-   의도적으로 하나를 호출 하면 이러한 메서드의 빈 시퀀스를 확인 하지 않고, 시퀀스가 비어 있지 않으면 이며 빈 시퀀스는 예상치 못한 동작 이라고 가정 합니다. 이 예제의 예외 다시 throw 또는 catch 할 적절 한 경우.  
  
-   빈 시퀀스를 확인 하지 못하면 의도 하지 않은 경우, 오버 로드 중 하나를 호출할 수 있습니다는 <xref:System.Linq.Enumerable.Any%2A?displayProperty=nameWithType> 오버 로드를 시퀀스에 요소가 하나라도 있는지 여부를 결정 합니다.  
  
    > [!TIP]
    >  호출 된 <xref:System.Linq.Enumerable.Any%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29?displayProperty=nameWithType> 메서드 시퀀스를 생성 하기 전에 처리할 데이터를 많은 수의 요소 또는 시퀀스를 생성 하는 작업은 비용이 많이 드는 경우 있을 경우 성능을 개선할 수 있습니다.  
  
-   와 같은 메서드를 호출 하는 경우 <xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType>, <xref:System.Linq.Enumerable.Last%2A?displayProperty=nameWithType>, 또는 <xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType>와 같은 다른 방법 대신 사용할 수 있습니다 <xref:System.Linq.Enumerable.FirstOrDefault%2A?displayProperty=nameWithType>를 <xref:System.Linq.Enumerable.LastOrDefault%2A?displayProperty=nameWithType>, 또는 <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType>, 시퀀스의 멤버가 아닌 기본 값을 반환 합니다.  
  
 예제 추가 정보를 제공합니다.  
  
 다음 예제에서는 <xref:System.Linq.Enumerable.Average%2A?displayProperty=nameWithType> 해당 값은 4 보다 큰 시퀀스의 평균을 계산 하는 방법입니다. 원래 배열에서 값이 없는 초과 4, 값이 없는 시퀀스에 포함 되 고 메서드에서 throw 하므로 <xref:System.InvalidOperationException> 예외입니다.  
  
 [!code-csharp[System.InvalidOperationException#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable1.cs#6)]
 [!code-vb[System.InvalidOperationException#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable1.vb#6)]  
  
 예외를 호출 하 여 제거할 수는 <xref:System.Linq.Enumerable.Any%2A> 다음 예와 같이 시퀀스를 처리 하는 메서드를 호출 하기 전에 시퀀스에 요소가 하나라도 있는지 여부를 결정 하는 방법입니다.  
  
 [!code-csharp[System.InvalidOperationException#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable2.cs#7)]
 [!code-vb[System.InvalidOperationException#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable2.vb#7)]  
  
 <xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType> 메서드 시퀀스 또는 지정된 된 조건을 만족 하는 시퀀스의 첫 번째 요소에서 첫 번째 항목을 반환 합니다. Throw 시퀀스 비어 있고 따라서 첫 번째 요소를 없습니다, 하는 경우는 <xref:System.InvalidOperationException> 예외입니다.  
  
 다음 예제에서는 <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29?displayProperty=nameWithType> 메서드가 throw는 <xref:System.InvalidOperationException> 예외 dbQueryResults 배열 4 보다 큰 요소가 없으므로 합니다.  
  
 [!code-csharp[System.InvalidOperationException#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable3.cs#8)]
 [!code-vb[System.InvalidOperationException#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable3.vb#8)]  
  
 호출할 수 있습니다 합니다 <xref:System.Linq.Enumerable.FirstOrDefault%2A?displayProperty=nameWithType> 메서드 대신 <xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType> 지정 된 반환 값 이나 기본값을 합니다. 메서드 시퀀스의 첫 번째 요소를 찾지 못하면 해당 데이터 형식에 대 한 기본값을 반환 합니다.  기본값은 `null` 숫자 데이터 형식에 대 한 0 참조 형식의 경우 및 <xref:System.DateTime.MinValue?displayProperty=nameWithType> 에 대 한는 <xref:System.DateTime> 형식입니다.  
  
> [!NOTE]
>  반환 된 값을 해석 합니다 <xref:System.Linq.Enumerable.FirstOrDefault%2A?displayProperty=nameWithType> 메서드는 종종 복잡 형식의 기본 값 시퀀스의 유효한 값 수는 있습니다. 호출 하면이 경우에는 <xref:System.Linq.Enumerable.Any%2A?displayProperty=nameWithType> 시퀀스 호출 하기 전에 유효한 구성원에 있는지 여부를 결정 하는 방법의 <xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType> 메서드.  
  
 다음 예제에서는 합니다 <xref:System.Linq.Enumerable.FirstOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29?displayProperty=nameWithType> 방지 하기 위해 메서드를 <xref:System.InvalidOperationException> 이전 예제에서 throw 된 예외입니다.  
  
 [!code-csharp[System.InvalidOperationException#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable4.cs#9)]
 [!code-vb[System.InvalidOperationException#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable4.vb#9)]  
  
<a name="Single"></a>   
### <a name="calling-enumerablesingle-or-enumerablesingleordefault-on-a-sequence-without-one-element"></a>하나의 요소가 없는 시퀀스에서 Enumerable.Single 또는 Enumerable.SingleOrDefault 호출  
 <xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType> 메서드는 시퀀스의 유일한 요소 또는 지정된 된 조건을 충족 하는 시퀀스의 유일한 요소를 반환 합니다.    시퀀스에 요소가 있는 경우 또는 메서드에서 throw 하는 요소가 둘 이상 있으면는 <xref:System.InvalidOperationException> 예외입니다.  
  
 사용할 수는 <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType> 시퀀스에 요소가 없는 경우 예외를 throw 하는 대신 기본값을 반환 하는 방법입니다. 그러나 합니다 <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType> 메서드를 계속 throw는 <xref:System.InvalidOperationException> 시퀀스에 요소가 둘 이상 포함 하는 동안 예외가 발생 합니다.  
  
 다음 표에서에서 예외 메시지를 <xref:System.InvalidOperationException> 에 대 한 호출에서 throw 된 예외 개체를 <xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType> 및 <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType> 메서드.  
  
|메서드|메시지|  
|------------|-------------|  
|`Single`|**시퀀스에 일치 하는 요소가 없으면**|  
|`Single` <br /> `SingleOrDefault`|**시퀀스에 일치 하는 요소가 둘 이상**|  
  
 다음 예제에서는 호출에에서는 <xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType> 메서드가 throw는 <xref:System.InvalidOperationException> 예외 시퀀스 4 보다 큰 요소가 없기 때문입니다.  
  
 [!code-csharp[System.InvalidOperationException#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable5.cs#10)]
 [!code-vb[System.InvalidOperationException#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable5.vb#10)]  
  
 방지 하기 위해 다음 예제에서는 합니다 <xref:System.InvalidOperationException> 대신 호출 하 여 시퀀스 비어 있을 때 throw 된 예외는 <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType> 메서드. 그러나이 시퀀스 값이 2 보다 크면 여러 요소를 반환 하므로 throw는 <xref:System.InvalidOperationException> 예외입니다.  
  
 [!code-csharp[System.InvalidOperationException#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable6.cs#11)]
 [!code-vb[System.InvalidOperationException#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable6.vb#11)]  
  
 호출 된 <xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType> 메서드는 시퀀스 또는 순서 지정 된 조건을 충족 하는 요소가 하나만 포함 되어 있다고 가정 합니다.  <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType> 0 개 이상의 결과 하지만 더 이상 사용 하 여 순서를 가정합니다. 이 가정은 사용자의 주의가 필요 하 고 이러한 조건이 충족 되지 않는 경우 다시 throw 하거나 결과 catch <xref:System.InvalidOperationException> 적합 합니다. 그렇지 않으면 다른 사용을 고려해 야 무효 상황이 일정 빈도로 발생할 수 있는 예상 되는 경우 또는 <xref:System.Linq.Enumerable> 메서드를 같은 <xref:System.Linq.Enumerable.FirstOrDefault%2A> 또는 <xref:System.Linq.Enumerable.Where%2A>합니다.  
  
<a name="Emit"></a>   
### <a name="dynamic-cross-application-domain-field-access"></a>동적 응용 프로그램 간 도메인 필드 액세스  
 합니다 <xref:System.Reflection.Emit.OpCodes.Ldflda?displayProperty=nameWithType> MSIL (intermediate language) 명령 throw 하는 Microsoft는 <xref:System.InvalidOperationException> 필드는 검색 하려는 해당 주소를 포함 하는 개체 코드 실행 되는 애플리케이션 도메인 내에서 없는 경우 예외입니다. 필드의 주소는 상주 하는 애플리케이션 도메인에서 액세스할 수만 있습니다.  
  
<a name="Throwing"></a>   
## <a name="throwing-an-invalidoperationexception-exception"></a>InvalidOperationException 예외를 throw  
 Throw 해야는 <xref:System.InvalidOperationException> 이유로 개체의 상태는 특정 메서드 호출을 지원 하지 않습니다 하는 경우에 예외입니다. 즉, 메서드 호출 일부 상황에서 컨텍스트를 유효 되었지만 다른 유효 하지 않습니다.  
  
 다음 메서드 호출 오류가 잘못 된 인수로 인해 발생 한 경우 <xref:System.ArgumentException> 또는 해당 파생된 클래스 중 하나 <xref:System.ArgumentNullException> 또는 <xref:System.ArgumentOutOfRangeException>, 대신 throw 됩니다.  
  
<a name="Misc"></a>   
## <a name="miscellaneous-information"></a>기타 정보  
 <xref:System.InvalidOperationException> 값 0x80131509 HRESULT COR_E_INVALIDOPERATION를 사용 합니다.  
  
 인스턴스의 초기 속성 값의 목록을 <xref:System.InvalidOperationException>, 참조는 <xref:System.InvalidOperationException.%23ctor%2A> 생성자입니다.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Exception" />
    <altmember cref="T:System.Collections.IEnumerator" />
    <altmember cref="T:System.Resources.ResourceSet" />
    <related type="Article" href="~/docs/standard/exceptions/index.md">예외 처리 및 Throw</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.InvalidOperationException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InvalidOperationException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.InvalidOperationException.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InvalidOperationException();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.InvalidOperationException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 생성자는 <xref:System.Exception.Message%2A> "요청한 작업을 수행할 수 없습니다."와 같은 오류를 설명 하는 시스템 제공 메시지로 새 인스턴스의 속성 이 메시지는 현재 시스템 문화권을 고려합니다.  
  
 다음 표에서는 <xref:System.InvalidOperationException> 인스턴스의 초기 속성 값을 보여 줍니다.  
  
|속성|값|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|null 참조(Visual Basic의 경우 `Nothing`)|  
|<xref:System.Exception.Message%2A>|지역화된 오류 메시지 문자열입니다.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InvalidOperationException (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.InvalidOperationException.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InvalidOperationException(System::String ^ message);" />
      <MemberSignature Language="F#" Value="new InvalidOperationException : string -&gt; InvalidOperationException" Usage="new System.InvalidOperationException message" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">@FSHO2@오류를 설명하는 메시지입니다.</param>
        <summary>지정된 오류 메시지를 사용하여 <see cref="T:System.InvalidOperationException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 생성자는 <xref:System.Exception.Message%2A?displayProperty=nameWithType> 속성을 사용 하 여 새 예외를 `message` 매개 변수입니다. `message`의 내용은 사용자의 이해를 돕기 위한 것입니다. 이 생성자의 호출자는 이 문자열이 현재 시스템 문화권에 맞게 지역화되었는지 확인하는 데 필요합니다.  
  
 다음 표에서는 <xref:System.InvalidOperationException> 인스턴스의 초기 속성 값을 보여 줍니다.  
  
|속성|값|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|null 참조(Visual Basic의 경우 `Nothing`)|  
|<xref:System.Exception.Message%2A>|오류 메시지 문자열|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected InvalidOperationException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.InvalidOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; InvalidOperationException(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="new InvalidOperationException : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; InvalidOperationException" Usage="new System.InvalidOperationException (info, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="info">serialize된 개체 데이터를 보유하는 개체입니다.</param>
        <param name="context">원본 또는 대상에 대한 컨텍스트 정보입니다.</param>
        <summary>serialize된 데이터를 사용하여 <see cref="T:System.InvalidOperationException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 생성자는 deserialization을 수행하는 동안 호출되어 스트림을 통해 전송된 예외 개체를 다시 구성합니다. 자세한 내용은 [XML 및 SOAP Serialization](~/docs/standard/serialization/xml-and-soap-serialization.md)합니다.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/serialization/xml-and-soap-serialization.md">XML 및 SOAP Serialization</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InvalidOperationException (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.InvalidOperationException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InvalidOperationException(System::String ^ message, Exception ^ innerException);" />
      <MemberSignature Language="F#" Value="new InvalidOperationException : string * Exception -&gt; InvalidOperationException" Usage="new System.InvalidOperationException (message, innerException)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message">@FSHO2@예외 이유를 설명하는 오류 메시지입니다.</param>
        <param name="innerException">현재 예외의 원인인 예외입니다. <paramref name="innerException" /> 매개 변수가 null 참조(Visual Basic에서는 <see langword="Nothing" />)가 아니면, 현재 예외는 내부 예외를 처리하는 <see langword="catch" /> 블록에서 발생한 것입니다.</param>
        <summary>지정된 오류 메시지와 해당 예외의 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:System.InvalidOperationException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이전 예외의 직접적인 결과로 throw되는 예외의 <xref:System.Exception.InnerException%2A> 속성에는 이전 예외에 대한 참조가 들어 있어야 합니다. <xref:System.Exception.InnerException%2A> 속성은 생성자에 전달된 값과 같은 값을 반환하거나 `Nothing` 속성이 생성자에 내부 예외 값을 제공하지 않는 경우에는 null 참조(Visual Basic의 경우 <xref:System.Exception.InnerException%2A>)를 반환합니다.  
  
 다음 표에서는 <xref:System.InvalidOperationException> 인스턴스의 초기 속성 값을 보여 줍니다.  
  
|속성|값|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|내부 예외 참조|  
|<xref:System.Exception.Message%2A>|오류 메시지 문자열|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Exception" />
        <related type="Article" href="~/docs/standard/exceptions/index.md">예외 처리 및 Throw</related>
      </Docs>
    </Member>
  </Members>
</Type>