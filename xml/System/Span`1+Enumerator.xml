<Type Name="Span&lt;T&gt;+Enumerator" FullName="System.Span&lt;T&gt;+Enumerator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="51216179ec9275cfab02d5dad557c501cd38affc" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58729770" /></Metadata><TypeSignature Language="C#" Value="public struct Span&lt;T&gt;.Enumerator" />
  <TypeSignature Language="ILAsm" Value=".class nested public sequential ansi sealed beforefieldinit Span`1/Enumerator&lt;T&gt; extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Span`1.Enumerator" />
  <TypeSignature Language="VB.NET" Value="Public Structure Span(Of T).Enumerator" />
  <TypeSignature Language="C++ CLI" Value="public: value class Span&lt;T&gt;::Enumerator" />
  <TypeSignature Language="F#" Value="type Span&lt;'T&gt;.Enumerator = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.2;netcore-2.1;netcore-3.0;netstandard-2.1">
      <AttributeName>System.Runtime.CompilerServices.IsByRefLike</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><see cref="T:System.Span`1" />의 요소에 대한 열거자를 제공합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

C# [foreach](~/docs/csharp/language-reference/keywords/foreach-in.md) 의 C# 언어 및 [각각에 대 한 중... 다음](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md) Visual Basic의 구문이 복잡 한 열거자를 숨깁니다. 직접 사용 하 여 열거자를 조작 하는 대신 `foreach` 또는 `For Each...Next` 것이 좋습니다. 

열거자의 첫 번째 요소 앞에 위치는 처음에 <xref:System.Span%601>합니다. 이 위치에서 <xref:System.Span%601.Enumerator.Current>는 정의되지 않습니다. 호출 해야 합니다 <xref:System.Span%601.Enumerator.MoveNext%2A> 하 여 열거자의 첫 번째 항목으로 이동 합니다 <xref:System.Span%601> 의 값을 읽기 전에 <xref:System.Span%601.Enumerator.Current>입니다.

<xref:System.Span%601.Enumerator.Current> 반환 될 때까지 동일한 값 <xref:System.Span%601.Enumerator.MoveNext%2A> 라고 합니다. <xref:System.Span%601.Enumerator.MoveNext%2A> 설정 <xref:System.Span%601.Enumerator.Current> 에서 다음 항목으로는 <xref:System.Span%601>합니다.

경우 <xref:System.Span%601.Enumerator.MoveNext%2A> 의 끝을 통과 합니다 <xref:System.Span%601>를 <xref:System.Span%601.Enumerator.MoveNext%2A> 반환 `false`합니다. 이 상태에서 후속 호출에서 열거자의 경우 <xref:System.Span%601.Enumerator.MoveNext%2A> 반환할 수도 `false` 및 <xref:System.Span%601.Enumerator.Current> 정의 되지 않습니다. 설정할 수 없습니다 <xref:System.Span%601.Enumerator.Current> 의 첫 번째 항목에는 <xref:System.Span%601> 다시 새 열거자 인스턴스를 대신 만들어야 합니다. 

열거자에 대 한 단독 액세스 되지 않은 <xref:System.Span%601>합니다. 또한 범위를 기준으로 하는 기본 데이터를 수정할 수도 있습니다. 따라서 범위 열거 본질적으로 스레드로부터 안전한 프로시저가 아닙니다. 을 열거 하는 동안 스레드로부터 안전을 보장 하기 위해 고유한 동기화를 구현 해야 합니다. 예를 들어, 다음 코드에 경합 상태가 있습니다. 전에 범위를 열거 하는 보장 하지 않습니다는 `ClearContents` 메서드를 실행 합니다. 결과적으로, 내부 배열 범위의 열거 동안 지워집니다.

[!code-csharp[System.Span<T>.Enumerator-no-synchronization](~/samples/snippets/csharp/api/system/span.enumerator/nosync/program.cs)]

수정 된 버전의 범위를 열거 하기 전에 배열에 대 한 액세스를 동기화 하는 경우는 `EnumerateSpan` 메서드는 다음 예제에서는 `ClearContents` 메서드 열거 하는 동안 기본 범위 데이터를 수정 하지 않습니다. 이 예제에서는 잠금 범위를 기준으로 하는 내부 배열은 참고 합니다.  

[!code-csharp[System.Span<T>.Enumerator-no-synchronization](~/samples/snippets/csharp/api/system/span.enumerator/sync/program.cs#1)]

.NET에서는 몇 가지 다른 열거자 구조와는 달리는 <xref:System.Span%601.Enumerator>:

- 구현 하지 않는 합니다 <xref:System.Collections.IEnumerator> 또는 <xref:System.Collections.Generic.IEnumerator%601> 인터페이스입니다. 왜냐하면 <xref:System.Span%601.Enumerator> 되는 [ref 구조체](~/docs/csharp/reference-semantics-with-value-types.md#ref-struct-type)합니다.

- 포함 되지 않습니다는 `Reset` 메서드를 범위에서 첫 번째 요소 앞의 초기 위치에 열거자를 설정할 수 있습니다. (의 <xref:System.Collections.IEnumerator.Reset?displayProperty=nameWithType> 인터페이스의 일부로 메서드를 구현 해야 하지만 대부분의 구현자 또는 예외를 throw 하지 구현을 제공 합니다.) 
 
      ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public T Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Current" />
      <MemberSignature Language="DocId" Value="P:System.Span`1.Enumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T % Current { T % get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : " Usage="System.Span&lt;'T&gt;.Enumerator.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue RefType="Ref">
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>열거자의 현재 위치에 있는 항목에 대한 참조를 가져옵니다.</summary>
        <value><see cref="T:System.Span`1" />에서 열거자의 현재 위치에 있는 요소입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

`Current` 다음 조건 중 하나라도 아래 정의 되어 있지 않습니다. 

- 열거자가 만들어진 후에 즉시 열거자는 범위의 첫 번째 요소 앞 배치 됩니다. <xref:System.Span%601.Enumerator.MoveNext%2A> 호출 하 여 열거자를 범위의 첫 번째 요소 값을 읽기 전에 `Current`입니다.

- 마지막으로 호출한 <xref:System.Span%601.Enumerator.MoveNext%2A> 반환 `false`, 범위의 끝을 나타내는입니다. 

`Current` 반환 될 때까지 동일한 값 <xref:System.Span%601.Enumerator.MoveNext%2A> 라고 합니다. <xref:System.Span%601.Enumerator.MoveNext%2A> 설정 `Current` 범위에서 다음 항목으로 합니다. 

      ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Span`1.Enumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool MoveNext();" />
      <MemberSignature Language="F#" Value="member this.MoveNext : unit -&gt; bool" Usage="enumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>열거자를 <see cref="System.Span`1" />의 다음 항목으로 이동합니다.</summary>
        <returns>열거자가 다음 항목으로 이동한 경우 `true`이며, 범위의 끝을 지난 경우 `false`입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

범위를 첫 번째 호출에서 첫 번째 요소 앞 위치가 열거자를 만든 후 `MoveNext` 열거자 범위에서 첫 번째 항목으로 이동 합니다. 

하는 경우 `MoveNext` 범위의 끝을 통과 `MoveNext` 반환 `false`합니다. 이 상태에서 후속 호출에서 열거자의 경우 `MoveNext` 반환할 수도 `false`합니다.

         ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>