<Type Name="TimeZoneInfo" FullName="System.TimeZoneInfo">
  <Metadata><Meta Name="ms.openlocfilehash" Value="25e19b7d157dbe922506010b94767d4a672e028c" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58709140" /></Metadata><TypeSignature Language="C#" Value="public sealed class TimeZoneInfo : IEquatable&lt;TimeZoneInfo&gt;, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit TimeZoneInfo extends System.Object implements class System.IEquatable`1&lt;class System.TimeZoneInfo&gt;, class System.Runtime.Serialization.IDeserializationCallback, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.TimeZoneInfo" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TimeZoneInfo&#xA;Implements IDeserializationCallback, IEquatable(Of TimeZoneInfo), ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class TimeZoneInfo sealed : IEquatable&lt;TimeZoneInfo ^&gt;, System::Runtime::Serialization::IDeserializationCallback, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type TimeZoneInfo = class&#xA;    interface IEquatable&lt;TimeZoneInfo&gt;&#xA;    interface ISerializable&#xA;    interface IDeserializationCallback" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.TimeZoneInfo&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.5;xamarinandroid-7.1;xamarinios-10.8;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>세계의 특정 표준 시간대를 나타냅니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 표준 시간대는 동일한 시간이 사용되는 지리적 영역입니다.  
  
 <xref:System.TimeZoneInfo> 클래스에 비해 크게 향상 된 <xref:System.TimeZone> 제한 된 기능만 제공 하는 클래스입니다.  
  
 <xref:System.TimeZone> 클래스는 로컬 표준 시간대만을 인식 하 고 (UTC) 협정 세계시와 현지 시간 사이의 시간을 변환할 수 있습니다. A <xref:System.TimeZoneInfo> 개체의 메서드와 모든 표준 시간대를 나타낼 수 있습니다는 <xref:System.TimeZoneInfo> 클래스를 사용 하 여 다른 표준 시간대의 해당 시간에 한 표준 시간대의 시간을 변환할 수 있습니다. 멤버는 <xref:System.TimeZoneInfo> 클래스 작업을 지원 합니다.  
  
-   운영 체제에서 이미 정의 되어 있는 표준 시간대를 검색 합니다.  
  
-   시스템에서 사용할 수 있는 표준 시간대를 열거 합니다.  
  
-   다른 표준 시간대 간에 시간 변환 합니다.  
  
-   운영 체제에서 이미 정의 되지 않은 새 표준 시간대를 만드는 중입니다.  
  
-   나중에 검색할 표준 시간대를 직렬화 합니다.  
  
> [!NOTE]
>  인스턴스는 <xref:System.TimeZoneInfo> 클래스는 변경할 수 없습니다. 개체는 인스턴스화된 후에 해당 값을 수정할 수 없습니다.  
  
 인스턴스화할 수 없습니다는 <xref:System.TimeZoneInfo> 를 사용 하 여 개체를 `new` 키워드입니다. 정적 멤버 중 하나를 호출 해야 합니다는 대신는 <xref:System.TimeZoneInfo> 다음 표에 나와 있는 클래스입니다.  
  
|정적 멤버 이름|설명|  
|------------------------|-----------------|  
|<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> 메서드|응용 프로그램에서 제공한 데이터에서 사용자 지정 표준 시간대를 만듭니다.|  
|<xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> 메서드|해당 식별자를 기반으로 하는 표준 시간대를 인스턴스화합니다.|  
|<xref:System.TimeZoneInfo.FromSerializedString%2A> 메서드|만들려는 다시 이전에 직렬화 된 문자열 값을 deserialize <xref:System.TimeZoneInfo> 개체입니다.|  
|<xref:System.TimeZoneInfo.GetSystemTimeZones%2A> 메서드|열거형을 반환 <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> 의 <xref:System.TimeZoneInfo> 로컬 시스템에서 사용할 수 있는 모든 표준 시간대를 나타내는 개체입니다.|  
|<xref:System.TimeZoneInfo.Local%2A> 속성|인스턴스화하는 <xref:System.TimeZoneInfo> 현지 표준 시간대를 나타내는 개체입니다.|  
|<xref:System.TimeZoneInfo.Utc%2A> 속성|인스턴스화하는 <xref:System.TimeZoneInfo> UTC 표준 시간대를 나타내는 개체입니다.|  
  
 사용할 수는 <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> 로컬 시스템 레지스트리에서 Windows 시스템에서 또는 표준 시간대 클래스에 의해 정의 되지 않은 시간대를 만드는 방법 합니다 [ICU 라이브러리](http://userguide.icu-project.org/datetime/timezone) Linux 또는 macOS에서. 사용할 수는 <xref:System.TimeZoneInfo.ToSerializedString%2A> 문자열로 서, 응용 프로그램에 액세스할 수 있는 몇 가지 형태로 저장할 수 있는 표준 시간대 개체의 정보를 저장 하는 속성입니다. 사용할 수는 <xref:System.TimeZoneInfo.FromSerializedString%2A> 직렬화 된 문자열을 변환 하는 방법으로는 <xref:System.TimeZoneInfo> 개체입니다.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="BaseUtcOffset">
      <MemberSignature Language="C#" Value="public TimeSpan BaseUtcOffset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan BaseUtcOffset" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.BaseUtcOffset" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseUtcOffset As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan BaseUtcOffset { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseUtcOffset : TimeSpan" Usage="System.TimeZoneInfo.BaseUtcOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 표준 시간대의 표준 시간과 UTC(협정 세계시) 사이의 시간 차이를 가져옵니다.</summary>
        <value>현재 표준 시간대의 표준 시간과 UTC(협정 세계시) 사이의 시간 차이를 나타내는 개체입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 반환 되는 시간 범위는 <xref:System.TimeZoneInfo.BaseUtcOffset%2A> 속성-14 시간 (14 시간 utc 표준 시간대) (표준 시간대에 대해 시간은 utc (협정 세계시) 미리) 14 시간에서 까지입니다. utc 표준 시간대 오프셋은 양수입니다. UTC 뒤에 있는 표준 시간대 오프셋은 음수 경우  
  
 <xref:System.TimeZoneInfo.BaseUtcOffset%2A> 값 전체 시간 (분)로 표현 됩니다. 분의 소수를 포함할 수 없습니다.  
  
> [!NOTE]
>  때문에 <xref:System.TimeZoneInfo.BaseUtcOffset%2A> 속성인 합니다 <xref:System.TimeZoneInfo> 개체 대신 <xref:System.TimeZoneInfo.AdjustmentRule> 개체를 <xref:System.TimeZoneInfo> 클래스는 모든 표준 시간대의 조정에는 단일 오프셋이 UTC에서 적용 됩니다. 표준 시간대의 오프셋이 UTC에서 수정 된를 가리키도록 만들어야 사용 하 여 새 표준 시간대를 <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> 메서드.  
  
 합니다 <xref:System.TimeZoneInfo.BaseUtcOffset%2A> 속성에서 다른는 <xref:System.TimeZoneInfo.GetUtcOffset%2A> 메서드를 다음 방법으로:  
  
-   <xref:System.TimeZoneInfo.BaseUtcOffset%2A> UTC와 표준 시간대의 표준 시간 사이의 차이 반환 하는 속성을 <xref:System.TimeZoneInfo.GetUtcOffset%2A> 메서드 시간에 특정 지점에서 표준 시간대의 시간과 UTC 사이의 차이 반환 합니다.  
  
-   합니다 <xref:System.TimeZoneInfo.GetUtcOffset%2A> 메서드는 표준 시간대의 조정 규칙 응용 프로그램을 반영 합니다 <xref:System.TimeZoneInfo.BaseUtcOffset%2A> 속성 하지 않습니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.TimeZoneInfo.BaseUtcOffset%2A> 현지 시간과 utc (협정 세계시) 사이의 차이 표시 하는 속성입니다.  
  
 [!code-csharp[System.TimeZone2.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#1)]
 [!code-vb[System.TimeZone2.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.TimeZoneInfo.GetUtcOffset" />
      </Docs>
    </Member>
    <Member MemberName="ClearCachedData">
      <MemberSignature Language="C#" Value="public static void ClearCachedData ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ClearCachedData() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ClearCachedData" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ClearCachedData ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ClearCachedData();" />
      <MemberSignature Language="F#" Value="static member ClearCachedData : unit -&gt; unit" Usage="System.TimeZoneInfo.ClearCachedData " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>캐시된 표준 시간대 데이터를 지웁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 현지 표준 시간대와 utc (협정 세계시) 영역에 데이터를 포함 하는 캐시 된 표준 시간대 데이터입니다.  
  
 호출할 수 있습니다는 `ClearCachedData` 표준 시간대 정보 또는 로컬 시스템의 표준 시간대가 변경 했다는 사실을 반영 하도록 응용 프로그램의 캐시에 사용 되는 메모리를 줄이는 방법.  
  
 로컬과 UTC 표준 시간대에 대 한 참조를 저장 하는 것은 좋지 않습니다. 호출한 후 합니다 `ClearCachedData` 메서드를 이러한 개체 변수가 정의 되지 것입니다 <xref:System.TimeZoneInfo> 개체에 대 한 참조를 더 이상 <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> 또는 <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>합니다. 예를 들어, 다음 코드에서 두 번째 호출 하는 <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> 메서드가 throw를 <xref:System.ArgumentException> 때문에 `local` 변수는 더 이상 것으로 간주 <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>합니다.  
  
 [!code-csharp[System.TimeZone2.BestPractices#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.BestPractices/cs/System.TimeZone2.BestPractices.cs#1)]
 [!code-vb[System.TimeZone2.BestPractices#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.BestPractices/vb/System.TimeZone2.BestPractices.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertTime">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>시간을 특정 표준 시간대의 시간으로 변환합니다.</summary>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">표준 시간대 간에 시간 변환</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertTime">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTime (DateTime dateTime, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTime(valuetype System.DateTime dateTime, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTime(DateTime dateTime, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTime : DateTime * TimeZoneInfo -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTime (dateTime, destinationTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="xamarinmac-3.0" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" Index="1" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTime">변환할 날짜 및 시간입니다.</param>
        <param name="destinationTimeZone"><paramref name="dateTime" />을 변환할 대상 표준 시간대입니다.</param>
        <summary>시간을 특정 표준 시간대의 시간으로 변환합니다.</summary>
        <returns>대상 표준 시간대의 날짜와 시간입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 변환 수행 하는 경우는 <xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29> 메서드는 모든 조정 규칙 적용에 적용 됩니다는 `destinationTimeZone` 표준 시간대입니다.  
  
 이 오버 로드는 <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%29> 메서드는 원본 표준 시간대의 값에서을 결정 합니다 `dateTime` 매개 변수의 <xref:System.DateTime.Kind%2A> 속성을 다음 표와 같이 합니다.  
  
|Kind 속성 값|원본 표준 시간대|메서드 동작|  
|-------------------------|----------------------|---------------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Local%2A>|시간을 현지 시간 변환 `destinationTimeZone`합니다.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Utc%2A>|Utc (협정 세계시) 시간으로 변환 `destinationTimeZone`합니다.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|간주 <xref:System.TimeZoneInfo.Local%2A>합니다.|시간을 현지 시간 변환 `destinationTimeZone`합니다.|  
  
 합니다 <xref:System.DateTime.Kind%2A> 반환 된 속성 <xref:System.DateTime> 값이 다음 표와에서 같이 설정 합니다.  
  
|조건|Kind 속성 값 반환|  
|---------------|----------------------------------|  
|`destinationTimeZone`이 <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>인 경우|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|`destinationTimeZone`이 <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>인 경우|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|  
|다른 모든 날짜 및 시간 값 및 대상 표준 시간대입니다.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|  
  
 경우 값은 `dateTime` 매개 변수는 모호한 현지 시간, 표준 시간으로 해석 됩니다. 경우는 `dateTime` 매개 변수는 잘못 된 현지 시간,이 메서드는 throw는 <xref:System.ArgumentException>합니다.  
  
 경우 변환 `dateTime` 의 결과 보다 이전 날짜 및 시간 값 <xref:System.DateTime.MinValue?displayProperty=nameWithType> 보다 이후 이거나 <xref:System.DateTime.MaxValue?displayProperty=nameWithType>,이 메서드는 반환 <xref:System.DateTime.MinValue?displayProperty=nameWithType> 또는 <xref:System.DateTime.MaxValue?displayProperty=nameWithType>각각.  
  
 호출 하 여 UTC에서을 변환할 수도 있습니다는 <xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A> 고 <xref:System.TimeZoneInfo.ConvertTimeToUtc%2A> 메서드.  
  
   
  
## Examples  
 다음 예제에서는 미국 및 캐나다 동부 표준 시간대의 시간을 날짜 및 시간 값의 배열을 변환합니다. 원본 표준 시간대에 따라 달라 집니다 표시 합니다 <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> 원본의 속성 <xref:System.DateTime> 값입니다. 또한 설명 하는 <xref:System.TimeZoneInfo.ConvertTime%2A> 오전 2 시에 원본 및 대상 표준 시간대의 표준 시간대 조정 발생 하므로 메서드는 계정으로 표준 시간대 조정 2010 년 11 월 7 일입니다.  
  
 [!code-csharp[System.TimeZoneInfo.ConvertTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.converttime/cs/converttime1.cs#1)]
 [!code-vb[System.TimeZoneInfo.ConvertTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.converttime/vb/converttime1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateTime" /> 매개 변수 값이 잘못된 시간을 나타냅니다.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationTimeZone" /> 매개 변수의 값이 <see langword="null" />입니다.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">표준 시간대 간에 시간 변환</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTime">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ConvertTime (DateTimeOffset dateTimeOffset, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ConvertTime(valuetype System.DateTimeOffset dateTimeOffset, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTime(System.DateTimeOffset,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ConvertTime(DateTimeOffset dateTimeOffset, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTime : DateTimeOffset * TimeZoneInfo -&gt; DateTimeOffset" Usage="System.TimeZoneInfo.ConvertTime (dateTimeOffset, destinationTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="xamarinmac-3.0" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" Index="1" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">변환할 날짜 및 시간입니다.</param>
        <param name="destinationTimeZone"><paramref name="dateTime" />을 변환할 대상 표준 시간대입니다.</param>
        <summary>시간을 특정 표준 시간대의 시간으로 변환합니다.</summary>
        <returns>대상 표준 시간대의 날짜와 시간입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 변환 수행 하는 경우는 <xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29> 메서드는 모든 조정 규칙 적용에 적용 됩니다는 `destinationTimeZone` 표준 시간대입니다.  
  
 다른 오버 로드에서 다른이 오버 로드는 <xref:System.TimeZoneInfo.ConvertTime%2A> 그대로 사용 하 여 메서드를 <xref:System.DateTimeOffset> 첫 번째 매개 변수로 값입니다. 특정 표준 시간대의 시간과 날짜 아니라 utc (협정 세계시) 오프셋으로 날짜 및 시간을 식별합니다. 결과적으로 `dateTimeOffset` 매개 변수는 모호한 시간이 나 잘못 된 시간을 나타낼 수 없습니다.  
  
 변환 된 `dateTimeOffset` 이 메서드는 대상 표준 시간대의 시간 값은 고려 대상 표준 시간대에서 실제로 모든 조정 규칙입니다.  
  
 경우 변환 `dateTimeOffset` 의 결과 보다 이전 날짜 및 시간 값 <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> 보다 이후 이거나 <xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>,이 메서드는 반환 <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> 또는 <xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>각각.  
  
   
  
## Examples  
 다음 예제에서는 배열을 변환 <xref:System.DateTimeOffset> 미국 및 캐나다 동부 표준 시간대의 시간 값입니다. 하는 방법을 보여 줍니다는 <xref:System.TimeZoneInfo.ConvertTime%2A> 오전 2 시에 원본 및 대상 표준 시간대의 표준 시간대 조정 발생 하므로 메서드는 계정으로 표준 시간대 조정 2010 년 11 월 7 일입니다.  
  
 [!code-csharp[System.TimeZoneInfo.ConvertTime#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.converttime/cs/converttime2.cs#2)]
 [!code-vb[System.TimeZoneInfo.ConvertTime#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.converttime/vb/converttime2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationTimeZone" /> 매개 변수의 값이 <see langword="null" />입니다.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">표준 시간대 간에 시간 변환</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTime">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTime (DateTime dateTime, TimeZoneInfo sourceTimeZone, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTime(valuetype System.DateTime dateTime, class System.TimeZoneInfo sourceTimeZone, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTime(DateTime dateTime, TimeZoneInfo ^ sourceTimeZone, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTime : DateTime * TimeZoneInfo * TimeZoneInfo -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTime (dateTime, sourceTimeZone, destinationTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="sourceTimeZone" Type="System.TimeZoneInfo" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTime">변환할 날짜 및 시간입니다.</param>
        <param name="sourceTimeZone"><paramref name="dateTime" />의 표준 시간대입니다.</param>
        <param name="destinationTimeZone"><paramref name="dateTime" />을 변환할 대상 표준 시간대입니다.</param>
        <summary>시간을 한 표준 시간대에서 다른 표준 시간대로 변환합니다.</summary>
        <returns>소스 표준 시간대의 <paramref name="dateTime" /> 매개 변수에 해당하는 대상 표준 시간대의 날짜 및 시간입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 변환 수행 하는 경우는 <xref:System.TimeZoneInfo.ConvertTime%2A> 메서드는 모든 조정 규칙 적용에 적용 됩니다는 `destinationTimeZone` 표준 시간대입니다.  
  
 값을 <xref:System.DateTime.Kind%2A> 의 속성을 `dateTime` 매개 변수 일치 해야 합니다를 `sourceTimeZone` 매개 변수를 다음 표와 같이 합니다.  
  
|DateTime.Kind 값|sourceTimeZone 값|메서드 동작|  
|-------------------------|--------------------------|---------------------|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Equals <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>합니다.|변환 `dateTime` 대상 표준 시간대의 시간입니다.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|같지 않음 <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>합니다.|Throw는 <xref:System.ArgumentException>합니다.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Equals <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>합니다.|변환 `dateTime` 대상 표준 시간대의 시간입니다.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|같지 않음 <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>합니다.|Throw는 <xref:System.ArgumentException>합니다.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|모든 합니다.|변환 `dateTime` 대상 표준 시간대의 시간입니다.|  
  
 호출 하 여 또는 utc (협정 세계시)을 변환할 수도 있습니다는 <xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A> 고 <xref:System.TimeZoneInfo.ConvertTimeToUtc%2A> 메서드.  
  
 합니다 <xref:System.DateTime.Kind%2A> 반환 된 속성 <xref:System.DateTime> 값이 다음 표와에서 같이 설정 합니다.  
  
|조건|Kind 속성 값 반환|  
|---------------|----------------------------------|  
|`destinationTimeZone` 인수가 <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>인 경우|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|`destinationTimeZone` 인수가 <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>인 경우|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|  
|모든 다른 날짜 및 시간 값, 원본 표준 시간대 및 대상 표준 시간대입니다.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|  
  
 경우 값은 `dateTime` 매개 변수는 원본 표준 시간대에서 모호한 시간, 표준 시간으로 해석 됩니다. 경우는 `dateTime` 매개 변수는 원본 표준 시간대에서 잘못 된 시간,이 메서드는 throw는 <xref:System.ArgumentException>합니다.  
  
 경우 변환 `dateTime` 의 결과 보다 이전 날짜 및 시간 값 <xref:System.DateTime.MinValue?displayProperty=nameWithType> 보다 이후 이거나 <xref:System.DateTime.MaxValue?displayProperty=nameWithType>,이 메서드는 반환 <xref:System.DateTime.MinValue?displayProperty=nameWithType> 또는 <xref:System.DateTime.MaxValue?displayProperty=nameWithType>각각.  
  
 <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29> 메서드가 throw는 <xref:System.ArgumentException> 예외 경우를 <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> 의 속성을 `dateTime` 인수가 <xref:System.DateTimeKind.Local?displayProperty=nameWithType> 하지만 `sourceTimeZone` 인수가 아닙니다 <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>. 메서드를 사용 하 여 값이 같은지 테스트 하는 대신 참조 같음에 대 한 테스트 현지 표준 시간대 또는 범용 표준 시간대는 원본 표준 시간대 인지 확인 하는 <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29> 메서드. 유의 <xref:System.TimeZoneInfo> 호출 하 여 검색 되는 현지 표준 시간대를 나타내는 개체를 <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> 메서드 사용 하 여 참조 같음 없는 <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>합니다. 게다가 <xref:System.TimeZoneInfo> 반환 하는 컬렉션을 반복 하 여 검색 되는 로컬 또는 범용 표준 시간대를 나타내는 개체를 <xref:System.TimeZoneInfo.GetSystemTimeZones%2A> 메서드 사용 하 여 참조 같음 없는 <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> 또는 <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>합니다. 호출할 수 있습니다는 <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%2CSystem.String%29> 메서드.  
  
   
  
## Examples  
 다음 예제를 사용 하 여 <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29> 하와이 표준시를 현지 시간으로 변환 하는 방법입니다.  
  
 [!code-csharp[System.TimeZone2.Concepts#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Concepts/CS/TimeZone2Concepts.cs#9)]
 [!code-vb[System.TimeZone2.Concepts#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Concepts/VB/TimeZone2Concepts.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateTime" /> 매개 변수의 <see cref="P:System.DateTime.Kind" /> 속성이 <see cref="F:System.DateTimeKind.Local" />이지만 <paramref name="sourceTimeZone" /> 매개 변수가 <see cref="F:System.DateTimeKind.Local" />와 다른 경우  
  
또는 
<paramref name="dateTime" /> 매개 변수의 <see cref="P:System.DateTime.Kind" /> 속성이 <see cref="F:System.DateTimeKind.Utc" />이지만 <paramref name="sourceTimeZone" /> 매개 변수가 <see cref="P:System.TimeZoneInfo.Utc" />와 다른 경우  
  
또는 
<paramref name="dateTime" /> 매개 변수가 잘못된 시간인 경우(즉, 표준 시간대의 조정 규칙 때문에 존재하지 않는 시간을 나타냄)</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceTimeZone" /> 매개 변수가 <see langword="null" />인 경우  
  
또는 
<paramref name="destinationTimeZone" /> 매개 변수가 <see langword="null" />인 경우</exception>
        <altmember cref="Overload:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId" />
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">표준 시간대 간에 시간 변환</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertTimeBySystemTimeZoneId">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>표준 시간대 식별자를 기반으로 하여 시간을 다른 표준 시간대의 시간으로 변환합니다.</summary>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">표준 시간대 간에 시간 변환</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertTimeBySystemTimeZoneId">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeBySystemTimeZoneId (DateTime dateTime, string destinationTimeZoneId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeBySystemTimeZoneId(valuetype System.DateTime dateTime, string destinationTimeZoneId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTime,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeBySystemTimeZoneId(DateTime dateTime, System::String ^ destinationTimeZoneId);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeBySystemTimeZoneId : DateTime * string -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId (dateTime, destinationTimeZoneId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="destinationTimeZoneId" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="dateTime">변환할 날짜 및 시간입니다.</param>
        <param name="destinationTimeZoneId">대상 표준 시간대의 식별자입니다.</param>
        <summary>표준 시간대 식별자를 기반으로 하여 시간을 다른 표준 시간대의 시간으로 변환합니다.</summary>
        <returns>대상 표준 시간대의 날짜와 시간입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 변환 수행 하는 경우는 <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A> 메서드는 모든 조정 규칙 적용에 적용 됩니다는 `destinationTimeZoneId` 표준 시간대입니다.  
  
 이 오버 로드는 호출 하는 거의 동일 합니다 <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%29> 메서드를 사용할 수 있다는 점을 제외 하면 개체 참조 하는 대신 해당 id에서 대상 표준 시간대를 지정할 수 있습니다. 이 메서드를 해당 하는 표준 시간대 개체를 검색 하지 않고 시간을 변환 해야 하 고 변환 된 표준 또는 일광 절약 시간 인지 알 필요가 없을 때 가장 유용 합니다.  
  
 <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%29> 메서드는 원본 표준 시간대의 값에서을 결정 합니다 `dateTime` 매개 변수의 <xref:System.DateTime.Kind%2A> 다음 표와 같이 속성입니다.  
  
|Kind 속성 값|원본 표준 시간대|메서드 동작|  
|-------------------------|----------------------|---------------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Local%2A>|시간을 현지 시간 변환 `destinationTimeZone`합니다.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Utc%2A>|Utc (협정 세계시) 시간으로 변환 `destinationTimeZone`합니다.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|간주 <xref:System.TimeZoneInfo.Local%2A>합니다.|시간을 현지 시간 변환 `destinationTimeZone`합니다.|  
  
 합니다 <xref:System.DateTime.Kind%2A> 반환 된 속성 <xref:System.DateTime> 값이 다음 표와에서 같이 설정 합니다.  
  
|조건|Kind 속성 값 반환|  
|---------------|----------------------------------|  
|`destinationTimeZone`이 `TimeZoneInfo.Utc.Id`인 경우|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|다른 `destinationTimeZone` 값입니다.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|  
  
 경우 값은 `dateTime` 매개 변수는 모호한 현지 시간, 표준 시간으로 해석 됩니다. 경우는 `dateTime` 매개 변수는 잘못 된 현지 시간,이 메서드는 throw는 <xref:System.ArgumentException>합니다.  
  
 경우 변환 `dateTime` 의 결과 보다 이전 날짜 및 시간 값 <xref:System.DateTime.MinValue?displayProperty=nameWithType> 보다 이후 이거나 <xref:System.DateTime.MaxValue?displayProperty=nameWithType>,이 메서드는 반환 <xref:System.DateTime.MinValue?displayProperty=nameWithType> 또는 <xref:System.DateTime.MaxValue?displayProperty=nameWithType>각각.  
  
 식별자가 지정 된 표준 시간대 정보를 검색 하는이 메서드는 `destinationTimeZoneId` 에서 Windows 시스템에 레지스트리에서 매개 변수를 [ICU 라이브러리](http://userguide.icu-project.org/datetime/timezone) Linux 및 macOS에서 합니다. 사용 하 여 만든 표준 시간대 개체를 검색할 수 없는 <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> 메서드. 합니다 `destinationTimeZoneId` 매개 변수 길이 있지만; 되려면 성공적으로 일치 하는 경우에는 없는 표준 시간대의 식별자와 정확히 일치 해야 합니다의 비교, `destinationTimeZoneId` 표준 시간대 식별자를 대/소문자 구분 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationTimeZoneId" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.InvalidTimeZoneException">표준 시간대 식별자를 찾았지만 레지스트리 데이터가 손상되었습니다.</exception>
        <exception cref="T:System.Security.SecurityException">프로세스에 표준 시간대 정보를 포함하는 레지스트리 키에서 읽는 데 필요한 권한이 없습니다.</exception>
        <exception cref="T:System.TimeZoneNotFoundException"><paramref name="destinationTimeZoneId" /> 식별자가 로컬 시스템에 없습니다.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">표준 시간대 간에 시간 변환</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeBySystemTimeZoneId">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ConvertTimeBySystemTimeZoneId (DateTimeOffset dateTimeOffset, string destinationTimeZoneId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ConvertTimeBySystemTimeZoneId(valuetype System.DateTimeOffset dateTimeOffset, string destinationTimeZoneId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTimeOffset,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ConvertTimeBySystemTimeZoneId(DateTimeOffset dateTimeOffset, System::String ^ destinationTimeZoneId);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeBySystemTimeZoneId : DateTimeOffset * string -&gt; DateTimeOffset" Usage="System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId (dateTimeOffset, destinationTimeZoneId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="destinationTimeZoneId" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">변환할 날짜 및 시간입니다.</param>
        <param name="destinationTimeZoneId">대상 표준 시간대의 식별자입니다.</param>
        <summary>표준 시간대 식별자를 기반으로 하여 시간을 다른 표준 시간대의 시간으로 변환합니다.</summary>
        <returns>대상 표준 시간대의 날짜와 시간입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 변환 수행 하는 경우는 <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A> 메서드는 모든 조정 규칙 적용에 적용 됩니다는 `destinationTimeZoneId` 표준 시간대입니다.  
  
 이 오버 로드는 호출 하는 것과 동일 합니다 <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%29> 메서드를 사용할 수 있다는 점을 제외 하면 개체 참조 하는 대신 해당 id에서 대상 표준 시간대를 지정할 수 있습니다. 이 메서드를 해당 하는 표준 시간대 개체를 검색 하지 않고 시간을 변환 해야 하 고 변환 된 표준 또는 일광 절약 시간 인지 알 필요가 없을 때 가장 유용 합니다.  
  
 때문에 `dateTimeOffset` 매개 변수가 나타내는 날짜 및 시간 함께 시간에서 Utc (협정 세계시) 오프셋, 모호한 시간 또는 잘못 된 시간을 나타낼 수 없습니다.  
  
 이 메서드를 검색 하 여 식별자가 지정 된 표준 시간대를 `destinationTimeZoneId` 에서 Windows 시스템에 레지스트리에서 매개 변수를 [ICU 라이브러리](http://userguide.icu-project.org/datetime/timezone) Linux 및 macOS에서 합니다. 사용 하 여 만든 표준 시간대 개체를 검색할 수 없는 <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> 메서드. 합니다 `destinationTimeZoneId` 매개 변수 길이 있지만; 되려면 성공적으로 일치 하는 경우에는 없는 표준 시간대의 식별자와 정확히 일치 해야 합니다의 비교, `destinationTimeZoneId` 표준 시간대 식별자를 대/소문자 구분 합니다.  
  
 변환 된 `dateTimeOffset` 메서드는 대상 표준 시간대의 시간 값은 고려 대상 표준 시간대에서 실제로 모든 조정 규칙입니다.  
  
 경우 변환 `dateTimeOffset` 의 결과 보다 이전 날짜 및 시간 값 <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> 보다 이후 이거나 <xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>,이 메서드는 반환 <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> 또는 <xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>각각.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationTimeZoneId" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.InvalidTimeZoneException">표준 시간대 식별자를 찾았지만 레지스트리 데이터가 손상되었습니다.</exception>
        <exception cref="T:System.Security.SecurityException">프로세스에 표준 시간대 정보를 포함하는 레지스트리 키에서 읽는 데 필요한 권한이 없습니다.</exception>
        <exception cref="T:System.TimeZoneNotFoundException"><paramref name="destinationTimeZoneId" /> 식별자가 로컬 시스템에 없습니다.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">표준 시간대 간에 시간 변환</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeBySystemTimeZoneId">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeBySystemTimeZoneId (DateTime dateTime, string sourceTimeZoneId, string destinationTimeZoneId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeBySystemTimeZoneId(valuetype System.DateTime dateTime, string sourceTimeZoneId, string destinationTimeZoneId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTime,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeBySystemTimeZoneId(DateTime dateTime, System::String ^ sourceTimeZoneId, System::String ^ destinationTimeZoneId);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeBySystemTimeZoneId : DateTime * string * string -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId (dateTime, sourceTimeZoneId, destinationTimeZoneId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="sourceTimeZoneId" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="destinationTimeZoneId" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="dateTime">변환할 날짜 및 시간입니다.</param>
        <param name="sourceTimeZoneId">소스 표준 시간대의 식별자입니다.</param>
        <param name="destinationTimeZoneId">대상 표준 시간대의 식별자입니다.</param>
        <summary>표준 시간대 식별자를 기반으로 하여 시간을 한 표준 시간대에서 다른 표준 시간대로 변환합니다.</summary>
        <returns>소스 표준 시간대의 <paramref name="dateTime" /> 매개 변수에 해당하는 대상 표준 시간대의 날짜 및 시간입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 변환 수행 하는 경우는 <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A> 메서드는 모든 조정 규칙 적용에 적용 됩니다는 `destinationTimeZoneId` 표준 시간대입니다.  
  
 와 유사 하지만 합니다 <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> 메서드를 사용할 수 <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%2CSystem.String%29?displayProperty=nameWithType> 대신 해당 식별자를 사용 하 여 원본 및 대상 표준 시간대를 지정 하려면 해당 <xref:System.TimeZoneInfo> 개체입니다. 이 메서드를 해당 하는 표준 시간대 개체를 검색 하지 않고 시간을 변환 해야 하 고 변환 된 표준 또는 일광 절약 시간 인지 알 필요가 없을 때 가장 유용 합니다.  
  
 식별자는 표준 시간대를 검색 하는이 메서드는 `sourceTimeZoneId` 하 고 `destinationTimeZoneId` 에서 Windows 시스템에 레지스트리에서 매개 변수를 [ICU 라이브러리](http://userguide.icu-project.org/datetime/timezone) Linux 및 macOS에서 합니다. 사용 하 여 생성 된 표준 시간대 개체를 검색할 수 없습니다는 <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> 메서드.  
  
 값을 <xref:System.DateTime.Kind%2A> 의 속성을 `dateTime` 매개 변수 일치 해야 합니다를 `sourceTimeZoneId` 매개 변수를 다음 표와 같이 합니다.  
  
|DateTime.Kind 값|sourceTimeZone 값|메서드 동작|  
|-------------------------|--------------------------|---------------------|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Equals `TimeZoneInfo.Utc.Id`합니다.|변환 `dateTime` 대상 표준 시간대의 시간입니다.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|같지 않음 `TimeZoneInfo.Utc.Id`합니다.|Throw는 <xref:System.ArgumentException>합니다.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Equals `TimeZoneInfo.Local.Id`합니다.|변환 `dateTime` 대상 표준 시간대의 시간입니다.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|같지 않음 `TimeZoneInfo.Local.Id`합니다.|Throw는 <xref:System.ArgumentException>합니다.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|모든 합니다.|변환 `dateTime` 대상 표준 시간대의 시간입니다.|  
  
 사용 하기 때문에 대 한 호출에는 <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> 메서드를 <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A> 에 해당 하는 표준 시간대를 찾을 대/소문자 구분 검색을 수행 하는 메서드 `sourceTimeZoneId` 및 `destinationTimeZoneId`합니다.  
  
 경우 값은 `dateTime` 매개 변수는 원본 표준 시간대에서 모호한 시간, 표준 시간으로 해석 됩니다. 경우는 `dateTime` 매개 변수는 원본 표준 시간대에서 잘못 된 시간,이 메서드는 throw는 <xref:System.ArgumentException>합니다.  
  
 합니다 <xref:System.DateTime.Kind%2A> 반환 된 속성 <xref:System.DateTime> 값으로 설정 됩니다 <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> 대상 표준 시간대는 utc (협정 세계시)이 아닌 경우에서 설정은 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>합니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%2CSystem.String%29?displayProperty=nameWithType> 전 세계 8 개 도시에서 로컬 시스템 시간에 해당 하는 시간을 표시 하는 방법입니다.  
  
 [!code-csharp[System.TimeZone2.Conversions#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/System.TimeZone2.Conversions.cs#3)]
 [!code-vb[System.TimeZone2.Conversions#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/System.TimeZone2.Conversions.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateTime" /> 매개 변수의 <see cref="P:System.DateTime.Kind" /> 속성이 원본 표준 시간대와 일치하지 않습니다.  
  
또는 
 <paramref name="dateTime" />이 원본 표준 시간대에 적합하지 않은 시간입니다.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceTimeZoneId" />가 <see langword="null" />입니다.  
  
또는 
 <paramref name="destinationTimeZoneId" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.InvalidTimeZoneException">표준 시간대 식별자를 찾았지만 레지스트리 데이터가 손상되었습니다.</exception>
        <exception cref="T:System.Security.SecurityException">사용자에게 표준 시간대 정보를 포함하는 레지스트리 키에서 읽을 수 있는 권한이 없습니다.</exception>
        <exception cref="T:System.TimeZoneNotFoundException"><paramref name="sourceTimeZoneId" /> 식별자가 로컬 시스템에 없습니다.  
  
또는 
<paramref name="destinationTimeZoneId" /> 식별자가 로컬 시스템에 없습니다.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">표준 시간대 간에 시간 변환</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeFromUtc">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeFromUtc (DateTime dateTime, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeFromUtc(valuetype System.DateTime dateTime, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeFromUtc(System.DateTime,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeFromUtc(DateTime dateTime, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeFromUtc : DateTime * TimeZoneInfo -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeFromUtc (dateTime, destinationTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="dateTime">UTC(협정 세계시)입니다.</param>
        <param name="destinationTimeZone"><paramref name="dateTime" />을 변환할 대상 표준 시간대입니다.</param>
        <summary>UTC(협정 세계시)를 지정된 표준 시간대의 시간으로 변환합니다.</summary>
        <returns>대상 표준 시간대의 날짜와 시간입니다. <paramref name="destinationTimeZone" />이 <see cref="P:System.TimeZoneInfo.Utc" />이면 해당 <see cref="P:System.DateTime.Kind" /> 속성은 <see cref="F:System.DateTimeKind.Utc" />이고, 그렇지 않은 경우 해당 <see cref="P:System.DateTime.Kind" /> 속성은 <see cref="F:System.DateTimeKind.Unspecified" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 변환 수행 하는 경우는 <xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A> 메서드는 모든 조정 규칙 적용에 적용 됩니다는 `destinationTimeZone` 표준 시간대입니다.  
  
 이 메서드의 정확한 동작은 값에 따라 달라 집니다를 <xref:System.DateTime.Kind%2A> 의 속성을 `dateTime` 매개 변수를 다음 표와 같이 합니다.  
  
|DateTime.Kind 속성|변환|  
|----------------------------|----------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Throw는 <xref:System.ArgumentException>합니다.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> 또는 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|UTC (Coordinated Universal Time)에서 변환합니다.|  
  
 경우 변환 `dateTime` 의 결과 보다 이전 날짜 및 시간 값 <xref:System.DateTime.MinValue?displayProperty=nameWithType> 보다 이후 이거나 <xref:System.DateTime.MaxValue?displayProperty=nameWithType>,이 메서드는 반환 <xref:System.DateTime.MinValue?displayProperty=nameWithType> 또는 <xref:System.DateTime.MaxValue?displayProperty=nameWithType>각각.  
  
   
  
## Examples  
 다음 예제에서는 중부 표준시를 utc (협정 세계시)를 변환합니다.  
  
 [!code-csharp[System.TimeZone2.Concepts#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Concepts/CS/TimeZone2Concepts.cs#8)]
 [!code-vb[System.TimeZone2.Concepts#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Concepts/VB/TimeZone2Concepts.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateTime" />의 <see cref="P:System.DateTime.Kind" /> 속성이 <see cref="F:System.DateTimeKind.Local" />입니다.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationTimeZone" />가 <see langword="null" />입니다.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">표준 시간대 간에 시간 변환</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertTimeToUtc">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>날짜 및 시간을 UTC(협정 세계시)로 변환합니다.</summary>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">표준 시간대 간에 시간 변환</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertTimeToUtc">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeToUtc (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeToUtc(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeToUtc(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeToUtc : DateTime -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeToUtc dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="dateTime">변환할 날짜 및 시간입니다.</param>
        <summary>지정된 날짜 및 시간을 UTC(협정 세계시)로 변환합니다.</summary>
        <returns><paramref name="dateTime" /> 매개 변수에 해당하는 UTC(협정 세계시)입니다. <see cref="T:System.DateTime" /> 값의 <see cref="P:System.DateTime.Kind" /> 속성은 항상 <see cref="F:System.DateTimeKind.Utc" />로 설정됩니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 수행 되는 정확한 변환은 값에 따라 달라 집니다 합니다 <xref:System.DateTime.Kind%2A> 의 속성을 `dateTime` 매개 변수를 다음 표와 같이 합니다.  
  
|DateTime.Kind 속성|변환|  
|----------------------------|----------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|현지 시간에서 utc (협정 세계시)로 변환합니다.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|가정 `dateTime` 은 현지 시간 및 현지 시간에서 UTC로 변환 합니다.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|반환 `dateTime` 변경 되지 않습니다.|  
  
 경우 `dateTime` 해당이 메서드는 모호한 현지 시간으로 표준 로컬 시간을 가정 합니다. 하는 경우 `dateTime` 잘못 된 현지 시간, 메서드가 throw에 해당 하는 <xref:System.ArgumentException>합니다.  
  
> [!NOTE]
>  현재 컴퓨터의 로컬 표준 시간대의이 오버 로드 여러 조정 규칙을 포함 합니다 <xref:System.TimeZoneInfo.ConvertTimeToUtc%2A> 메서드는 다른 결과를 반환할 수 있습니다 합니다 <xref:System.TimeZone.ToUniversalTime%2A?displayProperty=nameWithType> 및 <xref:System.DateTime.ToUniversalTime%2A?displayProperty=nameWithType> 메서드. <xref:System.TimeZone.ToUniversalTime%2A?displayProperty=nameWithType> 항상 현재 조정 규칙에서 표준 시간대 변환 여부 적용 `dateTime` 해당 날짜 범위 내에 있다고 합니다. 실행 하는 경우 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)], <xref:System.DateTime.ToUniversalTime%2A?displayProperty=nameWithType> 도 현재 조정 규칙에서 표준 시간대 변환 여부에 적용 됩니다 `dateTime` 해당 날짜 범위 내에 있다고 합니다.  
  
 경우에 해당 UTC `dateTime` 이전의 <xref:System.DateTime.MinValue?displayProperty=nameWithType> 이상 하는 <xref:System.DateTime.MaxValue?displayProperty=nameWithType>,이 메서드가 반환 <xref:System.DateTime.MinValue> 또는 <xref:System.DateTime.MaxValue>각각.  
  
   
  
## Examples  
 다음 예제를 변환 하는 시간 값을 갖는 <xref:System.DateTime.Kind%2A> 속성은 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>, <xref:System.DateTimeKind.Local?displayProperty=nameWithType>, 및 <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>각각. 또한 변환이 모호 하 고 잘못 된 횟수를 보여 줍니다.  
  
 [!code-csharp[System.TimeZone2.Conversions#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/System.TimeZone2.Conversions.cs#1)]
 [!code-vb[System.TimeZone2.Conversions#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/System.TimeZone2.Conversions.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><see langword="TimeZoneInfo.Local.IsInvalidDateTime(" />
          <paramref name="dateTime" />
          <see langword=")" />은 <see langword="true" />를 반환합니다.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">표준 시간대 간에 시간 변환</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeToUtc">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeToUtc (DateTime dateTime, TimeZoneInfo sourceTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeToUtc(valuetype System.DateTime dateTime, class System.TimeZoneInfo sourceTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeToUtc(DateTime dateTime, TimeZoneInfo ^ sourceTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeToUtc : DateTime * TimeZoneInfo -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeToUtc (dateTime, sourceTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="sourceTimeZone" Type="System.TimeZoneInfo" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="dateTime">변환할 날짜 및 시간입니다.</param>
        <param name="sourceTimeZone"><paramref name="dateTime" />의 표준 시간대입니다.</param>
        <summary>지정된 표준 시간대의 시간을 UTC(협정 세계시)로 변환합니다.</summary>
        <returns><paramref name="dateTime" /> 매개 변수에 해당하는 UTC(협정 세계시)입니다. <see cref="T:System.DateTime" /> 개체의 <see cref="P:System.DateTime.Kind" /> 속성은 항상 <see cref="F:System.DateTimeKind.Utc" />로 설정됩니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 <xref:System.DateTime.Kind%2A> 의 속성을 `dateTime` 매개 변수가 같으면 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType> 및 `sourceTimeZone` 매개 변수가 같으면 <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>,이 메서드가 반환 `dateTime` 모든 변환을 수행 하지 않고.  
  
 경우 `dateTime` 해당 모호한 시간을이 메서드는 원본 표준 시간대의 표준 시간 임을 가정 합니다. 하는 경우 `dateTime` throw이이 메서드는 잘못 된 시간에 해당는 <xref:System.ArgumentException>합니다.  
  
 경우에 해당 협정 세계시 (UTC) `dateTime` 이전의 <xref:System.DateTime.MinValue?displayProperty=nameWithType> 이상는 <xref:System.DateTime.MaxValue?displayProperty=nameWithType>,이 메서드가 반환 <xref:System.DateTime.MinValue> 또는 <xref:System.DateTime.MaxValue>각각.  
  
   
  
## Examples  
 다음 예제에서는 로컬 시스템에서 현재 날짜를 검색 및를 Utc (협정 세계시)를 변환 합니다 도쿄 표준 시간을 변환 합니다 고 마지막으로 도쿄 표준 시간에서 UTC로 다시 변환 합니다. 참고는 두 개의 UTC 시간이 동일 합니다.  
  
 [!code-csharp[System.TimeZone2.Conversions#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/convertdt2.cs#2)]
 [!code-vb[System.TimeZone2.Conversions#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/convertdt2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateTime" />.<see langword="Kind" /> <see cref="F:System.DateTimeKind.Utc" /> 및 <paramref name="sourceTimeZone" />이 <see cref="P:System.TimeZoneInfo.Utc" />과 다른 경우  
  
또는 
 <paramref name="dateTime" />.<see langword="Kind" /> <see cref="F:System.DateTimeKind.Local" /> 및 <paramref name="sourceTimeZone" />이 <see cref="P:System.TimeZoneInfo.Local" />과 다른 경우  
  
또는 
 <paramref name="sourceTimeZone" /><see langword=".IsInvalidDateTime(" /><paramref name="dateTime" /><see langword=")" />에서 <see langword="true" />를 반환하는 경우</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceTimeZone" />가 <see langword="null" />입니다.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">표준 시간대 간에 시간 변환</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateCustomTimeZone">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>로컬 컴퓨터에 없는 표준 시간대를 정의합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateCustomTimeZone">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo CreateCustomTimeZone (string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo CreateCustomTimeZone(string id, valuetype System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateCustomTimeZone (id As String, baseUtcOffset As TimeSpan, displayName As String, standardDisplayName As String) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ CreateCustomTimeZone(System::String ^ id, TimeSpan baseUtcOffset, System::String ^ displayName, System::String ^ standardDisplayName);" />
      <MemberSignature Language="F#" Value="static member CreateCustomTimeZone : string * TimeSpan * string * string -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.CreateCustomTimeZone (id, baseUtcOffset, displayName, standardDisplayName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="baseUtcOffset" Type="System.TimeSpan" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="displayName" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="standardDisplayName" Type="System.String" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="id">표준 시간대의 식별자입니다.</param>
        <param name="baseUtcOffset">이 표준 시간대와 UTC(협정 세계시) 사이의 시간 차이를 나타내는 개체입니다.</param>
        <param name="displayName">새 표준 시간대의 표시 이름입니다.</param>
        <param name="standardDisplayName">새 표준 시간대 표준 시간의 이름입니다.</param>
        <summary>지정된 식별자, UTC(협정 세계시)로부터의 오프셋, 표시 이름 및 표준 시간 표시 이름으로 사용자 지정 표준 시간대를 만듭니다.</summary>
        <returns>새 표준 시간대입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 오버 로드는 <xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%29> 메서드는 조정이 (즉, 표준 시간대 일광 절약 시간제를 지원 하지 않는) 없는 표준 시간대를 만드는 데 적합 합니다. 일광 절약 시간에 대 한 조정을 포함 하는 표준 시간대를 정의 하려면 하나를 사용 합니다 <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> 또는 <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> 메서드.  
  
 다음 표에서 제공 된 매개 변수 간의 관계를 보여 줍니다.는 <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> 메서드 및 속성을는 <xref:System.TimeZoneInfo> 메서드 호출에서 반환 되는 개체입니다.  
  
|CreateCustomTimeZone 매개 변수|TimeZoneInfo 속성|  
|------------------------------------|---------------------------|  
|`id`|<xref:System.TimeZoneInfo.Id%2A>|  
|`baseUtcOffset`|<xref:System.TimeZoneInfo.BaseUtcOffset%2A>|  
|`displayName`|<xref:System.TimeZoneInfo.DisplayName%2A>|  
|`standardDisplayName`|<xref:System.TimeZoneInfo.StandardName%2A>|  
  
 일반적으로 표준 시간대의 표준 시간 이름 및 식별자 동일합니다. 그러나 해당 표준 시간대의 식별자의 길이 32 자를 넘지 않아야 합니다. 문자열에 전달 된 `displayName` 매개 변수는 지극히 표준적인 형식을 따릅니다. 표시 이름의 첫 부분은 머리글자어 GMT (그리니치 표준시)에 대 한 괄호로 묶인로 표시 되는 협정 세계시에서 표준 시간대의 기본 오프셋입니다. 이 자체는 표준 시간대 또는 하나 또는 도시, 지역 또는 국가 표준 시간대, 자세히 또는 모두를 식별 하는 문자열 옵니다. 예:  
  
```  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
   
  
## Examples  
 다음 예제에서는 모슨 및 홈만 남극 대륙 지역에 대 한 사용자 지정 표준 시간대를 만듭니다. 새 표준 시간대의 시간을 현지 시간 변환의 결과 표시 합니다.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#1)]
 [!code-vb[System.TimeZone2.CreateTimeZone#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="id" /> 매개 변수가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.ArgumentException"><paramref name="id" /> 매개 변수가 빈 문자열("")입니다.  
  
또는 
<paramref name="baseUtcOffset" /> 매개 변수가 전체 시간(분)을 나타내지 않습니다.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="baseUtcOffset" /> 매개 변수가 14시간보다 크거나 -14시간보다 작습니다.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a6af8647-7893-4f29-95a9-d94c65a6e8dd">방법: 표준 시간대 조정 규칙 없이 만들기</related>
      </Docs>
    </Member>
    <Member MemberName="CreateCustomTimeZone">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo CreateCustomTimeZone (string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, TimeZoneInfo.AdjustmentRule[] adjustmentRules);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo CreateCustomTimeZone(string id, valuetype System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, class System.TimeZoneInfo/AdjustmentRule[] adjustmentRules) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String,System.String,System.TimeZoneInfo.AdjustmentRule[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateCustomTimeZone (id As String, baseUtcOffset As TimeSpan, displayName As String, standardDisplayName As String, daylightDisplayName As String, adjustmentRules As TimeZoneInfo.AdjustmentRule()) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ CreateCustomTimeZone(System::String ^ id, TimeSpan baseUtcOffset, System::String ^ displayName, System::String ^ standardDisplayName, System::String ^ daylightDisplayName, cli::array &lt;TimeZoneInfo::AdjustmentRule ^&gt; ^ adjustmentRules);" />
      <MemberSignature Language="F#" Value="static member CreateCustomTimeZone : string * TimeSpan * string * string * string * TimeZoneInfo.AdjustmentRule[] -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.CreateCustomTimeZone (id, baseUtcOffset, displayName, standardDisplayName, daylightDisplayName, adjustmentRules)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="baseUtcOffset" Type="System.TimeSpan" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="displayName" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="standardDisplayName" Type="System.String" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="daylightDisplayName" Type="System.String" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="adjustmentRules" Type="System.TimeZoneInfo+AdjustmentRule[]" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="id">표준 시간대의 식별자입니다.</param>
        <param name="baseUtcOffset">이 표준 시간대와 UTC(협정 세계시) 사이의 시간 차이를 나타내는 개체입니다.</param>
        <param name="displayName">새 표준 시간대의 표시 이름입니다.</param>
        <param name="standardDisplayName">새 표준 시간대의 표준 시간 이름입니다.</param>
        <param name="daylightDisplayName">새 표준 시간대의 일광 절약 시간 이름입니다.</param>
        <param name="adjustmentRules">특정 기간의 기본 UTC 오프셋을 확대하는 배열입니다.</param>
        <summary>지정된 식별자, UTC(협정 세계시)로부터의 오프셋, 표시 이름, 표준 시간 이름, 일광 절약 시간 이름 및 일광 절약 시간 규칙으로 사용자 지정 표준 시간대를 만듭니다.</summary>
        <returns>새 표준 시간대를 나타내는 <see cref="T:System.TimeZoneInfo" /> 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 오버 로드는 <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> 메서드는 일광 절약 시간제를 지 원하는 표준 시간대를 만드는 데 적합 합니다. 일광 절약 시간제를 지원 하지 않는 시간대를 정의 하려면 하나를 사용 합니다 <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> 또는 <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> 메서드.  
  
 다음 표에서 제공 된 매개 변수 간의 관계를 보여 줍니다.는 <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> 의 멤버 및 메서드는 <xref:System.TimeZoneInfo> 메서드 호출에서 반환 되는 개체입니다.  
  
|CreateCustomTimeZone 매개 변수|TimeZoneInfo 멤버|  
|------------------------------------|-------------------------|  
|`id`|<xref:System.TimeZoneInfo.Id%2A>|  
|`baseUtcOffset`|<xref:System.TimeZoneInfo.BaseUtcOffset%2A>|  
|`displayName`|<xref:System.TimeZoneInfo.DisplayName%2A>|  
|`standardDisplayName`|<xref:System.TimeZoneInfo.StandardName%2A>|  
|`daylightDisplayName`|<xref:System.TimeZoneInfo.DaylightName%2A>|  
|`adjustmentRules`|배열을 <xref:System.TimeZoneInfo.AdjustmentRule?displayProperty=nameWithType> 반환한 개체는 <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> 메서드.|  
  
 일반적으로 표준 시간대의 표준 시간 이름 및 식별자 동일합니다. 그러나 해당 표준 시간대의 식별자의 길이 32 자를 넘지 않아야 합니다. 문자열에 전달 된 `displayName` 매개 변수는 지극히 표준적인 형식을 따릅니다. 표시 이름의 첫 부분은 머리글자어 GMT (그리니치 표준시)에 대 한 괄호로 묶인로 표시 되는 협정 세계시에서 표준 시간대의 기본 오프셋입니다. 이 자체는 표준 시간대 또는 하나 또는 도시, 지역 또는 국가 표준 시간대, 자세히 또는 모두를 식별 하는 문자열 옵니다. 예:  
  
```  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
 `baseUtcOffset` 매개 변수는 모든 표준 시간대의 조정 규칙에 대 한 utc (협정 세계시)에서 사용자 지정 표준 시간대의 오프셋을 정의 합니다. 즉,는 <xref:System.TimeZoneInfo> 개체 모델 되었다고 가정 UTC 표준 시간대 오프셋 상수는 표준 시간대의 수명 내내 존재 특정 조정 규칙 무관 합니다. 해당 오프셋이 UTC에서 변경 된 표준 시간대를 반영 하기 위해 새 표준 시간대 개체를 만들어야 합니다.  
  
 표준 시간대의 조정 규칙은 다음을 수행 하 여 정의 됩니다.  
  
1.  호출 된 <xref:System.TimeZoneInfo.TransitionTime.CreateFloatingDateRule%2A> 또는 <xref:System.TimeZoneInfo.TransitionTime.CreateFixedDateRule%2A> 시작점 및 끝점이 각 조정 규칙에 대 한 전환 시간을 정의 하는 방법입니다.  
  
2.  호출 된 <xref:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule%2A> 각 조정 규칙에 대 한 메서드.  
  
3.  로 전달할 수 있는 배열로 조정 규칙을 할당 합니다 `adjustmentRules` 매개 변수입니다.  
  
   
  
## Examples  
 다음 예제에서는 남극 대륙에서 파머 기지 및 안베어 섬에 대 한 사용자 지정 표준 시간대를 만듭니다. 새 표준 시간대의 시간을 현지 시간으로 변환 하 고 결과 표시 합니다.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#2)]
 [!code-vb[System.TimeZone2.CreateTimeZone#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="id" /> 매개 변수가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.ArgumentException"><paramref name="id" /> 매개 변수가 빈 문자열("")입니다.  
  
또는 
<paramref name="baseUtcOffset" /> 매개 변수가 전체 시간(분)을 나타내지 않습니다.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="baseUtcOffset" /> 매개 변수가 14시간보다 크거나 -14시간보다 작습니다.</exception>
        <exception cref="T:System.InvalidTimeZoneException"><paramref name="adjustmentRules" /> 매개 변수 겹침에서 지정된 조정 규칙입니다.  
  
또는 
<paramref name="adjustmentRules" /> 매개 변수에서 지정된 조정 규칙은 시간 순서가 아닙니다.  
  
또는 
<paramref name="adjustmentRules" />에서 하나 이상의 요소가 <see langword="null" />입니다.  
  
또는 
날짜에 여러 조정 규칙이 적용되었을 수 있습니다.  
  
또는 
<paramref name="adjustmentRules" /> 배열에서 하나 이상의 개체에 대한 <paramref name="baseUtcOffset" /> 매개 변수 및 <see cref="P:System.TimeZoneInfo.AdjustmentRule.DaylightDelta" /> 값의 합계는 14시간보다 크거나 -14시간보다 작습니다.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/c52ef192-13a9-435f-8015-3b12eae8c47c">방법: 표준 시간대 조정 규칙을 사용 하 여 만들기</related>
      </Docs>
    </Member>
    <Member MemberName="CreateCustomTimeZone">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo CreateCustomTimeZone (string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, TimeZoneInfo.AdjustmentRule[] adjustmentRules, bool disableDaylightSavingTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo CreateCustomTimeZone(string id, valuetype System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, class System.TimeZoneInfo/AdjustmentRule[] adjustmentRules, bool disableDaylightSavingTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String,System.String,System.TimeZoneInfo.AdjustmentRule[],System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateCustomTimeZone (id As String, baseUtcOffset As TimeSpan, displayName As String, standardDisplayName As String, daylightDisplayName As String, adjustmentRules As TimeZoneInfo.AdjustmentRule(), disableDaylightSavingTime As Boolean) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ CreateCustomTimeZone(System::String ^ id, TimeSpan baseUtcOffset, System::String ^ displayName, System::String ^ standardDisplayName, System::String ^ daylightDisplayName, cli::array &lt;TimeZoneInfo::AdjustmentRule ^&gt; ^ adjustmentRules, bool disableDaylightSavingTime);" />
      <MemberSignature Language="F#" Value="static member CreateCustomTimeZone : string * TimeSpan * string * string * string * TimeZoneInfo.AdjustmentRule[] * bool -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.CreateCustomTimeZone (id, baseUtcOffset, displayName, standardDisplayName, daylightDisplayName, adjustmentRules, disableDaylightSavingTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="baseUtcOffset" Type="System.TimeSpan" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="displayName" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="standardDisplayName" Type="System.String" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="daylightDisplayName" Type="System.String" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="adjustmentRules" Type="System.TimeZoneInfo+AdjustmentRule[]" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="disableDaylightSavingTime" Type="System.Boolean" Index="6" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="id">표준 시간대의 식별자입니다.</param>
        <param name="baseUtcOffset">이 표준 시간대와 UTC(협정 세계시) 사이의 시간 차이를 나타내는 <see cref="T:System.TimeSpan" /> 개체입니다.</param>
        <param name="displayName">새 표준 시간대의 표시 이름입니다.</param>
        <param name="standardDisplayName">새 표준 시간대의 표준 시간 이름입니다.</param>
        <param name="daylightDisplayName">새 표준 시간대의 일광 절약 시간 이름입니다.</param>
        <param name="adjustmentRules">특정 기간의 기본 UTC 오프셋을 확대하는 <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> 개체의 배열입니다.</param>
        <param name="disableDaylightSavingTime">새 개체의 <paramref name="adjustmentRules" />에 있는 모든 일광 절약 시간 관련 정보를 삭제하려는 경우에는 <see langword="true" />이고 그러지 않은 경우에는 <see langword="false" />입니다.</param>
        <summary>지정된 식별자, UTC(협정 세계시)로부터의 오프셋, 표시 이름, 표준 시간 이름, 일광 절약 시간 이름, 일광 절약 시간 규칙 및 반환된 개체가 일광 절약 시간 정보를 반영하는지 여부를 나타내는 값으로 사용자 지정 표준 시간대를 만듭니다.</summary>
        <returns>새 표준 시간대입니다. <paramref name="disableDaylightSavingTime" /> 매개 변수가 <see langword="true" />이면 반환되는 개체에 일광 절약 시간 데이터가 없습니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 오버 로드를 사용할 수는 <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> 메서드를 사용자 지정 표준 시간대 일광 절약 시간에 대 한 지원 조건에 따라 런타임에 확인할 수 있습니다.  
  
 다음 표에서 제공 된 매개 변수 간의 관계를 보여 줍니다.는 <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> 의 멤버 및 메서드는 <xref:System.TimeZoneInfo> 메서드 호출에서 반환 되는 개체입니다.  
  
|CreateCustomTimeZone 매개 변수|TimeZoneInfo 속성|  
|------------------------------------|---------------------------|  
|`id`|<xref:System.TimeZoneInfo.Id%2A>|  
|`baseUtcOffset`|<xref:System.TimeZoneInfo.BaseUtcOffset%2A>|  
|`displayName`|<xref:System.TimeZoneInfo.DisplayName%2A>|  
|`standardDisplayName`|<xref:System.TimeZoneInfo.StandardName%2A>|  
|`daylightDisplayName`|<xref:System.TimeZoneInfo.DaylightName%2A> 하는 경우 `disableDaylightSavingTime` 는 `false`; <xref:System.String.Empty?displayProperty=nameWithType> 하는 경우 `disableDaylightSavingTime` 는 `true`합니다.|  
|`adjustmentRules`|배열을 <xref:System.TimeZoneInfo.AdjustmentRule> 에서 반환 된 개체를 <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> 메서드 경우 `disableDaylightSavingTime` 는 `false`; 빈 배열을 반환 합니다 <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> 메서드 경우 `disableDaylightSavingTime` 는 `true`.|  
|`disableDaylightSavingTime`|하지 <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A>합니다.|  
  
 일반적으로 표준 시간대의 표준 시간 이름 및 식별자 동일합니다. 그러나 해당 표준 시간대의 식별자의 길이 32 자를 넘지 않아야 합니다. 문자열에 전달 된 `displayName` 매개 변수는 지극히 표준적인 형식을 따릅니다. 표시 이름의 첫 부분은 머리글자어 GMT (그리니치 표준시)에 대 한 괄호로 묶인로 표시 되는 협정 세계시에서 표준 시간대의 기본 오프셋입니다. 이 자체는 표준 시간대 또는 하나 또는 도시, 지역 또는 국가 표준 시간대, 자세히 또는 모두를 식별 하는 문자열 옵니다. 예:  
  
```  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
 표준 시간대의 조정 규칙은 다음을 수행 하 여 정의 됩니다.  
  
1.  호출 된 <xref:System.TimeZoneInfo.TransitionTime.CreateFloatingDateRule%2A> 또는 <xref:System.TimeZoneInfo.TransitionTime.CreateFixedDateRule%2A> 시작점 및 끝점이 각 조정 규칙에 대 한 변환 규칙을 정의 하는 방법입니다.  
  
2.  호출 된 <xref:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule%2A> 각 조정 규칙에 대 한 메서드.  
  
3.  로 전달할 수 있는 배열로 조정 규칙을 할당 합니다 `adjustmentRules` 매개 변수입니다.  
  
 경우 `disableDaylightSavingTime` 매개 변수가 `false`,이 메서드의 작업은 동일 합니다 <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> 오버 로드 합니다. 경우 `disableDaylightSavingTime` 됩니다 `true`, 조정 규칙 없이 포함 하는 반환된 된 개체 및 <xref:System.TimeZoneInfo.DaylightName%2A> 값이 빈 문자열 속성입니다.  
  
   
  
## Examples  
 다음 예제에서는 남극 대륙에서 파머 기지 및 안베어 섬에 대 한 사용자 지정 표준 시간대를 만듭니다. 설정 된 `disableDaylightSavingTime` 호출에서 매개 변수를 <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> 메서드를 `true`입니다. 없는 경우 새 표준 시간대의 일광 절약 시간 이름 및 새 표준 시간대 일광 절약 시간 정보가 없는 있는지 확인 하는 조정 규칙 수를 표시 합니다.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#3)]
 [!code-vb[System.TimeZone2.CreateTimeZone#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="id" /> 매개 변수가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.ArgumentException"><paramref name="id" /> 매개 변수가 빈 문자열("")입니다.  
  
또는 
<paramref name="baseUtcOffset" /> 매개 변수가 전체 시간(분)을 나타내지 않습니다.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="baseUtcOffset" /> 매개 변수가 14시간보다 크거나 -14시간보다 작습니다.</exception>
        <exception cref="T:System.InvalidTimeZoneException"><paramref name="adjustmentRules" /> 매개 변수 겹침에서 지정된 조정 규칙입니다.  
  
또는 
<paramref name="adjustmentRules" /> 매개 변수에서 지정된 조정 규칙은 시간 순서가 아닙니다.  
  
또는 
<paramref name="adjustmentRules" />에서 하나 이상의 요소가 <see langword="null" />입니다.  
  
또는 
날짜에 여러 조정 규칙이 적용되었을 수 있습니다.  
  
또는 
<paramref name="adjustmentRules" /> 배열에서 하나 이상의 개체에 대한 <paramref name="baseUtcOffset" /> 매개 변수 및 <see cref="P:System.TimeZoneInfo.AdjustmentRule.DaylightDelta" /> 값의 합계는 14시간보다 크거나 -14시간보다 작습니다.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a6af8647-7893-4f29-95a9-d94c65a6e8dd">방법: 표준 시간대 조정 규칙 없이 만들기</related>
        <related type="Article" href="https://msdn.microsoft.com/library/c52ef192-13a9-435f-8015-3b12eae8c47c">방법: 표준 시간대 조정 규칙을 사용 하 여 만들기</related>
      </Docs>
    </Member>
    <Member MemberName="DaylightName">
      <MemberSignature Language="C#" Value="public string DaylightName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DaylightName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.DaylightName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DaylightName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DaylightName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DaylightName : string" Usage="System.TimeZoneInfo.DaylightName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 표준 시간대 일광 절약 시간의 표시 이름을 가져옵니다.</summary>
        <value>표준 시간대의 일광 절약 시간의 표시 이름입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 표시 이름은 Windows 운영 체제에 설치 된 문화권에 따라 지역화 됩니다.  
  
 <xref:System.TimeZoneInfo.DaylightName%2A> 속성 값을 갖는 아닙니다 <xref:System.String.Empty?displayProperty=nameWithType> 또는 `null` 나타내지는지 않습니다 일광 절약 시간 표준 시간대 지원함. 표준 시간대 일광 절약 시간제를 지원 하는지 여부를 결정할 값을 확인 해당 <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> 속성입니다.  
  
 대부분의 경우에는 `DaylightName` 표준 시간대 시스템에서 정의한 속성이 아닙니다 <xref:System.String.Empty?displayProperty=nameWithType> 또는 `null`합니다. 그러나 합니다 <xref:System.TimeZoneInfo.DaylightName%2A> 사용자 지정 표준 시간대의 속성 설정할 수 있습니다 <xref:System.String.Empty?displayProperty=nameWithType>합니다. 사용자 지정 표준 시간대에서 만들어질 때 발생 하는이 <xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%29?displayProperty=nameWithType> 또는 <xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%2CSystem.String%2CSystem.TimeZoneInfo.AdjustmentRule%5B%5D%2CSystem.Boolean%29?displayProperty=nameWithType> 오버 로드 하며 `disableDaylightSavingTime` 매개 변수는 `true`합니다. 따라서 코드 절대 금물입니다 값을 <xref:System.TimeZoneInfo.DaylightName%2A> 속성은 `null` 이거나 비어 있습니다.  
  
 <xref:System.TimeZoneInfo.DaylightName%2A> 속성은 합니다 <xref:System.TimeZone.DaylightName%2A> 의 속성을 <xref:System.TimeZone> 클래스.  
  
   
  
## Examples  
 다음 예제에서는 라는 메서드를 정의 `DisplayDateWithTimeZoneName` 를 사용 하는 <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29> 시간대의 표준 시간 이름 또는 일광 절약 시간 이름을 표시할지 여부를 결정 하는 방법.  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#1)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public string DisplayName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.DisplayName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DisplayName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DisplayName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DisplayName : string" Usage="System.TimeZoneInfo.DisplayName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>해당 표준 시간대를 나타내는 일반 표시 이름을 가져옵니다.</summary>
        <value>표준 시간대의 일반 표시 이름입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 표시 이름은 Windows 운영 체제에 설치 된 문화권에 따라 지역화 됩니다.  
  
 Windows 시스템 표준 시간대에 대 한 표준 시간대 표시 이름에는 대개 표준 형식을 따릅니다. 표시 이름의 첫 부분은 머리글자어 GMT (그리니치 표준시)에 대 한 괄호로 묶인로 표시 되는 협정 세계시에서 표준 시간대의 기본 오프셋입니다. Coordinated Universal time 없는 오프셋을 사용 하 여 GMT 라는 머리글자어는 괄호 안에 포함 됩니다.  이 표준 시간대 또는 하나 이상의 도시, 지역 또는 국가 표준 시간대에서를 식별 하는 문자열 옵니다. 예:  
  
```  
(GMT) Greenwich Mean Time : Dublin, Edinburgh, Lisbon, London  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
   
  
## Examples  
 다음 예제에서는 검색을 <xref:System.TimeZoneInfo> 표시 이름, 표준 시간 이름 및 일광 절약 시간 이름 출력 현지 표준 시간대를 나타내는 개체입니다. 출력은 미국에 있는 시스템에 대 한 표시 됩니다. 보여 줍니다.  
  
 [!code-csharp[System.TimeZone2.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/ShowTimeZoneNames1.cs#2)]
 [!code-vb[System.TimeZone2.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/ShowTimeZoneNames1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>두 <see cref="T:System.TimeZoneInfo" /> 개체가 서로 같은지 확인합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="timeZoneInfo.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="obj">현재 개체와 비교할 두 번째 개체입니다.</param>
        <summary>현재 <see cref="T:System.TimeZoneInfo" /> 개체가 다른 개체와 같은지 확인합니다.</summary>
        <returns><paramref name="obj" />가 현재 인스턴스와 동일한 <see cref="T:System.TimeZoneInfo" /> 개체이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 변환 또는 캐스팅 `obj` 에 <xref:System.TimeZoneInfo> 개체와 현재 인스턴스와 비교 합니다. 같음에 대 한 테스트 값의 비교를 기반으로 합니다. 현재 <xref:System.TimeZoneInfo> 인스턴스 및 `obj` 다음과 동일한 것으로 간주 됩니다.  
  
-   런타임 형식 `obj` 는 <xref:System.TimeZoneInfo>합니다.  
  
-   두 개체가 같으면 <xref:System.TimeZoneInfo.Id%2A> 속성 값입니다.  
  
-   두 개체에 동일한 조정 규칙이 있습니다.  
  
 `obj`이(가) `null`이면 이 메서드는 `false`을(를) 반환합니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.TimeZoneInfo.Equals%28System.Object%29> 태평양 표준시 또는 동부 표준시를 현지 표준 시간대 인지 확인 하는 방법입니다.  
  
 [!code-csharp[System.TimeZoneInfo.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.equals/cs/equals1.cs#1)]
 [!code-vb[System.TimeZoneInfo.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.equals/vb/equals1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (TimeZoneInfo other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class System.TimeZoneInfo other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.Equals(System.TimeZoneInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As TimeZoneInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(TimeZoneInfo ^ other);" />
      <MemberSignature Language="F#" Value="override this.Equals : TimeZoneInfo -&gt; bool" Usage="timeZoneInfo.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.TimeZoneInfo" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="other">현재 개체와 비교할 두 번째 개체입니다.</param>
        <summary>현재 <see cref="T:System.TimeZoneInfo" /> 개체가 다른 <see cref="T:System.TimeZoneInfo" /> 개체와 같은지 확인합니다.</summary>
        <returns>두 <see cref="T:System.TimeZoneInfo" /> 개체가 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 같음 값의 비교를 기반으로 합니다. 두 <xref:System.TimeZoneInfo> 개체는 다음과 같은 동일한 것으로 간주 됩니다.  
  
-   값을 해당 <xref:System.TimeZoneInfo.Id%2A> 속성이 동일 합니다.  
  
-   조정 규칙을 갖습니다.  
  
 <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29?displayProperty=nameWithType> 다음 식을 계산한 결과 부울 값을 반환 합니다.  
  
 ```csharp 
 other.Id == this.Id && HasSameRules(other);  
 ```
  
 ```vb
 other.Id = me.Id AndAlso HasSameRules(other)  
 ```

 경우는 `other` 매개 변수는 초기화 되지 않은 <xref:System.TimeZoneInfo> 개체를이 메서드는 반환 `false`합니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29> 태평양 표준시 또는 동부 표준시를 현지 표준 시간대 인지 확인 하는 방법입니다.  
  
 [!code-csharp[System.TimeZone2.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#7)]
 [!code-vb[System.TimeZone2.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindSystemTimeZoneById">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo FindSystemTimeZoneById (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo FindSystemTimeZoneById(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.FindSystemTimeZoneById(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindSystemTimeZoneById (id As String) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ FindSystemTimeZoneById(System::String ^ id);" />
      <MemberSignature Language="F#" Value="static member FindSystemTimeZoneById : string -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.FindSystemTimeZoneById id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="id"><see cref="P:System.TimeZoneInfo.Id" /> 속성에 해당하는 표준 시간대 식별자입니다.</param>
        <summary>해당 식별자에 따라 새 <see cref="T:System.TimeZoneInfo" /> 개체를 인스턴스화합니다.</summary>
        <returns>식별자가 <paramref name="id" /> 매개 변수의 값인 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 `id` 매개 변수 길이 있지만; 되려면 성공적으로 일치 하는 경우에는 없는 표준 시간대의 식별자와 정확히 일치 해야 합니다의 비교, `id` 표준 시간대 식별자를 대/소문자 구분 합니다. 부분 일치를 기반으로 하는 표준 시간대 개체를 검색 하려는 경우의 읽기 전용 컬렉션을 사용 하는 사용자 지정 프로시저를 작성할 수 있습니다 <xref:System.TimeZoneInfo> 반환한 개체는 <xref:System.TimeZoneInfo.GetSystemTimeZones%2A> 메서드.  
  
 Windows 시스템에서는 `FindSystemTimeZoneById` 일치 시 키 려 `id` 레지스트리 HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Time 영역 분기의 하위 키 이름입니다. Linux 및 macOS에서 사용할 수 있는 표준 시간대 정보를 사용 합니다 [ICU 라이브러리](http://userguide.icu-project.org/datetime/timezone)합니다. 레지스트리 또는 라이브러리에 없으면 원하는 표준 시간대에 대 한 정보를 만들 수 있습니다 특정 표준 시간대의 오버 로드 중 하나를 호출 하 여는 <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> 메서드를 호출 하거나 <xref:System.TimeZoneInfo.FromSerializedString%2A> deserialize 하는 데는 <xref:System.TimeZoneInfo> 개체 필요한 표준 시간대를 나타냅니다. 그러나 이러한 메서드 호출에서 만든 표준 시간대 시스템에서 정의한 시간 않으며 사용 하 여 검색할 수 없습니다는 <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> 메서드. 이러한 사용자 지정 표준 시간대에서 반환한 개체 참조를 통해서만 액세스할 수 합니다 <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> 또는 <xref:System.TimeZoneInfo.FromSerializedString%2A> 메서드를 호출 합니다.  
  
이 메서드가 반환 새 <xref:System.TimeZoneInfo> 각 메서드 호출에 대 한 인스턴스; 캐시 된 개체를 반환 하지 않습니다. 이 호출 하는 응용 프로그램의 성능 영향을 줄 수는 `FindSystemTimeZoneById` 동일한 식별자를 사용 하 여 반복적으로 메서드.   
  
## Examples  
 다음 예제에서는 <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> 도쿄 표준시 시간대를 검색 하는 방법입니다. 이 <xref:System.TimeZoneInfo> 개체 다음 시간에 도쿄 현지 시간으로 변환 하는 데 사용 됩니다 도쿄 표준시 또는 도쿄 일광 절약 시간 인지 확인 합니다.  
  
 [!code-csharp[System.TimeZone2.Conversions#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/convertdt2.cs#2)]
 [!code-vb[System.TimeZone2.Conversions#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/convertdt2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">시스템에 표준 시간대에 대한 정보를 저장할 메모리가 부족한 경우</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="id" /> 매개 변수가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.TimeZoneNotFoundException"><paramref name="id" />로 지정된 표준 시간대 식별자를 찾지 못한 경우. 즉, <paramref name="id" />와 이름이 일치하는 표준 시간대 식별자가 존재하지 않거나 식별자는 존재하지만 표준 시간대 데이터가 포함되지 않습니다.</exception>
        <exception cref="T:System.Security.SecurityException">프로세스에 표준 시간대 정보를 포함하는 레지스트리 키에서 읽는 데 필요한 권한이 없습니다.</exception>
        <exception cref="T:System.InvalidTimeZoneException">표준 시간대 식별자를 찾았지만 레지스트리 데이터가 손상되었습니다.</exception>
        <altmember cref="P:System.TimeZoneInfo.Id" />
        <related type="Article" href="https://msdn.microsoft.com/library/8cb620e5-c6a6-4267-a52e-beeb73cd1a34">방법: TimeZoneInfo 개체 인스턴스화</related>
      </Docs>
    </Member>
    <Member MemberName="FromSerializedString">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo FromSerializedString (string source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo FromSerializedString(string source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.FromSerializedString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromSerializedString (source As String) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ FromSerializedString(System::String ^ source);" />
      <MemberSignature Language="F#" Value="static member FromSerializedString : string -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.FromSerializedString source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="source">serialize된 <see cref="T:System.TimeZoneInfo" /> 개체의 문자열 표현입니다.</param>
        <summary>문자열을 deserialize하여 원래의 serialize된 <see cref="T:System.TimeZoneInfo" /> 개체를 다시 만듭니다.</summary>
        <returns>serialize된 원본 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Windows 또는 레지스트리에서 찾을 수 없는 표준 시간대를 만드는 데 필요한 모든 코드를 제공 하는 대신 합니다 [ICU 라이브러리](http://userguide.icu-project.org/datetime/timezone) Linux 및 macOS에서 합니다. 사용자 지정 표준 시간대 및 중 하나를 정의할 수 있습니다 사용 하 여는 <xref:System.TimeZoneInfo.ToSerializedString%2A> 메서드를 독립 실행형 실행 파일 또는 사용 하 여 응용 프로그램 설치 프로그램에서 표준 시간대를 문자열로 저장 합니다. 다음 저장 위치에서이 문자열을 검색 하 고 사용 하 여 인스턴스화할 수 응용 프로그램을 <xref:System.TimeZoneInfo.FromSerializedString%2A> 메서드.  
  
   
  
## Examples  
 다음 예제는 / 남극 가져오려고 로컬 시스템 표준 시간대입니다. 실패 한 경우 코드를 응용 프로그램 디렉터리에 있는 텍스트 파일에서 표준 시간대에 대 한 정보를 검색 하려고 시도 합니다. 이 시도가 실패 하면 코드는 표준 시간대를 만들고 텍스트 파일에 표준 시간대에 대 한 정보를 씁니다.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#4)]
 [!code-vb[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="source" /> 매개 변수가 <see cref="F:System.String.Empty" />인 경우</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> 매개 변수가 null 문자열인 경우</exception>
        <exception cref="T:System.Runtime.Serialization.SerializationException">소스 매개 변수를 다시 <see cref="T:System.TimeZoneInfo" /> 개체로 deserialize할 수 없는 경우</exception>
        <altmember cref="M:System.TimeZoneInfo.ToSerializedString" />
        <related type="Article" href="https://msdn.microsoft.com/library/6b7b4de9-da07-47e3-8f4c-823f81798ee7">방법: 포함된 리소스에서 표준 시간대 복원</related>
      </Docs>
    </Member>
    <Member MemberName="GetAdjustmentRules">
      <MemberSignature Language="C#" Value="public TimeZoneInfo.AdjustmentRule[] GetAdjustmentRules ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.TimeZoneInfo/AdjustmentRule[] GetAdjustmentRules() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetAdjustmentRules" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAdjustmentRules () As TimeZoneInfo.AdjustmentRule()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;TimeZoneInfo::AdjustmentRule ^&gt; ^ GetAdjustmentRules();" />
      <MemberSignature Language="F#" Value="member this.GetAdjustmentRules : unit -&gt; TimeZoneInfo.AdjustmentRule[]" Usage="timeZoneInfo.GetAdjustmentRules " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo+AdjustmentRule[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>현재 <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> 개체에 적용되는 <see cref="T:System.TimeZoneInfo" /> 개체 배열을 가져옵니다.</summary>
        <returns>이 표준 시간대에 대한 개체의 배열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> 메서드는 배열을 검색 <xref:System.TimeZoneInfo.AdjustmentRule?displayProperty=nameWithType> 개체입니다. 해당 표준 시간대 조정 뿐만 아니라 해당 델타의 유효한 시작 및 종료 날짜를 정의 하는 배열에 있는 각 개체 (조정의 시간을 변경 하면는 정확한 크기). 또한 두 개의 속성을 반환할 <xref:System.TimeZoneInfo.TransitionTime?displayProperty=nameWithType> 연간 전환에 표준 시간에서 발생 하는 경우 정의 하는 개체입니다.  
  
 표준 시간대에 여러 조정 규칙이 있으면 일반적으로 순서에서 가장 오래 된 (인덱스 0) 최신 (인덱스 <xref:System.Array.Length%2A> -1).  
  
 표준 시간대 조정 규칙 없이 있으면 합니다 <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> 메서드는 빈 배열을 반환 (배열을 해당 <xref:System.Array.Length%2A> 0).  
  
 반환 된 배열 요소에 대 한 수정은 <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> 메서드 특정 표준 시간대에 속하는 조정 규칙에 반영 되지 않습니다. 등의 중요 한 일광 절약 시간제에서 전환을 반영 하기 위해 표준 시간대의 조정 규칙을 수정 하려면 있습니다 해야 적절 한 조정 규칙을 사용 하 여 새 표준 시간대를 만드는 것이 아니라 기존 수정.  
  
   
  
## Examples  
 다음 예제에서는 콘솔의 조정 규칙에 대 한 로컬 시스템 및 표시 전체 정보에 정의 된 모든 표준 시간대를 검색 합니다.  
  
 [!code-csharp[System.TimeZone2.AdjustmentRule.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/cs/System.TimeZone2.AdjustmentRule.Class.cs#3)]
 [!code-vb[System.TimeZone2.AdjustmentRule.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/vb/System.TimeZone2.AdjustmentRule.Class.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">시스템에 조정 규칙의 메모리 내 사본을 만드는 데 사용할 메모리가 부족한 경우</exception>
        <altmember cref="T:System.TimeZoneInfo.AdjustmentRule" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAmbiguousTimeOffsets">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>모호한 날짜 및 시간을 매핑할 수 있는 가능한 날짜 및 시간에 대한 정보를 반환합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAmbiguousTimeOffsets">
      <MemberSignature Language="C#" Value="public TimeSpan[] GetAmbiguousTimeOffsets (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan[] GetAmbiguousTimeOffsets(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;TimeSpan&gt; ^ GetAmbiguousTimeOffsets(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.GetAmbiguousTimeOffsets : DateTime -&gt; TimeSpan[]" Usage="timeZoneInfo.GetAmbiguousTimeOffsets dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTime">날짜와 시간입니다.</param>
        <summary>모호한 날짜 및 시간을 매핑할 수 있는 가능한 날짜 및 시간에 대한 정보를 반환합니다.</summary>
        <returns>특정 날짜 및 시간이 매핑될 수 있는 가능한 UTC(협정 세계시) 오프셋을 나타내는 개체의 배열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드의 정확한 동작은 간의 관계에 따라 합니다 <xref:System.DateTime.Kind%2A> 속성 및 <xref:System.TimeZoneInfo> 다음 표에서 보여 주듯이 개체입니다.  
  
|TimeZoneInfo 개체 유형|Kind 속성 값|동작|  
|------------------------------|-------------------------|--------------|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Local?displayProperty=nameWithType> 또는 <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|모호한 시간을 반환에 대 한 오프셋 `dateTime`합니다.|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|변환 `dateTime` 현지 시간 및 다음 모호한 시간이 해당 시간에 대 한 오프셋을 반환 합니다.|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|모든 값|Throw는 <xref:System.ArgumentException>합니다.|  
|다른 표준 시간대입니다.|<xref:System.DateTimeKind.Local> 또는 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|변환 `dateTime` 지정된 된 표준 시간대를 고 당시 모호한 인지 여부를 확인 합니다.|  
|다른 표준 시간대입니다.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|확인 여부를 `dateTime` 지정된 된 표준 시간대에서 모호 합니다.|  
  
 순서 <xref:System.TimeSpan> 이 메서드에서 반환 된 배열의 개체에에서 정의 되어 있지 않습니다. 하지만 오프셋을 나타내는 요소 시간대의 표준 시간에서 표준 시간대를 사용 하 여 해당 값을 비교 하 여 확인할 수 있습니다 <xref:System.TimeZoneInfo.BaseUtcOffset%2A> 속성입니다. 모호한 시간이 표준 시간대의 표준 시간에 매핑하려면 참조 [방법: 모호한 시간 확인](~/docs/standard/datetime/resolve-ambiguous-times.md)합니다.  
  
   
  
## Examples  
 다음 예제에서는 라는 메서드를 정의 `ShowPossibleUtcTimes` 를 사용 하는 <xref:System.TimeZoneInfo.GetAmbiguousTimeOffsets%28System.DateTime%29> 모호한 시간을 해당 Utc (협정 세계시) 시간 수에 매핑할 메서드를 합니다.  
  
 [!code-csharp[System.TimeZone2.GetAmbiguousTimeOffsets#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/cs/System.TimeZone2.GetAmbiguousTimeOffsets.cs#1)]
 [!code-vb[System.TimeZone2.GetAmbiguousTimeOffsets#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/vb/System.TimeZone2.GetAmbiguousTimeOffsets.vb#1)]  
  
 그런 다음 다음과 같은 코드를 사용 하 여 메서드를 호출할 수 있습니다.  
  
 [!code-csharp[System.TimeZone2.GetAmbiguousTimeOffsets#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/cs/System.TimeZone2.GetAmbiguousTimeOffsets.cs#2)]
 [!code-vb[System.TimeZone2.GetAmbiguousTimeOffsets#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/vb/System.TimeZone2.GetAmbiguousTimeOffsets.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateTime" />이 모호한 시간이 아닌 경우</exception>
        <altmember cref="Overload:System.TimeZoneInfo.IsAmbiguousTime" />
        <related type="Article" href="https://msdn.microsoft.com/library/2cf5fb25-492c-4875-9245-98cac8348e97">방법: 모호한 시간 확인</related>
        <related type="Article" href="https://msdn.microsoft.com/library/bca874ee-5b68-4654-8bbd-3711220ef332">방법: Let 사용자의 모호한 시간 확인</related>
      </Docs>
    </Member>
    <Member MemberName="GetAmbiguousTimeOffsets">
      <MemberSignature Language="C#" Value="public TimeSpan[] GetAmbiguousTimeOffsets (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan[] GetAmbiguousTimeOffsets(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;TimeSpan&gt; ^ GetAmbiguousTimeOffsets(DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="F#" Value="member this.GetAmbiguousTimeOffsets : DateTimeOffset -&gt; TimeSpan[]" Usage="timeZoneInfo.GetAmbiguousTimeOffsets dateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">날짜와 시간입니다.</param>
        <summary>모호한 날짜 및 시간을 매핑할 수 있는 가능한 날짜 및 시간에 대한 정보를 반환합니다.</summary>
        <returns>특정 날짜 및 시간이 매핑될 수 있는 가능한 UTC(협정 세계시) 오프셋을 나타내는 개체의 배열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드의 정확한 동작은 간의 관계에 따라 달라 집니다 합니다 <xref:System.DateTimeOffset.Offset%2A> 의 속성을 `dateTimeOffset` 매개 변수 및 <xref:System.TimeZoneInfo> 개체입니다. 경우 값은 <xref:System.DateTimeOffset.Offset%2A> 속성은 현재 표준 시간대의 가능한 오프셋에 대 한 utc (협정 세계시)에서 날짜 및 시간으로 메서드가 반환 가능한 오프셋입니다. 그렇지 않으면 변환 `dateTimeOffset` 에서 현재 표준 시간대, 반환 된 가능한 오프셋에 날짜 및 시간입니다.  
  
 순서 <xref:System.TimeSpan> 이 메서드에서 반환 된 배열의 개체에에서 정의 되어 있지 않습니다. 하지만 오프셋을 나타내는 요소 시간대의 표준 시간에서 표준 시간대를 사용 하 여 해당 값을 비교 하 여 확인할 수 있습니다 <xref:System.TimeZoneInfo.BaseUtcOffset%2A> 속성입니다. 모호한 시간이 표준 시간대의 표준 시간에 매핑하려면 참조 [방법: 모호한 시간 확인](~/docs/standard/datetime/resolve-ambiguous-times.md)합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateTimeOffset" />이 모호한 시간이 아닌 경우</exception>
        <altmember cref="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)" />
        <related type="Article" href="https://msdn.microsoft.com/library/2cf5fb25-492c-4875-9245-98cac8348e97">방법: 모호한 시간 확인</related>
        <related type="Article" href="https://msdn.microsoft.com/library/bca874ee-5b68-4654-8bbd-3711220ef332">방법: Let 사용자의 모호한 시간 확인</related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="timeZoneInfo.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>해시 테이블과 같은 데이터 구조 및 해싱 알고리즘을 위한 해시 함수 역할을 합니다.</summary>
        <returns>이 <see cref="T:System.TimeZoneInfo" /> 개체에 대한 해시 코드 역할을 하는 부호 있는 32비트 정수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 대 한 추가 정보에 대 한 합니다 <xref:System.TimeZoneInfo.GetHashCode%2A> 메서드를 참조 하세요 <xref:System.Object.GetHashCode%2A>합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSystemTimeZones">
      <MemberSignature Language="C#" Value="public static System.Collections.ObjectModel.ReadOnlyCollection&lt;TimeZoneInfo&gt; GetSystemTimeZones ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.TimeZoneInfo&gt; GetSystemTimeZones() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetSystemTimeZones" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetSystemTimeZones () As ReadOnlyCollection(Of TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::ObjectModel::ReadOnlyCollection&lt;TimeZoneInfo ^&gt; ^ GetSystemTimeZones();" />
      <MemberSignature Language="F#" Value="static member GetSystemTimeZones : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;TimeZoneInfo&gt;" Usage="System.TimeZoneInfo.GetSystemTimeZones " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.5">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.5">
          <AttributeName>System.Security.SecurityTreatAsSafe</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.TimeZoneInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>로컬 시스템에서 사용할 수 있는 정보에 대한 모든 정렬된 표준 시간대 컬렉션을 반환합니다.</summary>
        <returns><see cref="T:System.TimeZoneInfo" /> 개체의 읽기 전용 컬렉션입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.TimeZoneInfo.GetSystemTimeZones%2A> 레지스트리의 HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Time Zones 키는 Windows 시스템에서 들어오고의 하위 키에서 모든 사용 가능한 표준 시간대 정보를 검색 하는 메서드는 [ICU라이브러리](http://userguide.icu-project.org/datetime/timezone) Linux 및 macOS에서 합니다. 성공적으로 검색 하 고 개별 특정 문자열 속성에 대 한 값을 구문 분석할 수 없는 경우 <xref:System.TimeZoneInfo> 개체,이 메서드는 해당 값을 빈 문자열로 설정 ("").  
  
> [!IMPORTANT]
>  합니다 <xref:System.TimeZoneInfo.GetSystemTimeZones%2A> 의 컬렉션을 반환 하는 메서드 <xref:System.TimeZoneInfo> 개체에 정의 된 표준 시간대에 대해서만 또는 ICU 라이브러리입니다. 오버 로드를 사용 하 여 만든 표준 시간대는 포함 되지 않습니다는 <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> 메서드. 이러한 표준 시간대 만들기 메서드에 의해 반환 되는 개체 참조를 통해서만 액세스할 수 있습니다.  
  
 이 메서드에서 반환 된 컬렉션에는 현재 문화권을 사용 하 여 표시 이름으로 UTC 오프셋을 기준으로 한, 표준 시간대를 UTC 오프셋은 동일 정렬 됩니다. 표시 이름에 대 한 정보를 참조 하세요. <xref:System.TimeZoneInfo.DisplayName%2A>합니다.  
  
 <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> 이 메서드에서 반환 된 개체를 지원 합니다 <xref:System.Collections.Generic.IEnumerable%601> 인터페이스는 해당 반복 될 수 있는 사용 하 여를 `foreach` (C#의 경우)의 또는 `For Each…Next` (Visual Basic)에서는 문. 다음을 제공 하는 루프의 각 반복 <xref:System.TimeZoneInfo> 컬렉션의 개체입니다.  
  
 컬렉션 <xref:System.TimeZoneInfo> 개체는 로컬 컴퓨터에 정의 된 표준 시간대를 나타내며, 모든 기간 동안 모든 표준 시간대에 대 한 자세한 내용은 반드시 제공 하지 않습니다. 응용 프로그램에서 로컬 컴퓨터에 없는 표준 시간대에 필요한 경우에 오버 로드를 사용 하 여 사용자 지정 시간 영역을 만들 수 있습니다는 <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> 메서드. 자세한 내용은 [방법: 표준 시간대 조정 규칙 없이 만들](~/docs/standard/datetime/create-time-zones-without-adjustment-rules.md) 고 [방법: 표준 시간대 조정 규칙을 사용 하 여 만들기](~/docs/standard/datetime/create-time-zones-with-adjustment-rules.md)합니다.  
  
 개별 표준 시간대를 호출 하 여 로컬 컴퓨터의 정의 되는지 여부를 확인할 수도 있습니다는 <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> 메서드 및 매개 변수로 검색 하려는 표준 시간대의 식별자를 제공 합니다.  
  
   
  
## Examples  
 다음 예제에서는 컴퓨터에 정의 된 표준 시간대를 나타내는 표준 시간대 개체의 컬렉션을 검색 하 고 텍스트 파일에 대 한 정보를 씁니다.  
  
 [!code-csharp[System.TimeZone2.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/getsystemtimezones1.cs#6)]
 [!code-vb[System.TimeZone2.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/getsystemtimezones1.vb#6)]
  [!code-powershell[System.TimeZone2.Class#6](~/samples/snippets/powershell/VS_Snippets_CLR_System/System.TimeZone2.Class/PS/Timezone2_Examples.ps1)]   
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">모든 표준 시간대 정보를 저장할 메모리가 부족한 경우</exception>
        <exception cref="T:System.Security.SecurityException">표준 시간대 정보가 포함된 레지스트리 키를 읽을 권한이 사용자에게 없는 경우</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetUtcOffset">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>이 표준 시간대의 시간과 특정 날짜 및 시간에 대한 UTC 사이의 오프셋 또는 차이를 계산합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetUtcOffset">
      <MemberSignature Language="C#" Value="public TimeSpan GetUtcOffset (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan GetUtcOffset(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetUtcOffset(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan GetUtcOffset(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.GetUtcOffset : DateTime -&gt; TimeSpan" Usage="timeZoneInfo.GetUtcOffset dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTime">오프셋을 확인할 대상 날짜 및 시간입니다.</param>
        <summary>이 표준 시간대의 시간과 특정 날짜 및 시간에 대한 UTC 사이의 오프셋 또는 차이를 계산합니다.</summary>
        <returns>두 표준 시간대 사이의 시간 차이를 나타내는 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 반환 된 시간 범위는 현재 표준 시간대 조정 규칙 응용 프로그램으로 인 한 모든 차이 포함합니다. 다른는 <xref:System.TimeZoneInfo.BaseUtcOffset%2A> 속성 시간대의 표준 시간과 utc (협정 세계시) 사이의 차이 반환 하 고 따라서를 조정 규칙을 고려 하지 않습니다.  
  
 경우는 `dateTime` 매개 변수의 <xref:System.DateTime.Kind%2A> 속성 표준 시간대 개체에 해당 하지 않는,이 메서드는 결과 반환 하기 전에 필요한 변환을 수행 합니다. 예를 들어 경우 발생할 수 있습니다 합니다 <xref:System.DateTime.Kind%2A> 속성은 <xref:System.DateTimeKind.Local?displayProperty=nameWithType> 하지만 표준 시간대 개체 현지 표준 시간대 아닙니다. 경우 `dateTime` 모호한 경우이 메서드는 모호한 시간을 표준 시간으로 해석 변환된 된 시간이 모호한 경우 또는 합니다. 경우 `dateTime` 올바르지 않으면이 메서드가 반환 된 <xref:System.TimeSpan> UTC와 표준 시간대의 표준 시간 간의 차이 반영 하는 개체입니다.  
  
 합니다 <xref:System.TimeZoneInfo.GetUtcOffset%28System.DateTime%29?displayProperty=nameWithType> 메서드는 작업에는 <xref:System.TimeZone.GetUtcOffset%2A> 메서드를 <xref:System.TimeZone> 클래스입니다.  
  
   
  
## Examples  
 다음 예제를 사용 합니다 <xref:System.TimeZoneInfo.GetUtcOffset%28System.DateTime%29> 다른 표준 시간대와 다른 날짜 값을 사용 하 여 메서드 <xref:System.DateTime.Kind%2A> 속성 값입니다.  
  
 [!code-csharp[System.TimeZone2.GetUtcOffset#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.GetUtcOffset/cs/System.TimeZone2.GetUtcOffset.cs#1)]
 [!code-vb[System.TimeZone2.GetUtcOffset#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.GetUtcOffset/vb/System.TimeZone2.GetUtcOffset.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeZoneInfo.BaseUtcOffset" />
      </Docs>
    </Member>
    <Member MemberName="GetUtcOffset">
      <MemberSignature Language="C#" Value="public TimeSpan GetUtcOffset (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan GetUtcOffset(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetUtcOffset(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan GetUtcOffset(DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="F#" Value="member this.GetUtcOffset : DateTimeOffset -&gt; TimeSpan" Usage="timeZoneInfo.GetUtcOffset dateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">오프셋을 확인할 대상 날짜 및 시간입니다.</param>
        <summary>이 표준 시간대의 시간과 특정 날짜 및 시간에 대한 UTC 사이의 오프셋 또는 차이를 계산합니다.</summary>
        <returns>UTC(협정 세계시)와 현재 표준 시간대 사이의 시간 차이를 나타내는 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 반환 된 시간 범위는 현재 표준 시간대 조정 규칙 응용 프로그램으로 인 한 모든 차이 포함합니다. 다른는 <xref:System.TimeZoneInfo.BaseUtcOffset%2A> 속성 시간대의 표준 시간과 utc (협정 세계시) 사이의 차이 반환 하 고 따라서를 조정 규칙을 고려 하지 않습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasSameRules">
      <MemberSignature Language="C#" Value="public bool HasSameRules (TimeZoneInfo other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasSameRules(class System.TimeZoneInfo other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.HasSameRules(System.TimeZoneInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasSameRules (other As TimeZoneInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HasSameRules(TimeZoneInfo ^ other);" />
      <MemberSignature Language="F#" Value="member this.HasSameRules : TimeZoneInfo -&gt; bool" Usage="timeZoneInfo.HasSameRules other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.TimeZoneInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="other">현재 <see cref="T:System.TimeZoneInfo" /> 개체와 비교할 두 번째 개체입니다.</param>
        <summary>현재 개체 및 다른 <see cref="T:System.TimeZoneInfo" /> 개체에 같은 조정 규칙이 있는지 여부를 나타냅니다.</summary>
        <returns>두 표준 시간대에 동일한 조정 규칙과 동일한 기본 오프셋이 있는 경우 <see langword="true" />이고 그렇지 않은 경우 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 같은 <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29?displayProperty=nameWithType> 메서드를 <xref:System.TimeZoneInfo.HasSameRules%2A> 메서드 두 표준 시간대 기본 오프셋 지 여부를 나타냅니다 (정의 된 대로 <xref:System.TimeZoneInfo.BaseUtcOffset%2A> 속성) 및 조정 규칙. 와 달리 합니다 <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29?displayProperty=nameWithType> 메서드를 <xref:System.TimeZoneInfo.HasSameRules%2A> 표준 시간대 식별자를 비교 하지 않습니다 (정의 된 대로 <xref:System.TimeZoneInfo.Id%2A> 속성).  
  
   
  
## Examples  
 Windows의 레지스트리에 정의 된 표준 시간대를 나열 하는 일반적으로 개수와 [ICU 라이브러리](http://userguide.icu-project.org/datetime/timezone) Linux 및 macOS에 utc (협정 세계시)와 동일한 조정 규칙에서 동일한 오프셋입니다. 다음 예제에서는 콘솔에 이러한 표준 시간대의 목록을 표시합니다.  
  
 [!code-csharp[System.TimeZone2.HasSameRules#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.HasSameRules/cs/HasSameRules.cs#1)]
 [!code-vb[System.TimeZone2.HasSameRules#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.HasSameRules/vb/HasSameRules.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="other" /> 매개 변수가 <see langword="null" />인 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public string Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Id" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.Id" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Id As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Id { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Id : string" Usage="System.TimeZoneInfo.Id" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>표준 시간대 식별자를 가져옵니다.</summary>
        <value>표준 시간대 식별자입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 표준 시간대 식별자는 특정 표준 시간대를 고유 하 게 식별 하는 키 문자열입니다. Windows 시스템에서 Windows 시스템에 레지스트리 HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Time 영역 분기의 하위 키에 해당 합니다 [ICU 라이브러리](http://userguide.icu-project.org/datetime/timezone) Linux 및 macOS에서 합니다. 매개 변수로 전달할 수는 <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> 인스턴스화하기 위한 메서드를 <xref:System.TimeZoneInfo> 특정 표준 시간대를 나타내는 개체입니다.  
  
> [!IMPORTANT]
>  Windows 레지스트리에서 키 이름이 255 자를 사용할 수 있지만 사용자 지정 표준 시간대에 할당 하는 식별자 32 자 이하의 되도록 하는 것이 좋습니다. 길수록 식별자, 키 이름이 잘못 될 확률이 높아집니다 검색 하는 경우를 제공 합니다.  
  
 값을 <xref:System.TimeZoneInfo.Id%2A> 속성은 일반적으로 항상 그렇지는 않지만 동일 합니다는 <xref:System.TimeZoneInfo.StandardName%2A> 속성입니다. 조정 된 범용 표준 시간대의 식별자는 UTC입니다.  
  
   
  
## Examples  
 다음 예제에서는 로컬 컴퓨터에 정의 된 표준 시간대의 각 식별자를 나열 합니다.  
  
 [!code-csharp[System.TimeZone2.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#5)]
 [!code-vb[System.TimeZone2.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsAmbiguousTime">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>특정 표준 시간대의 특정 날짜 및 시간이 모호한지 여부와 이를 둘 이상의 UTC 시간에 매핑할 수 있는지 여부를 결정합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsAmbiguousTime">
      <MemberSignature Language="C#" Value="public bool IsAmbiguousTime (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsAmbiguousTime(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsAmbiguousTime(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.IsAmbiguousTime : DateTime -&gt; bool" Usage="timeZoneInfo.IsAmbiguousTime dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTime">날짜 및 시간 값입니다.</param>
        <summary>특정 표준 시간대의 특정 날짜 및 시간이 모호한지 여부와 이를 둘 이상의 UTC 시간에 매핑할 수 있는지 여부를 결정합니다.</summary>
        <returns><paramref name="dateTime" /> 매개 변수가 모호한 경우 <see langword="true" />이고, 그렇지 않은 경우 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 모호한 시간이 표준 시간대에 대 한 시간 범위에 포함 됩니다. 즉, 표준 시간 또는 시간 조정 규칙을 응용 프로그램에서 발생 하는 수 있습니다. 일반적으로 모호한 시간 클록이 일광 절약 시간에서 표준 시간으로 반환할 설정 된 경우에 발생 합니다. 예시는 예제 단원을 참조 하십시오.  
  
 Utc (협정 세계시)가 모호한 시간 없음입니다. 일광 절약 시간제를 지원 하지 않는 영역도 시간 수행 합니다. 따라서 이러한 표준 시간대가 없고 조정 규칙에 대 한 호출을 <xref:System.TimeZoneInfo.IsAmbiguousTime%2A> 메서드를 항상 반환 `false`합니다.  
  
 따르는 일광 절약 시간 표준 시간대에 대 한이 메서드의 정확한 동작은 간의 관계에 따라 합니다 <xref:System.DateTime.Kind%2A> 속성 및 <xref:System.TimeZoneInfo> 다음 표에서 보여 주듯이 개체입니다.  
  
|TimeZoneInfo 개체 유형|Kind 속성 값|동작|  
|------------------------------|-------------------------|--------------|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Local?displayProperty=nameWithType> 또는 <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|확인 여부를 `dateTime` 매개 변수는 모호 합니다.|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|변환 `dateTime` 현지 시간으로 고 당시 모호한 인지 여부를 확인 합니다.|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType> 또는 <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|`false`를 반환합니다.|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|하는 경우 `dateTime` 모호 하므로를 표준 시간, UTC로 변환 하 고 반환 가정 `false`합니다.|  
|다른 표준 시간대입니다.|<xref:System.DateTimeKind.Local?displayProperty=nameWithType> 또는 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|변환 `dateTime` 지정된 된 표준 시간대의 시간 고 당시 모호한 인지 여부를 확인 합니다.|  
|다른 표준 시간대입니다.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|확인 여부를 `dateTime` 모호 합니다.|  
  
   
  
## Examples  
 태평양 표준 시간대의 일광 절약 시간제가 끝나는 오전 2 시에 2007 년 11 월 4 일. 다음 예에서는 오전 12 시 59 분에서 1 분 간격 시간 전달 2007 년 11 월 4 일 01 오전 2 2007 년 11 월 4 일에 <xref:System.TimeZoneInfo.IsAmbiguousTime%28System.DateTime%29> 메서드는 <xref:System.TimeZoneInfo> 태평양 표준 시간대를 나타내는 개체입니다. 콘솔 출력은 오전 1 시부터 모든 시간을 나타냅니다. 2007 년 11 월 4 일 오전 1 시 59 분에 2007 년 11 월 4 일은 모호 합니다.  
  
 [!code-csharp[System.TimeZone2.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#8)]
 [!code-vb[System.TimeZone2.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateTime" /> 값의 <see cref="P:System.DateTime.Kind" /> 속성이 <see cref="F:System.DateTimeKind.Local" />이고 <paramref name="dateTime" />이 잘못된 시간인 경우</exception>
        <altmember cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="IsAmbiguousTime">
      <MemberSignature Language="C#" Value="public bool IsAmbiguousTime (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsAmbiguousTime(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsAmbiguousTime(DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="F#" Value="member this.IsAmbiguousTime : DateTimeOffset -&gt; bool" Usage="timeZoneInfo.IsAmbiguousTime dateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">날짜와 시간입니다.</param>
        <summary>특정 표준 시간대의 특정 날짜 및 시간이 모호한지 여부와 이를 둘 이상의 UTC 시간에 매핑할 수 있는지 여부를 결정합니다.</summary>
        <returns><paramref name="dateTimeOffset" /> 매개 변수가 현재 표준 시간대에서 모호한 경우 <see langword="true" />이고 그렇지 않은 경우 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 모호한 시간이 표준 시간대에 대 한 시간 범위에 포함 됩니다. 이 표준 시간 또는 시간 조정 규칙을 응용 프로그램에서 결과 사용할 수 있다는 것을 의미 합니다. 일반적으로 모호한 시간 클록이 일광 절약 시간에서 표준 시간으로 반환할 설정 된 경우에 발생 합니다. Utc (협정 세계시)가 모호한 시간 없음입니다. 일광 절약 시간제를 지원 하지 않는 영역도 시간 수행 합니다.  
  
 메서드의 정확한 동작은 간의 관계에 따라 달라 집니다 합니다 <xref:System.DateTimeOffset.Offset%2A> 의 속성을 `dateTimeOffset` 매개 변수 및 현재 표준 시간대입니다. 경우 값을 <xref:System.DateTimeOffset.Offset%2A> 메서드 확인 속성이 가능한 현재 표준 시간대의 UTC의 오프셋 인 해당 날짜와 시간이 있는지 여부를 모호 합니다. 변환이 고, 그렇지 `dateTimeOffset` 현재 표준 시간대의 시간를 확인 하 고 해당 날짜와 시간이 있는지 여부를 모호 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsDaylightSavingTime">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>지정된 날짜 및 시간이 현재 <see cref="T:System.TimeZoneInfo" /> 개체의 표준 시간대에 대한 일광 절약 시간 범위에 속하는지 여부를 나타냅니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool IsDaylightSavingTime (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsDaylightSavingTime(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsDaylightSavingTime(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.IsDaylightSavingTime : DateTime -&gt; bool" Usage="timeZoneInfo.IsDaylightSavingTime dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTime">날짜 및 시간 값입니다.</param>
        <summary>지정된 날짜 및 시간이 현재 <see cref="T:System.TimeZoneInfo" /> 개체의 표준 시간대에 대한 일광 절약 시간 범위에 속하는지 여부를 나타냅니다.</summary>
        <returns><paramref name="dateTime" /> 매개 변수가 일광 절약 시간이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 반환 값 <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> 나타내는 표준 시간대 간의 관계에 영향을 받는 <xref:System.TimeZoneInfo> 개체 및 <xref:System.DateTime.Kind%2A> 의 속성을 `dateTime` 매개 변수를 다음 표와 같이 합니다.  
  
|TimeZoneInfo 개체|DateTime.Kind 속성|결과|  
|-------------------------|----------------------------|------------|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|`DateTimeKind.Local`|확인 여부를 `dateTime` 이 일광 절약 시간입니다.|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|`DateTimeKind.Utc`|변환 `dateTime` 현지 시간을 utc (협정 세계시)에서 일광 절약 시간 인지 여부를 결정 합니다.|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|`DateTimeKind.Unspecified`|가정 `dateTime` 현지 시간을 나타내고 일광 절약 시간 인지를 확인 합니다.|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|`DateTimeKind.Local`, `DateTimeKind.Unspecified`또는 `DateTimeKind.Utc`|반환 `false` (UTC 일광 절약 시간제를 지원 하지 않습니다).|  
|다른 <xref:System.TimeZoneInfo> 개체입니다.|`DateTimeKind.Local`|해당 시간을 현지 시간으로 변환 된 <xref:System.TimeZoneInfo> 개체 및 일광 절약 시간 인지 여부를 확인 합니다.|  
|다른 <xref:System.TimeZoneInfo> 개체입니다.|`DateTimeKind.Utc`|해당 시간을 UTC로 변환 된 <xref:System.TimeZoneInfo> 개체 및 일광 절약 시간 인지 여부를 확인 합니다.|  
|다른 <xref:System.TimeZoneInfo> 개체입니다.|`DateTimeKind.Unspecified`|확인 여부를 `dateTime` 이 일광 절약 시간입니다.|  
  
 표시 되는 표준 시간대를 <xref:System.TimeZoneInfo> 개체가 일광 절약 시간제를 지원 하지 않습니다, 메서드는 항상 반환 `false`합니다. 다양 한 표준 시간대를 포함 하 여 <xref:System.TimeZoneInfo.Utc%2A>, 일광 절약 시간제를 지원 하지 않습니다.  표준 시간대 일광 절약 시간제를 지원 하는지 여부를 결정할 값을 검색 해당 <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> 속성입니다.  
  
 경우는 `dateTime` 매개 변수는 현재 개체의 표준 시간대에서 모호한 시간을 지정 합니다 <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> 보다 크거나 같습니다 `dateTime` 표준 시간으로 반환 `false` 경우 해당 <xref:System.DateTime.Kind%2A> 속성이 <xref:System.DateTimeKind.Local?displayProperty=nameWithType> 또는 <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. 경우는 <xref:System.DateTime.Kind%2A> 속성은 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>,이 메서드는 올바른 모호한 시간을 선택 하 고 일광 절약 시간 인지 여부를 나타냅니다.  
  
 때문에 합니다 <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29?displayProperty=nameWithType> 메서드를 반환할 수 있습니다 `false` 날짜 및 시간을 모호 합니다. (즉, 날짜 및 시간 간격은 표준 시간이 나 특정 표준 시간대의 일광 절약 시간 중 하나를 나타낼 수 있는)는 <xref:System.TimeZoneInfo.IsAmbiguousTime%28System.DateTime%29?displayProperty=nameWithType> 메서드를 사용 하 여 연결할 수 있습니다는 <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29> 시간을 일광 절약 시간 수 있는지 여부를 결정 하는 방법입니다. 모호한 시간을 일광 절약 시간 및 표준 시간이 모두 될 수 있는 하나 이므로 <xref:System.TimeZoneInfo.IsAmbiguousTime%28System.DateTime%29> 날짜 및 시간을 일광 절약 시간 수 수 있는지 여부를 확인 하려면 메서드를 처음 호출할 수 있습니다. 메서드에서 반환 되 면 `false`, <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29> 결정할 메서드를 호출할 수 있는지 여부를 <xref:System.DateTime> 값이 일광 절약 시간. 다음 예제에서는이 기술을 보여 줍니다.  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#2)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#2)]  
  
 경우는 `dateTime` 잘못 된 시간을 지정 하는 매개 변수, 메서드 호출에서 throw를 <xref:System.ArgumentException> 경우 값을 `dateTime` 매개 변수의 <xref:System.DateTime.Kind%2A> 속성은 <xref:System.DateTimeKind.Local?displayProperty=nameWithType>고, 그렇지 않으면 메서드가 반환 `false`.  
  
 호출을 <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> 표준 시간대의 사용 여부를 결정 하는 방법 <xref:System.TimeZoneInfo.StandardName%2A> 값 또는 해당 <xref:System.TimeZoneInfo.DaylightName%2A> 표준 시간대 이름을 표시할 때는 값입니다. 예시는 예제 단원을 참조 하십시오.  
  
   
  
## Examples  
 다음 예제에서는 라는 메서드를 정의 `DisplayDateWithTimeZoneName` 를 사용 하는 <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> 시간대의 표준 시간 이름 또는 일광 절약 시간 이름을 표시할지 여부를 결정 하는 방법.  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#1)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateTime" /> 값의 <see cref="P:System.DateTime.Kind" /> 속성이 <see cref="F:System.DateTimeKind.Local" />이고 <paramref name="dateTime" />이 잘못된 시간인 경우</exception>
        <altmember cref="P:System.TimeZoneInfo.SupportsDaylightSavingTime" />
      </Docs>
    </Member>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool IsDaylightSavingTime (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsDaylightSavingTime(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsDaylightSavingTime(DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="F#" Value="member this.IsDaylightSavingTime : DateTimeOffset -&gt; bool" Usage="timeZoneInfo.IsDaylightSavingTime dateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">날짜 및 시간 값입니다.</param>
        <summary>지정된 날짜 및 시간이 현재 <see cref="T:System.TimeZoneInfo" /> 개체의 표준 시간대에 대한 일광 절약 시간 범위에 속하는지 여부를 나타냅니다.</summary>
        <returns><paramref name="dateTimeOffset" /> 매개 변수가 일광 절약 시간이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 반환 값 <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> 영향을 나타내는 표준 시간대 간의 관계를 <xref:System.TimeZoneInfo> 개체 및 <xref:System.DateTimeOffset.Offset%2A> 의 속성을 `dateTimeOffset` 매개 변수입니다. 경우 `dateTimeOffset` 에 해당 하지 않는 현재 표준 시간대 오프셋에서 Utc (협정 세계시)를 현재 표준 시간대의 시간 이후 메서드 변환 합니다. 그런 다음 해당 날짜와 시간이 있는지 여부를 일광 절약 시간 결정 합니다.  
  
 표시 되는 표준 시간대를 <xref:System.TimeZoneInfo> 개체가 일광 절약 시간제를 지원 하지 않습니다, 메서드는 항상 반환 `false`합니다. 표준 시간대 일광 절약 시간제를 지원 하는지 여부를 결정할 값을 검색 해당 <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> 속성입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeZoneInfo.SupportsDaylightSavingTime" />
      </Docs>
    </Member>
    <Member MemberName="IsInvalidTime">
      <MemberSignature Language="C#" Value="public bool IsInvalidTime (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsInvalidTime(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsInvalidTime(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.IsInvalidTime : DateTime -&gt; bool" Usage="timeZoneInfo.IsInvalidTime dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTime">날짜 및 시간 값입니다.</param>
        <summary>특정 날짜 및 시간이 올바르지 않은지 여부를 나타냅니다.</summary>
        <returns><paramref name="dateTime" />이 올바르지 않으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 잘못 된 시간을 utc (협정 세계시)로 조정 규칙을 응용 프로그램으로 인해 매핑할 수 없는 현재 표준 시간대의 시간 범위에 포함 됩니다. 일반적으로 잘못 된 시간은 일광 절약 시간에 대 한 시간 앞으로 이동할 때 발생 합니다. 예시는 예제 단원을 참조 하십시오.  
  
 값을 <xref:System.DateTime.Kind%2A> 의 속성을 `dateTime` 매개 변수가 영향을 여부를 `dateTime` 다음 표와 같이 잘못 된 시간을 나타냅니다.  
  
|DateTime.Kind 속성|TimeZoneInfo 개체 (있는 경우)|동작|  
|----------------------------|-------------------------------------------|--------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|에 유효한 지 확인 합니다.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType> 또는 비-현지 표준 시간대입니다.|변환 `dateTime` 당시에는 <xref:System.TimeZoneInfo> 개체를 반환 합니다 `false`합니다.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|해당 사항 없음.|가정 `dateTime` 의 시간을 <xref:System.TimeZoneInfo> 개체 및 유효한 지 확인 합니다.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|해당 사항 없음.|`false`를 반환합니다.|  
  
   
  
## Examples  
 태평양 표준 시간대의 일광 절약 시간이 오전 2 시에 시작 2006 년 4 월 2 일입니다. 다음 코드는 오전 1 시 59 분에서 1 분 간격 시간을 전달합니다. 2006 년 4 월 2 일 오전 3 시 01에서 2006 년 4 월 2 일에 하는 <xref:System.TimeZoneInfo.IsInvalidTime%2A> 메서드는 <xref:System.TimeZoneInfo> 태평양 표준 시간대를 나타내는 개체입니다. 콘솔 출력은 오전 2 시부터 모든 시간을 나타냅니다. 2006 년 4 월 2 일 오전 2 시 59 분에 2006 년 4 월 2 일에 유효 하지 않습니다.  
  
 [!code-csharp[System.TimeZone2.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#9)]
 [!code-vb[System.TimeZone2.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.TimeZoneInfo.IsAmbiguousTime" />
      </Docs>
    </Member>
    <Member MemberName="Local">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo Local { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.TimeZoneInfo Local" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.Local" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Local As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TimeZoneInfo ^ Local { TimeZoneInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Local : TimeZoneInfo" Usage="System.TimeZoneInfo.Local" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.5">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현지 표준 시간대를 나타내는 <see cref="T:System.TimeZoneInfo" /> 개체를 가져옵니다.</summary>
        <value>현지 표준 시간대를 나타내는 개체입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 현지 표준 시간대는 코드를 실행 하는 컴퓨터의 표준 시간대입니다.  
  
> [!IMPORTANT]
>  항상 통해 현지 표준 시간대에 액세스 해야 합니다 <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> 현지 시간을 할당 하는 것이 아니라 속성 시간대를 <xref:System.TimeZoneInfo> 개체 변수입니다. 그래야 합니다 <xref:System.TimeZoneInfo> 개체 변수를 호출 하 여 무효화 하지는 <xref:System.TimeZoneInfo.ClearCachedData%2A> 메서드.  
  
 Windows 시스템에서 합니다 <xref:System.TimeZoneInfo> 에서 반환 된 개체를 <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> 속성 설정을 반영 합니다 **일광 절약 시간제 시계를 자동으로 조정할** 제어판에서 확인란을 **날짜 및 시간**  응용 프로그램입니다. 확인란을 선택 하지 않으면 현지 표준 시간대의 캐시 된 복사본이 없습니다 일광 절약 시간 정보를 포함 합니다. 이는 다음을 의미합니다.  
  
-   현지 표준 시간대의 <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> 길이가 0 인 배열을 반환 합니다.  
  
-   현지 표준 시간대 <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> 속성이 반환 `false`합니다.  
  
-   현지 표준 시간대에 모호 하거나 잘못 된 시간이 없습니다 (모든 호출이 <xref:System.TimeZoneInfo.IsAmbiguousTime%2A> 하거나 <xref:System.TimeZoneInfo.IsInvalidTime%2A> 반환 `false`).  
  
-   에 대 한 모든 호출 <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A> 개별 현지 시간을 사용 하 여 false를 반환 합니다.  
  
 그러나이 true가 아니면 현지 표준 시간대에 대 한 참조를 사용 하 여 검색 되는 경우는 <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> 메서드.  
  
 <xref:System.TimeZoneInfo.Local%2A> 속성에 해당 하는 <xref:System.TimeZone.CurrentTimeZone%2A> 의 속성은 <xref:System.TimeZone> 클래스입니다.  
  
   
  
## Examples  
 다음 예제에서는 검색을 <xref:System.TimeZoneInfo> 표시 이름, 표준 시간 이름 및 일광 절약 시간 이름 출력 현지 표준 시간대를 나타내는 개체입니다.  
  
 [!code-csharp[System.TimeZone2.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/ShowTimeZoneNames1.cs#2)]
 [!code-vb[System.TimeZone2.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/ShowTimeZoneNames1.vb#2)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/961fb70b-83f0-4dab-a042-cb5fcd817cf5">방법: 미리 정의 된 UTC 및 현지 표준 시간대 개체에 액세스</related>
      </Docs>
    </Member>
    <Member MemberName="StandardName">
      <MemberSignature Language="C#" Value="public string StandardName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StandardName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.StandardName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StandardName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ StandardName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StandardName : string" Usage="System.TimeZoneInfo.StandardName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>해당 표준 시간대의 표준 시간을 나타내는 표시 이름을 가져옵니다.</summary>
        <value>표준 시간대 표준 시간의 표시 이름입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 표시 이름은 Windows 운영 체제에 설치 된 문화권에 따라 지역화 됩니다.  
  
 <xref:System.TimeZoneInfo.StandardName%2A> 속성이 동일 합니다 <xref:System.TimeZone.StandardName%2A> 의 속성은 <xref:System.TimeZone> 클래스입니다.  
  
 운영 체제 언어는 영어 값의 경우는 <xref:System.TimeZoneInfo.StandardName%2A> 속성은 일반적으로 항상 그렇지는 않지만 동일 합니다는 <xref:System.TimeZoneInfo.Id%2A> 속성입니다.  
  
   
  
## Examples  
 다음 예제에서는 라는 메서드를 정의 `DisplayDateWithTimeZoneName` 를 사용 하는 <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29> 시간대의 표준 시간 이름 또는 일광 절약 시간 이름을 표시할지 여부를 결정 하는 방법.  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#1)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool SupportsDaylightSavingTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsDaylightSavingTime" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.SupportsDaylightSavingTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SupportsDaylightSavingTime As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SupportsDaylightSavingTime { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.SupportsDaylightSavingTime : bool" Usage="System.TimeZoneInfo.SupportsDaylightSavingTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>해당 표준 시간대에 일광 절약 시간 규칙이 있는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>해당 표준 시간대가 일광 절약 시간을 지원하는 경우 <see langword="true" />이고, 그렇지 않은 경우 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 값을 <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> 속성에서 반환 된 현지 표준 시간대에 대 한는 <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> 속성 제어판 설정을 반영 **날짜 및 시간** 정의 하는 응용 프로그램의 확인란을 여부를 시스템 자동으로 일광 절약 시간제에 맞게 조정합니다. 이 선택 취소 하는 경우 또는 확인란이 없는 표준 시간대에 대해 표시 되 면이 속성의 값은 `false`합니다.  
  
   
  
## Examples  
 다음 예제에서는 로컬 시스템에서 사용할 수 있는 모든 표준 시간대의 컬렉션을 검색 및 일광 절약 시간제를 지원 하지 않는 한의 이름이 표시 됩니다.  
  
 [!code-csharp[System.TimeZone2.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#4)]
 [!code-vb[System.TimeZone2.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#4)]
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDeserialization (sender As Object) Implements IDeserializationCallback.OnDeserialization" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System::Object ^ sender) = System::Runtime::Serialization::IDeserializationCallback::OnDeserialization;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="sender">콜백을 시작한 개체입니다. 이 매개 변수의 기능은 현재 구현되지 않았습니다.</param>
        <summary>개체의 deserialization이 완료될 때 실행됩니다.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Runtime.Serialization.SerializationException"><see cref="T:System.TimeZoneInfo" /> 개체에 잘못되었거나 손상된 데이터가 포함되어 있습니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="info">데이터로 채울 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 개체입니다.</param>
        <param name="context">이 serialization의 대상입니다(<see cref="T:System.Runtime.Serialization.StreamingContext" /> 참조).</param>
        <summary>현재 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 개체를 serialize하는 데 필요한 데이터로 <see cref="T:System.TimeZoneInfo" /> 개체를 채웁니다.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="info" /> 매개 변수가 <see langword="null" />인 경우</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다. 이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</permission>
      </Docs>
    </Member>
    <Member MemberName="ToSerializedString">
      <MemberSignature Language="C#" Value="public string ToSerializedString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToSerializedString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ToSerializedString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToSerializedString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToSerializedString();" />
      <MemberSignature Language="F#" Value="member this.ToSerializedString : unit -&gt; string" Usage="timeZoneInfo.ToSerializedString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>현재 <see cref="T:System.TimeZoneInfo" /> 개체를 serialize된 문자열로 변환합니다.</summary>
        <returns>현재 <see cref="T:System.TimeZoneInfo" /> 개체를 나타내는 문자열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 일반적으로 Windows 시스템의 레지스트리에 정의 되지 않은 표준 시간대를 사용 하는 응용 프로그램 또는 [ICU 라이브러리](http://userguide.icu-project.org/datetime/timezone) macOScan Linux에 사용할 수는 <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> 로필요한표준시간대를인스턴스화하기위한메서드를<xref:System.TimeZoneInfo>개체입니다. 응용 프로그램을 호출할 수 있습니다는 <xref:System.TimeZoneInfo.ToSerializedString%2A> 표준 시간대 개체를 문자열로 변환 하는 방법입니다.  
  
 <xref:System.TimeZoneInfo> 개체는 응용 프로그램 필요에 따라를 검색할 수 있는 위치에도 저장 해야 합니다. 가능한 위치는 다음과 같습니다.  
  
-   Windows 시스템 레지스트리입니다.  
  
-   응용 프로그램 리소스 파일입니다.  
  
-   텍스트 파일과 같은 외부 파일입니다.  
  
   
  
## Examples  
 다음 예제는 / 남극 가져오려고 로컬 시스템 표준 시간대입니다. 실패 한 경우 코드를 응용 프로그램 디렉터리에 있는 텍스트 파일에서 표준 시간대에 대 한 정보를 검색 하려고 시도 합니다. 이 시도가 실패 하면 코드는 표준 시간대를 만들고 텍스트 파일에 대 한 정보를 기록 합니다.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#4)]
 [!code-vb[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeZoneInfo.FromSerializedString(System.String)" />
        <related type="Article" href="https://msdn.microsoft.com/library/3c96d83a-a057-4496-abb0-8f4b12712558">방법: 포함된 리소스에 표준 시간대 저장</related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="timeZoneInfo.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>현재 <see cref="T:System.TimeZoneInfo" /> 개체의 표시 이름을 반환합니다.</summary>
        <returns>현재 <see cref="P:System.TimeZoneInfo.DisplayName" /> 개체의 <see cref="T:System.TimeZoneInfo" /> 속성 값입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우 포함 하는 컬렉션을 할당 <xref:System.TimeZoneInfo> 와 같은 개체 목록 컨트롤에는 <xref:System.Windows.Forms.ListBox> 컨트롤, 컨트롤을 자동으로 호출 합니다 <xref:System.TimeZoneInfo.ToString%2A> 목록에 표시할 각 개체를 설명 하는 문자열을 추출 하는 방법. 결과적으로, 문자열로 개체의 의미 있는 설명을 저장할 필요가 없습니다 및 사용자를 해당 문자열을 사용 하 여 컬렉션에서 개체를 추출할 필요가 없습니다. [방법: 컴퓨터에 있는 표준 시간대 열거](~/docs/standard/datetime/enumerate-time-zones.md) 자세한 세부 정보에 대 한 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Utc">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo Utc { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.TimeZoneInfo Utc" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.Utc" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Utc As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TimeZoneInfo ^ Utc { TimeZoneInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Utc : TimeZoneInfo" Usage="System.TimeZoneInfo.Utc" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>UTC를 나타내는 <see cref="T:System.TimeZoneInfo" /> 개체를 가져옵니다.</summary>
        <value>UTC(협정 세계시) 시간대를 나타내는 개체입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 기본 제공 개체입니다. 이 대 한 정보 <xref:System.TimeZoneInfo> 개체에서 Windows 시스템에 레지스트리에서 검색 되지 않으면 합니다 [ICU 라이브러리](http://userguide.icu-project.org/datetime/timezone) Linux 및 macOS에서 합니다.  
  
> [!IMPORTANT]
>  항상 utc (협정 세계시) 영역을 통해 액세스 해야 합니다 <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType> UTC 표준 시간대를 할당 하는 것이 아니라 속성을 <xref:System.TimeZoneInfo> 개체 변수입니다. 그래야 합니다 <xref:System.TimeZoneInfo> 개체 변수를 호출 하 여 무효화 하지는 <xref:System.TimeZoneInfo.ClearCachedData%2A> 메서드.  
  
 협정 세계시로 그리니치 GMT (그리니치 표준시) 이전에 알려졌습니다.  
  
   
  
## Examples  
 다음 예제에서는 검색을 <xref:System.TimeZoneInfo> 표시 이름, 표준 시간 이름 및 일광 절약 시간 이름 출력을 utc (협정 세계시)를 나타내는 개체입니다.  
  
 [!code-csharp[System.TimeZone2.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#3)]
 [!code-vb[System.TimeZone2.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#3)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/961fb70b-83f0-4dab-a042-cb5fcd817cf5">방법: 미리 정의 된 UTC 및 현지 표준 시간대 개체에 액세스</related>
      </Docs>
    </Member>
  </Members>
</Type>