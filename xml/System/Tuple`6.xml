<Type Name="Tuple&lt;T1,T2,T3,T4,T5,T6&gt;" FullName="System.Tuple&lt;T1,T2,T3,T4,T5,T6&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ad472dec3b20121490869f8150e8ca3c3a57af01" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58729727" /></Metadata><TypeSignature Language="C#" Value="public class Tuple&lt;T1,T2,T3,T4,T5,T6&gt; : IComparable, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Tuple`6&lt;T1, T2, T3, T4, T5, T6&gt; extends System.Object implements class System.Collections.IStructuralComparable, class System.Collections.IStructuralEquatable, class System.IComparable" />
  <TypeSignature Language="DocId" Value="T:System.Tuple`6" />
  <TypeSignature Language="VB.NET" Value="Public Class Tuple(Of T1, T2, T3, T4, T5, T6)&#xA;Implements IComparable, IStructuralComparable, IStructuralEquatable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename T6&gt;&#xA;public ref class Tuple : IComparable, System::Collections::IStructuralComparable, System::Collections::IStructuralEquatable" />
  <TypeSignature Language="F#" Value="type Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6&gt; = class&#xA;    interface IStructuralEquatable&#xA;    interface IStructuralComparable&#xA;    interface IComparable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T1" />
    <TypeParameter Name="T2" />
    <TypeParameter Name="T3" />
    <TypeParameter Name="T4" />
    <TypeParameter Name="T5" />
    <TypeParameter Name="T6" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IStructuralComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IStructuralEquatable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T1">튜플의 첫 번째 구성 요소 형식입니다.</typeparam>
    <typeparam name="T2">튜플의 두 번째 구성 요소 형식입니다.</typeparam>
    <typeparam name="T3">튜플의 세 번째 구성 요소 형식입니다.</typeparam>
    <typeparam name="T4">튜플의 네 번째 구성 요소 형식입니다.</typeparam>
    <typeparam name="T5">튜플의 다섯 번째 구성 요소 형식입니다.</typeparam>
    <typeparam name="T6">튜플의 여섯 번째 구성 요소 형식입니다.</typeparam>
    <summary>6개의 요소로 구성된 튜플을 나타냅니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 튜플은 값의 시퀀스를 특정 수 있는 데이터 구조입니다. <xref:System.Tuple%606> 클래스 나타냅니다 6-튜플 또는 6 중는 6 개 구성 요소가 있는 튜플을 합니다.  
  
 인스턴스화할 수 있습니다는 <xref:System.Tuple%606> 중 하나를 호출 하 여 개체를 <xref:System.Tuple%606.%23ctor%2A> 또는 정적 <xref:System.Tuple.Create%60%606%28%60%600%2C%60%601%2C%60%602%2C%60%603%2C%60%604%2C%60%605%29?displayProperty=nameWithType> 메서드. 읽기 전용을 사용 하 여 튜플 구성 요소의 값을 검색할 수 있습니다 <xref:System.Tuple%606.Item1%2A>, <xref:System.Tuple%606.Item2%2A>를 <xref:System.Tuple%606.Item3%2A>, <xref:System.Tuple%606.Item4%2A>에 <xref:System.Tuple%606.Item5%2A>, 및 <xref:System.Tuple%606.Item6%2A> 인스턴스 속성입니다.  
  
 튜플의 네 가지 방법으로 일반적으로 사용 됩니다.  
  
-   단일 데이터 집합을 나타냅니다. 예를 들어, 튜플을 데이터베이스 레코드를 나타내고 해당 구성 요소 레코드의 개별 필드를 나타낼 수 있습니다.  
  
-   쉽게 액세스 및 조작, 데이터 집합을 제공 합니다. 다음 예제에서는 정의 <xref:System.Tuple%606> 뉴욕시부터 2000 1960 년부터 각 인구에 대 한 인구 데이터가 포함 된 개체입니다. 6 중에 전달 되는 `ComputePopulationChange` 전체 50 년 동안의 연간 변동률 뿐만 아니라, 인구 조사 간의 연간 변동률을 계산 하는 메서드.  
  
     [!code-csharp[System.Tuple\`6.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`6.class/cs/example1.cs#1)]
     [!code-vb[System.Tuple\`6.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`6.class/vb/example1.vb#1)]  
  
-   사용 하지 않고 메서드에서 여러 값을 반환할 `out` 매개 변수 (C#) 또는 `ByRef` 매개 변수 (Visual Basic). 이전 예제에서 도시 이름과 함께 계산된 된 통계를 반환 하는 예를 들어, 한 <xref:System.Tuple%606> 개체입니다.  
  
-   단일 매개 변수를 통해 메서드에 여러 값을 전달 하 합니다. 예를 들어를 <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType> 메서드 시작 시에 스레드가 실행 되는 메서드에 하나의 값을 제공할 수 있는 단일 매개 변수가 있습니다. 제공 하는 경우는 <xref:System.Tuple%606> 개체의 메서드 인수를 6 개 데이터 항목을 사용 하 여 스레드의 시작 루틴을 제공할 수 있습니다.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Tuple" />
    <altmember cref="T:System.Tuple`1" />
    <altmember cref="T:System.Tuple`2" />
    <altmember cref="T:System.Tuple`3" />
    <altmember cref="T:System.Tuple`4" />
    <altmember cref="T:System.Tuple`5" />
    <altmember cref="T:System.Tuple`7" />
    <altmember cref="T:System.Tuple`8" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Tuple (T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T1 item1, !T2 item2, !T3 item3, !T4 item4, !T5 item5, !T6 item6) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`6.#ctor(`0,`1,`2,`3,`4,`5)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (item1 As T1, item2 As T2, item3 As T3, item4 As T4, item5 As T5, item6 As T6)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Tuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6);" />
      <MemberSignature Language="F#" Value="new Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6&gt; : 'T1 * 'T2 * 'T3 * 'T4 * 'T5 * 'T6 -&gt; Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6&gt;" Usage="new System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6&gt; (item1, item2, item3, item4, item5, item6)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="item1" Type="T1" />
        <Parameter Name="item2" Type="T2" />
        <Parameter Name="item3" Type="T3" />
        <Parameter Name="item4" Type="T4" />
        <Parameter Name="item5" Type="T5" />
        <Parameter Name="item6" Type="T6" />
      </Parameters>
      <Docs>
        <param name="item1">튜플의 첫 번째 구성 요소 값입니다.</param>
        <param name="item2">튜플의 두 번째 구성 요소 값입니다.</param>
        <param name="item3">튜플의 세 번째 구성 요소 값입니다.</param>
        <param name="item4">튜플의 네 번째 구성 요소 값입니다.</param>
        <param name="item5">튜플의 다섯 번째 구성 요소 값입니다.</param>
        <param name="item6">튜플의 여섯 번째 구성 요소 값입니다.</param>
        <summary><see cref="T:System.Tuple`6" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 정적 사용할 수도 있습니다 <xref:System.Tuple.Create%60%606%28%60%600%2C%60%601%2C%60%602%2C%60%603%2C%60%604%2C%60%605%29?displayProperty=nameWithType> 메서드를 명시적으로 해당 구성 요소의 형식을 지정 하지 않고도 6-튜플 개체를 인스턴스화합니다. 다음 예제에서는 <xref:System.Tuple.Create%60%606%28%60%600%2C%60%601%2C%60%602%2C%60%603%2C%60%604%2C%60%605%29?displayProperty=nameWithType> 메서드를 인스턴스화할 형식입니다. 해당 첫 번째 구성 요소는 6 튜플을 <xref:System.String> 형식의 나머지 구성 되며 <xref:System.Int32>합니다.  
  
 [!code-csharp[System.Tuple.Create#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/create1.cs#11)]
 [!code-vb[System.Tuple.Create#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/create1.vb#11)]  
  
 이 다음 호출에 해당 하는 <xref:System.Tuple%606.%23ctor%2A> 클래스 생성자입니다.  
  
 [!code-csharp[System.Tuple.Create#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/create1.cs#12)]
 [!code-vb[System.Tuple.Create#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/create1.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`6.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="tuple.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">이 인스턴스와 비교할 개체입니다.</param>
        <summary>현재 <see cref="T:System.Tuple`6" /> 개체가 지정된 개체와 같은지 여부를 나타내는 값을 반환합니다.</summary>
        <returns>현재 인스턴스가 지정된 개체와 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `obj` 매개 변수는 다음과 같은 경우 현재 인스턴스와 같으면 것으로 간주 됩니다.  
  
-   것을 <xref:System.Tuple%606> 개체입니다.  
  
-   6 개의 구성 요소는 현재 인스턴스와 동일한 형식입니다.  
  
-   6 개의 구성 요소에는 현재 인스턴스와 같습니다. 일치 여부는 각 구성 요소에 대한 기본 개체 같음 비교 연산자에 따라 결정됩니다.  
  
   
  
## Examples  
 다음 예에서는 채우기 대 한 데이터가 있는 로스앤젤레스, 뉴욕 1960 년부터 2000 로스엔젤레스와 6의 배열을 정의 합니다. 각 6 중의 첫 번째 구성 요소는 도시를 식별 합니다. 첫 번째, 세 번째 및 네 번째 뉴욕 뉴욕에 대 한 데이터가 들어 있습니다. 첫 번째 6 중 네 번째 여섯 중복 됩니다. 세 번째 여섯 "New York" 대신 "New York City"를 도시를 식별합니다. 이 예제에서 알 수 있듯이, 네 번째 6 중 첫 번째 여섯 동일 합니다.  
  
 [!code-csharp[System.Tuple\`6.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`6.equals/cs/equals1.cs#1)]
 [!code-vb[System.Tuple\`6.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`6.equals/vb/equals1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`6.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="tuple.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>현재 <see cref="T:System.Tuple`6" /> 개체에 대한 해시 코드를 반환합니다.</summary>
        <returns>부호 있는 32비트 정수 해시 코드입니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item1">
      <MemberSignature Language="C#" Value="public T1 Item1 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T1 Item1" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`6.Item1" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item1 As T1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T1 Item1 { T1 get(); };" />
      <MemberSignature Language="F#" Value="member this.Item1 : 'T1" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6&gt;.Item1" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T1</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 <see cref="T:System.Tuple`6" /> 개체의 첫 번째 구성 요소 값을 가져옵니다.</summary>
        <value>현재 <see cref="T:System.Tuple`6" /> 개체의 첫 번째 구성 요소 값입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 형식의 동적으로 결정할 수는 <xref:System.Tuple%606.Item1%2A> 두 가지 방법 중 하나에서 구성 요소:  
  
-   호출 하 여 합니다 `GetType` 메서드에 의해 반환 되는 값에는 <xref:System.Tuple%606.Item1%2A> 속성입니다.  
  
-   검색 하 여는 <xref:System.Type> 나타내는 개체를 <xref:System.Tuple%606> 개체를 통해 반환 되는 배열에서 첫 번째 요소를 검색 합니다. 해당 <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> 메서드.  
  
   
  
## Examples  
 다음 예제에서는 배열을 정의 <xref:System.Tuple%606> 부터 2000 1960 년부터 세 개 미국 도시 (뉴욕, 시카고 및 로스앤젤레스)에 대 한 인구 데이터를 포함 하는 구성 개체입니다. 다음 표는 데이터를 표시 합니다. 도시 이름을 표시할의 값을 검색 합니다 <xref:System.Tuple%606.Item1%2A> 각 속성이 <xref:System.Tuple%606> 개체입니다.  
  
 [!code-csharp[System.Tuple\`6.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`6.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`6.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`6.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item2">
      <MemberSignature Language="C#" Value="public T2 Item2 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T2 Item2" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`6.Item2" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item2 As T2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T2 Item2 { T2 get(); };" />
      <MemberSignature Language="F#" Value="member this.Item2 : 'T2" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6&gt;.Item2" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T2</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 <see cref="T:System.Tuple`6" /> 개체의 두 번째 구성 요소 값을 가져옵니다.</summary>
        <value>현재 <see cref="T:System.Tuple`6" /> 개체의 두 번째 구성 요소 값입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 형식의 동적으로 결정할 수는 <xref:System.Tuple%606.Item2%2A> 두 가지 방법 중 하나에서 구성 요소:  
  
-   호출 하 여 합니다 `GetType` 메서드에 의해 반환 되는 값에는 <xref:System.Tuple%606.Item2%2A> 속성입니다.  
  
-   검색 하 여는 <xref:System.Type> 나타내는 개체를 <xref:System.Tuple%606> 개체를 통해 반환 되는 배열에서 첫 번째 요소를 검색 합니다. 해당 <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> 메서드.  
  
   
  
## Examples  
 다음 예제에서는 배열을 정의 <xref:System.Tuple%606> 부터 2000 1960 년부터 세 개 미국 도시 (뉴욕, 시카고 및 로스앤젤레스)에 대 한 인구 데이터를 포함 하는 구성 개체입니다. 다음 표는 데이터를 표시 합니다. 1960의 인구를 표시 하려면 값을 검색 하는 <xref:System.Tuple%606.Item2%2A> 각 속성이 <xref:System.Tuple%606> 개체입니다.  
  
 [!code-csharp[System.Tuple\`6.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`6.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`6.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`6.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item3">
      <MemberSignature Language="C#" Value="public T3 Item3 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T3 Item3" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`6.Item3" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item3 As T3" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T3 Item3 { T3 get(); };" />
      <MemberSignature Language="F#" Value="member this.Item3 : 'T3" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6&gt;.Item3" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T3</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 <see cref="T:System.Tuple`6" /> 개체의 세 번째 구성 요소 값을 가져옵니다.</summary>
        <value>현재 <see cref="T:System.Tuple`6" /> 개체의 세 번째 구성 요소 값입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 형식의 동적으로 결정할 수는 <xref:System.Tuple%606.Item3%2A> 두 가지 방법 중 하나에서 구성 요소:  
  
-   호출 하 여 합니다 `GetType` 메서드에 의해 반환 되는 값에는 <xref:System.Tuple%606.Item3%2A> 속성입니다.  
  
-   검색 하 여는 <xref:System.Type> 나타내는 개체를 <xref:System.Tuple%606> 개체를 통해 반환 되는 배열에서 첫 번째 요소를 검색 합니다. 해당 <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> 메서드.  
  
   
  
## Examples  
 다음 예제에서는 배열을 정의 <xref:System.Tuple%606> 부터 2000 1960 년부터 세 개 미국 도시 (뉴욕, 시카고 및 로스앤젤레스)에 대 한 인구 데이터를 포함 하는 구성 개체입니다. 다음 표는 데이터를 표시 합니다. 1970의 인구를 표시 하려면 값을 검색 하는 <xref:System.Tuple%606.Item3%2A> 각 속성이 <xref:System.Tuple%606> 개체입니다.  
  
 [!code-csharp[System.Tuple\`6.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`6.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`6.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`6.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item4">
      <MemberSignature Language="C#" Value="public T4 Item4 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T4 Item4" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`6.Item4" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item4 As T4" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T4 Item4 { T4 get(); };" />
      <MemberSignature Language="F#" Value="member this.Item4 : 'T4" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6&gt;.Item4" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T4</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 <see cref="T:System.Tuple`6" /> 개체의 네 번째 구성 요소 값을 가져옵니다.</summary>
        <value>현재 <see cref="T:System.Tuple`6" /> 개체의 네 번째 구성 요소 값입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 형식의 동적으로 결정할 수는 <xref:System.Tuple%606.Item4%2A> 두 가지 방법 중 하나에서 구성 요소:  
  
-   호출 하 여 합니다 `GetType` 메서드에 의해 반환 되는 값에는 <xref:System.Tuple%606.Item4%2A> 속성입니다.  
  
-   검색 하 여는 <xref:System.Type> 나타내는 개체를 <xref:System.Tuple%606> 개체를 통해 반환 되는 배열에서 첫 번째 요소를 검색 합니다. 해당 <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> 메서드.  
  
   
  
## Examples  
 다음 예제에서는 배열을 정의 <xref:System.Tuple%606> 부터 2000 1960 년부터 세 개 미국 도시 (뉴욕, 시카고 및 로스앤젤레스)에 대 한 인구 데이터를 포함 하는 구성 개체입니다. 다음 표는 데이터를 표시 합니다. 값은 1980 년대에서 인구를 표시 하려면 검색을 <xref:System.Tuple%606.Item4%2A> 각 속성이 <xref:System.Tuple%606> 개체입니다.  
  
 [!code-csharp[System.Tuple\`6.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`6.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`6.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`6.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item5">
      <MemberSignature Language="C#" Value="public T5 Item5 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T5 Item5" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`6.Item5" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item5 As T5" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T5 Item5 { T5 get(); };" />
      <MemberSignature Language="F#" Value="member this.Item5 : 'T5" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6&gt;.Item5" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T5</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 <see cref="T:System.Tuple`6" /> 개체의 다섯 번째 구성 요소 값을 가져옵니다.</summary>
        <value>현재 값 <see cref="T:System.Tuple`6" /> 개체의 다섯 번째 구성 요소입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 형식의 동적으로 결정할 수는 <xref:System.Tuple%606.Item5%2A> 두 가지 방법 중 하나에서 구성 요소:  
  
-   호출 하 여 합니다 `GetType` 메서드에 의해 반환 되는 값에는 <xref:System.Tuple%606.Item5%2A> 속성입니다.  
  
-   검색 하 여는 <xref:System.Type> 나타내는 개체를 <xref:System.Tuple%606> 개체를 통해 반환 되는 배열에서 첫 번째 요소를 검색 합니다. 해당 <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> 메서드.  
  
   
  
## Examples  
 다음 예제에서는 배열을 정의 <xref:System.Tuple%606> 부터 2000 1960 년부터 세 개 미국 도시 (뉴욕, 시카고 및 로스앤젤레스)에 대 한 인구 데이터를 포함 하는 구성 개체입니다. 다음 표는 데이터를 표시 합니다. 1990 년에서 인구를 표시 하려면 값을 검색 하는 <xref:System.Tuple%606.Item5%2A> 각 속성이 <xref:System.Tuple%606> 개체입니다.  
  
 [!code-csharp[System.Tuple\`6.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`6.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`6.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`6.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item6">
      <MemberSignature Language="C#" Value="public T6 Item6 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T6 Item6" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`6.Item6" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item6 As T6" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T6 Item6 { T6 get(); };" />
      <MemberSignature Language="F#" Value="member this.Item6 : 'T6" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6&gt;.Item6" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T6</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 <see cref="T:System.Tuple`6" /> 개체의 여섯 번째 구성 요소 값을 가져옵니다.</summary>
        <value>현재 <see cref="T:System.Tuple`6" /> 개체의 여섯 번째 구성 요소 값입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 형식의 동적으로 결정할 수는 <xref:System.Tuple%606.Item6%2A> 두 가지 방법 중 하나에서 구성 요소:  
  
-   호출 하 여 합니다 `GetType` 메서드에 의해 반환 되는 값에는 <xref:System.Tuple%606.Item6%2A> 속성입니다.  
  
-   검색 하 여는 <xref:System.Type> 나타내는 개체를 <xref:System.Tuple%606> 개체를 통해 반환 되는 배열에서 첫 번째 요소를 검색 합니다. 해당 <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> 메서드.  
  
   
  
## Examples  
 다음 예제에서는 배열을 정의 <xref:System.Tuple%606> 부터 2000 1960 년부터 세 개 미국 도시 (뉴욕, 시카고 및 로스앤젤레스)에 대 한 인구 데이터를 포함 하는 구성 개체입니다. 다음 표는 데이터를 표시 합니다. 2000의 인구를 표시 하려면 값을 검색 하는 <xref:System.Tuple%606.Item6%2A> 각 속성이 <xref:System.Tuple%606> 개체입니다.  
  
 [!code-csharp[System.Tuple\`6.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`6.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`6.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`6.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IStructuralComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IStructuralComparable.CompareTo (object other, System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IStructuralComparable.CompareTo(object other, class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (other As Object, comparer As IComparer) As Integer Implements IStructuralComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IStructuralComparable.CompareTo(System::Object ^ other, System::Collections::IComparer ^ comparer) = System::Collections::IStructuralComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="other">현재 인스턴스와 비교할 개체입니다.</param>
        <param name="comparer">비교를 위한 사용자 지정 규칙을 제공하는 개체입니다.</param>
        <summary>지정된 비교자를 사용하여 현재 <see cref="T:System.Tuple`6" /> 개체와 지정된 개체를 비교하고 정렬 순서에서 현재 개체의 위치가 지정된 개체보다 앞인지, 뒤인지 또는 동일한지를 나타내는 정수를 반환합니다.</summary>
        <returns>다음 표와 같이 정렬 순서에서 이 인스턴스와 <paramref name="other" />의 상대적 위치를 나타내는 부호 있는 정수입니다.  
  
 <list type="table"><listheader><term> 값 
 </term><description> 설명 
 </description></listheader><item><term> 음의 정수 
 </term><description> 이 인스턴스가 <paramref name="other" /> 앞에 오는 경우  
  
 </description></item><item><term> 0 
 </term><description> 이 인스턴스와 <paramref name="other" />의 위치가 정렬 순서에서 같은 경우  
  
 </description></item><item><term> 양의 정수 
 </term><description> 이 인스턴스가 <paramref name="other" /> 다음에 오는 경우  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 멤버는 명시적 인터페이스 멤버 구현이며, <xref:System.Tuple%606> 인스턴스가 <xref:System.Collections.IStructuralComparable> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.  
  
 이 메서드를 사용 하면 사용자 지정된 비교의 정의 <xref:System.Tuple%606> 개체입니다. 예를 들어,이 메서드는 순서를 따르면 <xref:System.Tuple%606> 특정 구성 요소 값을 기반으로 하는 개체입니다.  
  
 이 메서드를 직접 호출할 수 있지만 가장 일반적으로 라고 컬렉션 정렬 하 여 포함 하는 메서드 <xref:System.Collections.IComparer> 매개 변수를 컬렉션의 멤버를 정렬 합니다. 예를 들어에 의해 호출 됩니다는 <xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29?displayProperty=nameWithType> 메서드 및 <xref:System.Collections.SortedList.Add%2A> 메서드를 <xref:System.Collections.SortedList> 사용 하 여 인스턴스화된 개체는 <xref:System.Collections.SortedList.%23ctor%28System.Collections.IComparer%29?displayProperty=nameWithType> 생성자입니다.  
  
> [!CAUTION]
>  <xref:System.Tuple%606.System%23Collections%23IStructuralComparable%23CompareTo%2A> 메서드 정렬 작업에 사용 됩니다. 비교의 주요 목적은 두 개체가 같은지 여부를 결정할 때 하지 사용 해야 합니다. 두 개체가 같은지를 확인 하려면 호출을 <xref:System.Tuple%606.System%23Collections%23IStructuralEquatable%23Equals%28System.Object%2CSystem.Collections.IEqualityComparer%29> 메서드.  
  
   
  
## Examples  
 다음 예제에서는 배열을 <xref:System.Tuple%606> 1960 년부터 2000 세 미국 도시 인구 데이터를 포함 하는 개체입니다. 6 중의 첫 번째 구성 요소에는 도시 이름입니다. 나머지 5 개의 구성 요소를 2000 1960 년부터 10 년 간 간격 인구를 나타냅니다.  
  
 합니다 `PopulationComparer` 클래스를 제공는 <xref:System.Collections.IComparer> 배열을 로스엔젤레스와 6 중 하나라도 해당 구성 요소를 정렬할 수 있도록 구현 합니다. 두 값에 제공 되는 `PopulationComparer` 클래스 생성자에서: 정렬 순서를 정의 하는 구성 요소의 위치 및 <xref:System.Boolean> 튜플 개체를 오름차순 또는 내림차순으로 정렬할지 여부를 나타내는 값입니다.  
  
 예제에서는 다음 정렬 되지 않은 순서로 배열에 요소를 표시, 세 번째 구성 요소 (1970에서 채우기)을 기준으로 정렬 및 표시 하 다음 여섯 번째 구성 요소 (2000에서 채우기)을 기준으로 정렬 및 표시 합니다.  
  
 [!code-csharp[System.Tuple\`6.CompareTo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`6.compareto/cs/compareto2.cs#2)]
 [!code-vb[System.Tuple\`6.CompareTo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`6.compareto/vb/compareto2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="other" />이 <see cref="T:System.Tuple`6" /> 개체가 아닙니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IStructuralEquatable.Equals">
      <MemberSignature Language="C#" Value="bool IStructuralEquatable.Equals (object other, System.Collections.IEqualityComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IStructuralEquatable.Equals(object other, class System.Collections.IEqualityComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`6.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)" />
      <MemberSignature Language="VB.NET" Value="Function Equals (other As Object, comparer As IEqualityComparer) As Boolean Implements IStructuralEquatable.Equals" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IStructuralEquatable.Equals(System::Object ^ other, System::Collections::IEqualityComparer ^ comparer) = System::Collections::IStructuralEquatable::Equals;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
        <Parameter Name="comparer" Type="System.Collections.IEqualityComparer" />
      </Parameters>
      <Docs>
        <param name="other">이 인스턴스와 비교할 개체입니다.</param>
        <param name="comparer">두 개체가 같은지 여부를 평가하는 데 사용할 방법을 정의하는 개체입니다.</param>
        <summary>지정된 비교 메서드를 기반으로 현재 <see cref="T:System.Tuple`6" /> 개체가 지정된 개체와 같은지 여부를 나타내는 값을 반환합니다.</summary>
        <returns>현재 인스턴스가 지정된 개체와 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 멤버는 명시적 인터페이스 멤버 구현이며, <xref:System.Tuple%606> 인스턴스가 <xref:System.Collections.IStructuralEquatable> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.  
  
 <xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType> 경우에 구현이 호출 됩니다 `other` 아닙니다 `null`, 성공적으로 될 수 있습니다 및 캐스팅 (C#) 또는 변환 (Visual Basic)을 <xref:System.Tuple%606> 구성 요소가 현재 인스턴스와 동일한 형식의 개체입니다. <xref:System.Tuple%606.System%23Collections%23IStructuralEquatable%23Equals%28System.Object%2CSystem.Collections.IEqualityComparer%29> 메서드가 첫 번째 전달을 <xref:System.Tuple%606.Item1%2A> 의 값을 <xref:System.Tuple%606> 비교할 개체를 <xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType> 구현 합니다. 이 메서드 호출에서 반환 하는 경우 `true`, 메서드가 다시 호출 되어 전달 되는 <xref:System.Tuple%606.Item2%2A> 두 값 <xref:System.Tuple%606> 개체입니다. 메서드 호출이 반환 될 때까지이 과정이 계속 `false` 의 특정 쌍을 비교할 때 `Item` 값 또는 두 <xref:System.Tuple%606.Item6%2A> 값 메서드에 전달 됩니다.  
  
   
  
## Examples  
 다음 예제에서는 정의 `RateComparer` 같음에 대 한 사용자 지정 테스트를 수행 하는 클래스입니다. 경우에 전달 되는 값을 해당 <xref:System.Collections.IStructuralEquatable.Equals%2A?displayProperty=nameWithType> 메서드는 형식의 <xref:System.Single> 또는 <xref:System.Double>, 최대 3 개의 소수 자릿수를 사용 하 여 같음 테스트 메서드. 를 단순히 호출 합니다 `x` 매개 변수의 `Equals` 메서드. 이 예제에서는 <xref:System.Collections.IEqualityComparer> 4 여부를 확인 하려면 구현 <xref:System.Tuple%606> 1960에서 2000 사이의 인구 변화 속도의 데이터를 포함 하는 개체는 동일 합니다.  
  
 [!code-csharp[System.Tuple\`6.Equals#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`6.equals/cs/equals2.cs#2)]
 [!code-vb[System.Tuple\`6.Equals#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`6.equals/vb/equals2.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IStructuralEquatable.GetHashCode">
      <MemberSignature Language="C#" Value="int IStructuralEquatable.GetHashCode (System.Collections.IEqualityComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IStructuralEquatable.GetHashCode(class System.Collections.IEqualityComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`6.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)" />
      <MemberSignature Language="VB.NET" Value="Function GetHashCode (comparer As IEqualityComparer) As Integer Implements IStructuralEquatable.GetHashCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IStructuralEquatable.GetHashCode(System::Collections::IEqualityComparer ^ comparer) = System::Collections::IStructuralEquatable::GetHashCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.IEqualityComparer" />
      </Parameters>
      <Docs>
        <param name="comparer"><see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> 메서드를 사용하여 현재 <see cref="T:System.Tuple`6" /> 개체의 해시 코드를 계산하는 개체입니다.</param>
        <summary>지정된 계산 메서드를 사용하여 현재 <see cref="T:System.Tuple`6" /> 개체에 대한 해시 코드를 계산합니다.</summary>
        <returns>부호 있는 32비트 정수 해시 코드입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 멤버는 명시적 인터페이스 멤버 구현이며, <xref:System.Tuple%606> 인스턴스가 <xref:System.Collections.IStructuralEquatable> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.  
  
 메서드 호출을 래핑한 단순히 합니다 `comparer` 개체의 <xref:System.Collections.IEqualityComparer.GetHashCode%2A?displayProperty=nameWithType> 구현 합니다.  
  
 해시 코드를 계산 하는 데 사용 하는 알고리즘을 두는 같은 해시 코드를 반환 해야 <xref:System.Tuple%606> 것으로 간주 되는 개체입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`6.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (obj As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ obj) = IComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">현재 인스턴스와 비교할 개체입니다.</param>
        <summary>현재 <see cref="T:System.Tuple`6" /> 개체를 지정된 개체와 비교하고 현재 개체가 정렬 순서에 지정된 개체보다 이전인지, 이후인지 또는 같은 위치인지를 나타내는 정수를 반환합니다.</summary>
        <returns>다음 표와 같이 정렬 순서에서 이 인스턴스와 <paramref name="obj" />의 상대적 위치를 나타내는 부호 있는 정수입니다.  
  
 <list type="table"><listheader><term> 값 
 </term><description> 설명 
 </description></listheader><item><term> 음의 정수 
 </term><description> 이 인스턴스가 <paramref name="obj" /> 앞에 오는 경우  
  
 </description></item><item><term> 0 
 </term><description> 이 인스턴스와 <paramref name="obj" />의 위치가 정렬 순서에서 같은 경우  
  
 </description></item><item><term> 양의 정수 
 </term><description> 이 인스턴스가 <paramref name="obj" /> 다음에 오는 경우  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 멤버는 명시적 인터페이스 멤버 구현이며, <xref:System.Tuple%606> 인스턴스가 <xref:System.IComparable> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.  
  
 이 메서드를 제공 합니다 <xref:System.IComparable.CompareTo%2A?displayProperty=nameWithType> 에 대 한 구현을 <xref:System.Tuple%606> 클래스입니다. 메서드를 직접 호출할 수 있지만 가장 일반적으로 컬렉션 정렬 기본 오버 로드에 의해 호출 됩니다 메서드 같은 <xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType> 및 <xref:System.Collections.SortedList.Add%2A?displayProperty=nameWithType>를 컬렉션의 멤버를 정렬 합니다.  
  
> [!CAUTION]
>  <xref:System.Tuple%606.System%23IComparable%23CompareTo%2A> 메서드 정렬 작업에 사용 됩니다. 비교의 주요 목적은 두 개체가 같은지 여부를 결정할 때 하지 사용 해야 합니다. 두 개체가 같은지를 확인 하려면 호출을 <xref:System.Tuple%606.Equals%28System.Object%29?displayProperty=nameWithType> 메서드.  
  
 <xref:System.Tuple%606.System%23IComparable%23CompareTo%28System.Object%29> 메서드는 각 구성 요소를 비교할 기본 개체 비교자를 사용 합니다.  
  
   
  
## Examples  
 다음 예제에서는 배열을 <xref:System.Tuple%606> 1960 년 2000 년까지 미국의 세 도시 인구 데이터가 포함 된 개체입니다. 6 개의 구성 요소는 도시 이름 뒤에 10 년 간격으로 도시 인구 1960 년부터 2000으로 구성 됩니다. 이 예제에서는 정렬 되지 않은 순서로 배열에 있는 각 튜플의 구성 요소를 표시 합니다. 배열의 정렬 하 고 호출를 <xref:System.Tuple%606.ToString%2A> 의 각 튜플에 표시할 메서드의 순서를 정렬 합니다. 출력 배열에 첫 번째 구성 요소인 이름순으로 정렬 된 것을 보여 줍니다. 이 예제에서는 직접 호출 하지 않는 참고를 <xref:System.Tuple%606.System%23IComparable%23CompareTo%28System.Object%29> 메서드. 이 메서드는 암시적으로 여는 <xref:System.Array.Sort%28System.Array%29> 배열의 각 요소에 대 한 메서드.  
  
 [!code-csharp[System.Tuple\`6.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`6.compareto/cs/compareto1.cs#1)]
 [!code-vb[System.Tuple\`6.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`6.compareto/vb/compareto1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="obj" />이 <see cref="T:System.Tuple`6" /> 개체가 아닙니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.CompilerServices.ITuple.Item">
      <MemberSignature Language="C#" Value="object System.Runtime.CompilerServices.ITuple.Item[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Runtime.CompilerServices.ITuple.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`6.System#Runtime#CompilerServices#ITuple#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Item(index As Integer) As Object Implements ITuple.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Runtime::CompilerServices::ITuple::Item[int] { System::Object ^ get(int index); };" />
      <MemberSignature Language="F#" Usage="System.Runtime.CompilerServices.ITuple.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.CompilerServices.ITuple.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="index">지정한 <see langword="Tuple" /> 요소의 인덱스입니다. <paramref name="index" />의 범위는 0~5일 수 있습니다.</param>
        <summary>지정한 <see langword="Tuple" /> 요소의 값을 가져옵니다.</summary>
        <value>지정한 위치에 있는 <see langword="Tuple" /> 요소의 값입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Tuple%606.System%23Runtime%23CompilerServices%23ITuple%23Item%2A?displayProperty=nameWithType> 속성은 명시적 인터페이스 구현. 를 호출 하려면 캐스팅 하거나 변환 해야 합니다 <xref:System.Tuple%606> 개체는 <xref:System.Runtime.CompilerServices.ITuple> 인터페이스 개체입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IndexOutOfRangeException"><paramref name="index" />가 0보다 작거나 5보다 큽니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.CompilerServices.ITuple.Length">
      <MemberSignature Language="C#" Value="int System.Runtime.CompilerServices.ITuple.Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 System.Runtime.CompilerServices.ITuple.Length" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`6.System#Runtime#CompilerServices#ITuple#Length" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Length As Integer Implements ITuple.Length" />
      <MemberSignature Language="C++ CLI" Value="property int System::Runtime::CompilerServices::ITuple::Length { int get(); };" />
      <MemberSignature Language="F#" Usage="System.Runtime.CompilerServices.ITuple.Length" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.CompilerServices.ITuple.Length</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see langword="Tuple" />의 요소 수를 가져옵니다.</summary>
        <value><see cref="T:System.Tuple`6" /> 개체의 요소 수는 6입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Tuple%606.System%23Runtime%23CompilerServices%23ITuple%23Length%2A> 속성은 명시적 인터페이스 구현. 를 호출 하려면 캐스팅 하거나 변환 해야 합니다 <xref:System.Tuple%606> 개체는 <xref:System.Runtime.CompilerServices.ITuple> 인터페이스 개체입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`6.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="tuple.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 <see cref="T:System.Tuple`6" /> 인스턴스의 값을 나타내는 문자열을 반환합니다.</summary>
        <returns>이 <see cref="T:System.Tuple`6" /> 개체의 문자열 표현입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드에서 반환 된 문자열의 형식을 사용 (*Item1*, *Item2*합니다 *Item3*를 *Item4*, `Item5, Item6`) 여기서 *Item1*, *Item2*를 *Item3*합니다 *Item4*, *Item5*, 및 *Item6*의 값을 나타냅니다 합니다 <xref:System.Tuple%606.Item1%2A>, <xref:System.Tuple%606.Item2%2A>를 <xref:System.Tuple%606.Item3%2A>를 <xref:System.Tuple%606.Item4%2A>, <xref:System.Tuple%606.Item5%2A>, 및 <xref:System.Tuple%606.Item6%2A> 속성을 각각. 속성 값 중 하나에 해당 하는 경우 `null`로 표시 됩니다 <xref:System.String.Empty?displayProperty=nameWithType>합니다.  
  
   
  
## Examples  
 다음 예제에서는 정의 <xref:System.Tuple%606> 뉴욕시부터 2000 1960 년부터 각 인구에 대 한 인구 데이터가 포함 된 개체입니다. 6 중의 구성 요소에 대 한 호출으로 표시 됩니다는 <xref:System.Tuple%606.ToString%2A> 메서드.  
  
 [!code-csharp[System.Tuple\`6.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`6.tostring/cs/tostring1.cs#1)]
 [!code-vb[System.Tuple\`6.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`6.tostring/vb/tostring1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>