<Namespace Name="System.Messaging">
  <Metadata><Meta Name="ms.openlocfilehash" Value="eab5ed0569927572b94947f95901b3f05d70f785" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="30734697" /></Metadata><Docs>
    <summary><see cref="N:System.Messaging" /> 네임스페이스는 네트워크에서 메시지 큐에 연결, 모니터링 및 관리하고 메시지를 보내고 받거나 피크(peek)할 수 있는 클래스를 제공합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 멤버는 <xref:System.Messaging.MessageQueue> 메시지 읽기 및 쓰기를 큐에 대 한 다음 메서드를 포함 하는 클래스:  
  
-   <xref:System.Messaging.MessageQueue.Send%2A> 메서드를 사용 하면 큐에 메시지를 작성 하도록 응용 프로그램입니다. 메서드의 오버 로드를 사용 하 여 메시지를 보낼지 여부를 지정할 수는 <xref:System.Messaging.Message> (자세히 제어 전송 되는 정보를 제공 하는) 또는 애플리케이션 관련 클래스를 포함 한 다른 관리 되는 개체를 합니다. 메서드는 또한 트랜잭션의 일부로 보내는 메시지를 지원합니다.  
  
-   합니다 <xref:System.Messaging.MessageQueue.Receive%2A>, <xref:System.Messaging.MessageQueue.ReceiveById%2A>, 및 <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%2A> 메서드는 큐에서 메시지를 읽는 기능을 제공 합니다. 같은 <xref:System.Messaging.MessageQueue.Send%2A> 메서드를 이러한 메서드는 트랜잭션 큐 처리를 지 원하는 오버 로드를 제공 합니다. 이러한 메서드는 또한 제한 시간을 사용 하 여 오버 로드를 제공합니다.  
  
     Out 매개 변수는 큐가 비어 있는지를 계속 처리 하는 것이 있도록 합니다. 이러한 메서드는 동기식 처리가 예가 이기 때문에 이러한 제한 시간을 지정 하지 않으면 메시지를 사용할 때까지 현재 스레드를 중단 합니다.  
  
-   합니다 <xref:System.Messaging.MessageQueue.Peek%2A> 메서드는 비슷합니다 <xref:System.Messaging.MessageQueue.Receive%2A>, 하지만 메시지를 읽을 때 큐에서 제거 되지는지 않습니다. 때문에 <xref:System.Messaging.MessageQueue.Peek%2A> 큐의 내용을 변경 되지 않습니다 트랜잭션 처리를 지원 하기 위해 오버 로드가 없는 합니다. 그러나 때문 <xref:System.Messaging.MessageQueue.Peek%2A>같은 <xref:System.Messaging.MessageQueue.Receive%2A>큐에서 메시지를 동기적으로 읽고, 제한 시간을 무기한 대기 스레드를 방지 하기 위해 지정 메서드의 오버 로드 지원지 않습니다.  
  
-   합니다 <xref:System.Messaging.MessageQueue.BeginPeek%2A>, <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29>를 <xref:System.Messaging.MessageQueue.BeginReceive%2A>, 및 <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> 메서드를 비동기적으로 큐에서 메시지를 읽는 방법을 제공 합니다. 메시지가 큐에 도착할 때까지 기다리는 동안 현재 스레드를 중단 하지 있습니다.  
  
 다음 메서드는 <xref:System.Messaging.MessageQueue> 클래스 지정된 조건으로 큐 목록을 검색 및 특정 큐가 있는지 확인 하기 위한 기능을 제공 합니다.  
  
-   <xref:System.Messaging.MessageQueue.GetPrivateQueuesByMachine%28System.String%29> 컴퓨터에 있는 개인 큐를 검색할 수 있도록 합니다.  
  
-   <xref:System.Messaging.MessageQueue.GetPublicQueuesByCategory%28System.Guid%29>하십시오 <xref:System.Messaging.MessageQueue.GetPublicQueuesByLabel%28System.String%29>, 및 <xref:System.Messaging.MessageQueue.GetPublicQueuesByMachine%28System.String%29> common criteria로 공개 큐를 검색 하는 방법을 제공 합니다. 오버 로드 <xref:System.Messaging.MessageQueue.GetPublicQueues%2A> 검색 조건의 수에 따라 큐를 선택 하기 위한 더욱 세부 정보를 제공 합니다.  
  
 다른 메서드는 <xref:System.Messaging.MessageQueue> 클래스에는 다음 기능을 제공 합니다.  
  
-   페이지를 만들고 메시지 큐에서 큐를 삭제 합니다.  
  
-   메시지 열거자를 사용 하 여 큐에서 메시지를 단계별로 실행 하려면.  
  
-   큐 열거자를 사용 하 여 시스템에 있는 큐를 반복 합니다.  
  
-   ACL 기준 액세스 권한을 설정 합니다.  
  
-   캐시 작업에 연결 합니다.  
  
 <xref:System.Messaging.Message> 클래스 세부적된으로 제어 큐로 전송 되는 정보를 제공 하며 큐에서 메시지를 받거나 피킹할 때 개체가 사용 됩니다. 메시지 본문의 속성 외에도 <xref:System.Messaging.Message> 승인, 설정, 포맷터 선택, 식별, 인증 및 암호화 정보, 타임 스탬프, 추적, server 저널링을 사용 하 여에 대 한 표시가 클래스를 포함 하 고 배달 못 한 편지 큐 및 트랜잭션 데이터입니다.  
  
 <xref:System.Messaging.MessageQueue> 직렬화 및 큐에서 보내고 받은 메시지를 역직렬화 할 수 있도록 하는 다음 세 가지 포맷터와 연관 된 구성 요소:  
  
-   <xref:System.Messaging.XmlMessageFormatter> 제공 느슨하게 결합 된 메시징, 클라이언트와 서버에서 serialize 된 형식의 독립 된 버전 관리를 사용 하도록 설정 합니다.  
  
-   <xref:System.Messaging.ActiveXMessageFormatter> MSMQ COM 컨트롤과 호환 됩니다. 컨트롤에서 받을 수 있는 유형을 전송 하 고 컨트롤에서 보낸 형식 받을 수 있습니다.  
  
-   <xref:System.Messaging.BinaryMessageFormatter> 빠르게 제공는 <xref:System.Messaging.XmlMessageFormatter>, 않고 느슨하게 결합 된 메시징 활용 합니다.  
  
 다른 클래스는 `Messaging` 네임 스페이스는 코드 액세스 및 ACL 기반 보안 지원 필터링 <xref:System.Messaging.Message> 큐에서 메시지를 읽고 보내고 받을 때 트랜잭션을 사용 하 여 메시지 속성입니다.  
  
 ]]></format>
    </remarks>
  </Docs>
</Namespace>