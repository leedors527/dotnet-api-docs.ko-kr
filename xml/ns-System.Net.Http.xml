<Namespace Name="System.Net.Http">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b2063a170f178d32b2b4247950e12f485f7bd123" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51877790" /></Metadata><Docs>
    <summary><see cref="N:System.Net.Http" /> 네임스페이스는 최신 HTTP 응용 프로그램의 프로그래밍 인터페이스를 제공합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Http> 네임 스페이스는 다음을 제공 하도록 설계 되었습니다.  
  
1.  HTTP 클라이언트 구성 요소 사용자가 HTTP를 통해 최신 웹 서비스를 사용할 수 있도록 합니다.  
  
2.  사용할 수 있는 HTTP 구성 요소에서 클라이언트와 서버 (HTTP 헤더 및 예를 들어 메시지). 이 일관 된 프로그래밍 모델을 제공 클라이언트 및 서버 쪽 모두에 최신 웹 서비스에 대 한 HTTP를 통해.  
  
 합니다 <xref:System.Net.Http> 네임 스페이스 및 관련 된 <xref:System.Net.Http.Headers> 네임 스페이스는 다음 구성 요소 집합을 제공 합니다.  
  
1.  <xref:System.Net.Http.HttpClient> -보내고 HTTP를 통해 요청을 수신 하는 데 사용 하는 기본 클래스입니다.  
  
2.  <xref:System.Net.Http.HttpRequestMessage> 및 <xref:System.Net.Http.HttpResponseMessage> -IETF RFC 2616에 정의 된 대로 HTTP 메시지입니다.  
  
3.  <xref:System.Net.Http.Headers.HttpHeaders> IETF RFC 2616에 정의 된 대로 HTTP 헤더입니다.  
  
4.  <xref:System.Net.Http.HttpClientHandler> HTTP 응답 메시지를 생성 하는 일을 담당 하는 HTTP 처리기입니다.  
  
 사용할 수 있는 다양 한 HTTP 메시지 처리 있습니다. 여기에 다음이 포함 됩니다.  
  
1.  <xref:System.Net.Http.DelegatingHandler> -클래스에는 처리기 체인에 처리기를 연결 하는 데 사용 합니다.  
  
2.  <xref:System.Net.Http.HttpMessageHandler> 대부분의 응용 프로그램에 대 한 가장 일반적인 요구 사항을 지 원하는 클래스를 파생할-단순 합니다.  
  
3.  <xref:System.Net.Http.HttpClientHandler> -실제로 HTTP 전송 작업을 처리 하는 처리기 체인의 맨 아래에서 작동 하는 클래스입니다.  
  
4.  <xref:System.Net.Http.WebRequestHandler> 관련 된 옵션을 사용 하 여 HTTP 전송 작업을 처리 하는 처리기 체인 클래스의 맨 아래에서 작동 하는-특수 클래스는 <xref:System.Net.HttpWebRequest?displayProperty=nameWithType> 개체입니다.  
  
 RFC 2616에 정의 된 엔터티 본문에 해당 하는 HTTP 메시지의 내용입니다.  
  
 HTTP 콘텐츠를 다양 한 클래스를 사용할 수 있습니다. 여기에 다음이 포함 됩니다.  
  
1.  <xref:System.Net.Http.ByteArrayContent> HTTP 콘텐츠를 바이트 배열을 기반으로 합니다.  
  
2.  <xref:System.Net.Http.FormUrlEncodedContent> HTTP 콘텐츠의 이름/값 튜플의 응용 프로그램/x-www-형식-urlencoded MIME 형식을 사용 하 여 인코딩됩니다.  
  
3.  <xref:System.Net.Http.MultipartContent> Multipart를 사용 하 여 serialize 되는 HTTP 콘텐츠 / * 콘텐츠 형식 사양을 합니다.  
  
4.  <xref:System.Net.Http.MultipartFormDataContent> HTTP 콘텐츠 multipart/form-data MIME 형식을 사용 하 여 인코딩됩니다.  
  
5.  <xref:System.Net.Http.StreamContent> HTTP 콘텐츠 스트림을 기반으로 합니다.  
  
6.  <xref:System.Net.Http.StringContent> HTTP 콘텐츠 문자열을 기반으로 합니다.  
  
 앱을 사용 하는 경우는 <xref:System.Net.Http> 고 <xref:System.Net.Http.Headers> 네임 스페이스에서 많은 양의 데이터 (50 메가바이트 또는 그 이상)를 다운로드 하 고 앱 해야 이러한 다운로드를 스트림 하는 기본 버퍼링을 사용 하지. 기본 버퍼링을 사용 하는 경우 클라이언트 메모리 사용량이 매우 큰, 성능 저하 잠재적으로 인해 크게 됩니다.  
  
 클래스는 <xref:System.Net.Http> 및 <xref:System.Net.Http.Headers> 네임 스페이스는 Windows 스토어 앱 또는 데스크톱 앱 개발에 사용할 수 있습니다. Windows 스토어 앱에서 사용 하는 경우의 클래스는 <xref:System.Net.Http> 및 <xref:System.Net.Http.Headers> 네임 스페이스는 네트워크 격리 기능에 사용 되는 애플리케이션 보안 모델의 영향을 받지는 [!INCLUDE[win8](~/includes/win8-md.md)]합니다. 적절 한 네트워크 기능을 Windows 스토어 앱에서 네트워크 액세스를 허용 하도록 시스템에 대 한 Windows 스토어 앱 용 응용 프로그램 매니페스트에서 활성화 되어야 합니다. 자세한 내용은 [Windows 스토어 앱에 대한 네트워크 격리](~/docs/framework/network-programming/network-isolation-for-windows-store-apps.md)를 참조하세요.  
  
 ]]></format>
    </remarks>
    <altmember cref="N:System.Net.Http.Headers" />
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=245696">웹 서비스에 연결</related>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=242550">HttpClient 샘플</related>
  </Docs>
</Namespace>