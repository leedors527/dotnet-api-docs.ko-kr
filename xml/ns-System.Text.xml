<Namespace Name="System.Text">
  <Metadata><Meta Name="ms.openlocfilehash" Value="34cddae6e8018aa3245a0db0838a6b65070528ea" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="30736137" /></Metadata><Docs>
    <summary><see cref="N:System.Text" /> 네임스페이스에는 ASCII 및 유니코드 문자 인코딩을 나타내는 클래스, 문자와 바이트 블록 간을 변환하기 위한 추상 기본 클래스, <see cref="T:System.String" />의 중간 인스턴스를 만들지 않고 <see cref="T:System.String" /> 개체를 조정하고 서식을 지정하는 도우미 클래스가 포함되어 있습니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 인코딩 클래스는 다른 또는 코드 페이지 인코딩과 유니코드 인코딩 간에 변환 하는 데 주로 사용 됩니다. <xref:System.Text.Encoding.Unicode%2A?displayProperty=nameWithType> .NET Framework에서 내부적으로 사용 됩니다 (utf-16) 인코딩 및 <xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType> 인코딩는 대개 문자 데이터 저장에 대 한 컴퓨터 및 문화권에서 이식성을 보장 합니다.  
  
 파생 된 클래스가 <xref:System.Text.Encoding> 바이트 시퀀스로 인코딩할 수 없는 문자 또는 문자를 디코딩할 수 없는 바이트 처리 하는 방법을 결정 하는 대체 (fallback) 전략을 선택할 수 있습니다. 다음 중 하나를 선택할 수 있습니다.  
  
-   예외 대체 (fallback)입니다. 사용 하 여 데이터 오류 발생 시 예외를 throw 하도록 선택할 수 있습니다는 `throwonerror` 일부 클래스 생성자 또는 사용 하 여 사용할 수 있는 플래그를 <xref:System.Text.EncoderExceptionFallback> 및 <xref:System.Text.DecoderExceptionFallback> 클래스입니다. 데이터 스트림의 무결성을 염려 하는 경우 예외를 throw 것이 좋습니다.  
  
-   교체 대체 (fallback) 합니다. 사용할 수는 <xref:System.Text.EncoderFallback> 및 <xref:System.Text.DecoderFallback> 클래스는 문자를 자동으로 변경 하려면 "?" 또는 유니코드 대체 문자 (U + FFFD).  
  
-   최적된 대체 (fallback) 합니다. 이 옵션의 다른 인코딩으로 문자 인코딩을의 문자를 매핑합니다. 자동 맞춤된 대체 하 고 데이터가 손실 되 고 혼동을 일으킬 수 있으므로 대개 권장 간단한 보다 느립니다 "?" 문자 대체 합니다. 그러나 ANSI 코드 페이지 동작을 가장 적합된 한 기본값입니다.  
  
 <xref:System.Text.StringBuilder> 클래스는 단일 문자열에 광범위 한 조작을 수행 하는 작업을 위해 설계 되었습니다. 와 달리 합니다 <xref:System.String> 클래스는 <xref:System.Text.StringBuilder> 클래스는 변경할 수를 연결 하거나 문자열을 삭제할 때 더 나은 성능을 제공 합니다.  
  
 에 대 한 자세한 내용은 <xref:System.Text?displayProperty=nameWithType>를 참조 하세요 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 합니다.  
  
 ]]></format>
    </remarks>
  </Docs>
</Namespace>
